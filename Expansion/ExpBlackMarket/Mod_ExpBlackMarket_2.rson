{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -486,
  "ViewPos.y":  -32,
  "ScriptName":  "Mod_ExpBlackMarket_2",
  "ScriptFileOut":  "H:\\Mod_ExpBlackMarket_2.scr",
  "ScriptTextOut":  "H:\\Mod_ExpBlackMarket_2.txt",
  "GraphPoint.Count":  76,
  "GraphLink.Count":  24,
  "GraphRectText.Count":  0,
  "Variables.Count":  44,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  2,
  "Groups.Count":  2,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  2,
  "DialogMessages.Count":  4,
  "DialogAnswers.Count":  6,
  "Operations.Count":  8,
  "Statements.Count":  5,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "DialogAnswers":      
      [
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  54,
          "#":  55,
          "Msg":  "",
          "AMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  65,
          "#":  61,
          "Msg":  "<str1>",
          "AMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  71,
          "#":  62,
          "Msg":  "<str2>",
          "AMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  63,
          "#":  64,
          "Msg":  "",
          "AMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  66,
          "#":  67,
          "Msg":  "<str1>",
          "AMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  69,
          "#":  70,
          "Msg":  "<str1>",
          "AMsg.Num":  "5"        
        }      
      ],
      "DialogMessages":      
      [
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  53,
          "#":  54,
          "Msg":  "",
          "DMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  72,
          "#":  60,
          "Msg":  "<str0>",
          "DMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  62,
          "#":  63,
          "Msg":  "<str3>",
          "DMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  68,
          "#":  66,
          "Msg":  "<str0>",
          "DMsg.Num":  "3"        
        }      
      ],
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "BMLock",
          "Pos.x":  350,
          "Pos.y":  400,
          "Parent":  -1,
          "#":  53        
        },
        {
          "Type":  "TDialog",
          "Name":  "BuyBMAccess",
          "Pos.x":  240,
          "Pos.y":  400,
          "Parent":  -1,
          "#":  59        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "BM",
          "Pos.x":  240,
          "Pos.y":  320,
          "Parent":  -1,
          "#":  3,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  310,
          "Pos.y":  320,
          "Parent":  -1,
          "#":  49,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  330,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  5,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "if(!GLastTurnRun(GScriptName)) GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  350,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  6,
          "Total.Lines":  708,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Задаём стартовое имя для станции ЧР",
              "CurBMName = CT('BlackMarketNames.2');",
              "",
              "//Инициируем первое обновление массивов для магазина ЧР",
              "UpdateBMShopList();",
              "//Запоминаем версию БД для ЧР в Lang",
              "BMShopListUpdateCkeck = CT('BlackMarketShopList.Version');",
              "",
              "//Функция для создания станции ЧР в случайном месте указанной системы",
              "function SpawnBMStation(star, to_star)",
              "{",
              "    //Создаём базу ЧР (в системе рядом с игроком, но не в его текущей)",
              "    dword BlackMarket = BuildRuins(StarNearbyStars(star, 1), t_PB);",
              "    ShipType(BlackMarket, 'BM');",
              "    Chameleon(BlackMarket, 'Ruins.BM');",
              "    //Случайно определяем имя новому ЧР",
              "    int names_cnt = RndObject(1, CT('BlackMarketNames.Count'), BlackMarket);",
              "    while(CT('BlackMarketNames.' + names_cnt) == CurBMName) names_cnt = RndObject(1, CT('BlackMarketNames.Count'), BlackMarket);",
              "    CurBMName = CT('BlackMarketNames.' + names_cnt);",
              "    SetName(BlackMarket, CurBMName);",
              "    //Заносим ЧР в скриптовую группу и отправляем в нужную систему",
              "    ShipOwner(BlackMarket, 1);",
              "    ShipPilotRace(BlackMarket, 1);",
              "    RelationToRanger(BlackMarket, Player(), 55);",
              "    ShipJoinsClan(BlackMarket);",
              "    ShipJoin(BM, BlackMarket);",
              "",
              "    //Запрещаем автообновление магазинов оборудования и товаров",
              "    NoShopUpdate(BlackMarket, 1);",
              "    //Добавляем ЧР инфошку автообновления станции, если мод ExpBasesAutoUpgrade подключён",
              "    if(BlockExist('ShipInfo.AddInfo.CustomInfos.ExpBasesAutoUpgradeInfo')) ShipAddCustomShipInfo(BlackMarket, 'ExpBasesAutoUpgradeInfo', 'NoShow');",
              "    //Команда для отладки, заполняем товарами для ЧР магазин на станции местонахождения игрока (например, на стартовом ЦР)",
              "    //BlackMarket = GetShipRuins(Player());",
              "    //Заполняем магазин ЧР различными товарами и оборудованием",
              "    UpdateBMShop(BlackMarket);",
              "",
              "    //Случайным образом вычисляем координаты появления ЧР",
              "    //Для телепортации вычисляем случайную точку в пределах радиуса системы (возле окраины)",
              "    //float angle = 0.01 * RndObject(0, 200, BlackMarket);",
              "    //int dist = PlanetOrbitRadius(StarPlanets(star, StarPlanets(star) - 1)) + RndObject(250, 450, BlackMarket); //Расстояние от самой дальней планеты, вычисляем радиус",
              "    //int coordX = round(sin(angle * pi) * dist);",
              "    //int coordY = round(cos(angle * pi) * dist);",
              "",
              "    //Случайным образом вычисляем координаты появления ЧР",
              "    //Для телепортации вычисляем случайную точку в пределах радиуса системы (возле окраины)",
              "    //int check = 0;",
              "    //while(!check)",
              "    //{",
              "        //float angle = 0.01 * RndObject(0, 200, BlackMarket);",
              "        //int dist = PlanetOrbitRadius(StarPlanets(star, StarPlanets(star) - 1)) + RndObject(250, 450, BlackMarket); //Расстояние от самой дальней планеты, вычисляем радиус",
              "        //int coordX = round(sin(angle * pi) * dist);",
              "        //int coordY = round(cos(angle * pi) * dist);",
              "",
              "        //Убеждаемся, что позиция ЧР не пересекается с позицией другой станции в системе",
              "        //if(!StarRuins(star)) check = 1;",
              "        //else for(int i = 0; i < StarRuins(star); i = i + 1)",
              "        //{",
              "            //dword ruin = StarRuins(star, i);",
              "            //if(DistCoords(CoordX(ruin), CoordY(ruin), coordX, coordY) > 200)",
              "            //{",
              "                //check = 1;",
              "                //break;",
              "            //}",
              "        //}",
              "    //}",
              "",
              "    OrderLock(BlackMarket, 1);",
              "    //Переносим станцию на Меркурий, чтобы скрыть от назойливого поиска",
              "    TransferShip(BlackMarket, StarPlanets(GalaxyStar(2), 0));",
              "",
              "    //Вешаем на ЧР вспомогательную инфошку для вывода уведомлений и автоматического переноса на меркурий после телепортации",
              "    ShipAddCustomShipInfo(BlackMarket, 'BlackMarketJumpControlInfo', 'NoShow', 0, 0, 0, '');",
              "    GBlackMarketId = Id(BlackMarket);",
              "    result = BlackMarket;",
              "}",
              "",
              "//Функция, заносящая в массивы списки предметов для магазина на чёрном рынке",
              "function UpdateBMShopList()",
              "{",
              "    //Составляем массив доступных корпусов",
              "    int1 = 0;",
              "    ArrayClear(tempArray);",
              "    //Выполняем проверку на наличие всех корпусов в заявленном списке",
              "    for(i = 1; i <= CT('BlackMarketShopList.Hulls.Count'); i = i + 1)",
              "    {",
              "        if(BlockExist('BlackMarketShopList.Hulls.' + i))",
              "        {",
              "            if(BlockExist('MicroModuls.' + CT('BlackMarketShopList.Hulls.' + i + '.BonusNum'))) ArrayAdd(tempArray, i);",
              "        }",
              "    }",
              "",
              "    int1 = ArrayDim(tempArray);",
              "    free(BMHullsArray);",
              "    BMHullsArray = newarray(int1, 10); //Нулевой элемент используется под \"мету\" (число корпусов для каждого ГТУ)",
              "    GTL = 1;",
              "    innerCount = 0;",
              "    //Выстраиваем корпуса в массиве по их ГТУ для последующей возможности их удобной выборки при выставлении в магазин",
              "    tCheck = 1; //Проверка для исключения лишних проходов цикла, если все бонусы уже и так распределились по своим ГТУ",
              "    while(GTL <= 8)",
              "    {",
              "        if(tCheck)",
              "        {",
              "            tCheck = 0;",
              "            for(i = 1; i < int1; i = i + 1)",
              "            {",
              "                str0 = 'BlackMarketShopList.Hulls.' + tempArray[i] + '.';",
              "                str1 = CT(str0 + 'BonusNum');",
              "                //Проверяем соответствие бонуса текущему ГТУ",
              "                int0 = 0 + CT('MicroModuls.' + str1 + '.Priority') + CT(str0 + 'ChangePriorityOn');",
              "                if(int0 < 0) int0 = 0;",
              "                else if(int0 > 100) int0 = 100;",
              "                int0 = round(0.5 + 8.0 * (0.01 * int0)); //round(0.5 + N) - костыль для округления к большему",
              "                if (int0 == GTL || (!int0 && GTL == 1))",
              "                {",
              "                    innerCount = innerCount + 1;",
              "                    //Запоминаем название Lang раздела бонуса",
              "                    BMHullsArray[innerCount, 0] = str1;",
              "                    //Запоминаем базовый тип корпуса (нужен при создании)",
              "                    BMHullsArray[innerCount, 1] = CT(str0 + 'HullType');",
              "                    //Запоминаем шанс на наложение случайной серии из указанного списка на данный корпус",
              "                    BMHullsArray[innerCount, 2] = CT(str0 + 'HullSerieChance');",
              "                    //По умолчанию этот шанс считается равным 100%",
              "                    if(BMHullsArray[innerCount, 2] == '')BMHullsArray[innerCount, 2] = 100;",
              "                    //Запоминаем возможный набор подходящих серий для данного корпуса",
              "                    BMHullsArray[innerCount, 3] = CT(str0 + 'HullSerie');",
              "                    //Запоминаем расу-производителя",
              "                    //Делаем подробный перебор значений через запятую",
              "                    str2 = CT(str0 + 'Race');",
              "                    BMHullsArray[innerCount, 4] = RaceSetDefine(str2, 64, 1);//Запасной сет, неизвестная раса",
              "                    //Определяем возможную подрасу корпуса (серию доминаторов)",
              "                    str2 = CT(str0 + 'SubRace');",
              "                    if(str2 != '')BMHullsArray[innerCount, 8] = SubRaceSetDefine(str2, 7);",
              "                    else BMHullsArray[innerCount, 8] = 7;",
              "                    //Запоминаем, не произведён ли корпус пиратским кланом (нужно для выставления флага при создании)",
              "                    BMHullsArray[innerCount, 5] = 0 + CT(str0 + 'OwnerPirateClan');",
              "                    //Запоминаем шанс на наложение кастомной фракции (указывать в разделе ЧР необязательно)",
              "                    BMHullsArray[innerCount, 6] = 0 + CT(str0 + 'CustomFactionChance');",
              "                    //Запоминаем список возможных кастомных фракций (указывать в разделе ЧР необязательно)",
              "                    BMHullsArray[innerCount, 7] = CT(str0 + 'CustomFaction');",
              "                    //Запоминаем условие, которое должно быть выполнено перед добавлением корпуса на продажу в магазин ЧР",
              "                    BMHullsArray[innerCount, 9] = CT(str0 + 'SpawnCondition');",
              "                    if(BMHullsArray[innerCount, 9] == '')BMHullsArray[innerCount, 9] = 1;",
              "                }",
              "                else if(int0 > GTL) tCheck = 1;",
              "            }",
              "        }",
              "        //Заносим сквозной счётчик в мету после каждого полного прохода списка корпусов для конкретного ГТУ",
              "        BMHullsArray[0, GTL] = innerCount;",
              "        GTL = GTL + 1;",
              "    }",
              "",
              "    //Составляем массив доступного оборудования (акринов)",
              "    int1 = 0;",
              "    ArrayClear(tempArray);",
              "    //Выполняем проверку на наличие всех акринов в заявленном списке",
              "    for(i = 1; i <= CT('BlackMarketShopList.Equipment.Count'); i = i + 1)",
              "    {",
              "        if(BlockExist('BlackMarketShopList.Equipment.' + i))",
              "        {",
              "            str0 = CT('BlackMarketShopList.Equipment.' + i + '.BonusNum');",
              "            if(BlockExist('MicroModuls.' + str0)) ArrayAdd(tempArray, i);",
              "            else if(str0 == 'None') ArrayAdd(tempArray, i);",
              "        }",
              "    }",
              "",
              "    int1 = ArrayDim(tempArray);",
              "    free(BMEquipmentArray);",
              "    BMEquipmentArray = newarray(int1, 10);//Нулевой элемент используется под \"мету\" (число оборудования для каждого ГТУ)",
              "    GTL = 1;",
              "    innerCount = 0;",
              "    //Выстраиваем оборудование в массиве по его ГТУ для последующей возможности удобной выборки при выставлении его в магазин",
              "    tCheck = 1;//Проверка для исключения лишних проходов цикла, если все бонусы уже и так распределились по своим ГТУ",
              "    while(GTL <= 8)",
              "    {",
              "        if(tCheck)",
              "        {",
              "            tCheck = 0;",
              "            for(i = 1; i < int1; i = i + 1)",
              "            {",
              "                str0 = 'BlackMarketShopList.Equipment.' + tempArray[i] + '.';",
              "                str1 = CT(str0 + 'BonusNum');",
              "                //Проверяем соответствие бонуса текущему ГТУ",
              "                int0 = 0 + CT('MicroModuls.' + str1 + '.Priority') + CT(str0 + 'ChangePriorityOn');",
              "                if(int0 < 0) int0 = 0;",
              "                else if(int0 > 100) int0 = 100;",
              "                int0 = round(0.5 + 8.0 * (0.01 * int0));//round(0.5+N) - костыль для округления к большему",
              "                if(int0 == GTL || (!int0 && GTL == 1))",
              "                {",
              "                    innerCount = innerCount + 1;",
              "                    //Запоминаем название Lang раздела акрина",
              "                    BMEquipmentArray[innerCount, 0] = str1;",
              "                    //Запоминаем тип оборудования, на которое должен быть наложен акрин",
              "                    BMEquipmentArray[innerCount, 1] = CT(str0 + 'ItemType');",
              "                    //Определяем возможный для данного акрина сет рас",
              "                    //Проверяем, была ли произведена замена параметра с расами в разделе ЧР в Lang (указывать свой Owner в разделе ЧР необязательно)",
              "                    str2 = CT(str0 + 'Owner');",
              "                    //Если нет, то пробуем взять этот параметр из основного раздела бонуса",
              "                    if(str2 == '') str2 = CT('MicroModuls.' + str1 + '.Owner');",
              "                    //Если точное значение параметра вообще нигде не задано, то выставляем полный сет рас, кроме доминаторов и неизвестной расы",
              "                    if(str2 == '') BMEquipmentArray[innerCount, 2] = 159;",
              "                    //Если в итоге получили значение Any, то добавляем в сет все расы, кроме неизвестной",
              "                    else if(str2 == 'Any') BMEquipmentArray[innerCount, 2] = 191;",
              "                    //Иначе делаем подробный перебор значений через запятую",
              "                    else BMEquipmentArray[innerCount, 2] = RaceSetDefine(str2, 159, 0);//Запасной сет, все расы, кроме доминаторов и неизвестной",
              "                    //Определяем возможную подрасу предмета (серию доминаторов)",
              "                    str2 = CT(str0 + 'SubRace');",
              "                    if(str2 != '') BMEquipmentArray[innerCount, 8] = SubRaceSetDefine(str2, 7);",
              "                    else BMEquipmentArray[innerCount, 8] = 7;",
              "                    //Запоминаем средний вес из раздела ЧР в Lang (указывать не обязательно)",
              "                    int4 = abs(0 + CT(str0 + 'AverageSize'));",
              "                    //Если параметр AverageSize не был указан в разделе ЧР в Lang, то в массив заносится 0",
              "                    BMEquipmentArray[innerCount, 3] = int4;",
              "                    //Запоминаем шанс на создание предмета с неизвестной расой",
              "                    BMEquipmentArray[innerCount, 4] = 0 + CT(str0 + 'NoneRaceChance');",
              "                    //Запоминаем шанс на создание предмета с минимальным весом",
              "                    BMEquipmentArray[innerCount, 5] = 0 + CT(str0 + 'MinSizeChance');",
              "                    //Запоминаем шанс на наложение кастомной фракции (указывать в разделе ЧР необязательно)",
              "                    BMEquipmentArray[innerCount, 6] = 0 + CT(str0 + 'CustomFactionChance');",
              "                    //Запоминаем список возможных кастомных фракций (указывать в разделе ЧР необязательно)",
              "                    BMEquipmentArray[innerCount, 7] = CT(str0 + 'CustomFaction');",
              "                    //Запоминаем условие, которое должно быть выполнено перед добавлением предмета на продажу в магазин ЧР",
              "                    BMEquipmentArray[innerCount, 9] = CT(str0 + 'SpawnCondition');",
              "                    if(BMEquipmentArray[innerCount, 9] == '') BMEquipmentArray[innerCount, 9] = 1;",
              "                }",
              "                else if(int0 > GTL)tCheck = 1;",
              "            }",
              "        }",
              "        //Заносим сквозной счётчик в мету после каждого полного прохода списка акринов для конкретного ГТУ",
              "        BMEquipmentArray[0, GTL] = innerCount;",
              "        GTL = GTL + 1;",
              "    }",
              "",
              "    //Составляем массив доступного оружия (и модификаций к нему)",
              "    int1 = 0;",
              "    ArrayClear(tempArray);",
              "    //Выполняем проверку на наличие (подключение всех связанных модов) всех орудий в заявленном списке",
              "    for(i = 1; i <= CT('BlackMarketShopList.Weapon.Count'); i = i + 1)",
              "    {",
              "        if(BlockExist('BlackMarketShopList.Weapon.' + i))",
              "        {",
              "            str0 = CT('BlackMarketShopList.Weapon.' + i + '.Origin');",
              "            //Если орудие не из оригинальной игры, то делаем доп. проверку",
              "            if(str0 == 'Original') ArrayAdd(tempArray, i);",
              "            else if(GetMainData('Data.Script.' + str0) != '') ArrayAdd(tempArray, i);",
              "        }",
              "    }",
              "    int1 = ArrayDim(tempArray);",
              "    free(BMWeaponArray);",
              "    //Внимание!!! Устройство данного массива довольно ебануто, так что вникайте на свой страх и риск! Закодил как смог.",
              "    //Самый нулевой элемент (разделы [0, 0, 1-8]) используется под \"мету\" (число оборудования для каждого ГТУ)",
              "    //Весь раздел [N, 0, 0-8] занят под информацию по основному орудию",
              "    //Нулевой элемент 3-го раздела (вернее раздела [N, 1, 0]) - общее число модификаций для данного орудия, а элементы с 1 по 8 из 3-го раздела (вернее разделов [N, 1, 1-8]) - число модификаций под конкретный ГТУ",
              "    //Элементы со 2 по 5 (разделы [N, 2-5, J]) - информация о конкретных модификациях вплоть до 15 штук, т.к. элементы [N, 2-5, 0] в заполнении не применяются",
              "    BMWeaponArray = newarray(int1, 10, 16);",
              "    GTL = 1;",
              "    innerCount = 0;",
              "    //Выстраиваем орудия в массиве по их ГТУ для последующей возможности удобной выборки при выставлении пушек в магазине",
              "    tCheck = 1; //Проверка для исключения лишних проходов цикла, если все бонусы уже и так распределились по своим ГТУ",
              "    while(GTL <= 8)",
              "    {",
              "        if(tCheck)",
              "        {",
              "            tCheck = 0;",
              "            for(i = 1; i < int1; i = i + 1)",
              "            {",
              "                str0 = 'BlackMarketShopList.Weapon.' + tempArray[i] + '.';",
              "                //Проверяем соответствие орудия текущему ГТУ",
              "                int0 = CT(str0 + 'GalaxyTechLevel');",
              "                if(int0 == GTL)",
              "                {",
              "                    innerCount = innerCount + 1;",
              "                    //Запоминаем, является ли данное орудие оригинальным, либо кастомным",
              "                    BMWeaponArray[innerCount, 0, 0] = CT(str0 + 'Origin');",
              "                    //Запоминаем тип оружия (нужен для его создания)",
              "                    if(BMWeaponArray[innerCount, 0, 0] == 'Original')",
              "                    {",
              "                        //Заранее запоминаем стандартный сет возможных овнеров для данного орудия",
              "                        BMWeaponArray[innerCount, 0, 2] = CT('BlackMarketShopList.Weapon.OriginalWeaponsRaceSet.' + CT(str0 + 'WeaponType'));",
              "                        //Для оригинальных типов орудий запрашиваем число из переменной",
              "                        BMWeaponArray[innerCount, 0, 1] = GetValueFromScript('', CT(str0 + 'WeaponType'));",
              "                    }",
              "                    else BMWeaponArray[innerCount, 0, 1] = CT(str0 + 'WeaponType');//Для кастомных типов типом является сама строка",
              "                    //Запоминаем возможную расу для данного орудия",
              "                    //Если орудие оригинальное, то делаем подробную проверку",
              "                    if(BMWeaponArray[innerCount, 0, 0] == 'Original')",
              "                    {",
              "                        str2 = GetCustomWeaponData(0 + BMWeaponArray[innerCount, 0, 1], 'Availability');",
              "                        if(str2 == 'Free') BMWeaponArray[innerCount, 0, 2] = 159;",
              "                        else if(str2 == 'CoalitionOnly') BMWeaponArray[innerCount, 0, 2] = 31;",
              "                        else if(str2 == 'PirateOnly') BMWeaponArray[innerCount, 0, 2] = 128;",
              "                        else if(str2 == 'MalocOnly') BMWeaponArray[innerCount, 0, 2] = 1;",
              "                        else if(str2 == 'PelengOnly') BMWeaponArray[innerCount, 0, 2] = 2;",
              "                        else if(str2 == 'PeopleOnly') BMWeaponArray[innerCount, 0, 2] = 4;",
              "                        else if(str2 == 'FeiOnly') BMWeaponArray[innerCount, 0, 2] = 8;",
              "                        else if(str2 == 'GaalOnly') BMWeaponArray[innerCount, 0, 2] = 16;",
              "                        else if(str2 == 'NotSold') BMWeaponArray[innerCount, 0, 2] = 32;",
              "                        else if(str2 == 'NotSoldAndNodeRepair') BMWeaponArray[innerCount, 0, 2] = 32;",
              "                        else",
              "                        {",
              "                            str2 = CT(str0 + 'Owner');",
              "                            //Если в разделе Lang ЧР параметр Owner не менялся, то берём базовый игровой для данного типа орудия (указывать свой Owner в разделе ЧР необязательно)",
              "                            if(str2 == '') BMWeaponArray[innerCount, 0, 2] = BMWeaponArray[innerCount, 0, 2];//Так как ранее мы уже запомнили стандартный сет, то оставляем его неизменным",
              "                            //Если в разделе Lang ЧР был установлен овнер Any, то задаём полный сет рас, кроме неизвестной",
              "                            else if(str2 == 'Any') BMWeaponArray[innerCount, 0, 2] = 191;",
              "                            //Иначе делаем подробный перебор значений через запятую",
              "                            else BMWeaponArray[innerCount, 0, 2] = RaceSetDefine(str2, 159, 0);//Запасной сет, все расы, кроме доминаторов и неизвестной",
              "                        }",
              "                    }",
              "                    //Для кастомного оружия правила примерно те же",
              "                    else",
              "                    {",
              "                        //Не считая того, что я не могу прямо сейчас определить их 'Availability'",
              "                        //Ведь все скрипты инициализируются в рандомном, блять, порядке!",
              "                        str2 = CT(str0 + 'Owner');",
              "                        //По умолчанию выбираются все расы, кроме доминаторов и неизвестной (указывать свой Owner в разделе ЧР необязательно)",
              "                        if(str2 == '') BMWeaponArray[innerCount, 0, 2] = 159;",
              "                        //Если в параметре стоит значение Any, то добавляем в сет вообще все расы, кроме неизвестной",
              "                        else if(str2 == 'Any') BMWeaponArray[innerCount, 0, 2] = 191;",
              "                        //Иначе делаем подробный перебор значений через запятую",
              "                        else BMWeaponArray[innerCount, 0, 2] = RaceSetDefine(str2, 159, 0);//Запасной сет, все расы, кроме доминаторов и неизвестной",
              "                    }",
              "                    //Определяем возможную подрасу орудия (серию доминаторов)",
              "                    str2 = CT(str0 + 'SubRace');",
              "                    if(str2 != '') BMWeaponArray[innerCount, 0, 9] = SubRaceSetDefine(str2, 7);",
              "                    else BMWeaponArray[innerCount, 0, 9] = 7;",
              "                    //Запоминаем средний вес из раздела ЧР в Lang (указывать в разделе ЧР не обязательно)",
              "                    int4 = abs(0 + CT(str0 + 'AverageSize'));",
              "                    //Если параметр AverageSize был указан в разделе ЧР в Lang",
              "                    if(int4)BMWeaponArray[innerCount, 0, 3] = int4;",
              "                    //Иначе берём базовый для данного типа орудия",
              "                    else",
              "                    {",
              "                        //Запросы параметра для оригинальной и кастомной пушки не отличаются, кроме того, что в первом случае необходимо указывать тип числом",
              "                        if(BMWeaponArray[innerCount, 0, 0] == 'Original') int4 = GetCustomWeaponData(0 + BMWeaponArray[innerCount, 0, 1], 'AverageSize');",
              "                        //Для кастомных орудий средний вес определяем в момент выставления орудия на продажу, т.к. в момент инициализации скрипта",
              "                        //кастомное орудие может быть ещё не объявлено своим скриптом",
              "                        else int4 = -1;",
              "                        BMWeaponArray[innerCount, 0, 3] = int4;",
              "                    }",
              "                    //Запоминаем шанс на появление данного орудия в магазине в чистом виде (без модификации)",
              "                    BMWeaponArray[innerCount, 0, 4] = 0 + CT(str0 + 'SellingWithoutModsChance');",
              "                    //Запоминаем шанс на создание орудия с неизвестной расой",
              "                    BMWeaponArray[innerCount, 0, 5] = 0 + CT(str0 + 'NoneRaceChance');",
              "                    //Запоминаем шанс на создание орудия с минимальным весом",
              "                    BMWeaponArray[innerCount, 0, 6] = 0 + CT(str0 + 'MinSizeChance');",
              "                    //Запоминаем шанс на наложение кастомной фракции (указывать в разделе ЧР необязательно)",
              "                    BMWeaponArray[innerCount, 0, 7] = 0 + CT(str0 + 'CustomFactionChance');",
              "                    //Запоминаем список возможных кастомных фракций (указывать в разделе ЧР необязательно)",
              "                    BMWeaponArray[innerCount, 0, 8] = CT(str0 + 'CustomFaction');",
              "                    //Запоминаем условие, которое должно быть выполнено перед добавлением оружия без модификации на продажу в магазин ЧР",
              "                    BMWeaponArray[innerCount, 0, 10] = CT(str0 + 'SpawnCondition');",
              "                    if(BMWeaponArray[innerCount, 0, 10] == '') BMWeaponArray[innerCount, 0, 10] = 1;",
              "                    //Запоминаем строки акт и юзкода, которые будет необходимо повесить на данное орудие без модификации после создания",
              "                    BMWeaponArray[innerCount, 0, 11] = CT(str0 + 'ItemOnActCode');",
              "                    BMWeaponArray[innerCount, 0, 12] = CT(str0 + 'ItemOnUseCode');",
              "",
              "                    //И переходим к запоминанию его модификаций",
              "                    str0 = str0 + 'Modifications.';",
              "                    int2 = 0; //Счётчик общего числа модификаций",
              "                    //Выстраиваем модификации в массиве по их ГТУ для последующей возможности удобной выборки при выставлении пушек в магазине",
              "                    GTL_M = 1;",
              "                    tCheck_M = 1; //Проверка для исключения лишних проходов цикла, если все модификации уже и так распределились по своим ГТУ",
              "                    while(GTL_M <= 8)",
              "                    {",
              "                        if(tCheck_M)",
              "                        {",
              "                            for(j = 1; j <= CT(str0 + 'Count'); j = j + 1)",
              "                            {",
              "                                //Проверка на существование раздела с таким номером в списке модификаций",
              "                                if(BlockExist(CT(str0 + j)))",
              "                                {",
              "                                    //Проверяем, доступен ли в принципе указанный бонус (подключён ли соответствующий мод)",
              "                                    str1 = str0 + j + '.';",
              "                                    if(BlockExist('MicroModuls.' + CT(str1 + 'BonusNum')))",
              "                                    {",
              "                                        tCheck_M = 0;",
              "                                        //Проверяем соответствие модификации текущему ГТУ",
              "                                        cur_mod_GTL = 0 + CT('MicroModuls.' + CT(str1 + 'BonusNum') + '.Priority') + CT(str1 + 'ChangePriorityOn');",
              "                                        if(cur_mod_GTL < 0) cur_mod_GTL = 0;",
              "                                        else if(cur_mod_GTL > 100) cur_mod_GTL = 100;",
              "                                        cur_mod_GTL = round(0.5 + 8.0 * (0.01 * cur_mod_GTL)); //round(0.5 + N) - костыль для округления к большему",
              "                                        if(cur_mod_GTL == GTL_M || (!cur_mod_GTL && GTL_M == 1))",
              "                                        {",
              "                                            int2 = int2 + 1;",
              "                                            //Запоминаем раздел Lang, в котором записан данный акрин",
              "                                            BMWeaponArray[innerCount, 2, j] = CT(str1 + 'BonusNum');",
              "                                            //Запоминаем список рас, доступных для данной модификации (указывать в разделе ЧР необязательно)",
              "                                            //Проверяем, была ли произведена замена параметра Owner данной модификации в разделе ЧР в Lang",
              "                                            str2 = CT(str1 + 'Owner');",
              "                                            //Если нет, то пробуем взять этот параметр из основного раздела бонуса",
              "                                            if(str2 == '') str2 = CT('MicroModuls.' + BMWeaponArray[innerCount, 2, j] + '.Owner');",
              "                                            //Если и там мы значения не нашли, то наследуем готовый сет рас от основного орудия",
              "                                            if(str2 == '') BMWeaponArray[innerCount, 3, j] = BMWeaponArray[innerCount, 0, 2];",
              "                                            //Если в итоге получили значение Any, то добавляем в сет все расы, кроме неизвестной",
              "                                            else if(str2 == 'Any') BMWeaponArray[innerCount, 3, j] = 191;",
              "                                            //Иначе делаем подробный перебор значений через запятую",
              "                                            else BMWeaponArray[innerCount, 3, j] = RaceSetDefine(str2, 159, 0);//Запасной сет, все расы, кроме доминаторов и неизвестной",
              "                                            //Определяем возможную подрасу модификации (серию доминаторов)",
              "                                            str2 = CT(str1 + 'SubRace');",
              "                                            if(str2 != '') BMWeaponArray[innerCount, 6, j] = SubRaceSetDefine(str2, 7);",
              "                                            else BMWeaponArray[innerCount, 6, j] = 7;",
              "                                            //Запоминаем шанс на наложение кастомной фракции на конкретно данную модификацию (указывать в разделе ЧР необязательно)",
              "                                            BMWeaponArray[innerCount, 4, j] = 0 + CT(str1 + 'CustomFactionChance');",
              "                                            //Запоминаем список возможных кастомных фракций для конкретно данной модификации (указывать в разделе ЧР необязательно)",
              "                                            BMWeaponArray[innerCount, 5, j] = CT(str1 + 'CustomFaction');",
              "                                            //Запоминаем условие, которое должно быть выполнено перед добавлением данной модификации оружия на продажу в магазин ЧР",
              "                                            BMWeaponArray[innerCount, 7, j] = CT(str1 + 'SpawnCondition');",
              "                                            if(BMWeaponArray[innerCount, 7, j] == '') BMWeaponArray[innerCount, 7, j] = 1;",
              "                                            //Запоминаем строки акт и юзкода, которые будет необходимо повесить на орудие с данной модификацией после создания",
              "                                            BMWeaponArray[innerCount, 8, j] = CT(str1 + 'ItemOnActCode');",
              "                                            BMWeaponArray[innerCount, 9, j] = CT(str1 + 'ItemOnUseCode');",
              "                                        }",
              "                                    }",
              "                                }",
              "                                else if(cur_mod_GTL > GTL_M) tCheck_M = 1;",
              "                            }",
              "                        }",
              "                        //Заносим сквозной счётчик в \"мету\" после каждого полного прохода списка модификаций для конкретного ГТУ",
              "                        BMWeaponArray[innerCount, 1, GTL_M] = int2;",
              "                        //Заодно запоминаем общее число доступных модификаций для данного орудия",
              "                        BMWeaponArray[innerCount, 1, 0] = int2;",
              "                        GTL_M = GTL_M + 1;",
              "                    }",
              "                }",
              "                else if(int0 > GTL) tCheck = 1;",
              "            }",
              "        }",
              "        //Заносим сквозной счётчик в мету после каждого полного прохода списка орудий для конкретного ГТУ",
              "        BMWeaponArray[0, 0, GTL] = innerCount;",
              "        GTL = GTL + 1;",
              "    }",
              "",
              "    //Составляем массив доступных для продажи артефактов",
              "    int1 = 0;",
              "    ArrayClear(tempArray);",
              "    //Выполняем проверку на наличие всех артефактов в заявленном списке",
              "    for(i = 1; i <= CT('BlackMarketShopList.Artefacts.Count'); i = i + 1)",
              "    {",
              "        if(BlockExist('BlackMarketShopList.Artefacts.' + i))",
              "        {",
              "            str0 = CT('BlackMarketShopList.Artefacts.' + i + '.ItemType');",
              "            //Если артефакт не из оригинальной игры, то делаем доп. проверку",
              "            if(str0 != 'OriginalArt')",
              "            {",
              "                if(str0 == 'CustomArt')",
              "                {",
              "                    str0 = CT('BlackMarketShopList.Artefacts.' + i + '.TypeStr');",
              "                    if(BlockExist('Artefacts.CustomArtefacts.' + str0)) ArrayAdd(tempArray, i);",
              "                }",
              "            }",
              "            else ArrayAdd(tempArray, i);",
              "        }",
              "    }",
              "    int1 = ArrayDim(tempArray);",
              "    free(BMArtsArray);",
              "    BMArtsArray = newarray(int1, 11); //Нулевой элемент используется под \"мету\" (число артефактов для каждого ГТУ)",
              "    GTL = 1;",
              "    innerCount = 0;",
              "    //Выстраиваем артефакты в массиве по их ГТУ для последующей возможности удобной выборки при выставлении в магазин",
              "    tCheck = 1; //Проверка для исключения лишних проходов цикла, если все артефакты уже и так распределились по своим ГТУ",
              "    while(GTL <= 8)",
              "    {",
              "        if(tCheck)",
              "        {",
              "            tCheck = 0;",
              "            for(i = 1; i < int1; i = i + 1)",
              "            {",
              "                str0 = 'BlackMarketShopList.Artefacts.' + tempArray[i] + '.';",
              "                //Проверяем соответствие артефакта текущему ГТУ",
              "                int0 = CT(str0 + 'GalaxyTechLevel');",
              "                if(int0 == GTL)",
              "                {",
              "                    innerCount = innerCount + 1;",
              "                    //Запоминаем тип предмета (оригинальный или кастомный артефакт)",
              "                    BMArtsArray[innerCount, 0] = CT(str0 + 'ItemType');",
              "                    //Запоминаем тип артефакта (нужен при его создании)",
              "                    //Для оригинальных артефактов запрашиваем число типа из переменной",
              "                    if(BMArtsArray[innerCount, 0] == 'OriginalArt') BMArtsArray[innerCount, 1] = GetValueFromScript('', CT(str0 + 'TypeStr'));",
              "                    //Для кастомных строка и есть тип",
              "                    else BMArtsArray[innerCount, 1] = CT(str0 + 'TypeStr');",
              "                    //Запоминаем шанс на частоту появления данного артефакта в магазине",
              "                    BMArtsArray[innerCount, 2] = 0 + CT(str0 + 'SpawnRateChance');",
              "                    //Определяем возможный для данного артефакта сет рас, помимо неизвестной",
              "                    //Проверяем, была ли произведена подстановка параметра Owner в разделе ЧР в Lang (указывать необязательно)",
              "                    str2 = CT(str0 + 'Owner');",
              "                    //Если нет, то выставляем стандартное значение (все коалиционные расы)",
              "                    if(str2 == '') BMArtsArray[innerCount, 3] = 31;",
              "                    //Если получили значение Any, то добавляем в сет все расы, кроме неизвестной",
              "                    else if(str2 == 'Any') BMArtsArray[innerCount, 3] = 191;",
              "                    //Иначе делаем подробный перебор значений через запятую",
              "                    else BMArtsArray[innerCount, 3] = RaceSetDefine(str2, 31, 0);//Запасной сет, все коалиционные расы",
              "                    //Определяем возможную подрасу артефакта (серию доминаторов)",
              "                    str2 = CT(str0 + 'SubRace');",
              "                    if(str2 != '') BMArtsArray[innerCount, 10] = SubRaceSetDefine(str2, 7);",
              "                    else BMArtsArray[innerCount, 10] = 7;",
              "                    //Запоминаем параметры веса и стоимости, которые будет иметь значение только для кастомных артефактов",
              "                    if(BMArtsArray[innerCount, 0] == 'CustomArt')",
              "                    {",
              "                        BMArtsArray[innerCount, 4] = 0 + CT(str0 + 'Size');",
              "                        //Убеждаемся, что кастомные артефакты не юзлесы точно получат своё значение Size",
              "                        if(BMArtsArray[innerCount, 4] <= 0)",
              "                        {",
              "                            BMArtsArray[innerCount, 4] = 0 + CT('Artefacts.CustomArtefacts.' + BMArtsArray[innerCount, 1] + '.Size');",
              "                            //Если настройщик оказался дебил и тупо проигнорил все правила, то ломаем артефакту вес нахрен!",
              "                            if(BMArtsArray[innerCount, 4] <= 0)BMArtsArray[innerCount, 4] = 1000;",
              "                        }",
              "                        BMArtsArray[innerCount, 5] = 0 + CT(str0 + 'Cost');",
              "                        //Убеждаемся, что кастомные артефакты не юзлесы точно получат своё значение Cost",
              "                        if(BMArtsArray[innerCount, 5] <= 0)",
              "                        {",
              "                            BMArtsArray[innerCount, 5] = 0 + CT('Artefacts.CustomArtefacts.' + BMArtsArray[innerCount, 1] + '.Cost');",
              "                            //Если настройщик оказался дебил и тупо проигнорил все правила, то ломаем артефакту цену нахрен!",
              "                            if(BMArtsArray[innerCount, 5] <= 0)BMArtsArray[innerCount, 5] = 1000000;",
              "                        }",
              "                    }",
              "                    //Запоминаем шанс на создание артефакта с неизвестной расой",
              "                    BMArtsArray[innerCount, 6] = 0 + CT(str0 + 'NoneRaceChance');",
              "                    //Запоминаем шанс на наложение кастомной фракции на артефакт (указывать в разделе ЧР необязательно)",
              "                    BMArtsArray[innerCount, 7] = 0 + CT(str0 + 'CustomFactionChance');",
              "                    //Запоминаем список возможных кастомных фракций для данного артефакта (указывать в разделе ЧР необязательно)",
              "                    BMArtsArray[innerCount, 8] = CT(str0 + 'CustomFaction');",
              "                    //Запоминаем путь для замены данного артефакта при продаже (нужно, если артефакт фактически является юзлесом, но продаваться должен как обычный артефакт)",
              "                    BMArtsArray[innerCount, 9] = CT(str0 + 'ReplaceOnSelling');",
              "                }",
              "                else if(int0 > GTL) tCheck = 1;",
              "            }",
              "        }",
              "        //Заносим сквозной счётчик в мету после каждого полного прохода списка артефактов для конкретного ГТУ",
              "        BMArtsArray[0, GTL] = innerCount;",
              "        GTL = GTL + 1;",
              "    }",
              "",
              "    //Составляем массив доступных для продажи наборов для модификаций",
              "    int1 = 0;",
              "    ArrayClear(tempArray);",
              "    //Выполняем проверку на наличие всех наборов в заявленном списке",
              "    for(i = 1; i <= CT('BlackMarketShopList.ModificationItems.Count'); i = i + 1)",
              "    {",
              "        if(BlockExist('BlackMarketShopList.ModificationItems.' + i))",
              "        {",
              "            str0 = CT('BlackMarketShopList.ModificationItems.' + i + '.TypeStr');",
              "            if(CT('BlackMarketShopList.ModificationItems.' + i + '.ItemType') == 'UselessItem')",
              "            {",
              "                if(BlockExist('UselessItems.' + str0)) ArrayAdd(tempArray, i);",
              "            }",
              "        }",
              "    }",
              "    int1 = ArrayDim(tempArray);",
              "    free(BMModificationsArray);",
              "    BMModificationsArray = newarray(int1, 9); //Нулевой элемент используется под \"мету\" (число наборов для каждого ГТУ)",
              "    GTL = 1;",
              "    innerCount = 0;",
              "    //Выстраиваем наборы в массиве по их ГТУ для последующей возможности удобной выборки при выставлении в магазин",
              "    tCheck = 1; //Проверка для исключения лишних проходов цикла, если все наборы уже и так распределились по своим ГТУ",
              "    while(GTL <= 8)",
              "    {",
              "        if(tCheck)",
              "        {",
              "            tCheck = 0;",
              "            for(i = 1; i < int1; i = i + 1)",
              "            {",
              "                str0 = 'BlackMarketShopList.ModificationItems.' + tempArray[i] + '.';",
              "                //Проверяем соответствие набора текущему ГТУ",
              "                int0 = CT(str0 + 'GalaxyTechLevel');",
              "                if(int0 == GTL)",
              "                {",
              "                    innerCount = innerCount + 1;",
              "                    //Запоминаем раздел Lang данного набора (нужен при его создании)",
              "                    BMModificationsArray[innerCount, 0] = CT(str0 + 'TypeStr');",
              "                    //Запоминаем тип предмета (на случай, если вдруг окажется не юзлесом)",
              "                    BMModificationsArray[innerCount, 1] = CT(str0 + 'ItemType');",
              "                    //Запоминаем шанс на частоту появления данного набора в магазине",
              "                    BMModificationsArray[innerCount, 2] = 0 + CT(str0 + 'SpawnRateChance');",
              "                    //Определяем возможный для данного набора сет рас, помимо неизвестной",
              "                    //Проверяем, была ли произведена подстановка параметра Owner в разделе ЧР в Lang (указывать необязательно)",
              "                    str2 = CT(str0 + 'Owner');",
              "                    //Если нет, то пробуем взять этот параметр из основного раздела данного предмета",
              "                    if(str2 == '') str2 = CT('UselessItems.' + BMModificationsArray[innerCount, 0] + '.Owner');",
              "                    //Если Owner в принципе нигде не задан, то выставляем стандартное значение (все расы, кроме доминаторов и неизвестной)",
              "                    if(str2 == '') BMModificationsArray[innerCount, 3] = 159;",
              "                    //Если получили значение Any, то добавляем в сет все расы, кроме неизвестной",
              "                    else if(str2 == 'Any') BMModificationsArray[innerCount, 3] = 191;",
              "                    //Иначе делаем подробный перебор значений через запятую",
              "                    else BMModificationsArray[innerCount, 3] = RaceSetDefine(str2, 159, 0);//Запасной сет, все расы, кроме доминаторов и неизвестной",
              "                    //Определяем возможную подрасу предмета (серию доминаторов)",
              "                    str2 = CT(str0 + 'SubRace');",
              "                    if(str2 != '') BMModificationsArray[innerCount, 8] = SubRaceSetDefine(str2, 7);",
              "                    else BMModificationsArray[innerCount, 8] = 7;",
              "                    //Запоминаем шанс на создание набора с неизвестной расой",
              "                    BMModificationsArray[innerCount, 4] = 0 + CT(str0 + 'NoneRaceChance');",
              "                    //Запоминаем путь для опциональной замены описания у данного юзлеса",
              "                    BMModificationsArray[innerCount, 5] = CT(str0 + 'TextReplacePath');",
              "                    //Запоминаем шанс на наложение кастомной фракции на набор (указывать в разделе ЧР необязательно)",
              "                    BMModificationsArray[innerCount, 6] = 0 + CT(str0 + 'CustomFactionChance');",
              "                    //Запоминаем список возможных кастомных фракций для данного набора (указывать в разделе ЧР необязательно)",
              "                    BMModificationsArray[innerCount, 7] = CT(str0 + 'CustomFaction');",
              "                }",
              "                else if(int0 > GTL) tCheck = 1;",
              "            }",
              "        }",
              "        //Заносим сквозной счётчик в мету после каждого полного прохода списка наборов для конкретного ГТУ",
              "        BMModificationsArray[0, GTL] = innerCount;",
              "        GTL = GTL + 1;",
              "    }",
              "}",
              "",
              "//Функция для выделения сета рас из указанной строки",
              "function RaceSetDefine(set_str, spare_set, flag)",
              "{",
              "    int set = 0;",
              "    int iCount = 0;",
              "    str t_str = 'Start';",
              "    while(t_str != '')",
              "    {",
              "        t_str = GetParFromString(set_str, ',', iCount, 1);",
              "",
              "        //Заносим расу в сет",
              "        if(t_str == 'Any')",
              "        {",
              "            if(flag) set = 255;",
              "            else set = 191;",
              "            break;",
              "        }",
              "        else if(t_str == 'Maloc')",
              "        {",
              "            if(!(set & 1)) set = set + 1;",
              "        }",
              "        else if(t_str == 'Peleng')",
              "        {",
              "            if(!(set & 2)) set = set + 2;",
              "        }",
              "        else if(t_str == 'People')",
              "        {",
              "            if(!(set & 4)) set = set + 4;",
              "        }",
              "        else if(t_str == 'Fei')",
              "        {",
              "            if(!(set & 8)) set = set + 8;",
              "        }",
              "        else if(t_str == 'Gaal')",
              "        {",
              "            if(!(set & 16)) set = set + 16;",
              "        }",
              "        else if(t_str == 'Coalition')",
              "        {",
              "            if(!(set & 1)) set = set + 1;",
              "            if(!(set & 2)) set = set + 2;",
              "            if(!(set & 4)) set = set + 4;",
              "            if(!(set & 8)) set = set + 8;",
              "            if(!(set & 16)) set = set + 16;",
              "        }",
              "        else if(t_str == 'PirateClan')",
              "        {",
              "            if(!(set & 128)) set = set + 128;",
              "        }",
              "        else if(t_str == 'Kling')",
              "        {",
              "            if(!(set & 32)) set = set + 32;",
              "        }",
              "        else if(t_str == 'None' && flag)",
              "        {",
              "            if(!(set & 64)) set = set + 64;",
              "        }",
              "",
              "        iCount = iCount + 1;",
              "    }",
              "",
              "    //Проверка на случай, если в параметре Owner оказалась записана херня",
              "    if(!set) set = spare_set;//Устанавливаем запасной сет",
              "",
              "    result = set;",
              "}",
              "",
              "//Функция для выделения сета подрас из указанной строки",
              "function SubRaceSetDefine(set_str, spare_set)",
              "{",
              "    int set = 0;",
              "    int iCount = 0;",
              "    str t_str = 'Start';",
              "    while(t_str != '')",
              "    {",
              "        t_str = GetParFromString(set_str, ',', iCount, 1);",
              "        if(t_str == 'Any')",
              "        {",
              "            set = 7;",
              "            break;",
              "        }",
              "        else if(t_str == 'Blazer')",
              "        {",
              "            if(!(set & 1)) set = set + 1;",
              "        }",
              "        else if(t_str == 'Keller')",
              "        {",
              "            if(!(set & 2)) set = set + 2;",
              "        }",
              "        else if(t_str == 'Terron')",
              "        {",
              "            if(!(set & 4)) set = set + 4;",
              "        }",
              "",
              "        iCount = iCount + 1;",
              "    }",
              "",
              "    //Проверка на случай, если в параметре SubRace оказалась записана херня",
              "    if(!set) set = spare_set; //Устанавливаем запасной сет",
              "",
              "    result = set;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  16,
          "#":  17,
          "Total.Lines":  39,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Экстренно завершаем скрипт, если пиратский клан потерпел поражение в войне",
              "if(PirateWin() == 3 || PirateWin() == 4)",
              "{",
              "    BlackMarket = GroupToShip(BM);",
              "    if(BlackMarket)",
              "    {",
              "        BMCurStar = ShipStar(BlackMarket);",
              "        if(ShipInNormalSpace(BlackMarket))",
              "        {",
              "            //Выгоняем все корабли из ангара перед телепортацией станции",
              "            for(i = StarShips(BMCurStar) - 1; i >= 0; i = i - 1)",
              "            {",
              "                dwd0 = StarShips(BMCurStar, i);",
              "                if(GetShipRuins(dwd0) == BlackMarket) OrderTakeOff(dwd0);",
              "            }",
              "",
              "            NoLanding(BlackMarket, 1);",
              "            if(ShipOrderObj(Player()) == BlackMarket)",
              "            {",
              "                if(ShipOrder(Player()) == 2) OrderNone(Player());",
              "            }",
              "            OrderTeleport(BlackMarket, BMCurStar, 0, 0);",
              "            ShipOrderData1(BlackMarket, 1);",
              "        }",
              "        else",
              "        {",
              "            ShipDestroy(BlackMarket, 1);",
              "            //Очищаем хранилище предметов со склада ЧР",
              "            for(i = 1; i <= BlackMarketStorageCount; i = i + 1)",
              "            {",
              "                dwd0 = GetItemFromVault('BlackMarketStorageVault_' + i);",
              "                FreeItem(dwd0);",
              "            }",
              "",
              "            BlackMarketStorageCount = 0;",
              "            AllShipOut();",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  350,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  46,
          "Total.Lines":  1005,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Функция для заполнения магазинов ЧР различными товарами и оборудованием",
              "function UpdateBMShop(shop)",
              "{",
              "    //Добавляем определённое количество различных товаров в магазин товаров на ЧР",
              "    for(i = t_Food; i <= t_Narcotics; i = i + 1)",
              "    {",
              "        //Запоминаем количество уже имеющегося в магазине товара",
              "        int0 = GoodsAdd(shop, i, 0);",
              "        //И обнуляем его",
              "        GoodsAdd(shop, i, -int0);",
              "        //После чего переходим к ручному заполнению",
              "        //Продукты",
              "        if(i == t_Food)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(7, 19, shop));",
              "            GoodsRuinsForBuy(shop, 0);",
              "        }",
              "        //Медикаменты",
              "        else if(i == t_Medicine)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(17, 54, shop));",
              "            GoodsRuinsForBuy(shop, 1);",
              "        }",
              "        //Техника",
              "        else if(i == t_Technics)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(23, 47, shop));",
              "            GoodsRuinsForBuy(shop, 2);",
              "        }",
              "        //Роскошь",
              "        else if(i == t_Luxury)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(21, 35, shop));",
              "            GoodsRuinsForBuy(shop, 3);",
              "        }",
              "        //Алкоголь",
              "        else if(i == t_Alcohol)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(43, 87, shop));",
              "            GoodsRuinsForBuy(shop, 5);",
              "        }",
              "        //Оружие",
              "        else if(i == t_Arms)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(57, 123, shop));",
              "            GoodsRuinsForBuy(shop, 6);",
              "        }",
              "        //Наркотики",
              "        else if(i == t_Narcotics)",
              "        {",
              "            GoodsAdd(shop, i, RndObject(71, 176, shop));",
              "            GoodsRuinsForBuy(shop, 7);",
              "        }",
              "    }",
              "",
              "    //Чистим магазин оборудования на ЧР",
              "    for(i = ShopItems(shop) - 1; i >= 0; i = i - 1) FreeItem(GetItemFromShop(shop, i));",
              "    //Начинаем первое заполнение ЧР вещами",
              "    GTL = GalaxyTechLevel();",
              "    //Сперва делаем проверку на возможность добавления в магазин ЧР корпусов (до 5 штук)",
              "    int0 = RndObject(1, 100, shop);",
              "    if(int0 <= CT('BlackMarketShopList.Hulls.FiveHullsSellingChance')) int0 = 5;",
              "    else if(int0 <= CT('BlackMarketShopList.Hulls.FourHullsSellingChance')) int0 = 4;",
              "    else if(int0 <= CT('BlackMarketShopList.Hulls.ThreeHullsSellingChance')) int0 = 3;",
              "    else if(int0 <= CT('BlackMarketShopList.Hulls.TwoHullsSellingChance')) int0 = 2;",
              "    else if(int0 <= CT('BlackMarketShopList.Hulls.OneHullSellingChance')) int0 = 1;",
              "    else int0 = 0;",
              "",
              "    if(int0)",
              "    {",
              "        //Проверяем, хватает ли корпусов в списке возможной выдачи для текущего ГТУ",
              "        if(BMHullsArray[0, GTL] < int0) int0 = BMHullsArray[0, GTL];",
              "        //Если нашли хоть один подходящий",
              "        if(int0)",
              "        {",
              "            str0 = '*0*';",
              "            itemNum = 0;",
              "            for(i = 1; i <= int0; i = i + 1)",
              "            {",
              "                //Выбираем случайный номер",
              "                //И проверяем, что предмет с таким номером не выпадал в данном цикле ранее",
              "                while(~findsubstr(str0, '*' + itemNum + '*'))",
              "                {",
              "                    itemNum = RndObject(1, BMHullsArray[0, GTL], shop);",
              "                    //Производим проверку на доступность корпуса, согласно дополнительному условию из раздела ЧР в Lang",
              "                    tCheck = 0;",
              "                    ExecuteCodeFromString('if(' + Format(BMHullsArray[itemNum, 9], '&&&', '){} else exit; if(', '') + ') tCheck = 1;');",
              "                    if(!tCheck) itemNum = 0;",
              "                }",
              "",
              "                //Запоминаем выпавший номер",
              "                str0 = str0 + itemNum + '*';",
              "",
              "                //Сперва убеждаемся, что данный акрин на корпус всё ещё существует",
              "                int6 = FindBonusByNameInCfg(BMHullsArray[itemNum, 0]);",
              "                if(int6 == -1) continue;",
              "",
              "                //Приступаем к созданию корпуса",
              "                //Сперва узнаём тип корпуса и задаём константу типа (здесь будет слегка больше, чем в ваниле)",
              "                if(BMHullsArray[itemNum, 1] == 'Ranger')",
              "                {",
              "                    int1 = 0;",
              "                    int hull_size_const = 225;",
              "                }",
              "                else if(BMHullsArray[itemNum, 1] == 'Warrior')",
              "                {",
              "                    int1 = 1;",
              "                    hull_size_const = 225;",
              "                }",
              "                else if(BMHullsArray[itemNum, 1] == 'Pirate')",
              "                {",
              "                    int1 = 2;",
              "                    hull_size_const = 225;",
              "                }",
              "                else if(BMHullsArray[itemNum, 1] == 'Transport')",
              "                {",
              "                    int1 = 3;",
              "                    hull_size_const = 400;",
              "                }",
              "                else if(BMHullsArray[itemNum, 1] == 'Liner')",
              "                {",
              "                    int1 = 4;",
              "                    hull_size_const = 400;",
              "                }",
              "                else if(BMHullsArray[itemNum, 1] == 'Diplomat')",
              "                {",
              "                    int1 = 5;",
              "                    hull_size_const = 75;",
              "                }",
              "                else if(BMHullsArray[itemNum, 1] == 'WarriorBig')",
              "                {",
              "                    int1 = 10;",
              "                    hull_size_const = 225;",
              "                }",
              "                else continue;",
              "",
              "                //Затем определяем его размер (соответственно типу)",
              "                //Задаём возможный разброс ТУ корпуса",
              "                GTL = RndObject(1, 6, shop);",
              "                if(GTL <= 2) GTL = GalaxyTechLevel() - 1;",
              "                else if(GTL <= 5) GTL = GalaxyTechLevel();",
              "                else if(GTL == 6) GTL = GalaxyTechLevel() + 1;",
              "",
              "                if(GTL > 8) GTL = 8;",
              "                else if(GTL < 1) GTL = 1;",
              "",
              "                int2 = ItemSize(ShipItems(Player(), 0));",
              "                int2 = RndObject(round(0.5 * int2), max(int2 + hull_size_const, round(PortionInDiapason(GTL, 1, 8, 0.7, 2.0) * CT('Items.Hull.AverageSize'))), shop); //Считаем размер нового корпуса в магазине по ванильной формуле (акрин срежет 20%)",
              "                //Для транспортов и лайнеров вместо константы 200 используется 300 (а при продаже на БЦ даже 400), для дипломатов 50, а для всех остальных типов корпусов всегда 200",
              "                int2 = min(int2, 1750) + RndObject(-50, 50, shop); //Ограничение до 1500, а то будут наращивать размеры до бесконечности",
              "",
              "",
              "                //Определяем базовый размер (по умолчанию рандомится для рейнджерских/пиратских)",
              "                //if(GTL <= 3) int2 = RndObject(253, 356, shop);",
              "                //else if(GTL == 4) int2 = RndObject(407, 537, shop);",
              "                //else if(GTL == 5) int2 = RndObject(567, 623, shop);",
              "                //else if(GTL == 6) int2 = RndObject(627, 719, shop);",
              "                //else if(GTL == 7) int2 = RndObject(726, 832, shop);",
              "                //else if(GTL >= 8) int2 = RndObject(843, 921, shop);",
              "",
              "                //Применяем модификатор размера для определённого типа корпуса (если нужно)",
              "                //if(int1 == 1) int2 = round(1.1 * int2);",
              "                //else if(int1 == 3) int2 = round(1.6 * int2);",
              "                //else if(int1 == 4) int2 = round(1.3 * int2);",
              "                //else if(int1 == 5) int2 = round(0.8 * int2);",
              "                //else if(int1 == 10) int2 = round(3.5 * int2);",
              "",
              "                //Узнаём расу-производителя корпуса",
              "                //Выбираем случайную расу из заданного сета",
              "                int3 = -1;",
              "                int5 = BMHullsArray[itemNum, 4];",
              "                while(!(int5 & (1 << int3))) int3 = RndObject(0, 7, shop);",
              "                //Определяем возможную серию корпуса",
              "                int4 = -1;",
              "                //Сперва делаем бросок на шанс наложения серии в принципе",
              "                if(RndObject(1, 100, shop) <= BMHullsArray[itemNum, 2])",
              "                {",
              "                    //Если хоть одна серия была задана в Lang",
              "                    if(BMHullsArray[itemNum, 3] != '')",
              "                    {",
              "                        tCheck = 0;",
              "                        str1 = BMHullsArray[itemNum, 3];",
              "                        ArrayClear(tempArray);",
              "                        //Начинаем проверку на количество серий, заданных в Lang через запятую",
              "                        while(!tCheck)",
              "                        {",
              "                            int5 = findsubstr(str1, ',');",
              "                            //Если впереди ещё есть запятая",
              "                            if(~int5)",
              "                            {",
              "                                //Перед занесением в список делаем проверку, на месте ли серия (могла быть подключена модом, например)",
              "                                if(BlockExist('HullType.' + substr(str1, 0, int5))) ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                                str1 = substr(str1, int5 + 1);",
              "                            }",
              "                            //Если серии закончились, либо в списке была всего одна",
              "                            else",
              "                            {",
              "                                //Перед занесением в список делаем проверку, на месте ли серия (могла быть подключена модом, например)",
              "                                if(BlockExist('HullType.' + str1)) ArrayAdd(tempArray, str1);",
              "                                //Завершаем цикл",
              "                                tCheck = 1;",
              "                            }",
              "                        }",
              "                        //Выбираем случайную серию из возможных (если серия всего одна, то выберется она)",
              "                        if(ArrayDim(tempArray) > 1)",
              "                        {",
              "                            str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                            int4 = FindSeriesByName(CT('HullType.' + str1 + '.Name'));",
              "                        }",
              "                    }",
              "                }",
              "                //И вот, наконец, создаём корпус",
              "                dwd1 = CreateHull(int1, int2, GTL, int3, int4, BMHullsArray[itemNum, 5]);",
              "                //Накладываем на корпус его акрин",
              "                SpecialToEquipment(int6, dwd1);",
              "                //Если корпус оказался доминаторским, то выбираем и подставляем ему ещё и серию",
              "                if (int2 == 5)",
              "                {",
              "                    int6 = -1;",
              "                    int5 = BMHullsArray[itemNum, 8];",
              "                    while (!(int5 & (1 << int6)))int6 = RndObject(0, 2, shop);",
              "                    ItemSubrace(dwd1, int6);",
              "                }",
              "                //После чего проверяем, будет ли на него установлена кастомная раса(ы)",
              "                if (RndObject(1, 100, shop) <= BMHullsArray[itemNum, 6])",
              "                {",
              "                    tCheck = 0;",
              "                    str1 = BMHullsArray[itemNum, 7];",
              "                    ArrayClear(tempArray);",
              "                    //Начинаем проверку на количество кастомных фракций, заданных в Lang через запятую",
              "                    while(!tCheck)",
              "                    {",
              "                        int5 = findsubstr(str1, ',');",
              "                        //Если впереди ещё есть запятая",
              "                        if(~int5)",
              "                        {",
              "                            //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                            if(GetMainData('Data.Race.Emblem.2' + substr(str1, 0, int5)) != '') ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                            str1 = substr(str1, int5 + 1);",
              "                        }",
              "                        //Если серии закончились, либо в списке была всего одна",
              "                        else",
              "                        {",
              "                            //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                            if(GetMainData('Data.Race.Emblem.2' + str1) != '') ArrayAdd(tempArray, str1);",
              "                            //Завершаем цикл",
              "                            tCheck = 1;",
              "                        }",
              "                    }",
              "                    //Выбираем случайную кастомную фракцию из возможных (если фракция всего одна, то выберется она)",
              "                    if(ArrayDim(tempArray) > 1)",
              "                    {",
              "                        str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                        //Устанавливаем выбранную фракцию предмету",
              "                        EqCustomFaction(dwd1, str1);",
              "                    }",
              "                }",
              "                //Выставляем корпус на продажу в магазин",
              "                AddItemToShop(shop, dwd1);",
              "                //Приводим переменную с ГТУ в норму",
              "                GTL = GalaxyTechLevel();",
              "            }",
              "        }",
              "    }",
              "",
              "    //Добавляем оборудование",
              "    //Определяем, сколько оборудования должно попасть в магазин в этот раз",
              "    int0 = RndObject(CT('BlackMarketShopList.MinEquipmentsInStock'), CT('BlackMarketShopList.MaxEquipmentsInStock'), shop);",
              "    if(int0)",
              "    {",
              "        //Проверяем, хватает ли оборудования в списке возможной выдачи для текущего ГТУ",
              "        if(BMEquipmentArray[0, GTL] < int0) int0 = BMEquipmentArray[0, GTL];",
              "        //Если нашли хоть одну подходящую вещь",
              "        if(int0)",
              "        {",
              "            str0 = '*0*';",
              "            itemNum = 0;",
              "            for(i = 1; i <= int0; i = i + 1)",
              "            {",
              "                //Выбираем случайный номер",
              "                //И проверяем, что предмет с таким номером не выпадал в данном цикле ранее",
              "                while(~findsubstr(str0, '*' + itemNum + '*'))",
              "                {",
              "                    itemNum = RndObject(1, BMEquipmentArray[0, GTL], shop);",
              "                    //Производим проверку на доступность предмета, согласно дополнительному условию из раздела ЧР в Lang",
              "                    tCheck = 0;",
              "                    ExecuteCodeFromString('if(' + Format(BMEquipmentArray[itemNum, 9], '&&&', '){} else exit; if(', '') + ') tCheck = 1;');",
              "                    if(!tCheck) itemNum = 0;",
              "                }",
              "                //Запоминаем выпавший номер",
              "                str0 = str0 + itemNum + '*';",
              "                //Приступаем к созданию оборудования",
              "                //Сперва узнаём тип предмета",
              "                //Но перед этим быстро запоминаем шанс, с которым данное оборудование будет добавлено в магазин без акрина",
              "                int4 = int(CT('BlackMarketShopList.Equipment.SellingWithoutAcrynChance.' + BMEquipmentArray[itemNum, 1]));",
              "                if(BMEquipmentArray[itemNum, 1] == 'Engine') int1 = t_Engine;",
              "                else if(BMEquipmentArray[itemNum, 1] == 'FuelTank') int1 = t_FuelTanks;",
              "                else if(BMEquipmentArray[itemNum, 1] == 'Radar') int1 = t_Radar;",
              "                else if(BMEquipmentArray[itemNum, 1] == 'Scaner') int1 = t_Scaner;",
              "                else if(BMEquipmentArray[itemNum, 1] == 'Droid') int1 = t_RepairRobot;",
              "                else if(BMEquipmentArray[itemNum, 1] == 'Hook') int1 = t_CargoHook;",
              "                else if(BMEquipmentArray[itemNum, 1] == 'DefGenerator') int1 = t_DefGenerator;",
              "                //Если тип в разделе ЧР в Lang указан невалидно, то пропускаем данное оборудование",
              "                else continue;",
              "",
              "                //Затем определяем расу предмета",
              "                //Если шанс на выпадение неизвестной расы успешен",
              "                if(RndObject(1, 100, shop) <= BMEquipmentArray[itemNum, 4]) int2 = 6;",
              "",
              "                //Иначе подбираем расу из сета доступных для данного акрина",
              "                else",
              "                {",
              "                    int2 = -1;",
              "                    int5 = BMEquipmentArray[itemNum, 2];",
              "                    while(!(int5 & (1 << int2))) int2 = RndObject(0, 7, shop);",
              "                }",
              "",
              "                //Затем определяем размер оборудования с учётом его расы (с определённым шансом выпадет минимальный для данного типа оборудования)",
              "                int3 = BMEquipmentArray[itemNum, 3];",
              "",
              "                //Если средний вес оборудования не был задан в разделе ЧР в Lang, то используем стандартные параметры для типов",
              "                if(!int3)",
              "                {",
              "                    if(int1 == t_Engine) int3 = 50;",
              "                    else if(int1 == t_FuelTanks) int3 = 60;",
              "                    else if(int1 == t_Radar) int3 = 40;",
              "                    else if(int1 == t_Scaner) int3 = 40;",
              "                    else if(int1 == t_RepairRobot) int3 = 50;",
              "                    else if(int1 == t_CargoHook) int3 = 50;",
              "                    else if(int1 == t_DefGenerator) int3 = 60;",
              "                }",
              "",
              "                //Иначе переходим сразу к наложению расовых модификаторов",
              "                if(int2 == Maloc) int3 = 1.4 * int3;",
              "                else if(int2 == Peleng) int3 = 1.1 * int3;",
              "                else if(int2 == People) int3 = 1.0 * int3;",
              "                else if(int2 == Fei) int3 = 0.6 * int3;",
              "                else if(int2 == Gaal) int3 = 0.8 * int3;",
              "                else if(int2 == Kling) int3 = 1.0 * int3;",
              "                else if(int2 == None) int3 = 0.8 * int3;",
              "                else if(int2 == PirateClan) int3 = 1.2 * int3;",
              "",
              "                //И расчёту конечного веса",
              "                //Проводим бросок на выдачу предмету минимального веса",
              "                if(RndObject(1, 100, shop) <= BMEquipmentArray[itemNum, 5]) int3 = round(int3 / 2);",
              "                //И расчёт случайного веса, если бросок оказался неудачным",
              "                else int3 = RndObject(round(int3 / 2), round(1.6 * int3), shop);",
              "                //Проверяем, что финальный вес не оказался нулевым",
              "                if(int3 <= 0) int3 = 1;",
              "                //Определяем возможный разброс ТУ для данного оборудования",
              "                GTL = RndObject(1, 6, shop);",
              "                if(GTL <= 2) GTL = GalaxyTechLevel() - 1;",
              "                else if(GTL <= 5) GTL = GalaxyTechLevel();",
              "                else if(GTL == 6) GTL = GalaxyTechLevel() + 1;",
              "",
              "                if(GTL > 8) GTL = 8;",
              "                else if(GTL < 1) GTL = 1;",
              "                //Создаём оборудование без акрина",
              "                dwd1 = CreateEquipment(int1, int3, GTL, int2);",
              "                //Если оборудование оказалось доминаторским, то выбираем и подставляем ему ещё и серию",
              "                if(int2 == 5)",
              "                {",
              "                    int6 = -1;",
              "                    int5 = BMEquipmentArray[itemNum, 8];",
              "                    while(!(int5 & (1 << int6))) int6 = RndObject(0, 2, shop);",
              "                    ItemSubrace(dwd1, int6);",
              "                }",
              "                //Приступаем к определению, будет ли в магазин добавлен обычный предмет, либо с акрином",
              "                //Если бросок успешен (либо вместо акрина было задано 'None'), добавляем готовое неакринированное оборудование в магазин",
              "                if(RndObject(1, 100, shop) <= int4 || BMEquipmentArray[itemNum, 0] == 'None') AddItemToShop(shop, dwd1);",
              "                //Если же нет, то приступаем к установке акрина",
              "                else",
              "                {",
              "                    int6 = FindBonusByNameInCfg(BMEquipmentArray[itemNum, 0]);",
              "                    //Проверяем, что данный акрин всё ещё существует",
              "                    if (int6 > -1)",
              "                    {",
              "                        //Акринируем оборудование",
              "                        SpecialToEquipment(int6, dwd1);",
              "                        //После чего проверяем, будет ли на него установлена кастомная раса(ы)",
              "                        if(RndObject(1, 100, shop) <= BMEquipmentArray[itemNum, 6])",
              "                        {",
              "                            tCheck = 0;",
              "                            str1 = BMEquipmentArray[itemNum, 7];",
              "                            ArrayClear(tempArray);",
              "                            //Начинаем проверку на количество кастомных фракций, заданных в Lang через запятую",
              "                            while(!tCheck)",
              "                            {",
              "                                int5 = findsubstr(str1, ',');",
              "                                //Если впереди ещё есть запятая",
              "                                if(~int5)",
              "                                {",
              "                                    //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                                    if(GetMainData('Data.Race.Emblem.2' + substr(str1, 0, int5)) != '') ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                                    str1 = substr(str1, int5 + 1);",
              "                                }",
              "                                //Если серии закончились, либо в списке была всего одна",
              "                                else",
              "                                {",
              "                                    //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                                    if(GetMainData('Data.Race.Emblem.2' + str1) != '') ArrayAdd(tempArray, str1);",
              "                                    //Завершаем цикл",
              "                                    tCheck = 1;",
              "                                }",
              "                            }",
              "                            //Выбираем случайную кастомную фракцию из возможных (если фракция всего одна, то выберется она)",
              "                            if(ArrayDim(tempArray) > 1)",
              "                            {",
              "                                str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                                //Устанавливаем выбранную фракцию предмету",
              "                                EqCustomFaction(dwd1, str1);",
              "                            }",
              "                        }",
              "                        //Если оборудование получило неизвестную расу, накладываем на его стоимость соответствующий модификатор",
              "                        if(int2 == 6)",
              "                        {",
              "                            flt = CT('BlackMarketShopList.Equipment.NoneRaceCostCoef');",
              "                            if(flt <= 0) flt = 1.0;",
              "                            ItemCost(dwd1, round(flt * ItemCost(dwd1)));",
              "                        }",
              "                        //Аналогичная проверка для доминаторской расы",
              "                        else if(int2 == 5)",
              "                        {",
              "                            flt = CT('BlackMarketShopList.Equipment.DomRaceCostCoef');",
              "                            if(flt <= 0) flt = 1.0;",
              "                            ItemCost(dwd1, round(flt * ItemCost(dwd1)));",
              "                        }",
              "                        //Добавляем в магазин полностью готовое и акринированное оборудование",
              "                        AddItemToShop(shop, dwd1);",
              "                    }",
              "                }",
              "                //Приводим переменную с ГТУ в норму",
              "                GTL = GalaxyTechLevel();",
              "            }",
              "        }",
              "    }",
              "",
              "    //Добавляем оружие",
              "    //Определяем, сколько оружия должно попасть в магазин в этот раз",
              "    int0 = RndObject(CT('BlackMarketShopList.MinWeaponsInStock'), CT('BlackMarketShopList.MaxWeaponsInStock'), shop);",
              "    if(int0)",
              "    {",
              "        //Проверяем, хватает ли оружия в списке возможной выдачи для текущего ГТУ",
              "        //Считаем сами орудия и все модификации к ним, подходящие под данный ГТУ",
              "        //Орудие без модификации и орудие с модификацией считаются при выдаче двумя разными орудиями",
              "        int1 = 0;",
              "        for(i = 1; i <= BMWeaponArray[0, 0, GTL]; i = i + 1)",
              "        {",
              "            //Учитываем орудие без модификаций, только если его шанс выдачи без модификации больше нуля",
              "            if(BMWeaponArray[i, 0, 4]) int1 = int1 + 1;",
              "            //Учитываем модификации орудия, только если имеется ненулевой шанс на их выдачу",
              "            if(BMWeaponArray[i, 0, 4] < 100)",
              "            {",
              "                for(j = 1; j <= BMWeaponArray[i, 1, GTL]; j = j + 1)",
              "                {",
              "                    //И если они всё ещё доступны в Lang",
              "                    if(BlockExist('MicroModuls.' + BMWeaponArray[i, 2, j])) int1 = int1 + 1;",
              "                }",
              "            }",
              "        }",
              "        //Сверяем значения счётчиков, хватает ли уникальных орудий с модификациями для выдачи на данном ГТУ",
              "        if(int1 < int0) int0 = int1;",
              "        //Если нашли хоть одну подходящую вещь",
              "        if(int0)",
              "        {",
              "            str0 = '*0,0*';",
              "            itemNum = 0;",
              "            modNum = 0;",
              "            for(i = 1; i <= int0; i = i + 1)",
              "            {",
              "                //Выбираем случайный номер орудия или его модификации",
              "                //И проверяем, что предмет с таким номером не выпадал в данном цикле ранее",
              "                while(~findsubstr(str0, '*' + itemNum + ',' + modNum + '*'))",
              "                {",
              "                    itemNum = RndObject(1, BMWeaponArray[0, 0, GTL], shop);",
              "                    modNum = 0;",
              "                    //Проверяем, что модификации орудия для текущего ГТУ доступны",
              "                    if(BMWeaponArray[itemNum, 1, GTL])",
              "                    {",
              "                        //Проверяем, что шанс выдачи модификаций для данного орудия не нулевой",
              "                        if(BMWeaponArray[itemNum, 0, 4] < 100)",
              "                        {",
              "                            //Делаем бросок на шанс и выбираем случайную доступную модификацию при успехе",
              "                            if(RndObject(1, 100, shop) > BMWeaponArray[itemNum, 0, 4]) modNum = RndObject(1, BMWeaponArray[itemNum, 1, GTL], shop);",
              "                            //Ещё раз проверяем, существует ли данный акрин (знаю, что перегруз кода, но нахер мне надо потом дебильные ошибки из-за отключения модов разгребать)",
              "                            if(!BlockExist('MicroModuls.' + BMWeaponArray[itemNum, 2, modNum])) modNum = 0;",
              "                        }",
              "                    }",
              "                    tCheck = 0;",
              "                    //Производим проверку на доступность орудия",
              "                    if(!modNum) ExecuteCodeFromString('if(' + Format(BMWeaponArray[itemNum, 0, 10], '&&&', '){} else exit; if(', '') + ') tCheck = 1;');",
              "                    //Или его модификации, согласно дополнительному условию из раздела ЧР в Lang",
              "                    else ExecuteCodeFromString('if(' + Format(BMWeaponArray[itemNum, 7, modNum], '&&&', '){} else exit; if(', '') + ') tCheck = 1;');",
              "                    if(!tCheck)",
              "                    {",
              "                        itemNum = 0;",
              "                        modNum = 0;",
              "                    }",
              "                }",
              "                //Запоминаем выпавшие номера",
              "                str0 = str0 + itemNum + ',' + modNum + '*';",
              "                //Приступаем к созданию орудия",
              "                //Сперва определяем его будущий вес (всегда считается для орудия без модификации, т.к. акрин может иметь свой модификатор)",
              "                int3 = BMWeaponArray[itemNum, 0, 3];",
              "                //Проверка на случай выпадения кастомного орудия",
              "                if(int3 <= -1) int3 = GetCustomWeaponData(BMWeaponArray[itemNum, 0, 1], 'AverageSize');",
              "                //Проводим бросок на выдачу орудию минимального веса",
              "                if(RndObject(1, 100, shop) <= BMWeaponArray[itemNum, 0, 6]) int3 = round(int3 / 2);",
              "                //И расчёт случайного веса, если бросок оказался неудачным",
              "                else int3 = RndObject(round(int3 / 2), round(int3 * 2), shop);",
              "                //Проверяем, что финальный вес не оказался нулевым",
              "                if(int3 <= 0) int3 = 1;",
              "                //Определяем возможный разброс ТУ для данного орудия",
              "                GTL = RndObject(1, 6, shop);",
              "                if(GTL <= 2) GTL = GalaxyTechLevel() - 1;",
              "                else if(GTL <= 5) GTL = GalaxyTechLevel();",
              "                else if(GTL == 6) GTL = GalaxyTechLevel() + 1;",
              "",
              "                if(GTL > 8) GTL = 8;",
              "                else if(GTL < 1) GTL = 1;",
              "",
              "                dword shop_gun;",
              "                //Теперь узнаём, появится ли орудие в магазине с модификацией, либо же без неё",
              "                //Если выпала пушка с модификацией",
              "                if(modNum)",
              "                {",
              "                    //Определяем расу орудия с модификацией",
              "                    //Если шанс на выпадение неизвестной расы успешен",
              "                    if(RndObject(1, 100, shop) <= BMWeaponArray[itemNum, 0, 5]) int2 = 6;",
              "                    //Иначе подбираем расу из сета доступных для данной модификации",
              "                    else",
              "                    {",
              "                        int2 = -1;",
              "                        int5 = BMWeaponArray[itemNum, 3, modNum];",
              "                        while(!(int5 & (1 << int2))) int2 = RndObject(0, 7, shop);",
              "                    }",
              "                    //Накладываем на вес орудия расовый модификатор",
              "                    if(int2 == Maloc) int3 = 1.4 * int3;",
              "                    else if(int2 == Peleng) int3 = 1.1 * int3;",
              "                    else if(int2 == People) int3 = 1.0 * int3;",
              "                    else if(int2 == Fei) int3 = 0.6 * int3;",
              "                    else if(int2 == Gaal) int3 = 0.8 * int3;",
              "                    else if(int2 == Kling) int3 = 1.0 * int3;",
              "                    else if(int2 == None) int3 = 0.8 * int3;",
              "                    else if(int2 == PirateClan) int3 = 1.2 * int3;",
              "",
              "                    //Перед созданием узнаём, является данное орудие оригинальным, либо кастомным",
              "                    //Если орудие оригинальное",
              "                    if(BMWeaponArray[itemNum, 0, 0] == 'Original') shop_gun = CreateEquipment(BMWeaponArray[itemNum, 0, 1], int3, GTL, int2);",
              "                    //Если кастомное",
              "                    else shop_gun = CreateCustomWeapon(BMWeaponArray[itemNum, 0, 1], int3, GTL, int2);",
              "                    //Находим соответствующую модификацию",
              "                    int6 = FindBonusByNameInCfg(BMWeaponArray[itemNum, 2, modNum]);",
              "                    //Накладываем её на орудие",
              "                    SpecialToEquipment(int6, shop_gun);",
              "",
              "                    //Если модификация оказалась доминаторской, то выбираем и подставляем ей ещё и серию",
              "                    if(int2 == 5)",
              "                    {",
              "                        int6 = -1;",
              "                        int5 = BMWeaponArray[itemNum, 6, modNum];",
              "                        while(!(int5 & (1 << int6))) int6 = RndObject(0, 2, shop);",
              "                        ItemSubrace(shop_gun, int6);",
              "                    }",
              "",
              "                    //После чего проверяем, будет ли на него установлена кастомная раса(ы)",
              "                    if(RndObject(1, 100, shop) <= BMWeaponArray[itemNum, 4, modNum])",
              "                    {",
              "                        tCheck = 0;",
              "                        str1 = BMWeaponArray[itemNum, 5, modNum];",
              "                        ArrayClear(tempArray);",
              "                        //Начинаем проверку на количество кастомных фракций, заданных в Lang через запятую",
              "                        while(!tCheck)",
              "                        {",
              "                            int5 = findsubstr(str1, ',');",
              "                            //Если впереди ещё есть запятая",
              "                            if(~int5)",
              "                            {",
              "                                //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                                if(GetMainData('Data.Race.Emblem.2' + substr(str1, 0, int5)) != '') ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                                str1 = substr(str1, int5 + 1);",
              "                            }",
              "                            //Если серии закончились, либо в списке была всего одна",
              "                            else",
              "                            {",
              "                                //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                                if(GetMainData('Data.Race.Emblem.2' + str1) != '') ArrayAdd(tempArray, str1);",
              "                                //Завершаем цикл",
              "                                tCheck = 1;",
              "                            }",
              "                        }",
              "                        //Выбираем случайную кастомную фракцию из возможных (если фракция всего одна, то выберется она)",
              "                        if(ArrayDim(tempArray) > 1)",
              "                        {",
              "                            str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                            //Устанавливаем выбранную фракцию предмету",
              "                            EqCustomFaction(shop_gun, str1);",
              "                        }",
              "                    }",
              "",
              "                    //Вешаем на орудие акт или юзкод, если это нужно",
              "                    int act_code_check = count(BMWeaponArray[itemNum, 8, modNum]);",
              "                    int use_code_check = count(BMWeaponArray[itemNum, 9, modNum]);",
              "                    if(act_code_check || use_code_check)",
              "                    {",
              "                        if(act_code_check)",
              "                        {",
              "                            LinkItemToScript(shop_gun);",
              "                            ItemOnActCode(shop_gun, GenerateCodeStringFromBlock(BMWeaponArray[itemNum, 8, modNum]));",
              "                        }",
              "                        if(use_code_check)",
              "                        {",
              "                            if(!ItemInScript(shop_gun)) LinkItemToScript(shop_gun);",
              "                            ItemOnUseCode(shop_gun, GenerateCodeStringFromBlock(BMWeaponArray[itemNum, 9, modNum]));",
              "                        }",
              "                    }",
              "                }",
              "                //Если выпала пушка без модификаций",
              "                else",
              "                {",
              "                    //Определяем расу орудия",
              "                    //А для кастомок сперва сверяем их оригинальную расу, ведь сделать это при записи значений в БД невозможно",
              "                    //Ведь все скрипты инициализируются в рандомном порядке, блять",
              "                    //Ведь сделать так, чтобы у них были приоритеты нельзя, блять",
              "                    //Так что приходится такой вот хуитой заниматься и чтобы не крашила НГ выводить часть рядовых запросов в тернкод",
              "                    //Охуенная, блять, система инициализации скриптов, обожаю её, сука!",
              "                    if(BMWeaponArray[itemNum, 0, 0] != 'Original')",
              "                    {",
              "                        str2 = GetCustomWeaponData(BMWeaponArray[itemNum, 0, 1], 'Availability');",
              "                        if(str2 == 'Free') int5 = 159;",
              "                        else if(str2 == 'CoalitionOnly') int5 = 31;",
              "                        else if(str2 == 'PirateOnly') int5 = 128;",
              "                        else if(str2 == 'MalocOnly') int5 = 1;",
              "                        else if(str2 == 'PelengOnly') int5 = 2;",
              "                        else if(str2 == 'PeopleOnly') int5 = 4;",
              "                        else if(str2 == 'FeiOnly') int5 = 8;",
              "                        else if(str2 == 'GaalOnly') int5 = 16;",
              "                        else int5 = BMWeaponArray[itemNum, 0, 2];",
              "                        //Если кастомное оружие запрещено к продаже (типы 'NotSold' и 'NotSoldAndNodeRepair'), то его Owner должен быть обязательно выставлен в Lang ЧР",
              "                    }",
              "                    else int5 = BMWeaponArray[itemNum, 0, 2];",
              "                    //Если шанс на выпадение неизвестной расы успешен",
              "                    if(RndObject(1, 100, shop) <= BMWeaponArray[itemNum, 0, 5]) int2 = 6;",
              "                    //Иначе подбираем расу из сета доступных для данного орудия",
              "                    else",
              "                    {",
              "                        int2 = -1;",
              "                        while(!(int5 & (1 << int2))) int2 = RndObject(0, 7, shop);",
              "                    }",
              "                    //Накладываем на вес орудия расовый модификатор",
              "                    if(int2 == Maloc) int3 = 1.6 * int3;",
              "                    else if(int2 == Peleng) int3 = 1.2 * int3;",
              "                    else if(int2 == People) int3 = 1.0 * int3;",
              "                    else if(int2 == Fei) int3 = 0.6 * int3;",
              "                    else if(int2 == Gaal) int3 = 0.8 * int3;",
              "                    else if(int2 == Kling) int3 = 1.0 * int3;",
              "                    else if(int2 == None) int3 = 0.8 * int3;",
              "                    else if(int2 == PirateClan) int3 = 1.3 * int3;",
              "",
              "                    //Перед созданием узнаём, является данное орудие оригинальным, либо кастомным",
              "                    //Если орудие оригинальное",
              "                    if(BMWeaponArray[itemNum, 0, 0] == 'Original') shop_gun = CreateEquipment(BMWeaponArray[itemNum, 0, 1], int3, GTL, int2);",
              "                    //Если кастомное",
              "                    else shop_gun = CreateCustomWeapon(BMWeaponArray[itemNum, 0, 1], int3, GTL, int2);",
              "",
              "                    //Если орудие оказалось доминаторским, то выбираем и подставляем ему ещё и серию",
              "                    if(int2 == 5)",
              "                    {",
              "                        int6 = -1;",
              "                        int5 = BMWeaponArray[itemNum, 0, 9];",
              "                        while(!(int5 & (1 << int6))) int6 = RndObject(0, 2, shop);",
              "                        ItemSubrace(shop_gun, int6);",
              "                    }",
              "",
              "                    //После чего проверяем, будет ли на него установлена кастомная раса(ы)",
              "                    if(RndObject(1, 100, shop) <= BMWeaponArray[itemNum, 0, 7])",
              "                    {",
              "                        tCheck = 0;",
              "                        str1 = BMWeaponArray[itemNum, 0, 8];",
              "                        ArrayClear(tempArray);",
              "                        //Начинаем проверку на количество кастомных фракций, заданных в Lang через запятую",
              "                        while(!tCheck)",
              "                        {",
              "                            int5 = findsubstr(str1, ',');",
              "                            //Если впереди ещё есть запятая",
              "                            if(~int5)",
              "                            {",
              "                                //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                                if(GetMainData('Data.Race.Emblem.2' + substr(str1, 0, int5)) != '') ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                                str1 = substr(str1, int5 + 1);",
              "                            }",
              "                            //Если серии закончились, либо в списке была всего одна",
              "                            else",
              "                            {",
              "                                //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                                if(GetMainData('Data.Race.Emblem.2' + str1) != '') ArrayAdd(tempArray, str1);",
              "                                //Завершаем цикл",
              "                                tCheck = 1;",
              "                            }",
              "                        }",
              "                        //Выбираем случайную кастомную фракцию из возможных (если фракция всего одна, то выберется она)",
              "                        if(ArrayDim(tempArray) > 1)",
              "                        {",
              "                            str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                            //Устанавливаем выбранную фракцию предмету",
              "                            EqCustomFaction(shop_gun, str1);",
              "                        }",
              "                    }",
              "",
              "                    //Вешаем на орудие акт или юзкод, если это нужно",
              "                    act_code_check = count(BMWeaponArray[itemNum, 0, 11]);",
              "                    use_code_check = count(BMWeaponArray[itemNum, 0, 12]);",
              "                    if(act_code_check || use_code_check)",
              "                    {",
              "                        if(act_code_check)",
              "                        {",
              "                            LinkItemToScript(shop_gun);",
              "                            ItemOnActCode(shop_gun, GenerateCodeStringFromBlock(BMWeaponArray[itemNum, 0, 11]));",
              "                        }",
              "                        if(use_code_check)",
              "                        {",
              "                            if(!ItemInScript(shop_gun)) LinkItemToScript(shop_gun);",
              "                            ItemOnUseCode(shop_gun, GenerateCodeStringFromBlock(BMWeaponArray[itemNum, 0, 12]));",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Если орудие получило неизвестную расу, накладываем на его стоимость соответствующий модификатор",
              "                if(int2 == 6)",
              "                {",
              "                    flt = CT('BlackMarketShopList.Weapon.NoneRaceCostCoef');",
              "                    if(flt <= 0) flt = 1.0;",
              "                    ItemCost(shop_gun, round(flt * ItemCost(shop_gun)));",
              "                }",
              "",
              "                //Аналогичная проверка для доминаторской расы",
              "                else if(int2 == 5)",
              "                {",
              "                    flt = CT('BlackMarketShopList.Weapon.DomRaceCostCoef');",
              "                    if(flt <= 0) flt = 1.0;",
              "                    ItemCost(shop_gun, round(flt * ItemCost(shop_gun)));",
              "                }",
              "",
              "                //Добавляем в магазин полностью готовое (и возможно акринированное) орудие",
              "                AddItemToShop(shop, shop_gun);",
              "",
              "                //Приводим переменную с ГТУ в норму",
              "                GTL = GalaxyTechLevel();",
              "            }",
              "        }",
              "    }",
              "    //Добавляем в магазин ЧР артефакты",
              "    //Определяем, сколько артефактов должно попасть в магазин в этот раз",
              "    int0 = RndObject(CT('BlackMarketShopList.MinArtefactsInStock'), CT('BlackMarketShopList.MaxArtefactsInStock'), shop);",
              "    if(int0)",
              "    {",
              "        //Проверяем, хватает ли артефактов в списке возможной выдачи для текущего ГТУ",
              "        if(BMArtsArray[0, GTL] < int0) int0 = BMArtsArray[0, GTL];",
              "        //Если нашли хоть один подходящий артефакт",
              "        if(int0)",
              "        {",
              "            str0 = '*0*';",
              "            itemNum = 0;",
              "            for(i = 1; i <= int0; i = i + 1)",
              "            {",
              "                //Выбираем случайный номер",
              "                //И проверяем, что артефакт с таким номером не выпадал в данном цикле ранее",
              "                while(~findsubstr(str0, '*' + itemNum + '*'))",
              "                {",
              "                    itemNum = RndObject(1, BMArtsArray[0, GTL], shop);",
              "                    //Здесь же учитываем спавн рейт артефакта",
              "                    if(RndObject(1, 100, shop) > BMArtsArray[itemNum, 2]) itemNum = 0;",
              "                }",
              "                //Запоминаем выпавший номер",
              "                str0 = str0 + itemNum + '*';",
              "                //Приступаем к созданию артефакта",
              "                //Сперва определяем расу будущего артефакта",
              "                //Если шанс на наложение неизвестной расы был успешен",
              "                if(RndObject(1, 100, shop) <= BMArtsArray[itemNum, 6]) int2 = 6;",
              "                //Если нет, то выбираем случайную расу из сета доступных",
              "                else",
              "                {",
              "                    int2 = -1;",
              "                    int5 = BMArtsArray[itemNum, 3];",
              "                    while(!(int5 & (1 << int2))) int2 = RndObject(0, 7, shop);",
              "                }",
              "                //Теперь узнаём тип предмета (возможные типы: 'OriginalArt' и 'CustomArt')",
              "                if(BMArtsArray[itemNum, 0] == 'OriginalArt')",
              "                {",
              "                    //И без дальнейших промедлений создаём артефакт",
              "                    dwd1 = CreateArt(BMArtsArray[itemNum, 1], int2);",
              "                }",
              "                else if(BMArtsArray[itemNum, 0] == 'CustomArt')",
              "                {",
              "                    //Проверяем, что артефакт всё ещё существует",
              "                    if(BlockExist('Artefacts.CustomArtefacts.' + BMArtsArray[itemNum, 1]))",
              "                    {",
              "                        //Определяем размер артефакта",
              "                        int3 = CustomArtSizeCalc(BMArtsArray[itemNum, 4]);",
              "                        //Определяем стоимость артефакта",
              "                        int4 = CustomArtCostCalc(BMArtsArray[itemNum, 5]);",
              "                        //И, наконец, создаём его",
              "                        dwd1 = CreateCustomArt(BMArtsArray[itemNum, 1], int3, int4, int2);",
              "                        //После чего проверяем, нужно ли будет заменить этот артефакт на юзлес при его покупке",
              "                        if(BMArtsArray[itemNum, 9] != '') CustomArtTextData(dwd1, 3, 'ReplaceTo: ' + BMArtsArray[itemNum, 9]);",
              "                    }",
              "                    else continue;",
              "                }",
              "                //Если артефакт оказался доминаторский, то выбираем и подставляем ему ещё и серию",
              "                if(int2 == 5)",
              "                {",
              "                    int6 = -1;",
              "                    int5 = BMArtsArray[itemNum, 10];",
              "                    while(!(int5 & (1 << int6))) int6 = RndObject(0, 2, shop);",
              "                    ItemSubrace(dwd1, int6);",
              "                }",
              "                //После чего проверяем, будет ли на него установлена кастомная раса(ы)",
              "                if(RndObject(1, 100, shop) <= BMArtsArray[itemNum, 7])",
              "                {",
              "                    tCheck = 0;",
              "                    str1 = BMArtsArray[itemNum, 8];",
              "                    ArrayClear(tempArray);",
              "                    //Начинаем проверку на количество кастомных фракций, заданных в Lang через запятую",
              "                    while(!tCheck)",
              "                    {",
              "                        int5 = findsubstr(str1, ',');",
              "                        //Если впереди ещё есть запятая",
              "                        if(~int5)",
              "                        {",
              "                            //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                            if(GetMainData('Data.Race.Emblem.2' + substr(str1, 0, int5)) != '') ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                            str1 = substr(str1, int5 + 1);",
              "                        }",
              "                        //Если серии закончились, либо в списке была всего одна",
              "                        else",
              "                        {",
              "                            //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                            if(GetMainData('Data.Race.Emblem.2' + str1) != '') ArrayAdd(tempArray, str1);",
              "                            //Завершаем цикл",
              "                            tCheck = 1;",
              "                        }",
              "                    }",
              "                    //Выбираем случайную кастомную фракцию из возможных (если фракция всего одна, то выберется она)",
              "                    if(ArrayDim(tempArray) > 1)",
              "                    {",
              "                        str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                        //Устанавливаем выбранную кастомную фракцию на артефакт",
              "                        EqCustomFaction(dwd1, str1);",
              "                    }",
              "                }",
              "                //Под конец накладываем на артефакт модификатор дополнительной рыночной стоимости",
              "                flt = CT('BlackMarketShopList.Artefacts.ArtAdditionalCostCoef');",
              "                if(flt <= 0) flt = 1.0;",
              "                //И модификатор стоимости, зависящий от расы артефакта",
              "                if(!int2) ItemCost(dwd1, round(0.65 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 1) ItemCost(dwd1, round(0.8 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 2) ItemCost(dwd1, round(1.0 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 3) ItemCost(dwd1, round(1.2 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 4) ItemCost(dwd1, round(1.4 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 5) ItemCost(dwd1, round(1.0 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 6) ItemCost(dwd1, round(1.5 * flt * ItemCost(dwd1)));",
              "                else if(int2 == 7) ItemCost(dwd1, round(0.75 * flt * ItemCost(dwd1)));",
              "                //Добавляем в магазин полностью готовый артефакт",
              "                AddItemToShop(shop, dwd1);",
              "            }",
              "        }",
              "    }",
              "    //Добавляем наборы для модификаций",
              "    //Определяем, сколько наборов должно попасть в магазин в этот раз",
              "    int0 = RndObject(CT('BlackMarketShopList.MinModificationsInStock'), CT('BlackMarketShopList.MaxModificationsInStock'), shop);",
              "    if(int0)",
              "    {",
              "        //Проверяем, хватает ли наборов в списке возможной выдачи для текущего ГТУ",
              "        if(BMModificationsArray[0, GTL] < int0) int0 = BMModificationsArray[0, GTL];",
              "        //Если нашли хоть один подходящий набор",
              "        if(int0)",
              "        {",
              "            str0 = '*0*';",
              "            itemNum = 0;",
              "            for(i = 1; i <= int0; i = i + 1)",
              "            {",
              "                //Выбираем случайный номер",
              "                //И проверяем, что набор с таким номером не выпадал в данном цикле ранее",
              "                while(~findsubstr(str0, '*' + itemNum + '*'))",
              "                {",
              "                    itemNum = RndObject(1, BMModificationsArray[0, GTL], shop);",
              "                    //Здесь же учитываем спавн рейт набора",
              "                    if(RndObject(1, 100, shop) > BMModificationsArray[itemNum, 2]) itemNum = 0;",
              "                }",
              "                //Запоминаем выпавший номер",
              "                str0 = str0 + itemNum + '*';",
              "                //Приступаем к созданию набора",
              "                //Сперва определяем расу будущего набора",
              "                //Если шанс на наложение неизвестной расы был успешен",
              "                if(RndObject(1, 100, shop) <= BMModificationsArray[itemNum, 4]) int2 = 6;",
              "                //Если нет, то выбираем случайную расу из сета доступных",
              "                else",
              "                {",
              "                    int2 = -1;",
              "                    int5 = BMModificationsArray[itemNum, 3];",
              "                    while(!(int5 & (1 << int2))) int2 = RndObject(0, 7, shop);",
              "                }",
              "                //И теперь без дальнейших промедлений создаём набор",
              "                dwd1 = CreateQuestItem(BMModificationsArray[itemNum, 0], int2);",
              "                //Если набор оказался доминаторский, то выбираем и подставляем ему ещё и серию",
              "                if(int2 == 5)",
              "                {",
              "                    int6 = -1;",
              "                    int5 = BMModificationsArray[itemNum, 8];",
              "                    while(!(int5 & (1 << int6))) int6 = RndObject(0, 2, shop);",
              "                    ItemSubrace(dwd1, int6);",
              "                }",
              "                //Проверяем, нужно ли производить замену стандартного описания предмета",
              "                if(BMModificationsArray[itemNum, 5] != '') UselessItemText(dwd1, CT(BMModificationsArray[itemNum, 5]));",
              "                //После чего проверяем, будет ли на него установлена кастомная раса(ы)",
              "                if(RndObject(1, 100, shop) <= BMModificationsArray[itemNum,6])",
              "                {",
              "                    tCheck = 0;",
              "                    str1 = BMModificationsArray[itemNum, 7];",
              "                    ArrayClear(tempArray);",
              "                    //Начинаем проверку на количество кастомных фракций, заданных в Lang через запятую",
              "                    while(!tCheck)",
              "                    {",
              "                        int5 = findsubstr(str1, ',');",
              "                        //Если впереди ещё есть запятая",
              "                        if(~int5)",
              "                        {",
              "                            //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                            if(GetMainData('Data.Race.Emblem.2' + substr(str1, 0, int5)) != '') ArrayAdd(tempArray, substr(str1, 0, int5));",
              "                            str1 = substr(str1, int5 + 1);",
              "                        }",
              "                        //Если серии закончились, либо в списке была всего одна",
              "                        else",
              "                        {",
              "                            //Перед занесением в список делаем проверку, на месте ли мини-иконка для предметов данной фракции",
              "                            if(GetMainData('Data.Race.Emblem.2' + str1) != '') ArrayAdd(tempArray, str1);",
              "                            //Завершаем цикл",
              "                            tCheck = 1;",
              "                        }",
              "                    }",
              "                    //Выбираем случайную кастомную фракцию из возможных (если фракция всего одна, то выберется она)",
              "                    if(ArrayDim(tempArray) > 1)",
              "                    {",
              "                        str1 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, shop)];",
              "                        //Устанавливаем выбранную кастомную фракцию на артефакт",
              "                        EqCustomFaction(dwd1, str1);",
              "                    }",
              "                }",
              "                //Добавляем в магазин полностью готовый набор",
              "                AddItemToShop(shop, dwd1);",
              "            }",
              "        }",
              "    }",
              "    //Закидываем в магазин ЧР микромодули",
              "    //Определяем, сколько микромодулей должно попасть в магазин в этот раз",
              "    int0 = RndObject(CT('BlackMarketShopList.MinMicromodulsInStock'), CT('BlackMarketShopList.MaxMicromodulsInStock'), shop);",
              "    if(int0)",
              "    {",
              "        i = BuildListOfMMByPriority(tempArray, 100, 0, 1);",
              "        //Если в массив был добавлен хотя бы один бонус",
              "        if(i)",
              "        {",
              "            if(i < int0) int0 = i;",
              "            str0 = '*-1*';",
              "            itemNum = -1;",
              "            for(i = 1; i <= int0; i = i + 1)",
              "            {",
              "                //Выбираем из массива случайный номер бонуса",
              "                //И проверяем, что микромодуль с таким номером не выпадал в данном цикле ранее",
              "                while(~findsubstr(str0, '*' + itemNum + '*'))",
              "                {",
              "                    itemNum = tempArray[RndObject(0, ArrayDim(tempArray) - 1, shop)];",
              "                }",
              "                //Если у данного ММ прописано особое условие появления его в магазине ЧР,",
              "                //то делаем проверку ещё и по этому условию",
              "                str1 = CT('MicroModuls.' + BonusNumInCfg(itemNum) + '.BMSpawnCondition');",
              "                if(str1 != '')",
              "                {",
              "                    tCheck = 0;",
              "                    ExecuteCodeFromString('if(' + Format(str1, '&&&', '){} else exit; if(', '') + ') tCheck = 1;');",
              "                    //Если проверка не пройдена, то подбираем другой ММ",
              "                    if(!tCheck)",
              "                    {",
              "                        i = i - 1;",
              "                        continue;",
              "                    }",
              "                }",
              "                //Запоминаем выпавший номер бонуса",
              "                str0 = str0 + itemNum + '*';",
              "                //Создаём микромодуль",
              "                dwd1 = CreateMM(itemNum);",
              "                //Повышаем цену микромодуля, умножая её на соответствующий уровню коэффициент из Lang",
              "                if(BonusPriority(itemNum) <= 30) flt = CT('BlackMarketShopList.MicroModuls.MMLevelOneCostCoef');",
              "                else if(BonusPriority(itemNum) <= 69) flt = CT('BlackMarketShopList.MicroModuls.MMLevelTwoCostCoef');",
              "                else flt = CT('BlackMarketShopList.MicroModuls.MMLevelThreeCostCoef');",
              "                if(flt <= 0) flt = 1.0;",
              "                flt = flt * max(1, 0.00125 * GalaxyMoney(0, 0));",
              "",
              "                ItemCost(dwd1, flt * ItemCost(dwd1));",
              "                //Добавляем в магазин готовый микромодуль",
              "                AddItemToShop(shop, dwd1);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  18,
          "#":  47,
          "Total.Lines":  373,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Автоматическое обновление массивов предметов для магазина ЧР",
              "//Срабатывает, только если параметр Version в папке BlackMarketShopList был изменён",
              "if(BMShopListUpdateCkeck != CT('BlackMarketShopList.Version'))",
              "{",
              "    UpdateBMShopList();",
              "    BMShopListUpdateCkeck = CT('BlackMarketShopList.Version');",
              "}",
              "",
              "//initEvent == 0 - ЧР недоступен;",
              "//initEvent == 1 - ЧР недоступен, но началось событие на получение к нему доступа;",
              "//initEvent == 2 - ЧР доступен, скрипт работает в штатном режиме;",
              "",
              "//Отладочное отображение счётчика до появления/ухода ЧР",
              "//NewsAdd(BMTurnCount - CurTurn());",
              "",
              "//Если уже было исполнено одно из условий на получение доступа к ЧР",
              "if(initEvent > 1)",
              "{",
              "    //Если ЧР в настоящий момент открыт и находится в одной из систем",
              "    if(BMIsOpen)",
              "    {",
              "        BlackMarket = GroupToShip(BM);",
              "        //Если ЧР ещё жив",
              "        if(BlackMarket)",
              "        {",
              "            BMCurStar = ShipStar(BlackMarket);",
              "            //Если система, в которой базируется ЧР не находится под атакой",
              "            if(!StarBattle(BMCurStar))",
              "            {",
              "                //Если время работы ЧР подходит к концу, садиться на него в предпоследний день игроку смысла нет, т.к. его оттуда всё равно сразу выкинет",
              "                if((BMTurnCount - 1) == CurTurn())",
              "                {",
              "                    NoLanding(BlackMarket, 1);",
              "                    if(ShipOrderObj(Player()) == BlackMarket)",
              "                    {",
              "                        if(ShipOrder(Player()) == 2) OrderNone(Player());",
              "                    }",
              "                }",
              "                //Если время работы ЧР полностью истекло",
              "                else if(BMTurnCount <= CurTurn())",
              "                {",
              "                    OrderTeleport(BlackMarket, BMCurStar, CoordX(BlackMarket), CoordY(BlackMarket));",
              "                    ShipOrderData1(BlackMarket, 1);",
              "",
              "                    //Переносим предметы со склада ЧР в хранилище склада ЧР",
              "                    for(j = StorageItems() - 1; j >= 0; j = j - 1)",
              "                    {",
              "                        cur_item = StorageItems(j);",
              "                        if(StorageItemLocation(j) != BlackMarket) continue;",
              "                        if(ItemType(cur_item) == t_UselessItem)",
              "                        {",
              "                            if(EquipmentImageName(cur_item) == 'HyperlinkFirstPart' || EquipmentImageName(cur_item) == 'HyperlinkSecondPart')",
              "                            {",
              "                                FreeItem(GetItemFromStorage(j));",
              "                                continue;",
              "                            }",
              "                        }",
              "",
              "                        BlackMarketStorageCount = BlackMarketStorageCount + 1;",
              "                        dwd0 = GetItemFromStorage(j);",
              "                        PutItemInVault('BlackMarketStorageVault_' + BlackMarketStorageCount, dwd0);",
              "                    }",
              "",
              "                    //Выгоняем все корабли из ангара перед телепортацией станции",
              "                    for(j = StarShips(BMCurStar) - 1; j >= 0; j = j - 1)",
              "                    {",
              "                        dwd0 = StarShips(BMCurStar, j);",
              "                        if(GetShipRuins(dwd0) == BlackMarket) OrderTakeOff(dwd0);",
              "                    }",
              "",
              "                    //Обновляем таймер до следующего возможного появления ЧР",
              "                    BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinClosingDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxClosingDays'), BlackMarket);",
              "                    BMIsOpen = 0;",
              "                    EtherDelete('BMOpened');",
              "                    //Отправляем инфошке команду о выводе уведомления об уходе ЧР в связи с истечением времени",
              "                    int5 = ShipFindCustomShipInfoByType(BlackMarket, 'BlackMarketJumpControlInfo');",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 1, 'BMClosedByTimeOut');",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 2, StarName(BMCurStar));",
              "                    //CustomEther('NewsSpecial', 0, 'BMClosedByTimeOut', \"Контрабандисты свернули <color=255,240,100>чёрный рынок</color> в системе <StarName(BMCurStar)>. О новом месте базирования станции вам будет сообщено позднее.\");",
              "                }",
              "            }",
              "            //Если на систему с ЧР напали",
              "            else",
              "            {",
              "                //Если ЧР сильно покоцали",
              "                if(HullDamage(BlackMarket) >= 66)",
              "                {",
              "                    NoLanding(BlackMarket, 1);",
              "                    if(ShipOrderObj(Player()) == BlackMarket)",
              "                    {",
              "                        if(ShipOrder(Player()) == 2) OrderNone(Player());",
              "                    }",
              "                    OrderTeleport(BlackMarket, BMCurStar, CoordX(BlackMarket), CoordY(BlackMarket));",
              "                    ShipOrderData1(BlackMarket, 1);",
              "",
              "                    //Переносим предметы со склада ЧР в хранилище склада ЧР",
              "                    for(j = StorageItems() - 1; j >= 0; j = j - 1)",
              "                    {",
              "                        cur_item = StorageItems(j);",
              "                        if(StorageItemLocation(j) != BlackMarket) continue;",
              "                        if(ItemType(cur_item) == t_UselessItem)",
              "                        {",
              "                            if(EquipmentImageName(cur_item) == 'HyperlinkFirstPart' || EquipmentImageName(cur_item) == 'HyperlinkSecondPart')",
              "                            {",
              "                                FreeItem(GetItemFromStorage(j));",
              "                                continue;",
              "                            }",
              "                        }",
              "",
              "                        BlackMarketStorageCount = BlackMarketStorageCount + 1;",
              "                        dwd0 = GetItemFromStorage(j);",
              "                        PutItemInVault('BlackMarketStorageVault_' + BlackMarketStorageCount, dwd0);",
              "                    }",
              "",
              "                    //Выгоняем все корабли из ангара перед телепортацией станции",
              "                    for(j = 0; j < StarShips(BMCurStar); j = j + 1)",
              "                    {",
              "                        dwd0 = StarShips(BMCurStar, j);",
              "                        if(GetShipRuins(dwd0) == BlackMarket) OrderTakeOff(dwd0);",
              "                    }",
              "",
              "                    //Обновляем таймер до следующего возможного появления ЧР",
              "                    BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinRepairingDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxRepairingDays'), BlackMarket);",
              "                    BMIsOpen = 0;",
              "                    EtherDelete('BMOpened');",
              "                    //Отправляем инфошке команду о выводе уведомления об уходе ЧР в связи с боевыми действиями",
              "                    int5 = ShipFindCustomShipInfoByType(BlackMarket, 'BlackMarketJumpControlInfo');",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 1, 'BMClosedByStarBattle');",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 2, StarName(BMCurStar));",
              "                    //CustomEther('NewsSpecial', 0, 'BMClosedByStarBattle', \"Начавшиеся в системе <StarName(BMCurStar)> военные действия спугнули контрабандистов, и те свернули <color=255,240,100>чёрный рынок</color> раньше намеченного срока. Уведомление о новом месте базирования станции будет отправлено вскоре после её выхода из гиперпространства.\");",
              "                }",
              "            }",
              "        }",
              "        //Если ЧР был уничтожен",
              "        else",
              "        {",
              "            //Проверяем галасобытия, ищем причастность игрока к уничтожению ЧР",
              "            //В том числе помощь в его уничтожении",
              "            tCheck = 0;",
              "            for(i = GalaxyEvents() - 1; i >= 0; i = i - 1)",
              "            {",
              "                int0 = 0;",
              "                str0 = GalaxyEventType(i);",
              "                if(str0 == 'PlayerKillsShip') int0 = GalaxyEventData(i, 2);",
              "                else if(str0 == 'PlayerTranclucatorKillsShip') int0 = GalaxyEventData(i, 2);",
              "                else if(str0 == 'PlayerTranclucatorAssistKillsShip') int0 = GalaxyEventData(i, 2);",
              "                else if(str0 == 'PlayerAssistKillsShip') int0 = GalaxyEventData(i, 2);",
              "",
              "                //Если таковую нашли, то посылаем игрока куда подальше и закрываем доступ к ЧР до конца игры",
              "                if(int0 == GBlackMarketId)",
              "                {",
              "                    BMTurnCount = CurTurn() + 100;",
              "                    BMIsOpen = 0;",
              "                    CustomEther('NewsSpecial', 0, 'BMDestroyedByPlayer', CT('Script.Mod_ExpBlackMarket_2.BMDestroyedByPlayer'));",
              "                    DeleteRewardByNom(Player(), 48);",
              "                    tCheck = 1;",
              "                    AllShipOut();",
              "                    break;",
              "                }",
              "            }",
              "",
              "            //Если игрок не был причастен к уничтожению ЧР",
              "            if(!tCheck)",
              "            {",
              "                //Создаём новый ЧР",
              "                BlackMarket = SpawnBMStation(StarNearbyStars(ShipStar(Player()), 1), -1);",
              "",
              "                //Обновляем таймер до следующего возможного появления ЧР",
              "                BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinRebuildingDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxRebuildingDays'), BlackMarket);",
              "                BMIsOpen = 0;",
              "                CustomEther('NewsSpecial', 0, 'BMDestroyed', Format(CT('Script.Mod_ExpBlackMarket_2.BMDestroyed'), '#0#', StarName(GalaxyStar(BMLastStar)), '#1#', CurBMName));",
              "            }",
              "        }",
              "    }",
              "    //Если ЧР в настоящий момент закрыт",
              "    else",
              "    {",
              "        BlackMarket = GroupToShip(BM);",
              "        //Если ЧР ещё жив",
              "        if(BlackMarket)",
              "        {",
              "            //Но уже наступило время его открытия",
              "            if(BMTurnCount <= CurTurn())",
              "            {",
              "                BlackMarket = GroupToShip(BM);",
              "                ArrayClear(tempArray);",
              "                //Делаем перебор секторов, подходящих для открытия ЧР",
              "                tCheck = 0;",
              "                for(i = 0; i < GalaxySectors(); i = i + 1)",
              "                {",
              "                    dwd0 = GalaxySectors(i);",
              "                    //Пропускаем скрытый пиратский сектор",
              "                    if(dwd0 == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "                    for(j = 0; j < ConStars(dwd0); j = j + 1)",
              "                    {",
              "                        BMCurStar = ConStar(dwd0, j);",
              "                        //Пропускаем доминаторские и кастомные (с кастомной фракцией) системы",
              "                        if(StarOwner(BMCurStar) == 1) continue;",
              "                        if(StarCustomFaction(BMCurStar) != '') continue;",
              "                        //Пропускаем системы, в которых в настоящее время идёт бой",
              "                        if(StarBattle(BMCurStar)) continue;",
              "                        //Пропускаем систему, в которой ЧР появлялся в прошлый раз",
              "                        if(BMCurStar == GalaxyStar(BMLastStar)) continue;",
              "                        //Заносим все подходящие сектора (в которых есть хоть одна подходящая система) во временный массив",
              "                        ArrayAdd(tempArray,dwd0);",
              "                        tCheck = 1;",
              "                    }",
              "                }",
              "",
              "                //После того как все подходящие сектора определены, выбираем из них случайный (если нашли хоть один)",
              "                if(tCheck)",
              "                {",
              "                    //После чего подбираем случайную систему из этого сектора",
              "                    dwd0 = tempArray[RndObject(1, ArrayDim(tempArray) - 1, BlackMarket)];",
              "                    ArrayClear(tempArray);",
              "                    for(j = 0; j < ConStars(dwd0); j = j + 1)",
              "                    {",
              "                        BMCurStar = ConStar(dwd0, j);",
              "                        //Пропускаем доминаторские и кастомные (с кастомной фракцией) системы",
              "                        if(StarOwner(BMCurStar) == 1) continue;",
              "                        if(StarCustomFaction(BMCurStar) != '') continue;",
              "                        //Пропускаем системы, в которых в настоящее время идёт бой",
              "                        if(StarBattle(BMCurStar)) continue;",
              "                        //Пропускаем систему, в которой ЧР появлялся в прошлый раз",
              "                        if(BMCurStar == GalaxyStar(BMLastStar)) continue;",
              "                        //Заносим все подходящие во временный массив",
              "                        ArrayAdd(tempArray, BMCurStar);",
              "                    }",
              "",
              "                    BMCurStar = tempArray[RndObject(1, ArrayDim(tempArray) - 1, BlackMarket)];",
              "",
              "                    //Вычисляем новые координаты для ЧР",
              "                    check = 0;",
              "                    while(!check)",
              "                    {",
              "                        flt2 = 0.01 * RndObject(0, 200, BlackMarket); //Вычислили угол",
              "                        //Вычислили радиус",
              "                        int0 = PlanetOrbitRadius(StarPlanets(BMCurStar, StarPlanets(BMCurStar) - 1)) + RndObject(150, 400, BlackMarket); //Расстояние от самой дальней планеты",
              "                        int1 = round(sin(flt2 * pi) * int0); //Координата X",
              "                        int0 = round(cos(flt2 * pi) * int0); //Координата Y",
              "",
              "                        //Убеждаемся, что позиция ЧР не пересекается с позицией другой станции в системе",
              "                        if(!StarRuins(BMCurStar)) check = 1;",
              "                        else for(j = StarRuins(BMCurStar) - 1; j >= 0; j = j - 1)",
              "                        {",
              "                            dwd0 = StarRuins(BMCurStar, j);",
              "                            if(DistCoords(CoordX(dwd0), CoordY(dwd0), int1, int0) > 200)",
              "                            {",
              "                                check = 1;",
              "                                break;",
              "                            }",
              "                        }",
              "                    }",
              "",
              "                    //Отправляем ЧР в выбранную систему",
              "                    dwd0 = ShipStar(BlackMarket);",
              "                    //После чего меняем его координаты и выводим из гиперпространства",
              "                    MakeShipEnterStar(BlackMarket, BMCurStar, dwd0, 0);",
              "                    OrderTeleport(BlackMarket, BMCurStar, int1, int0);",
              "                    ShipOrderData1(BlackMarket, 0);",
              "                    ShipCustomFaction(BlackMarket, '');",
              "                    NoLanding(BlackMarket, 0);",
              "",
              "                    //Чиним корпус, оборудование, артефакты и перезаряжаем всё ракетное оружие на ЧР",
              "                    dwd0 = ShipItems(BlackMarket, 0);",
              "                    HullHP(dwd0, ItemSize(dwd0));",
              "                    for(j = 0; j < ShipItems(BlackMarket); j = j + 1)",
              "                    {",
              "                        dwd0 = ShipItems(BlackMarket, j);",
              "                        ItemDurability(dwd0, 100);",
              "                    }",
              "                    for(j = 0; j < ShipArts(BlackMarket); j = j + 1)",
              "                    {",
              "                        dwd0 = ShipArts(BlackMarket, j);",
              "                        ItemDurability(dwd0, 100);",
              "                    }",
              "                    for(j = 1; j <= ShipCntWeapon(BlackMarket); j = j + 1)",
              "                    {",
              "                        dwd0 = ShipEqInSlot(BlackMarket, t_Weapon1, j);",
              "                        if(MissilesToRearm(dwd0)) MissilesToRearm(dwd0, MissilesToRearm(dwd0));",
              "                    }",
              "                    //Переносим предметы из хранилища склада ЧР на склад ЧР",
              "                    for(j = 1; j <= BlackMarketStorageCount; j = j + 1)",
              "                    {",
              "                        dwd0 = GetItemFromVault('BlackMarketStorageVault_' + j);",
              "                        AddItemToStorage(BlackMarket, dwd0);",
              "                    }",
              "                    BlackMarketStorageCount = 0;",
              "",
              "                    //На всякий случай сбрасываем отношение ЧР к игроку до \"нормального\"",
              "                    RelationToRanger(BlackMarket, Player(), 55);",
              "                    //Запоминаем систему, в которой сейчас появится ЧР",
              "                    BMLastStar = Id(BMCurStar) - 1;",
              "                    //Выставляем время нахождения ЧР в текущей системе",
              "                    BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinOpeningDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxOpeningDays'), BlackMarket);",
              "                    UpdateBMShop(BlackMarket);",
              "                    BMIsOpen = 1;",
              "                    //Отправляем инфошке команду о выводе уведомления об открытии ЧР в новой системе",
              "                    int5=ShipFindCustomShipInfoByType(BlackMarket, 'BlackMarketJumpControlInfo');",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 1, 'BMOpened');",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 2, StarName(BMCurStar));",
              "                    ShipCustomShipInfoTextData(BlackMarket, int5, 3, GameDateTxtByTurn(BMTurnCount + 2));",
              "                    //CustomEther('NewsSpecial', 0, 'BMOpened', \"Все заинтересованные контрабандисты приглашаются в систему <StarName(BMCurStar)>, где недавно открылся <color=255,240,100>чёрный рынок</color> <Name(BlackMarket)>. Станция будет находится в системе до <GameDateTxtByTurn(BMTurnCount + 1)> <color=255,240,100>года</color>, не упустите свой шанс!\");",
              "                }",
              "                //Если не нашли подходящих систем, то выставляем таймер до следующего возможного появления ЧР",
              "                else BMTurnCount = CurTurn() + RndObject(41, 56, BlackMarket);",
              "            }",
              "            //На всякий случай каждый ход сбрасываем счётчик длительности нахождения ЧР в гипере",
              "            else ShipOrderData1(BlackMarket, 50000);",
              "        }",
              "        //Если ЧР был (каким-то образом) уничтожен (даже находясь на незаселёнке или в гипере)",
              "        else",
              "        {",
              "            //Проверяем галасобытия, ищем причастность игрока к уничтожению ЧР",
              "            //В том числе помощь в его уничтожении",
              "            //Очищаем хранилище предметов со склада ЧР",
              "            for(i = 1; i <= BlackMarketStorageCount; i = i + 1)",
              "            {",
              "                dwd0 = GetItemFromVault('BlackMarketStorageVault_' + i);",
              "                FreeItem(dwd0);",
              "            }",
              "            BlackMarketStorageCount = 0;",
              "",
              "            tCheck = 0;",
              "            for(i = GalaxyEvents() - 1; i >= 0; i = i - 1)",
              "            {",
              "                int0 = 0;",
              "                if(GalaxyEventType(i) == 'PlayerKillsShip') int0 = GalaxyEventData(i, 2);",
              "                else if(GalaxyEventType(i) == 'PlayerTranclucatorKillsShip') int0 = GalaxyEventData(i, 2);",
              "                else if(GalaxyEventType(i) == 'PlayerTranclucatorAssistKillsShip') int0 = GalaxyEventData(i, 2);",
              "                else if(GalaxyEventType(i) == 'PlayerAssistKillsShip') int0 = GalaxyEventData(i, 2);",
              "",
              "                //Если таковую нашли, то посылаем игрока куда подальше и закрываем доступ к ЧР до конца игры",
              "                if(int0 == GBlackMarketId)",
              "                {",
              "                    BMTurnCount = CurTurn() + 100;",
              "                    BMIsOpen = 0;",
              "                    CustomEther('NewsSpecial', 0, 'BMDestroyedByPlayer', CT('Script.Mod_ExpBlackMarket_2.BMDestroyedByPlayer'));",
              "                    DeleteRewardByNom(Player(), 48);",
              "                    tCheck = 1;",
              "                    AllShipOut();",
              "                    break;",
              "                }",
              "            }",
              "",
              "            //Если игрок не был причастен к уничтожению ЧР",
              "            if(!tCheck)",
              "            {",
              "                //Создаём новый ЧР",
              "                BlackMarket = SpawnBMStation(StarNearbyStars(ShipStar(Player()), 1), -1);",
              "                //Обновляем таймер до следующего возможного появления ЧР",
              "                BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinRebuildingDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxRebuildingDays'), BlackMarket);",
              "                BMIsOpen = 0;",
              "                CustomEther('NewsSpecial', 0, 'BMDestroyedInHyper', Format(CT('Script.Mod_ExpBlackMarket_2.BMDestroyedInHyper'), '#0#', CurBMName));",
              "            }",
              "        }",
              "    }",
              "}",
              "//Если ещё ни одно из условий на получение доступа к ЧР не выполнено",
              "else",
              "{",
              "    if(!initEvent)",
              "    {",
              "        //Фиксируем старт события на получение доступа к ЧР в скрипте Mod_ExpBlackMarket_1",
              "        if(!ExpBlackMarketGlobal)",
              "        {",
              "            //Создаём ЧР и \"пригоняем\" его в нужную систему",
              "            BMLastStar = Id(ShipStar(Player())) - 1;",
              "            BlackMarket = SpawnBMStation(StarNearbyStars(GalaxyStar(BMLastStar), 1), GalaxyStar(2));",
              "            initEvent = 1;",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  370,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  56,
          "Total.Lines":  55,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "dword cur_ruin = GetShipRuins(Player());",
              "if(cur_ruin)",
              "{",
              "    if(ShipType(cur_ruin) == 'PB')",
              "    {",
              "        if(initEvent < 2)",
              "        {",
              "            //Если от начала игры прошло не менее двух лет",
              "            if(CurTurn() > 1432)",
              "            {",
              "                //Если игроком извлечено достаточно чистой прибыли за контрабандную торговлю",
              "                if(ShipCustomShipInfoData(Player(), 'SmugglingCountInfo', 3) >= 10000 * (GalaxyDiffLevels(7) / 50))",
              "                {",
              "                    int6 = round(2.5 * GalaxyMoney(4)) * (GalaxyDiffLevels(1) / 50);",
              "                    AddDialogInject('BuyBMAccess', CT('Script.Mod_ExpBlackMarket_2.OfferToBuyBMAccess'), CT('Script.Mod_ExpBlackMarket_2.TellMeHowToBuyBMAccess'), 0);",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else if(ShipType(cur_ruin) == 'BM')",
              "    {",
              "        if(!IsScriptActive('Mod_ExpBlackMarket_1'))",
              "        {",
              "            //Вешаем пустой оверрайд",
              "            AddDialogOverride('BMLock', 100);",
              "            //И блокируем все возможности взаимодействия с текстом или правителем для игрока на ЧР",
              "            InterfaceState('RuinsTalk', 'PR_Gov', 0);",
              "            InterfaceState('RuinsTalk', 'PR_BMGovBlock', 1);",
              "            InterfaceState('RuinsTalk', 'PanelTalk', 0);",
              "            InterfaceState('RuinsTalk', 'PM_EndTurn', 0);",
              "            InterfaceState('RuinsTalk', 'RT_EndTurn_Block', 1);",
              "            //Выключаем панель склада и заменяем её картинкой-заглушкой",
              "            //InterfaceState('Ship', 'SC_Storage_Panel', 0);",
              "            //InterfaceState('Ship', 'StorageLockImage', 1);",
              "            //InterfaceState('Ship', 'StorageLabel', 0);",
              "            //InterfaceState('Ship', 'ShipToStorage', 0);",
              "            //InterfaceState('Ship', 'StorageToShip', 0);",
              "            //Также выключаем панель Ассистента",
              "            InterfaceState('RuinsTalk', 'AstAddRuins', 0);",
              "            //Добавляем игроку инфошку для изменения стоимости предметов, купленных в магазине оборудования ЧР",
              "            if(ShipFindCustomShipInfoByType(Player(), 'BlackMarket_EquipmentShopBuysInfo') == -1) ShipAddCustomShipInfo(Player(), 'BlackMarket_EquipmentShopBuysInfo', 'NoShow', Id(cur_ruin));",
              "        }",
              "        else",
              "        {",
              "            //Выставляем статус и таймер до закрытия чёрного рынка в первый раз",
              "            //При выполнении игроком условия на доступ к ЧР, путём спасения контрабандиста",
              "            if(!BMIsOpen)",
              "            {",
              "                initEvent = 2; //Выставляем маркер о полноценном открытии ЧР для игрока",
              "                BMIsOpen = 1;",
              "                BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinOpeningAfterStartEventDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxOpeningAfterStartEventDays'), cur_ruin);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  61,
          "#":  68,
          "Total.Lines":  14,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player(), ShipMoney(Player()) - int6);",
              "Sound('Sound.Sell');",
              "//Выдаём игроку символический значок доступа и запускаем таймер до первого появления ЧР (также создаём сам ЧР, если нужно)",
              "dwd0 = GroupToShip(BM);",
              "if(!dwd0) dwd0 = SpawnBMStation(StarNearbyStars(ShipStar(Player()), 1), -1);",
              "//Ставим в инфошку ЧР маркер, что рынок в данный момент закрыт",
              "ShipCustomShipInfoData(dwd0, 'BlackMarketJumpControlInfo', 1, 1);",
              "initEvent = 2;",
              "//Делаем пометку для другого скрипта, чтобы исключить случайное исполнение сразу двух разных условий на получение доступа к ЧР (иначе всё, скорее всего, пошло бы криво-косо)",
              "ExpBlackMarketGlobal = 1;",
              "GiveRewardByNom(Player(), 48);",
              "BMTurnCount = CurTurn() + RndObject(CT('BlackMarketShopList.BlackMarketTurnDelays.MinClosingAfterBuyAccessDays'), CT('BlackMarketShopList.BlackMarketTurnDelays.MaxClosingAfterBuyAccessDays'), dwd0);",
              "str0 = '</color>' + CT('Script.Mod_ExpBlackMarket_2.BMAccessHereItIs');",
              "str1 = '</color>' + CT('Script.Mod_ExpBlackMarket_2.BMAccessThanks');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  59,
          "#":  72,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str0 = '</color>' + Format(CT('Script.Mod_ExpBlackMarket_2.BMAccessExplain'), '#0#', int6);",
              "str1 = '</color>' + Format(CT('Script.Mod_ExpBlackMarket_2.BMAccessAgreed'), '#0#', int6);",
              "str2 = '</color>' + CT('Script.Mod_ExpBlackMarket_2.BMAccessNoWay');",
              "str3 = '</color>' + CT('Script.Mod_ExpBlackMarket_2.BMAccessAsYourWish');"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  240,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  240,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  2,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  240,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  18,
          "#":  16,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PirateWin()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  410,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  18,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ShipIsTakeoff(Player())"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  60,
          "#":  65,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= int6"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  60,
          "#":  69,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < int6"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  60,
          "#":  71,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "BMState",
          "Pos.x":  240,
          "Pos.y":  360,
          "Parent":  -1,
          "#":  4,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  310,
          "Pos.y":  360,
          "Parent":  -1,
          "#":  50,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "BMTurnCount",
          "Pos.x":  80,
          "Pos.y":  130,
          "Parent":  -1,
          "#":  7,
          "Var.Type":  "Int",
          "Init":  "500000000",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "BMShopListUpdateCkeck",
          "Pos.x":  80,
          "Pos.y":  70,
          "Parent":  -1,
          "#":  8,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GBlackMarketId",
          "Pos.x":  370,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  9,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "CurBMName",
          "Pos.x":  80,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  10,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMHullsArray",
          "Pos.x":  80,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  11,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMEquipmentArray",
          "Pos.x":  80,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  12,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMWeaponArray",
          "Pos.x":  80,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  13,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMArtsArray",
          "Pos.x":  80,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  14,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMModificationsArray",
          "Pos.x":  80,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  15,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "flt",
          "Pos.x":  80,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  19,
          "Var.Type":  "Float",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "flt2",
          "Pos.x":  140,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  20,
          "Var.Type":  "Float",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int0",
          "Pos.x":  80,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  21,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int1",
          "Pos.x":  140,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  22,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int2",
          "Pos.x":  80,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  23,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int3",
          "Pos.x":  140,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  24,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int5",
          "Pos.x":  140,
          "Pos.y":  370,
          "Parent":  -1,
          "#":  25,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int4",
          "Pos.x":  80,
          "Pos.y":  370,
          "Parent":  -1,
          "#":  26,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "dwd0",
          "Pos.x":  10,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  27,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "int6",
          "Pos.x":  80,
          "Pos.y":  390,
          "Parent":  -1,
          "#":  28,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "dwd1",
          "Pos.x":  10,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  29,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "dwd2",
          "Pos.x":  10,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  30,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "str0",
          "Pos.x":  80,
          "Pos.y":  420,
          "Parent":  -1,
          "#":  31,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "str1",
          "Pos.x":  140,
          "Pos.y":  420,
          "Parent":  -1,
          "#":  32,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "str3",
          "Pos.x":  140,
          "Pos.y":  440,
          "Parent":  -1,
          "#":  33,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "str2",
          "Pos.x":  80,
          "Pos.y":  440,
          "Parent":  -1,
          "#":  34,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GTL",
          "Pos.x":  80,
          "Pos.y":  470,
          "Parent":  -1,
          "#":  35,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GTL_M",
          "Pos.x":  80,
          "Pos.y":  490,
          "Parent":  -1,
          "#":  36,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tCheck",
          "Pos.x":  80,
          "Pos.y":  570,
          "Parent":  -1,
          "#":  37,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tCheck_M",
          "Pos.x":  80,
          "Pos.y":  590,
          "Parent":  -1,
          "#":  38,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_mod_GTL",
          "Pos.x":  80,
          "Pos.y":  510,
          "Parent":  -1,
          "#":  39,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "itemNum",
          "Pos.x":  80,
          "Pos.y":  530,
          "Parent":  -1,
          "#":  40,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "modNum",
          "Pos.x":  80,
          "Pos.y":  550,
          "Parent":  -1,
          "#":  41,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  140,
          "Pos.y":  390,
          "Parent":  -1,
          "#":  42,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  170,
          "Pos.y":  390,
          "Parent":  -1,
          "#":  43,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "innerCount",
          "Pos.x":  80,
          "Pos.y":  630,
          "Parent":  -1,
          "#":  44,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tempArray",
          "Pos.x":  80,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  45,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BlackMarket",
          "Pos.x":  80,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  48,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "initEvent",
          "Pos.x":  80,
          "Pos.y":  90,
          "Parent":  -1,
          "#":  51,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMIsOpen",
          "Pos.x":  80,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  52,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMCurStar",
          "Pos.x":  -20,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  57,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BMLastStar",
          "Pos.x":  -20,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  58,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BlackMarketStorageCount",
          "Pos.x":  80,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  73,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "check",
          "Pos.x":  80,
          "Pos.y":  610,
          "Parent":  -1,
          "#":  74,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_item",
          "Pos.x":  10,
          "Pos.y":  370,
          "Parent":  -1,
          "#":  75,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  18,
      "End":  16,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  16,
      "End":  17,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  18,
      "End":  47,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  53,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  54,
      "End":  55,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  64,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  63,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  65,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  61,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  66,
      "End":  67,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  61,
      "End":  68,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  68,
      "End":  66,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  69,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  69,
      "End":  70,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  71,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  71,
      "End":  62,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  59,
      "End":  72,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  72,
      "End":  60,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "BlockPar.EC.Total.Strings":  2,
  "BlockPar.EC":  
  [
    {
      "#":  "0",
      "String":  ""    
    },
    {
      "#":  "1",
      "String":  "<0>"    
    }  
  ]
}