{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -371,
  "ViewPos.y":  -409,
  "ScriptName":  "Mod_ExpRepair",
  "ScriptFileOut":  "H:\\Mod_ExpRepair.scr",
  "ScriptTextOut":  "H:\\Mod_ExpRepair.txt",
  "GraphPoint.Count":  95,
  "GraphLink.Count":  54,
  "GraphRectText.Count":  1,
  "Variables.Count":  40,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  1,
  "Groups.Count":  1,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  6,
  "DialogMessages.Count":  7,
  "DialogAnswers.Count":  3,
  "Operations.Count":  20,
  "Statements.Count":  14,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "DialogAnswers":      
      [
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  42,
          "#":  43,
          "Msg":  "",
          "AMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  54,
          "#":  55,
          "Msg":  "",
          "AMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  79,
          "#":  80,
          "Msg":  "",
          "AMsg.Num":  "2"        
        }      
      ],
      "DialogMessages":      
      [
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  41,
          "#":  42,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  45,
          "#":  46,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  53,
          "#":  54,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  67,
          "#":  68,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  72,
          "#":  73,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  90,
          "#":  79,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "5"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  82,
          "#":  83,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "6"        
        }      
      ],
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "GetBack",
          "Pos.x":  -180,
          "Pos.y":  60,
          "Parent":  44,
          "#":  30        
        },
        {
          "Type":  "TDialog",
          "Name":  "RepairDialog",
          "Pos.x":  -30,
          "Pos.y":  -250,
          "Parent":  -1,
          "#":  44        
        },
        {
          "Type":  "TDialog",
          "Name":  "RepairPlayer",
          "Pos.x":  -100,
          "Pos.y":  0,
          "Parent":  47,
          "#":  48        
        },
        {
          "Type":  "TDialog",
          "Name":  "RepairPartner",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  47,
          "#":  49        
        },
        {
          "Type":  "TDialog",
          "Name":  "RepairYes",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  74,
          "#":  75        
        },
        {
          "Type":  "TDialog",
          "Name":  "RepairNo",
          "Pos.x":  70,
          "Pos.y":  30,
          "Parent":  74,
          "#":  76        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  2,
          "#":  3,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  0,
          "#":  5,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  7,
          "#":  6,
          "Total.Lines":  19,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "cur_ruin = GetShipRuins(Player());",
              "if(cur_ruin)",
              "{",
              "    if(!PlayerBridge())",
              "    {",
              "        CurRuinTypeStr = ShipType(cur_ruin);",
              "        CurRuinTypeStr = Format(CurRuinTypeStr, '_licensed', '', '');",
              "        if(CurRuinTypeStr == 'WB' || CurRuinTypeStr == 'SB' || CurRuinTypeStr == 'PB')",
              "        {",
              "            AddDialogBlock('Mod_alter_repair_DialogBlock', 2);",
              "            AddDialogInject('RepairDialog', '', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepair'), 1);",
              "        }",
              "        else if(CurRuinTypeStr == 'TC')",
              "        {",
              "            //Приоритет подстановки диалога здесь другой",
              "            AddDialogInject('RepairDialog', '', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepair'), 5);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  5,
          "#":  7,
          "Total.Lines":  44,
          "Code.Type":  "Init",
          "Code":          
          [
              "items=newarray(1);",
              "ship=newarray(1);",
              "nodes_count_array=newarray(1);",
              "",
              "//Функция расчёта стоимости ремонта корпуса",
              "function RepHullCostCalc(FullCost,FullSize,CurHP)",
              "{",
              "    //Вычисляем damageProc",
              "    float FloatVar=100.0/FullSize*(FullSize-CurHP);",
              "    //Целочисленное деление",
              "    int IntVar=FullCost/40;",
              "    float FloatVar2=IntVar;",
              "    //Завершаем подсчёт",
              "    FloatVar2=FloatVar2/100*FloatVar+10;",
              "    //Приступаем к округлению до десятков",
              "    //1) Банковское округление, 2) Целочисленное деление на 10, 3) Умножение на 10",
              "    IntVar=round(FloatVar2);",
              "    IntVar=IntVar/10;",
              "    result=IntVar*10;",
              "}",
              "//Функция расчёта стоимости ремонта: mod == 7 - для обычных предметов, mod == 5 - для артефактов",
              "function RepCostCalc(cost,durab,mod)",
              "{",
              "    //Производим целочисленные деления",
              "    int IntVar=0;",
              "    if(mod==7)IntVar=cost/20;",
              "    if(mod==5)IntVar=cost/10;",
              "    int IntVar2=cost/mod;",
              "    //Записываем получившееся целое в \"дробную\" переменную для дальнейшей подстановки",
              "    float FloatVar=IntVar2;",
              "    //Важно наличие \"дробной\" переменной в начале вычисления для преобразования всей операции в дробный формат",
              "    float FloatVar2=(FloatVar/100*(100-durab))+10;",
              "    //Завершаем первичное вычисление",
              "    FloatVar=FloatVar2+IntVar;",
              "    //Приступаем к округлению до десятков",
              "    //1) Банковское округление, 2) Целочисленное деление на 10, 3) Умножение на 10",
              "    IntVar=round(FloatVar);",
              "    IntVar=IntVar/10;",
              "    IntVar=IntVar*10;",
              "    //Если предмет полностью изношен, умножаем цену на 1.3",
              "    if(durab<1)IntVar=round(1.3*IntVar);",
              "    if(mod==7)result=IntVar;",
              "    if(mod==5)result=IntVar*2;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  30,
          "#":  41,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.DeclainRepair');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  44,
          "#":  45,
          "Total.Lines":  64,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(ship);",
              "ArrayClear(nodes_count_array);",
              "",
              "CurRuinTypeStr = ShipType(cur_ruin);",
              "if(",
              "   CurRuinTypeStr == 'SB' ||",
              "   CurRuinTypeStr == 'PB' ||",
              "   CurRuinTypeStr == 'TC' ||",
              "   ~findsubstr(CurRuinTypeStr, '_licensed')",
              "   ) non_standard_repair = 1;",
              "else non_standard_repair = 0;",
              "CurRuinTypeStr = Format(CurRuinTypeStr, '_licensed', '', '');",
              "",
              "if(CurRuinTypeStr == 'TC') max_durability_to_repair = 100;",
              "else max_durability_to_repair = 90;",
              "",
              "//Цикл, пока не закончатся все напарники рейнджеры",
              "for(i = 0; i < ShipPartners(Player()); i = i + 1)",
              "{",
              "    cur_ship = ShipPartners(Player(), i);",
              "    if(GetShipRuins(cur_ship) == GetShipRuins(Player())) ArrayAdd(ship, cur_ship);",
              "}",
              "//цикл, пока не закончатся все напарники пираты",
              "for(i = 0; i < PlayerPirates(); i = i + 1)",
              "{",
              "    cur_ship = PlayerPirates(i);",
              "    if(GetShipRuins(cur_ship) == GetShipRuins(Player())) ArrayAdd(ship, cur_ship);",
              "}",
              "//Цикл, пока не закончатся все активные транки",
              "for(i = 0; i < PlayerTranclucators(); i = i + 1)",
              "{",
              "    cur_ship=PlayerTranclucators(i);",
              "    if(GetShipRuins(cur_ship) == GetShipRuins(Player())) ArrayAdd(ship, cur_ship);",
              "}",
              "//Цикл, пока не закончатся все артефакты в трюме (ищем транков)",
              "for(i = 0; i < ShipArts(Player()); i = i + 1)",
              "{",
              "    cur_item = ShipArts(Player(), i);",
              "    if(ItemType(cur_item) == t_ArtefactTranclucator) ArrayAdd(ship, ArtTranclucatorToShip(cur_item));",
              "}",
              "",
              "//Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "if(GetGameOptions('FontDialog') == '0')",
              "{",
              "    DefSplt = '</color>-----------------------------------------------------------';",
              "    IndentStr = CT('FormInfo.td_310') + CT('FormInfo.align_right');",
              "}",
              "else if(GetGameOptions('FontDialog') == '1')",
              "{",
              "    DefSplt = '</color>------------------------------------------';",
              "    IndentStr = CT('FormInfo.td_312') + CT('FormInfo.align_right');",
              "}",
              "else if(GetGameOptions('FontDialog') == '2')",
              "{",
              "    DefSplt = '</color>-------------------------------------------';",
              "    IndentStr = CT('FormInfo.td_324') + CT('FormInfo.align_right');",
              "}",
              "else //if(GetGameOptions('FontDialog') == '3')",
              "{",
              "    DefSplt = '</color>--------------------------------------';",
              "    IndentStr = CT('FormInfo.td_325') + CT('FormInfo.align_right');",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.Greeting'), '<SplitLine'+'>', DefSplt);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  46,
          "#":  47,
          "Total.Lines":  79,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ремонт текущего оборудования",
              "InjectAnswer('RepairPlayer', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepairCurrent'), 0);",
              "",
              "//Ремонт оборудования в комплектациях (если ещё не созданы, то заблокирован)",
              "check = 0;",
              "for(int i = 1; i <= 9; i = i + 1) if(PlayerEqSet(i)) check = check + 1;",
              "tstr1 = CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepairSets');",
              "if(check <= 1) AddDialogBlock(tstr1, 1);",
              "InjectAnswer('RepairPlayer', tstr1, 1);",
              "",
              "//Ремонт артов (если артов нет или станция не умеет их чинить, то заблокирован)",
              "tstr1 = CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepairArts');",
              "if(!ShipArts(Player()) || !non_standard_repair)",
              "{",
              "    if(non_standard_repair) AddDialogBlock(tstr1, 1);",
              "    else AddDialogBlock(tstr1, 2);",
              "}",
              "InjectAnswer('RepairPlayer', tstr1, 2);",
              "",
              "//Ремонт зондов (если зондов нет, то заблокирован)",
              "check = 0;",
              "for(i = 1; i < ShipItems(Player()); i = i + 1)",
              "{",
              "    cur_item = ShipItems(Player(), i);",
              "    //Пропускаем всё, кроме зондов",
              "    if(ItemType(cur_item) != t_Satellite) continue;",
              "    check = 1;",
              "    break;",
              "}",
              "tstr1 = CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepairProbes');",
              "if(!check) AddDialogBlock(tstr1, 1);",
              "InjectAnswer('RepairPlayer', tstr1, 3);",
              "",
              "//Ремонт всего доступного",
              "InjectAnswer('RepairPlayer', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRepairAll'), 4);",
              "",
              "if(ArrayDim(ship) - 1)",
              "{",
              "    for(i = 1; i < ArrayDim(ship); i = i + 1)",
              "    {",
              "        cur_ship = ship[i];",
              "",
              "        tstr1 = ShipType(cur_ship);",
              "        if(ShipTypeN(cur_ship) == t_Tranclucator)",
              "        {",
              "            tstr1 = Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskTrancRepair'), '<ShipName'+'>', ShipName(cur_ship));",
              "        }",
              "        else if(tstr1 == 'Merc' || tstr1 == 'Freelancer')",
              "        {",
              "            tstr1 = Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskMercRepair'), '<ShipName'+'>', ShipName(cur_ship));",
              "        }",
              "        else if(tstr1 == 'FemRanger')",
              "        {",
              "            tstr1 = Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskSpecRepair'), '<ShipName'+'>', ShipName(cur_ship));",
              "        }",
              "        else if(tstr1 == 'Rebel')",
              "        {",
              "            tstr1 = Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskRebelRepair'), '<ShipName'+'>', ShipName(cur_ship));",
              "        }",
              "        else if(ShipTypeN(cur_ship) == t_Pirate || tstr1 == 'RangerPirate' || tstr1 == 'RangerPirateExplorer')",
              "        {",
              "            tstr1 = Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskPirateRepair'), '<ShipName'+'>', ShipName(cur_ship));",
              "        }",
              "        else",
              "        {",
              "            tstr1 = Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerAskPartnerRepair'), '<ShipName'+'>', ShipName(cur_ship));",
              "        }",
              "",
              "        if(~findsubstr(tstr1, '[Blocked]'))",
              "        {",
              "            tstr1 = DeleteTags(Format(tstr1, ' [Blocked]', '', ''));",
              "            AddDialogBlock(tstr1);",
              "        }",
              "        InjectAnswer('RepairPartner', tstr1, cur_ship);",
              "    }",
              "}",
              "",
              "InjectAnswer('GetBack', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerDeclainRepair'), -1);",
              "cur_ship = 0; //Важно, это обнуление не убирать!"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  49,
          "#":  50,
          "Total.Lines":  17,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!cur_ship) cur_ship = GAnswerData;",
              "TrankRep = 0;",
              "if(ShipTypeN(cur_ship) == t_Tranclucator) TrankRep = 1;",
              "",
              "item_cost = 0; //Стоимость оборудки",
              "art_cost = 0; //Стоимость артов",
              "domik_wpn_cost = 0; //Стоимость дом. оружия",
              "nod_cost = 0; //Всего нодов",
              "nod_cost_float = 0;",
              "cost = 0; //Общая стоимость",
              "max_duration = 0;",
              "bad_equipments = 0; //Переменная, обозначающая тяжёлые повреждения",
              "bad_equipments_count = 0;",
              "total = 0;",
              "//Данный маркер получает особое значение при выборе ремонта только артефактов, либо только зондов",
              "TrankRep = 0;",
              "SpecialRepairStr = 'None';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  50,
          "#":  51,
          "Total.Lines":  90,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(items);",
              "//Перебор всей оборудки корабля",
              "for(i = 0; i < ShipItems(cur_ship); i = i + 1)",
              "{",
              "    cur_item = ShipItems(cur_ship, i);",
              "    if(!ShipCanRepairEq(cur_ship, cur_item)) continue;",
              "    //Исключаем акриновые предметы с тэгом \"Неремонтопригоден\"",
              "    if(~EqSpecial(cur_item))",
              "    {",
              "        if(CT('MicroModuls.' + BonusNumInCfg(EqSpecial(cur_item)) + '.NonRepairable') == 1) continue;",
              "    }",
              "    //0-й предмет всегда корпус",
              "    if(!i)",
              "    {",
              "        bad_equipments = bad_equipments + HullDamage(cur_ship);",
              "        bad_equipments_count = bad_equipments_count + 1;",
              "        //Если корпус повреждён хотя бы на 1 единицу",
              "        if(ItemSize(cur_item) > HullHP(cur_item))",
              "        {",
              "            //Подставляем функцию вычисления стоимости ремонта корпуса",
              "            item_cost = RepHullCostCalc(ItemCost(cur_item), ItemSize(cur_item), HullHP(cur_item));",
              "            max_duration = HullDamage(cur_ship); //Запомнили % повреждения корпуса",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "        continue;",
              "    }",
              "    if(!ItemIsInUse(cur_item)) continue; //Если оборудование используется в текущем сете",
              "    if(ItemType(cur_item) > t_Hull && ItemType(cur_item) < t_Protoplasm)",
              "    {",
              "        bad_equipments = bad_equipments + (100 - ItemDurability(cur_item));",
              "        bad_equipments_count = bad_equipments_count + 1;",
              "        //Если прочность оборудования меньше указанного процента (иначе поломку не зафиксируют)",
              "        if(ItemDurability(cur_item) < max_durability_to_repair)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 7 - значит считаем для предмета",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 7);",
              "            item_cost = item_cost + variable; //Продолжаем суммировать стоимость ремонта",
              "            ArrayAdd(items, cur_item);",
              "",
              "            //Проверка на нестандартное оружие из оригинальной игры",
              "            if(ItemType(cur_item) >= t_Weapon13 && ItemType(cur_item) <= t_Weapon15)",
              "            {",
              "                if(non_standard_repair) //Пропускаем нестандартное оригинальное оружие, если станция не умеет его чинить",
              "                {",
              "                    domik_wpn_cost = domik_wpn_cost + variable;//отдельно считаем стоимость ремонта дом. оружия",
              "                    nod_cost_float = nod_cost_float + (0.0025 * variable);",
              "                    item_cost = item_cost - variable;",
              "                }",
              "            }",
              "            //Проверка на кастомное оружие с ремонтом только за ноды",
              "            else if(ItemType(cur_item) == t_CustomWeapon)",
              "            {",
              "                if(GetCustomWeaponData(CustomWeaponType(cur_item), 'Availability') == 'NotSoldAndNodeRepair')",
              "                {",
              "                    if(non_standard_repair) //Пропускаем нестандартное кастомное оружие, если станция не умеет его чинить",
              "                    {",
              "                        domik_wpn_cost = domik_wpn_cost + variable; //Отдельно считаем стоимость ремонта дом. оружия",
              "                        nod_cost_float = nod_cost_float + (0.0025 * variable);",
              "                        item_cost = item_cost - variable;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Запоминаем процент самой изношенной оборудки",
              "    if(max_duration < 100 - ItemDurability(cur_item)) max_duration = 100 - ItemDurability(cur_item);",
              "}",
              "if(non_standard_repair) //Пропускаем артефакты, если станция не умеет их чинить",
              "{",
              "    //Перебор всех артов",
              "    for(i = 0; i < ShipArts(cur_ship); i = i + 1)",
              "    {",
              "        cur_item = ShipArts(cur_ship, i);",
              "        if(!ItemCanBeBroken(cur_item)) continue; //Пропуск если арт не может сломаться",
              "        if(!ItemIsInUse(cur_item)) continue;",
              "        bad_equipments = bad_equipments + (100 - ItemDurability(cur_item));",
              "        bad_equipments_count = bad_equipments_count + 1;",
              "        //Если прочность артефакта меньше указанного процента (иначе поломку не зафиксируют)",
              "        if(ItemDurability(cur_item) < max_durability_to_repair)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 5 - значит считаем для артефакта",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 5);",
              "            art_cost = art_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "        if(max_duration < 100 - ItemDurability(cur_item)) max_duration = 100 - ItemDurability(cur_item);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  52,
          "#":  53,
          "Total.Lines":  31,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = ShipType(cur_ship);",
              "if(cur_ship == Player())",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerNoNeedInRepair'), '');",
              "}",
              "else if(ShipTypeN(cur_ship) == t_Tranclucator)",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancNoNeedInRepair'), '');",
              "}",
              "else if(tstr1 == 'Merc' || tstr1 == 'Freelancer')",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercNoNeedInRepair'), '');",
              "}",
              "else if(tstr1 == 'FemRanger')",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecNoNeedInRepair'), '');",
              "}",
              "else if(tstr1 == 'Rebel')",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelNoNeedInRepair'), '');",
              "}",
              "else if(ShipTypeN(cur_ship) == t_Pirate || tstr1 == 'RangerPirate' || tstr1 == 'RangerPirateExplorer')",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateNoNeedInRepair'), '');",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.NoNeedInRepair'), '<AddText'+'>', CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerNoNeedInRepair'), '');",
              "}",
              "",
              "tstr1 = Format(tstr1, '<ShipName'+'>', ShipName(cur_ship), '<ShipFullName'+'>', Name(cur_ship));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  58,
          "#":  61,
          "Total.Lines":  91,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(items);",
              "for(i = 0; i < ShipItems(cur_ship); i = i + 1)",
              "{",
              "    cur_item = ShipItems(cur_ship, i);//заносим предмет в переменную",
              "    if(!ShipCanRepairEq(cur_ship, cur_item))continue;",
              "    //Исключаем акриновые предметы с тэгом \"Неремонтопригоден\"",
              "    if(EqSpecial(cur_item) > -1)",
              "    {",
              "        if(CT('MicroModuls.' + BonusNumInCfg(EqSpecial(cur_item)) + '.NonRepairable') == 1) continue;",
              "    }",
              "    //0-й предмет всегда корпус",
              "    if(!i)",
              "    {",
              "        bad_equipments_count = bad_equipments_count + 1;",
              "        bad_equipments = bad_equipments + HullDamage(cur_ship);",
              "        //Если корпус повреждён хотя бы на 1 единицу",
              "        if(ItemSize(cur_item) > HullHP(cur_item))",
              "        {",
              "            //Подставляем функцию вычисления стоимости ремонта корпуса",
              "            item_cost = RepHullCostCalc(ItemCost(cur_item), ItemSize(cur_item), HullHP(cur_item));",
              "            max_duration = HullDamage(cur_ship);",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "        continue;",
              "    }",
              "    //if(!ItemIsInSet(cur_item) && !ItemIsInUse(cur_item)) continue;",
              "    if((ItemType(cur_item) >= t_FuelTanks && ItemType(cur_item) <= t_CustomWeapon) || ItemType(cur_item) == t_Satellite)",
              "    {",
              "        if(ItemIsInUse(cur_item))",
              "        {",
              "            bad_equipments = bad_equipments + (100 - ItemDurability(cur_item));",
              "            bad_equipments_count = bad_equipments_count + 1;",
              "        }",
              "        //Если прочность оборудования меньше указанного процента (иначе поломку не зафиксируют)",
              "        if(ItemDurability(cur_item) < max_durability_to_repair)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 7 - значит считаем для предмета",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 7);",
              "            item_cost = item_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "",
              "            //Проверка на нестандартное оружие из оригинальной игры",
              "            if(ItemType(cur_item) >= t_Weapon13 && ItemType(cur_item) <= t_Weapon15)",
              "            {",
              "                if(non_standard_repair) //Пропускаем нестандартное оригинальное оружие, если станция не умеет его чинить",
              "                {",
              "                    domik_wpn_cost = domik_wpn_cost + variable;",
              "                    nod_cost_float = nod_cost_float + (0.0025 * variable);",
              "                    item_cost = item_cost - variable;",
              "                }",
              "            }",
              "            //Проверка на кастомное оружие с ремонтом только за ноды",
              "            else if(ItemType(cur_item) == t_CustomWeapon)",
              "            {",
              "                if(GetCustomWeaponData(CustomWeaponType(cur_item), 'Availability') == 'NotSoldAndNodeRepair')",
              "                {",
              "                    if(non_standard_repair) //Пропускаем нестандартное кастомное оружие, если станция не умеет его чинить",
              "                    {",
              "                        domik_wpn_cost = domik_wpn_cost + variable;",
              "                        nod_cost_float = nod_cost_float + (0.0025 * variable);",
              "                        item_cost = item_cost - variable;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Запоминаем процент самой изношенной оборудки",
              "    if(max_duration < 100 - ItemDurability(cur_item)) max_duration = 100 - ItemDurability(cur_item);",
              "}",
              "if(non_standard_repair) //Пропускаем артефакты, если станция не умеет их чинить",
              "{",
              "    //Перебор всех артов",
              "    for(i = 0; i < ShipArts(cur_ship); i = i + 1)",
              "    {",
              "        cur_item = ShipArts(cur_ship, i);",
              "        if(!ItemCanBeBroken(cur_item)) continue; //Пропуск если арт не может сломаться",
              "        bad_equipments = bad_equipments + (100 - ItemDurability(cur_item));",
              "        bad_equipments_count = bad_equipments_count + 1;",
              "        //Если прочность артефакта меньше указанного процента (иначе поломку не зафиксируют)",
              "        if(ItemDurability(cur_item) < max_durability_to_repair)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 5 - значит считаем для артефакта",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 5);",
              "            art_cost = art_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "        if(max_duration < 100 - ItemDurability(cur_item)) max_duration = 100 - ItemDurability(cur_item);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  59,
          "#":  62,
          "Total.Lines":  41,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(items);",
              "if(GAnswerData == 2)",
              "{",
              "    //Перебор всех артов",
              "    for(i = 0; i < ShipArts(cur_ship); i = i + 1)",
              "    {",
              "        cur_item = ShipArts(cur_ship, i);",
              "        if(!ItemCanBeBroken(cur_item)) continue;//Пропуск если арт не может сломаться",
              "        //if(ItemIsInUse(cur_item))continue;//Пропуск если арт стоит в слоте (выключен)",
              "",
              "        //Если износ артефакта не менее 10%",
              "        if(ItemDurability(cur_item) < 90)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 5, значит, считаем для артефакта",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 5);",
              "            art_cost = art_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "    }",
              "}",
              "else",
              "{",
              "    //Ищем в трюме зонды",
              "    for(i = 0; i < ShipItems(cur_ship); i = i + 1)",
              "    {",
              "        cur_item = ShipItems(cur_ship, i);",
              "        //Пропускаем всё, кроме зондов",
              "        if(ItemType(cur_item) != t_Satellite) continue;",
              "",
              "        //Если зонд изношен не менее, чем на 10%",
              "        if(ItemDurability(cur_item) < 90)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 7, значит, считаем как для оборудования",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 7);",
              "            art_cost = art_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  60,
          "#":  63,
          "Total.Lines":  95,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(items);",
              "for(i = 0; i < ShipItems(cur_ship); i = i + 1)",
              "{",
              "    cur_item = ShipItems(cur_ship, i);",
              "    if(!ShipCanRepairEq(cur_ship, cur_item)) continue;",
              "    //Исключаем акриновые предметы с тэгом \"Неремонтопригоден\"",
              "    if(EqSpecial(cur_item) > -1)",
              "    {",
              "        if(CT('MicroModuls.' + BonusNumInCfg(EqSpecial(cur_item)) + '.NonRepairable') == 1) continue;",
              "    }",
              "    //0-й предмет всегда корпус",
              "    if(!i)",
              "    {",
              "        bad_equipments_count = bad_equipments_count + 1;",
              "        bad_equipments = bad_equipments + HullDamage(cur_ship);",
              "        //Если корпус повреждён хотя бы на 1 единицу",
              "        if(ItemSize(cur_item) > HullHP(cur_item))",
              "        {",
              "            //Подставляем функцию вычисления стоимости ремонта корпуса",
              "            item_cost = RepHullCostCalc(ItemCost(cur_item), ItemSize(cur_item), HullHP(cur_item));",
              "            max_duration = HullDamage(cur_ship);",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "        continue;",
              "    }",
              "    if(!ItemIsInSet(cur_item) && !ItemIsInUse(cur_item)) continue;",
              "    if(ItemType(cur_item) > t_Hull && ItemType(cur_item) < t_Protoplasm)",
              "    {",
              "        if(ItemIsInUse(cur_item))",
              "        {",
              "            bad_equipments = bad_equipments + (100 - ItemDurability(cur_item));",
              "            bad_equipments_count = bad_equipments_count + 1;",
              "        }",
              "        //Если прочность оборудования меньше указанного процента (иначе поломку не зафиксируют)",
              "        if(ItemDurability(cur_item) < max_durability_to_repair)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 7, значит, считаем для предмета",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 7);",
              "            item_cost = item_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "",
              "            //Проверка на нестандартное оружие из оригинальной игры",
              "            if(ItemType(cur_item) >= t_Weapon13 && ItemType(cur_item) <= t_Weapon15)",
              "            {",
              "                if(non_standard_repair) //Пропускаем нестандартное оригинальное оружие, если станция не умеет его чинить",
              "                {",
              "                    domik_wpn_cost = domik_wpn_cost + variable;",
              "                    nod_cost_float = nod_cost_float + (0.0025 * variable);",
              "                    item_cost = item_cost - variable;",
              "                }",
              "            }",
              "            //Проверка на кастомное оружие с ремонтом только за ноды",
              "            else if(ItemType(cur_item) == t_CustomWeapon)",
              "            {",
              "                if(GetCustomWeaponData(CustomWeaponType(cur_item), 'Availability') == 'NotSoldAndNodeRepair')",
              "                {",
              "                    if(non_standard_repair) //Пропускаем нестандартное кастомное оружие, если станция не умеет его чинить",
              "                    {",
              "                        domik_wpn_cost = domik_wpn_cost + variable;",
              "                        nod_cost_float = nod_cost_float + (0.0025 * variable);",
              "                        item_cost = item_cost - variable;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Запоминаем процент самой изношенной оборудки",
              "    if(max_duration < 100 - ItemDurability(cur_item)) max_duration = 100 - ItemDurability(cur_item);",
              "}",
              "if(non_standard_repair) //Пропускаем артефакты, если станция не умеет их чинить",
              "{",
              "    //Перебор всех артов",
              "    for(i = 0; i < ShipArts(cur_ship); i = i + 1)",
              "    {",
              "        cur_item = ShipArts(cur_ship, i);",
              "        if(!ItemCanBeBroken(cur_item)) continue; //Пропуск, если арт не может сломаться",
              "        if(!ItemIsInSet(cur_item) && !ItemIsInUse(cur_item)) continue; //Пропуск, если арт не в комплектации",
              "        if(ItemIsInUse(cur_item))",
              "        {",
              "            bad_equipments = bad_equipments + (100 - ItemDurability(cur_item));",
              "            bad_equipments_count = bad_equipments_count + 1;",
              "        }",
              "        //Если прочность артефакта меньше указанного процента (иначе поломку не зафиксируют)",
              "        if(ItemDurability(cur_item) < max_durability_to_repair)",
              "        {",
              "            //Подставляем функцию расчёта стоимости ремонта",
              "            //Последний аргумент 5 - значит считаем для артефакта",
              "            variable = RepCostCalc(ItemCost(cur_item), ItemDurability(cur_item), 5);",
              "            art_cost = art_cost + variable;",
              "            ArrayAdd(items, cur_item);",
              "        }",
              "        if(max_duration < 100 - ItemDurability(cur_item)) max_duration = 100 - ItemDurability(cur_item);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  48,
          "#":  64,
          "Total.Lines":  15,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ship = Player();",
              "",
              "item_cost = 0; //Стоимость оборудки",
              "art_cost = 0; //Стоимость артов",
              "domik_wpn_cost = 0; //Стоимость дом. оружия",
              "nod_cost = 0; //Всего нодов",
              "nod_cost_float = 0;",
              "cost = 0; //Общая стоимость",
              "max_duration = 0;",
              "bad_equipments = 0; //Переменная, обозначающая тяжёлые повреждения",
              "bad_equipments_count = 0;",
              "total = 0;",
              "//Данный маркер получает особое значение при выборе ремонта только артефактов, либо только зондов",
              "TrankRep = 0;",
              "SpecialRepairStr = 'None';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  65,
          "#":  67,
          "Total.Lines":  77,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = 0;",
              "",
              "//Применяем скидки",
              "if(CurRuinTypeStr == 'SB')",
              "{",
              "    //Скидка к артам",
              "    if(GAnswerData == 2)",
              "    {",
              "        art_cost = round(0.84 * art_cost);",
              "    }",
              "    //А к зондам на НБ скидка не применяется",
              "    //else {}",
              "}",
              "else if(CurRuinTypeStr == 'PB')",
              "{",
              "    //Расчёт скидки",
              "    //Банковское округление применяется к формуле, после чего добавляется ещё 1% (так это работает в оригинале)",
              "    //if((round(100.0 * ShipStatus(Player(), 1) / 130) + 1) < (GetShipPirateRank(Player()) * 5)) discount = GetShipPirateRank(Player()) * 5;",
              "    //if((round(100.0 * ShipStatus(Player(), 1) / 130) + 1) >= (GetShipPirateRank(Player()) * 5)) discount = round(100.0 * ShipStatus(Player(), 1) / 130) + 1;",
              "    discount = round(100.0 * ShipStatus(Player(), 1) / 130) + 1;",
              "    //Добавляем к скидке ещё по одному проценту за рейтинг выше 33 и 66",
              "    //В итоге получаем максимальный процент не 78%, а 80%, что просто выглядит солиднее (отключено)",
              "    //if(ShipStatus(Player(), 1) >= 33) discount = discount + 1;",
              "    //if(ShipStatus(Player(), 1) >= 66) discount = discount + 1;",
              "",
              "    tint = art_cost;",
              "    //Вычитаем пиратскую скидку",
              "    discount_float = discount;",
              "    discount_float = discount_float / 100 * art_cost;",
              "    art_cost = round(art_cost - discount_float);",
              "}",
              "else if(CurRuinTypeStr == 'WB')",
              "{",
              "    //Вычисляем скидку, зависящую от военного звания игрока",
              "    //Скидка только к зондам (арты на ВБ не чинят)",
              "    discount_float = 0.90 - (0.10 * ShipRank(Player()));",
              "    art_cost = round(discount_float * art_cost);",
              "    total = art_cost;",
              "}",
              "else if(CurRuinTypeStr == 'TC')",
              "{",
              "    //Скидка к артам",
              "    if(GAnswerData == 2) art_cost = round(1.15 * art_cost);",
              "    //Скидка к зондам (общая скидка на любое стандартное оборудование на ТЦ)",
              "    else art_cost = round(0.80 * art_cost);",
              "}",
              "else if(CurRuinTypeStr == 'PlayerMB')",
              "{",
              "    //Скидка к артам и к зондам",
              "    art_cost = round(0.25 * art_cost);",
              "",
              "    //Запоминаем для подстановки в текст",
              "    tint1 = PlayerHQMainArray['Finance', 'CurrentBalance'];",
              "}",
              "",
              "if(GAnswerData == 2)",
              "{",
              "    SpecialRepairStr = 'ArtsRepair';",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ArtsRepairCost'),",
              "    '<Cost'+'>', art_cost,",
              "    '<FullCost'+'>', tint,",
              "    '<Discount'+'>', discount,",
              "    '<CurrentBalance'+'>', tint1",
              "    );",
              "}",
              "else",
              "{",
              "    SpecialRepairStr = 'ProbesRepair';",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ProbesRepairCost'),",
              "    '<Cost'+'>', art_cost,",
              "    '<FullCost'+'>', tint,",
              "    '<Discount'+'>', discount,",
              "    '<CurrentBalance'+'>', tint1",
              "    );",
              "}",
              "",
              "total = art_cost;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  68,
          "#":  69,
          "Total.Lines":  18,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Проверяем, хватает ли у игрока денег и выводим варианты ответов",
              "if(CurRuinTypeStr == 'PlayerMB') tint1 = (PlayerHQMainArray['Finance', 'CurrentBalance'] >= art_cost);",
              "else tint1 = 0;",
              "if(ShipMoney(Player()) >= total || tint1)",
              "{",
              "    tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes'));",
              "    InjectAnswer('RepairYes', tstr1, 4);",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes'));",
              "    AddDialogBlock(tstr1, 1);",
              "    InjectAnswer('RepairYes', tstr1, 4);",
              "}",
              "",
              "//Отказ от ремонта",
              "tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairNo'));",
              "InjectAnswer('RepairNo', tstr1, 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  71,
          "#":  72,
          "Total.Lines":  157,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Применяем станционные скидки",
              "tint1 = 0;",
              "if(CurRuinTypeStr == 'SB')",
              "{",
              "    art_cost = round(0.84 * art_cost);",
              "    total = item_cost + art_cost + domik_wpn_cost;",
              "}",
              "else if(CurRuinTypeStr == 'PB')",
              "{",
              "    //Расчёт скидки",
              "    //Банковское округление применяется к формуле, после чего добавляется ещё 1% (так это работает в оригинале)",
              "    //if((round(100.0 * ShipStatus(Player(), 1) / 130) + 1) < (GetShipPirateRank(Player()) * 5)) discount = GetShipPirateRank(Player()) * 5;",
              "    //if((round(100.0 * ShipStatus(Player(), 1) / 130) + 1) >= (GetShipPirateRank(Player()) * 5)) discount = round(100.0 * ShipStatus(Player(), 1) / 130) + 1;",
              "    discount = round(100.0 * ShipStatus(Player(), 1) / 130) + 1;",
              "    //Добавляем к скидке ещё по одному проценту за рейтинг выше 33 и 66",
              "    //В итоге получаем максимальный процент не 78%, а 80%, что просто выглядит солиднее (отключено)",
              "    //if(ShipStatus(Player(), 1) >= 33) discount = discount + 1;",
              "    //if(ShipStatus(Player(), 1) >= 66) discount = discount + 1;",
              "",
              "    //Накладываем модификатор-скидку от ПБ",
              "    total = round(0.84 * (item_cost + art_cost + domik_wpn_cost));",
              "    //Запоминаем общую цену без пиратской скидки",
              "    tint = total;",
              "    item_cost = round(0.84 * item_cost);",
              "    art_cost = round(0.84 * art_cost);",
              "    domik_wpn_cost = round(0.84 * domik_wpn_cost);",
              "",
              "    //Вычитаем пиратскую скидку",
              "    discount_float = discount;",
              "    discount_float = discount_float / 100 * total;",
              "    total = round(total - discount_float);",
              "    //Скидка на обычное оборудование",
              "    discount_float = discount;",
              "    discount_float = discount_float / 100 * item_cost;",
              "    item_cost = round(item_cost - discount_float);",
              "    //Скидка на арты",
              "    discount_float = discount;",
              "    discount_float = discount_float / 100 * art_cost;",
              "    art_cost = round(art_cost - discount_float);",
              "    //Скидка на нестандартное оборудование",
              "    discount_float = discount;",
              "    discount_float = discount_float / 100 * domik_wpn_cost;",
              "    domik_wpn_cost = round(domik_wpn_cost - discount_float);",
              "}",
              "else if(CurRuinTypeStr == 'WB')",
              "{",
              "    //Вычисляем скидку, зависящую от военного звания игрока",
              "    discount_float = 0.90 - (0.10 * ShipRank(Player()));",
              "    item_cost = round(discount_float * item_cost);",
              "    total = item_cost;",
              "}",
              "else if(CurRuinTypeStr == 'TC')",
              "{",
              "    item_cost = round(0.80 * item_cost);",
              "    art_cost = round(1.15 * art_cost);",
              "    domik_wpn_cost = round(1.15 * domik_wpn_cost);",
              "    total = item_cost + art_cost + domik_wpn_cost;",
              "}",
              "else if(CurRuinTypeStr == 'PlayerMB')",
              "{",
              "    art_cost = round(0.25 * art_cost);",
              "    item_cost = round(0.25 * item_cost);",
              "    domik_wpn_cost = round(0.25 * domik_wpn_cost);",
              "    total = item_cost + art_cost + domik_wpn_cost;",
              "",
              "    //Запоминаем для подстановки в текст",
              "    tint1 = PlayerHQMainArray['Finance', 'CurrentBalance'];",
              "}",
              "",
              "//Не менее одного нода на нестандартный ремонт (на стоимость ремонта в нодах скидки не распространяются)",
              "if(domik_wpn_cost)",
              "{",
              "    nod_cost = round(nod_cost_float);",
              "    if(nod_cost <= 0) nod_cost = 1;",
              "}",
              "",
              "//Выставляем маркер о \"тяжёлом\" ремонте (если корабль оказался сильно покоцан)",
              "if(bad_equipments / bad_equipments_count >= 60) bad_equipments = 1;",
              "else bad_equipments = 0;",
              "",
              "//Готовим добавочный текст для стандартного и нестандартного ремонта",
              "//(в некоторых подстановках эти реплики могут использоваться только как добавочные при \"тяжёлом\" ремонте)",
              "tstr1 = ShipType(cur_ship);",
              "if(cur_ship == Player())",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerNodeRepair');",
              "}",
              "else if(ShipTypeN(cur_ship) == t_Tranclucator)",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancNodeRepair');",
              "}",
              "else if(tstr1 == 'Merc' || tstr1 == 'Freelancer')",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercNodeRepair');",
              "}",
              "else if(tstr1 == 'FemRanger')",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecNodeRepair');",
              "}",
              "else if(tstr1 == 'Rebel')",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelNodeRepair');",
              "}",
              "else if(ShipTypeN(cur_ship) == t_Pirate || tstr1 == 'RangerPirate' || tstr1 == 'RangerPirateExplorer')",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateNodeRepair');",
              "}",
              "else",
              "{",
              "    if(!bad_equipments) AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerNormalRepair');",
              "    else AddText = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerSevereRepair');",
              "    AddTextNodes = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerNodeRepair');",
              "}",
              "AddText = Format(AddText, '<ShipName'+'>', ShipName(cur_ship), '<ShipFullName'+'>', Name(cur_ship), '<Cost'+'>', total, '<FullCost'+'>', tint, '<Discount'+'>', discount);",
              "AddTextNodes = Format(AddTextNodes, '<ShipName'+'>', ShipName(cur_ship), '<ShipFullName'+'>', Name(cur_ship));",
              "",
              "//Варианты реплик, если ремонт не \"тяжёлый\"",
              "if(!bad_equipments)",
              "{",
              "    //Если в списке на ремонт нет нестандартного оборудования",
              "    if(!nod_cost) tstr1 = 'NormalRepair';",
              "    //Если в списке на ремонт есть нестандартное оборудование",
              "    else tstr1 = 'NormalNodeRepair';",
              "}",
              "//Варианты реплик для \"тяжёлого\" ремонта",
              "else",
              "{",
              "    //Если в списке на ремонт нет нестандартного оборудования",
              "    if(!nod_cost) tstr1 = 'SevereRepair';",
              "    //Если в списке на ремонт есть нестандартное оборудование",
              "    else tstr1 = 'SevereNodeRepair';",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.' + tstr1),",
              "'<SplitLine'+'>', DefSplt,",
              "'<Indent'+'>', IndentStr,",
              "'<AddText'+'>', AddText,",
              "'<AddTextNeedNodes'+'>', AddTextNodes,",
              "'<EquipmentRepairCost'+'>', item_cost,",
              "'<UnusualEquipmentRepairCost'+'>', domik_wpn_cost,",
              "'<ArtsRepairCost'+'>', art_cost,",
              "'<NodesCost'+'>', nod_cost,",
              "'<TotalCost'+'>', total,",
              "'<CurrentBalance'+'>', tint1,",
              ");"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  73,
          "#":  74,
          "Total.Lines":  154,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Формируем список опций ремонта, игрок может выбрать, какую группу оборудования ему чинить",
              "//Всё, только стандартное, только нестандартное, либо только артефакты",
              "//Сперва определяем вариативность ремонта",
              "//Если AnsCount больше 1, значит, имеется возможность выбрать сразу из нескольких вариантов ремонта",
              "AnsCount = 0;",
              "if(item_cost) AnsCount = AnsCount + 1;",
              "if(nod_cost) AnsCount = AnsCount + 1;",
              "if(art_cost) AnsCount = AnsCount + 1;",
              "",
              "//Маркер check отмечает, хватает ли у игрока в трюме и на складе нодов на ремонт нестандартного оборудования",
              "check = 1;",
              "if(nod_cost)",
              "{",
              "    tint1 = GetNodesFromShip(Player());",
              "    if(tint1 < nod_cost)",
              "    {",
              "        for(i = 0; i < StorageItems(); i = i + 1)",
              "        {",
              "            if(ItemType(StorageItems(i)) != t_Protoplasm) continue;",
              "            if(StorageItemLocation(i) == cur_ruin)",
              "            {",
              "                tint1 = tint1 + ItemSize(StorageItems(i));",
              "                ArrayAdd(nodes_count_array, StorageItems(i));",
              "            }",
              "        }",
              "",
              "        if(tint1 < nod_cost) check = 0;",
              "    }",
              "}",
              "",
              "//Добавляем (если нужно) вариант полного ремонта сразу всех позиций в списке",
              "if(AnsCount > 1)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerTotalRepairYes');",
              "    //Если денег или нодов на ремонт у игрока не хватает",
              "    if(CurRuinTypeStr == 'PlayerMB') tint1 = (PlayerHQMainArray['Finance', 'CurrentBalance'] >= total);",
              "    else tint1 = 0;",
              "    if(!(check && (ShipMoney(Player()) >= total || tint1)))",
              "    {",
              "        tstr1 = DeleteTags(tstr1);",
              "        AddDialogBlock(tstr1, 1);",
              "    }",
              "",
              "    InjectAnswer('RepairYes', tstr1, 4);",
              "}",
              "",
              "//Если в списке на ремонт присутствуют стандартные вещи",
              "if(item_cost)",
              "{",
              "    if(CurRuinTypeStr == 'PlayerMB') tint1 = (PlayerHQMainArray['Finance', 'CurrentBalance'] >= item_cost);",
              "    else tint1 = 0;",
              "    if(ShipMoney(Player()) >= item_cost || tint1)",
              "    {",
              "        if(AnsCount <= 1)",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes');",
              "            InjectAnswer('RepairYes', tstr1, 1);",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerEquipmentRepairYes');",
              "            InjectAnswer('RepairYes', tstr1, 1);",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(AnsCount <= 1)",
              "        {",
              "            tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes'));",
              "            AddDialogBlock(tstr1, 1);",
              "            InjectAnswer('RepairYes', tstr1, 1);",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerEquipmentRepairYes'));",
              "            AddDialogBlock(tstr1, 1);",
              "            InjectAnswer('RepairYes', tstr1, 1);",
              "        }",
              "    }",
              "}",
              "",
              "//Если в списке на ремонт присутствуют нестандартные вещи с ремонтом за ноды",
              "if(domik_wpn_cost)",
              "{",
              "    if(CurRuinTypeStr == 'PlayerMB') tint1 = (PlayerHQMainArray['Finance', 'CurrentBalance'] >= domik_wpn_cost);",
              "    else tint1 = 0;",
              "",
              "    if(check && (ShipMoney(Player()) >= domik_wpn_cost || tint1))",
              "    {",
              "        if(AnsCount <= 1)",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes');",
              "            InjectAnswer('RepairYes', tstr1, 2);",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerUnusualEquipmentRepairYes');",
              "            InjectAnswer('RepairYes', tstr1, 2);",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(AnsCount <= 1)",
              "        {",
              "            tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes'));",
              "            AddDialogBlock(tstr1, 1);",
              "            InjectAnswer('RepairYes', tstr1, 2);",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerUnusualEquipmentRepairYes'));",
              "            AddDialogBlock(tstr1, 1);",
              "            InjectAnswer('RepairYes', tstr1, 2);",
              "        }",
              "    }",
              "}",
              "",
              "//Если в списке на ремонт присутствуют артефакты",
              "if(art_cost)",
              "{",
              "    if(CurRuinTypeStr == 'PlayerMB') tint1 = (PlayerHQMainArray['Finance', 'CurrentBalance'] >= art_cost);",
              "    else tint1 = 0;",
              "    if(ShipMoney(Player()) >= art_cost || tint1)",
              "    {",
              "        if(AnsCount <= 1)",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes');",
              "            InjectAnswer('RepairYes', tstr1, 3);",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerArtsRepairYes');",
              "            InjectAnswer('RepairYes', tstr1, 3);",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(AnsCount <= 1)",
              "        {",
              "            tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairYes'));",
              "            AddDialogBlock(tstr1, 1);",
              "            InjectAnswer('RepairYes', tstr1, 3);",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + DeleteTags(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerArtsRepairYes'));",
              "            AddDialogBlock(tstr1, 1);",
              "            InjectAnswer('RepairYes', tstr1, 3);",
              "        }",
              "    }",
              "}",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairNo');",
              "InjectAnswer('RepairNo', tstr1, 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  75,
          "#":  78,
          "Total.Lines":  150,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Проверяем, сколько игрок потратил на ремонт в кредитах",
              "check = GAnswerData;",
              "if(abs(check) == 1) cost = item_cost;",
              "else if(abs(check) == 2) cost = domik_wpn_cost;",
              "else if(abs(check) == 3) cost = art_cost;",
              "else if(abs(check) == 4) cost = total;",
              "",
              "//Оплата с личного счёта игрока",
              "tint1 = 1; //Маркер проверки, согласился ли игрок произвести оплату с одного из счетов",
              "if(CurRuinTypeStr != 'PlayerMB') ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "//Возможная оплата со счёта организации игрока",
              "else if(ShipMoney(Player()) >= cost)",
              "{",
              "    tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAccountPaymentOffer');",
              "    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost) tstr1 = tstr1 + ' ' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAccountPaymentOfferAdd');",
              "",
              "    if(MessageBoxYesNo(tstr1))",
              "    {",
              "        ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "    }",
              "    else if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost)",
              "    {",
              "        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "        PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "    }",
              "    else",
              "    {",
              "        tint1 = 0;",
              "    }",
              "}",
              "else",
              "{",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "    PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "}",
              "",
              "if(tint1)",
              "{",
              "    //Производим изъятие нодов из трюма и, если нужно, со склада",
              "    if(nod_cost)",
              "    {",
              "        if(GetNodesFromShip(Player()) >= nod_cost) GetNodesFromShip(Player(), nod_cost);",
              "        else",
              "        {",
              "            for(i = 1; i < ArrayDim(nodes_count_array); i = i + 1)",
              "            {",
              "                tint2 = ItemSize(nodes_count_array[i]) + GetNodesFromShip(Player());",
              "                if(tint2 == nod_cost)",
              "                {",
              "                    GetNodesFromShip(Player(), GetNodesFromShip(Player()));",
              "                    FreeItem(GetItemFromStorage(FindItemInStorage(nodes_count_array[i])));",
              "                    break;",
              "                }",
              "                else if(tint2 > nod_cost)",
              "                {",
              "                    cur_item = GetItemFromStorage(FindItemInStorage(nodes_count_array[i]));",
              "                    ItemSize(cur_item, ItemSize(cur_item) - (nod_cost - GetNodesFromShip(Player())));",
              "                    GetNodesFromShip(Player(), GetNodesFromShip(Player()));",
              "                    AddItemToStorage(GetShipRuins(Player()), cur_item);",
              "                    break;",
              "                }",
              "                else",
              "                {",
              "                    nod_cost = nod_cost - tint2;",
              "                    GetNodesFromShip(Player(), GetNodesFromShip(Player()));",
              "                    FreeItem(GetItemFromStorage(FindItemInStorage(nodes_count_array[i])));",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    //Приступаем к непосредственному ремонту корпуса и вещей из списка",
              "    for(i = 1; i < ArrayDim(items); i = i + 1)",
              "    {",
              "        cur_item = items[i];",
              "        item_type = ItemType(cur_item);",
              "        //check == 4 (или -4) - чиним всё",
              "        if(abs(check) == 4)",
              "        {",
              "            if(item_type == t_Hull) HullHP(cur_ship, ItemSize(ShipItems(cur_ship, 0)));",
              "            else ItemDurability(cur_item, 100);",
              "        }",
              "        //check == 1 (или -1) - чиним только стандартное",
              "        else if(abs(check) == 1 && (item_type >= t_Hull && item_type <= t_CustomWeapon) || item_type == t_Satellite)",
              "        {",
              "            if(item_type == t_Hull) HullHP(cur_ship, ItemSize(ShipItems(cur_ship, 0)));",
              "            else",
              "            {",
              "                if(item_type < t_Weapon13 || item_type > t_Weapon15)",
              "                {",
              "                    if(item_type != t_CustomWeapon) ItemDurability(cur_item, 100);",
              "                    else if(GetCustomWeaponData(CustomWeaponType(cur_item), 'Availability') != 'NotSoldAndNodeRepair') ItemDurability(cur_item, 100);",
              "                }",
              "            }",
              "        }",
              "        //check == 2 (или -2) - чиним только нестандартное",
              "        else if(abs(check) == 2)",
              "        {",
              "            if(item_type >= t_Weapon13 && item_type <= t_Weapon15) ItemDurability(cur_item, 100);",
              "            else if(item_type == t_CustomWeapon)",
              "            {",
              "                if(GetCustomWeaponData(CustomWeaponType(cur_item), 'Availability') == 'NotSoldAndNodeRepair') ItemDurability(cur_item, 100);",
              "            }",
              "        }",
              "        //check == 3 (или -3) - чиним только артефакты",
              "        else if(abs(check) == 3 && item_type < t_Hull)",
              "        {",
              "            ItemDurability(cur_item, 100);",
              "            tstr = 'ArtRep';",
              "        }",
              "    }",
              "    Sound('Sound.Repair');",
              "",
              "    //Готовим финальную реплику в диалог",
              "    if(SpecialRepairStr == 'ArtsRepair') tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ArtsRepairDone');",
              "    else if(SpecialRepairStr == 'ProbesRepair') tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ProbesRepairDone');",
              "    else",
              "    {",
              "        tstr1 = ShipType(cur_ship);",
              "        if(cur_ship == Player())",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairDone');",
              "        }",
              "        else if(ShipTypeN(cur_ship) == t_Tranclucator)",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancRepairDone');",
              "        }",
              "        else if(tstr1 == 'Merc' || tstr1 == 'Freelancer')",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercRepairDone');",
              "        }",
              "        else if(tstr1 == 'FemRanger')",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecRepairDone');",
              "        }",
              "        else if(tstr1 == 'Rebel')",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelRepairDone');",
              "        }",
              "        else if(ShipTypeN(cur_ship) == t_Pirate || tstr1 == 'RangerPirate' || tstr1 == 'RangerPirateExplorer')",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateRepairDone');",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerRepairDone');",
              "        }",
              "        tstr1 = Format(tstr1, '<ShipName' + '>', ShipName(cur_ship), '<ShipFullName' + '>', Name(cur_ship));",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  76,
          "#":  82,
          "Total.Lines":  51,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str player_race = ShipPilotRace(Player());",
              "if(int(player_race) == Maloc) player_race = lowercase(CT('FormGameSet2.Common.Maloc'));",
              "else if(int(player_race) == Peleng) player_race = lowercase(CT('FormGameSet2.Common.Peleng'));",
              "else if(int(player_race) == People) player_race = lowercase(CT('FormGameSet2.Common.People'));",
              "else if(int(player_race) == Fei) player_race = lowercase(CT('FormGameSet2.Common.Fei'));",
              "else if(int(player_race) == Gaal) player_race = lowercase(CT('FormGameSet2.Common.Gaal'));",
              "",
              "//Готовим финальную реплику в диалог",
              "if(SpecialRepairStr == 'ArtsRepair') tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ArtsRepairQuit'), '<PlayerRace'+'>', player_race);",
              "else if(SpecialRepairStr == 'ProbesRepair') tstr1 = '</color>' + Format(CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ProbesRepairQuit'), '<PlayerRace'+'>', player_race);",
              "else",
              "{",
              "    tstr1 = ShipType(cur_ship);",
              "    if(cur_ship == Player())",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PlayerSevereRepairQuit');",
              "    }",
              "    else if(ShipTypeN(cur_ship) == t_Tranclucator)",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.TrancSevereRepairQuit');",
              "    }",
              "    else if(tstr1 == 'Merc' || tstr1 == 'Freelancer')",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.MercSevereRepairQuit');",
              "    }",
              "    else if(tstr1 == 'FemRanger')",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.SpecSevereRepairQuit');",
              "    }",
              "    else if(tstr1 == 'Rebel')",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.RebelSevereRepairQuit');",
              "    }",
              "    else if(ShipTypeN(cur_ship) == t_Pirate || tstr1 == 'RangerPirate' || tstr1 == 'RangerPirateExplorer')",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PirateSevereRepairQuit');",
              "    }",
              "    else",
              "    {",
              "        if(!bad_equipments) tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerRepairQuit');",
              "        else tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.PartnerSevereRepairQuit');",
              "    }",
              "",
              "    tstr1 = Format(tstr1, '<ShipName' + '>', ShipName(cur_ship), '<ShipFullName' + '>', Name(cur_ship));",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  66,
          "#":  84,
          "Total.Lines":  8,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(GAnswerData == 2)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ArtsNoNeedInRepair');",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ExpRepair.' + CurRuinTypeStr + '.ProbesNoNeedInRepair');",
              "}"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "PlanetNew",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1,
          "#":  2,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  120,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  0,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "StarNew",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  0,
          "#":  1,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  51,
          "#":  52,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!item_cost && !art_cost && !domik_wpn_cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  30,
          "Parent":  64,
          "#":  57,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!GAnswerData"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  64,
          "#":  58,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GAnswerData == 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  64,
          "#":  59,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GAnswerData == 2 || GAnswerData == 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  64,
          "#":  60,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GAnswerData == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  62,
          "#":  65,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "art_cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  62,
          "#":  66,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!art_cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  63,
          "#":  71,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "item_cost || art_cost || domik_wpn_cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  51,
          "#":  87,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "item_cost || art_cost || domik_wpn_cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  50,
          "Parent":  87,
          "#":  88,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  78,
          "#":  89,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  78,
          "#":  90,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -170,
          "Parent":  89,
          "#":  91,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!IsPlayer(cur_ship)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -140,
          "Parent":  89,
          "#":  92,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "IsPlayer(cur_ship)"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  3,
          "#":  4,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  50,
          "Pos.y":  0,
          "Parent":  11,
          "#":  8,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ship",
          "Pos.x":  740,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  9,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_item",
          "Pos.x":  740,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  10,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint",
          "Pos.x":  240,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  11,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "art_cost",
          "Pos.x":  740,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  12,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "nod_cost",
          "Pos.x":  740,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  13,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "item_cost",
          "Pos.x":  740,
          "Pos.y":  80,
          "Parent":  -1,
          "#":  14,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cost",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  21,
          "#":  15,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "max_duration",
          "Pos.x":  740,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  16,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "domik_wpn_cost",
          "Pos.x":  740,
          "Pos.y":  40,
          "Parent":  -1,
          "#":  17,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "total",
          "Pos.x":  340,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  18,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "bad_equipments",
          "Pos.x":  740,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  19,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  39,
          "#":  20,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "ship",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  18,
          "#":  21,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "items",
          "Pos.x":  740,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  22,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "variable",
          "Pos.x":  740,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  23,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  40,
          "#":  24,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "discount",
          "Pos.x":  740,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  25,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "bad_equipments_count",
          "Pos.x":  740,
          "Pos.y":  0,
          "Parent":  -1,
          "#":  26,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "DefSplt",
          "Pos.x":  740,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  27,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "AddText",
          "Pos.x":  850,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  28,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TrankRep",
          "Pos.x":  850,
          "Pos.y":  80,
          "Parent":  -1,
          "#":  29,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "AddTextNodes",
          "Pos.x":  850,
          "Pos.y":  40,
          "Parent":  -1,
          "#":  31,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "AnsCount",
          "Pos.x":  850,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  32,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "nod_cost_float",
          "Pos.x":  850,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  33,
          "Var.Type":  "Float",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "discount_float",
          "Pos.x":  850,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  34,
          "Var.Type":  "Float",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "nodes_count_total",
          "Pos.x":  850,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  35,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "nodes_count_array",
          "Pos.x":  850,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  36,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "temp_dword",
          "Pos.x":  850,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  37,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "item_type",
          "Pos.x":  850,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  38,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ruin",
          "Pos.x":  410,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  39,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  20,
          "#":  40,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "check",
          "Pos.x":  490,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  56,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "CurRuinTypeStr",
          "Pos.x":  740,
          "Pos.y":  -90,
          "Parent":  -1,
          "#":  70,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "IndentStr",
          "Pos.x":  740,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  77,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "SpecialRepairStr",
          "Pos.x":  740,
          "Pos.y":  -50,
          "Parent":  -1,
          "#":  81,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  11,
          "#":  85,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  85,
          "#":  86,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "non_standard_repair",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  56,
          "#":  93,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "max_durability_to_repair",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  93,
          "#":  94,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  2,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  0,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  30,
      "End":  41,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  41,
      "End":  42,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  42,
      "End":  43,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  44,
      "End":  45,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  46,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  46,
      "End":  47,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  50,
      "End":  51,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  51,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  52,
      "End":  53,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  53,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  54,
      "End":  55,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  58,
      "End":  61,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  59,
      "End":  62,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  63,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  57,
      "End":  51,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  48,
      "End":  64,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  57,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  60,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  59,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  58,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  65,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  66,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  67,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  67,
      "End":  68,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  68,
      "End":  69,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  71,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  61,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  61,
      "End":  71,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  71,
      "End":  72,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  72,
      "End":  73,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  73,
      "End":  74,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  75,
      "End":  78,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  79,
      "End":  80,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  76,
      "End":  82,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  82,
      "End":  83,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  83,
      "End":  80,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  66,
      "End":  84,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  84,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  51,
      "End":  87,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  88,
      "End":  72,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  88,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  78,
      "End":  90,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  90,
      "End":  79,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  78,
      "End":  89,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  92,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  91,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  92,
      "End":  64,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  91,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "Rect.Text":  
  [
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  106,
      "Rect.Top":  -299,
      "Rect.Right":  728,
      "Rect.Bottom":  -15,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  0,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0,300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "Все расчёты стоимости ремонта предметов производятся по формулам:\r\nRound10((FCost div 40) / 100 * damageProc + 10);\r\ndamageProc := 100 / (self as THull).FSize * ((self as THull).FSize - (self as THull).FHitPoints);\r\nдля корпуса\r\n\r\nRound10((FCost div 20) + (FCost div 7 / 100 * (100 - Round(FDuration))) + 10)\r\nдля простых вещей\r\n\r\nRound10((FCost div 10) + (FCost div 5 / 100 * (100 - Round(FDuration))) + 10)\r\nдля артефактов (умножается на 2, после возможного наложения штрафа за сломанный предмет)\r\n\r\nПосле этого на получившееся число накладывается модификатор:\r\n1.3 - если вещь сломана\r\n0.84 - если ремонт предлагает ПБ (и потом ещё сверху скидка)\r\nот 0.9 до 0.2 (в зависимости от звания игрока) - если ремонт предлагает ВБ\r\n\r\nПриведённые выше формулы в функциях были переведены на скриптовый язык",
      "Color":  0,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    }  
  ],
  "BlockPar.EC.Total.Strings":  1,
  "BlockPar.EC":  
  [
    {
      "#":  "130",
      "String":  "<0>"    
    }  
  ]
}