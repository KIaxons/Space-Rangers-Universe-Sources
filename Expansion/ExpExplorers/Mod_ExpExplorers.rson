{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -450,
  "ViewPos.y":  -225,
  "ScriptName":  "Mod_ExpExplorers",
  "ScriptFileOut":  "H:\\Mod_ExpExplorers.scr",
  "ScriptTextOut":  "H:\\Mod_ExpExplorers.txt",
  "GraphPoint.Count":  64,
  "GraphLink.Count":  28,
  "GraphRectText.Count":  0,
  "Variables.Count":  28,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  1,
  "Groups.Count":  1,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  3,
  "DialogMessages.Count":  3,
  "DialogAnswers.Count":  6,
  "Operations.Count":  12,
  "Statements.Count":  7,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "DialogAnswers":      
      [
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  90,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  33,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  250,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  35,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  410,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  43,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  40,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  45,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  200,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  47,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  360,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  49,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "5"        
        }      
      ],
      "DialogMessages":      
      [
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  32,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  250,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  34,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  410,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  42,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "2"        
        }      
      ],
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "SendCoalPartnerToBH",
          "Pos.x":  90,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  31        
        },
        {
          "Type":  "TDialog",
          "Name":  "SendPiratePartnerToBH",
          "Pos.x":  250,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  36        
        },
        {
          "Type":  "TDialog",
          "Name":  "SendTranclucatorToBH",
          "Pos.x":  410,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  40        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  40,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  3,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  160,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  5,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  180,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  6,
          "Total.Lines":  134,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Записываем возможные для выдачи артефакты в массив",
              "GgiveArtsArray = newarray(1);",
              "//Оригинальные артефакты",
              "ArrayAdd(GgiveArtsArray, t_ArtefactHull); //1 - Железные жупи",
              "ArrayAdd(GgiveArtsArray, t_ArtefactFuel); //2 - Чёрная жижа",
              "ArrayAdd(GgiveArtsArray, t_ArtefactSpeed); //3 - Пси-ускоритель",
              "ArrayAdd(GgiveArtsArray, t_ArtefactPower); //4 - Отморозки",
              "ArrayAdd(GgiveArtsArray, t_ArtefactRadar); //5 - Пролонгер",
              "ArrayAdd(GgiveArtsArray, t_ArtefactScaner); //6 - Сканерный кэш",
              "ArrayAdd(GgiveArtsArray, t_ArtefactDroid); //7 - Дроид младший",
              "ArrayAdd(GgiveArtsArray, t_ArtefactNano); //8 - Нанитоиды",
              "ArrayAdd(GgiveArtsArray, t_ArtefactHook); //9 - Эриметр",
              "ArrayAdd(GgiveArtsArray, t_ArtefactDef); //10 - Поляризатор",
              "ArrayAdd(GgiveArtsArray, t_ArtefactAnalyzer); //11 - Вероятностный анализатор",
              "ArrayAdd(GgiveArtsArray, t_ArtefactMiniExpl); //12 - Локализатор взрывной волны",
              "ArrayAdd(GgiveArtsArray, t_ArtefactAntigrav); //13 - Антигравитатор",
              "ArrayAdd(GgiveArtsArray, t_ArtDefToEnergy); //14 - Пропорционар",
              "ArrayAdd(GgiveArtsArray, t_ArtEnergyPulse); //15 - Пятерик",
              "ArrayAdd(GgiveArtsArray, t_ArtEnergyDef); //16 - Проглот",
              "ArrayAdd(GgiveArtsArray, t_ArtSplinter); //17 - Навинт",
              "ArrayAdd(GgiveArtsArray, t_ArtDecelerate); //18 - Вжик",
              "ArrayAdd(GgiveArtsArray, t_ArtMissileDef); //19 - Ракетанг",
              "ArrayAdd(GgiveArtsArray, t_ArtForsage); //20 - Обливионный коннектор",
              "ArrayAdd(GgiveArtsArray, t_ArtWeaponToSpeed); //21 - Сопланатор",
              "ArrayAdd(GgiveArtsArray, t_ArtDefToArms1); //22 - Протон",
              "ArrayAdd(GgiveArtsArray, t_ArtDefToArms2); //23 - Армс",
              "ArrayAdd(GgiveArtsArray, t_ArtArtefactor); //24 - Артефактор",
              "ArrayAdd(GgiveArtsArray, t_ArtBio); //25 - Биомир",
              "ArrayAdd(GgiveArtsArray, t_ArtPDTurret); //26 - аЭгис",
              "ArrayAdd(GgiveArtsArray, t_ArtFastRacks); //27 - Ралс",
              "//Кастомные артефакты из ExpArts",
              "ArrayAdd(GgiveArtsArray, 'Techdisruptor'); //28 - Техдиструптор",
              "ArrayAdd(GgiveArtsArray, 'Reflector'); //29 - Рефлектор",
              "ArrayAdd(GgiveArtsArray, 'Hasker_PROx64'); //30 - Хаскер_PROx64",
              "ArrayAdd(GgiveArtsArray, 'Booster'); //31 - Бустер",
              "",
              "//Записываем номера Тортугаца и Нифигаца (для удобной читаемости в коде)",
              "TortugatzId = Id(PlanetToStar(PlanetPirateClan())) - 1;",
              "",
              "//Делаем стартовый прогон Галактики, раздаём инфошки исследователей",
              "//Ищем все новорождённые корабли в Галактике, после чего начинаем их подробный перебор",
              "i = BuildListOfNewShips(tarr, lastShipId, 2, 1+2+4+8+16, 1, '', ',RangerPirate');",
              "if(i)",
              "{",
              "    for(i = 0; i < ArrayDim(tarr); i = i + 1)",
              "    {",
              "        tdwd1 = tarr[i];",
              "        if(tdwd1 == Player()) continue; //Исключаем игрока",
              "        if(ShipInScript(tdwd1)) continue; //Исключаем скриптовые корабли",
              "",
              "        if(ShipType(tdwd1) == 'Ranger' || ShipType(tdwd1) == 'RangerPirate')",
              "        {",
              "            if(RndObject(1, 100, tdwd1) > TotalBHExplorersPercent) continue; //Ограничиваем процент рейнджеров, летающих по ЧД",
              "",
              "            //Добавляем рейнджеру инфошку эксплорэра",
              "            //Задаём рандомное число посещённых ЧД для рейнджеров, которые уже существовали к моменту появления игрока",
              "            infos = ShipAddCustomShipInfo(tdwd1, 'ExpExplorers_ExplorerInfo', 'NoShow', 0, 0, RndObject(3, 12, tdwd1));",
              "            //Если подключён мод ExpScienceRanks, то проверяем, нужно ли выдавать рейнджеру учёные звания",
              "            if(BlockExist('RankScientific'))",
              "            {",
              "                //TextData3 == -2 - полный блок на получение и обладание учёными званиями",
              "                //TextData3 == -1 - нулевое звание \"Абитуриент\"",
              "                //TextData3 >= 0 && TextData3 <= 8 - собственно, сами звания",
              "",
              "                //Данный рейнджер не получит никаких учёных званий вообще",
              "                if(ShipType(tdwd1) == 'RangerPirate' || RndObject(1, 100, tdwd1) <= 30)",
              "                {",
              "                    ShipCustomShipInfoTextData(0, infos, 2, 'NoRank');",
              "                    ShipCustomShipInfoTextData(0, infos, 3, -1);",
              "                }",
              "                //Считаем, сколько званий рейнджер получил на старте скрипта",
              "                else",
              "                {",
              "                    //Стартовое нулевое звание \"Абитуриента\"",
              "                    ShipCustomShipInfoTextData(0, infos, 3, 0);",
              "                    //Узнаём, сколько ЧД рейнджер посетил до старта скрипта (решает рандом)",
              "                    countBH = ShipCustomShipInfoData(0, infos, 3);",
              "                    //Узнаём, сколько ЧД нужно посетить до первого звания",
              "                    forNextRank = CT('RankScientific.1.BlackHolesCount');",
              "                    forNextRank = forNextRank - countBH;",
              "                    //Запоминаем число ЧД, необходимых для получения следующего звания",
              "                    ShipCustomShipInfoTextData(0, infos, 2, round(0.5 * forNextRank)); //Делим это число на 2, иначе они никогда не поднимут себе нормальных званий",
              "                    cur_rank = ShipCustomShipInfoTextData(0, infos, 3);",
              "",
              "                    //Проверяем, посетил ли рейнджер достаточное число ЧД для получения хотя бы одного звания",
              "                    while(countBH - CT('RankScientific.' + cur_rank + '.BlackHolesCount') >= forNextRank && ShipCustomShipInfoTextData(0, infos, 2) != 'NoRank')",
              "                    {",
              "                        //Повышаем учёное звание",
              "                        cur_rank = cur_rank + 1;",
              "                        ShipCustomShipInfoTextData(0, infos, 3, cur_rank);",
              "                        //Если звание всё ещё не максимально",
              "                        if(cur_rank < 8)",
              "                        {",
              "                            //То считаем и запоминаем, сколько ЧД осталось до следующего звания",
              "                            forNextRank = CT('RankScientific.' + (cur_rank + 1) + '.BlackHolesCount');",
              "                            forNextRank = forNextRank - countBH;",
              "                            ShipCustomShipInfoTextData(0, infos, 2, round(0.5 * forNextRank)); //Делим это число на 2, иначе они никогда не поднимут себе нормальных званий",
              "                        }",
              "                        //Иначе блокируем дальнейшие повышения ранга",
              "                        else ShipCustomShipInfoTextData(0, infos, 2, 'NoRank');",
              "                    }",
              "                }",
              "            }",
              "            //Если мод ExpScienceRanks не подключён",
              "            else",
              "            {",
              "                //Рейнджер не получит учёных званий даже после подключения ExpScienceRanks",
              "                if(ShipType(tdwd1) == 'RangerPirate' || RndObject(1, 100, tdwd1) <= 30)",
              "                {",
              "                    ShipCustomShipInfoTextData(0, infos, 2, 'NoRank');",
              "                    ShipCustomShipInfoTextData(0, infos, 3, -1);",
              "                }",
              "                //Иначе временно замораживаем их получение рейнджером",
              "                else",
              "                {",
              "                    ShipCustomShipInfoTextData(0, infos, 2, -1);",
              "                    ShipCustomShipInfoTextData(0, infos, 3, 0);",
              "                }",
              "            }",
              "",
              "            //Даём рейнджеру особый тип, если число посещённых им ЧД уже со старта превышает 10",
              "            if(countBH >= 10)",
              "            {",
              "                tstr1 = ShipType(tdwd1);",
              "                if(tstr1 != 'RangerExplorer' && tstr1 != 'RangerPirateExplorer')",
              "                {",
              "                    if(tstr1 == 'Ranger') ShipType(tdwd1, 'RangerExplorer');",
              "                    else ShipType(tdwd1, 'RangerPirateExplorer');",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "lastShipId = GalaxyShipId();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  220,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  11,
          "Total.Lines":  265,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Делаем регулярные \"прогоны\", раздающие инфошки исследователей",
              "if(GalaxyShipId() > lastShipId)",
              "{",
              "    //Ищем все новорождённые корабли в Галактике, после чего начинаем их подробный перебор",
              "    i = BuildListOfNewShips(tarr, lastShipId, 2, 1+2+4+8+16, 1, '', ',RangerPirate');",
              "    if(i)",
              "    {",
              "        for(i = 0; i < ArrayDim(tarr); i = i + 1)",
              "        {",
              "            tdwd1 = tarr[i];",
              "            if(ShipInScript(tdwd1, 0)) continue; //Исключаем скриптовые корабли, не считая корабли с OrderLock",
              "            if(ShipType(tdwd1) == 'FemRanger') continue; //Исключаем спецагентов",
              "",
              "            if(RndObject(1, 100, tdwd1) > TotalBHExplorersPercent) continue; //Ограничиваем процент рейнджеров, летающих по ЧД",
              "            //Добавляем рейнджеру инфошку исследователя",
              "            infos = ShipAddCustomShipInfo(tdwd1, 'ExpExplorers_ExplorerInfo', 'NoShow', 0, 0, 0);",
              "",
              "            //Если подключён мод ExpScienceRanks, то запоминаем стартовую информацию о следующем и текущем звании",
              "            //TextData3 == -1 - полный блок на получение и обладание учёными званиями",
              "            //TextData3 == 0 - нулевое звание \"Абитуриент\"",
              "            //TextData3 == 1-8 - остальные учёные звания",
              "",
              "            //Если подключён мод ExpScienceRanks",
              "            if(BlockExist('RankScientific'))",
              "            {",
              "                //Данный рейнджер не получит никаких учёных званий вообще",
              "                if(ShipType(tdwd1) == 'RangerPirate' || RndObject(1, 100, tdwd1) <= 30)",
              "                {",
              "                    ShipCustomShipInfoTextData(0, infos, 2, 'NoRank');",
              "                    ShipCustomShipInfoTextData(0, infos, 3, -1);",
              "                }",
              "                //Иначе",
              "                else",
              "                {",
              "                    //Выставляем стартовое значение посещённых рейнджером ЧД (0)",
              "                    countBH = 0;",
              "                    //Узнаём, сколько ЧД нужно посетить до первого звания",
              "                    forNextRank = CT('RankScientific.1.BlackHolesCount');",
              "                    forNextRank = forNextRank - countBH;",
              "                    //Запоминаем число ЧД, необходимых для получения следующего звания",
              "                    ShipCustomShipInfoTextData(0, infos, 2, round(0.5 * forNextRank)); //Делим это число на 2, иначе они никогда не поднимут себе нормальных званий",
              "                    //Также выдаём ему стартовое звание \"Абитуриент\"",
              "                    ShipCustomShipInfoTextData(0, infos, 3, 0);",
              "                }",
              "            }",
              "            //Если мод ExpScienceRanks не подключён",
              "            else",
              "            {",
              "                //Рейнджер не получит учёных званий даже после подключения ExpScienceRanks",
              "                if(ShipType(tdwd1) == 'RangerPirate' || RndObject(1, 100, tdwd1) <= 30)",
              "                {",
              "                    ShipCustomShipInfoTextData(0, infos, 2, 'NoRank');",
              "                    ShipCustomShipInfoTextData(0, infos, 3, -1);",
              "                }",
              "                //Иначе временно замораживаем их получение рейнджером",
              "                else",
              "                {",
              "                    ShipCustomShipInfoTextData(0, infos, 2, -1);",
              "                    ShipCustomShipInfoTextData(0, infos, 3, 0);",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    lastShipId = GalaxyShipId();",
              "}",
              "",
              "//Обнуляем маркер залёта игрока в ЧД вместе с другими кораблями",
              "if(ShipInNormalSpace(Player())) CurABWasVisited = 0;",
              "",
              "//Если игрок залетел в ЧД",
              "if(ShipInHole(Player()))",
              "{",
              "    if(!StartAB() && !GABStatus)",
              "    {",
              "        if(!CurABWasVisited)",
              "        {",
              "            //Создаём цикл только для возможности прервать исполнение кода в любой момент",
              "            while(1)",
              "            {",
              "                cur_hole = ShipOrderObj(Player());",
              "",
              "                //Выставляем маркер, препятствующий повторному исполнению данного кода за одно посещение ЧД",
              "                CurABWasVisited = 1;",
              "                //На всякий случай запрещаем игроку повторный влёт в данную ЧД (боты могут случайно продлить её время жизни своими залётами)",
              "                if(HoleMap(cur_hole) != 'SkipAB') HoleMap(cur_hole, 'NoEntry');",
              "                else break;",
              "",
              "                if(IsScriptActive('Mod_ShuPirates_BlackHole'))",
              "                {",
              "                    //Если ЧД, в которую залетел игрок, оказалась пиратской",
              "                    if(GetValueFromScript('Mod_ShuPirates_BlackHole', 'BlackHoleId') == Id(cur_hole)) break;",
              "                }",
              "",
              "                //Если игрок попал в келлерскую ЧД, отменяем дальнейшее исполнение кода",
              "                if(HoleStar1(cur_hole) == HoleStar2(cur_hole)) break;",
              "                //Если игрок попал в клисанскую ЧД, отменяем дальнейшее исполнение кода",
              "                if(HoleStar1(cur_hole) == GalaxyStar(TortugatzId) || HoleStar2(cur_hole) == GalaxyStar(TortugatzId)) break;",
              "",
              "                //Ищем корабли, влетевшие в ЧД одновременно с игроком",
              "                check = 0;",
              "                cur_star = HoleStar1(cur_hole);",
              "                tint2 = StarShips(cur_star);",
              "                cnt = tint2 + StarShips(HoleStar2(cur_hole));",
              "                for(i = 0; i < cnt; i = i + 1)",
              "                {",
              "                    if(i < tint2) cur_ship = StarShips(cur_star, i);",
              "                    else cur_ship = StarShips(HoleStar2(cur_hole), i - tint2);",
              "",
              "                    if(IsPlayer(cur_ship)) continue;",
              "                    if(!ShipInHole(cur_ship)) continue;",
              "                    if(ShipOrderObj(cur_ship) != cur_hole) continue; //Проверка, что корабль находится в той же ЧД, что и игрок",
              "",
              "                    //Проверяем отношение корабля к игроку, если оно враждебно, то корабль останется врагом игрока и в АБ",
              "                    if(RelationToShip(cur_ship, Player()) <= 9)",
              "                    {",
              "                        tstr1 = '' + ShipTypeN(cur_ship) + ',' + ShipSubType(cur_ship) + ',' + ShipType(cur_ship) + ',' + ShipName(cur_ship) + ',' + Name(cur_ship) + ',' + ShipOwner(cur_ship) + ',ShipId_' + Id(cur_ship);",
              "                        tint1 = 2;",
              "                    }",
              "                    else",
              "                    {",
              "                        tstr1 = '' + ShipTypeN(cur_ship) + ',' + ShipSubType(cur_ship) + ',' + ShipType(cur_ship) + '_Friend' + ',' + ShipName(cur_ship) + ',' + Name(cur_ship) + ',' + ShipOwner(cur_ship) + ',ShipId_' + Id(cur_ship);",
              "                        tint1 = 1;",
              "                    }",
              "",
              "                    //Определяем общую силу корабля в АБ",
              "                    //tint2 = ShipTypeN(cur_ship);",
              "                    //if(tint2 == t_Pirate) tint2 = 105;",
              "                    //else if(tint2 == t_Tranclucator) tint2 = 80;",
              "                    //else tint2 = 120;",
              "",
              "                    //Включаем этот корабль в будущую аркадную битву",
              "                    tdwd2 = ConvertToABShip(cur_ship, tint1, 100, 100, tstr1);",
              "                    //Добавляем автореген за каждого экипированного младшего дроида",
              "                    ABShipModifiers(tdwd2, 'regen', 100 * ArtefactTypeInUse(cur_ship, t_ArtefactDroid));",
              "                    //Ставим кораблю метку, что он попал в ЧД вместе с игроком",
              "                    tint1 = ShipFindCustomShipInfoByType(cur_ship, 'ExpExplorers_ExplorerInfo');",
              "                    if(~tint1)",
              "                    {",
              "                        //Если данный корабль является партнёром игрока, то артефактов после боя он не получит",
              "                        if(ShipIsPartner(cur_ship) == Player()) ShipCustomShipInfoData(cur_ship, tint1, 1, 5);",
              "                        else ShipCustomShipInfoData(cur_ship, tint1, 1, 4);",
              "                    }",
              "                    check = check + 1;",
              "                }",
              "                //Если не обнаружили кораблей, попавших в одну ЧД с игроком",
              "                if(!check) break;",
              "",
              "                //Считаем число неизвестных кораблей, который должны встретить игрока и Ко в ЧД",
              "                //Используем стандартную игровую систему подсчёта, плюс добавляем лишние корабли за каждого дополнительного спутника игрока",
              "                //Число убитых игроком в ЧД",
              "                tint1 = ShipStatistic(Player(), 7);",
              "                //В самой первой ЧД не более одного врага, плюс по врагу за каждого бро",
              "                if(!tint1)",
              "                {",
              "                    minABFoes = 1 + check;",
              "                    maxABFoes = 1 + check;",
              "                }",
              "                //Далее по два врага (плюс по одному за каждого бро) до тех пор, пока не будет выбито определённое число кораблей, зависящее от сложности настройки ЧД",
              "                else if(tint1 < int(5.0 / 0.70 + (0.15 * GalaxyDiffLevels(6))))",
              "                {",
              "                    minABFoes = 2 + check;",
              "                    maxABFoes = 2 + check;",
              "                }",
              "                //Далее уже будет зависеть от ГТУ (плюс по одному за каждого бро)",
              "                else",
              "                {",
              "                    tint1 = round(PortionInDiapason(GalaxyTechLevel(), 4, 8, 0, 2));",
              "                    minABFoes = 2 + tint1 + check;",
              "                    maxABFoes = 4 + tint1 + check;",
              "                }",
              "                //Создаём неизвестные враждебные аркадные корабли (тем больше, чем больше кораблей залетело в ЧД вместе с игроком)",
              "                //chance = 34;",
              "                cnt = RndObject(minABFoes, maxABFoes, cur_star);",
              "                for(i = 1; i <= cnt; i = i + 1)",
              "                {",
              "                    //Случайным образом определяем, в каком из первых четырёх кораблей игроку выпадет случайный артефакт",
              "                    // if(chance)",
              "                    // {",
              "                        // if(RndObject(1, 100, cur_star) <= chance)",
              "                        // {",
              "                            // if(IsScriptActive('Mod_ExpArts')) tdwd1 = RndObject(1, ArrayDim(GgiveArtsArray) - 1, cur_star); //+4 дополнительных артефакта из ExpArts",
              "                            // else tdwd1 = RndObject(1, 27, cur_star); //Иначе только оригинальные экипируемые",
              "                            //В рандом выпал оригинальный артефакт",
              "                            // if(tdwd1 <= 27) tdwd1 = CreateArt(GgiveArtsArray[tdwd1], 6);",
              "                            //Выпал кастомный",
              "                            // else tdwd1 = CreateCustomArt(GgiveArtsArray[tdwd1], CustomArtSizeCalc(0 + CT('Artefacts.CustomArtefacts.' + GgiveArtsArray[tdwd1] + '.Size')), CustomArtCostCalc(0 + CT('Artefacts.CustomArtefacts.' + GgiveArtsArray[tdwd1] + '.Cost')), 6);",
              "                            // chance = -1;",
              "                        // }",
              "                        // else chance = chance + 33;",
              "                    // }",
              "                    // if(chance == -1)",
              "                    // {",
              "                        // CreateABShip('Ship.X.' + RndObject(0, 2, cur_star), 0, 100, 100, '', tdwd1);",
              "                        // chance = 0;",
              "                    // }",
              "                    // else CreateABShip('Ship.X.' + RndObject(0, 2, cur_star), 0, 100, 100, '');",
              "",
              "                    //Создаём неизвестные корабли со стандартным дропом, как в оригинальной игре",
              "                    CreateABShip('Ship.X.' + RndObject(0, 2, cur_star), 0, 100, 100, '', -1);",
              "                }",
              "                //Начинаем аркадный бой",
              "                tint1 = 1+2+4+8+16+32+64+128+256+512+1024+2048+4096+8192; //14 оригинальных карт",
              "                //Проверяем, подключёны ли моды RevABMaps и/или SR1ABMaps",
              "                if(ResourceExist('ABMap.Tachanka')) tint1 = tint1 + 16384+32768+65536+131072+262144+524288; //+6",
              "                if(ResourceExist('ABMap.Azure')) tint1 = tint1 + 1048576+2097152+4194304+8388608; //+4",
              "                tint2 = RndObject(0, 23, cur_star);",
              "                while(!(tint1 & (1 << tint2))) tint2 = RndObject(0, 23, cur_star); //Максимальная выборка - 24 карты",
              "                //Если выпала оригинальная карта",
              "                if(tint2 <= 13) StartAB('ABMap.map_' + (tint2 + 1));",
              "                //Если выпала карта из мода",
              "                else",
              "                {",
              "                    if(tint2 == 14) StartAB('ABMap.Nonsense');",
              "                    else if(tint2 == 15) StartAB('ABMap.Pulsar');",
              "                    else if(tint2 == 16) StartAB('ABMap.Strolocobs');",
              "                    else if(tint2 == 17) StartAB('ABMap.Tachanka');",
              "                    else if(tint2 == 18) StartAB('ABMap.Fifth_Dimension');",
              "                    else if(tint2 == 19) StartAB('ABMap.Spider\\\\\\'s_Lair');",
              "                    else if(tint2 == 20) StartAB('ABMap.Azure', 1); //Для \"Синевы\" всегда синий фон",
              "                    else if(tint2 == 21) StartAB('ABMap.Pseudoball');",
              "                    else if(tint2 == 22) StartAB('ABMap.Thor');",
              "                    else StartAB('ABMap.Bowling_Alley');",
              "                }",
              "                break;",
              "            }",
              "        }",
              "    }",
              "    //Игрок завершил аркадный бой, в котором с ним также оказался другой корабль",
              "    else if(GABStatus == 2)",
              "    {",
              "        //Перебираем галаэвенты и выясняем, что стало с копией корабля, влетевшего в ЧД вместе с игроком",
              "        for(i = GalaxyEvents() - 1; i >= 0; i = i - 1)",
              "        {",
              "            if(GalaxyEventDate(i) < CurTurn()) break;",
              "            tstr1 = GalaxyEventType(i);",
              "            //Если он погиб",
              "            if(tstr1 == 'LabeledShipKilledInAB')",
              "            {",
              "                tstr1 = GetParFromString(GalaxyEventsTextData(i, 0), ',', 6, 0);",
              "                if(~findsubstr(tstr1, 'ShipId_'))",
              "                {",
              "                    //Определяем Id, а затем ищем и убиваем этот корабль в нормальном гиперпространстве, до его выхода из ЧД",
              "                    HullHP(IdToShip(int(tstr1)), -100000); //Выставляем минусовое ХП, чтобы никакой дроид не успел отхилить его за один ход",
              "                }",
              "            }",
              "            //Если выжил",
              "            else if(tstr1 == 'LabeledShipSurvivedInAB')",
              "            {",
              "                tstr1 = GetParFromString(GalaxyEventsTextData(i, 0), ',', 6, 0);",
              "                if(~findsubstr(tstr1, 'ShipId_'))",
              "                {",
              "                    //Выставляем ему уровень здоровья, который остался у этого корабля под конец аркадного боя",
              "                    tdwd1 = IdToShip(int(tstr1));",
              "                    HullHP(tdwd1, GalaxyEventData(i, 0));",
              "                    //Проверка на случай, если корабль закончил АБ с минимальным количеством ХП и на выходе получил из события нулевое здоровье",
              "                    if(HullHP(tdwd1) < 1) HullHP(tdwd1, round(0.01 * ItemSize(ShipItems(tdwd1, 0))) + 1);",
              "",
              "                    //Выставляем этому кораблю время вылета из ЧД, идентичное времени вылета игрока",
              "                    ShipOrderData1(tdwd1, ShipOrderData1(Player()));",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  200,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  30,
          "Total.Lines":  76,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "cur_ship = GetTalkShip();",
              "if(cur_ship)",
              "{",
              "    if(!TalkByAI())",
              "    {",
              "        tint2 = 0;",
              "        check = 0;",
              "        //\"Деблокируем\" всех партнёров игрока, чтобы была возможность отдать им другой групповой приказ",
              "        if(ShipIsPartner(cur_ship) == Player())",
              "        {",
              "            for(i = 0; i < ShipPartners(Player()); i = i + 1)",
              "            {",
              "                tdwd1 = ShipPartners(Player(), i);",
              "                if(ShipFindCustomShipInfoByType(tdwd1, 'OrderJumpHole_ForCompanion') == -1) continue;",
              "                OrderLock(tdwd1, 0);",
              "            }",
              "            for(i = 0; i < PlayerPirates(); i = i + 1)",
              "            {",
              "                tdwd1 = PlayerPirates(i);",
              "                if(ShipFindCustomShipInfoByType(tdwd1, 'OrderJumpHole_ForCompanion') == -1) continue;",
              "                OrderLock(tdwd1, 0);",
              "            }",
              "            check = 1;",
              "        }",
              "        //\"Деблокируем\" всех транклюкаторов игрока, чтобы была возможность отдать им другой групповой приказ",
              "        else if(TranclucatorData(cur_ship,'Proprietor') == Player())",
              "        {",
              "            for(i = 0; i < PlayerTranclucators(); i = i + 1)",
              "            {",
              "                tdwd1 = PlayerTranclucators(i);",
              "                if(ShipFindCustomShipInfoByType(tdwd1, 'OrderJumpHole_ForCompanion') == -1) continue;",
              "                OrderLock(tdwd1, 0);",
              "            }",
              "            check = 1;",
              "        }",
              "        ",
              "        //Если корабль является партнёром/транклюкатором игрока",
              "        if(check)",
              "        {",
              "            //Проверяем, имеется ли на корабле инфошка приказа прыжка в ЧД",
              "            tint3 = -1;",
              "            tint1 = ShipFindCustomShipInfoByType(cur_ship, 'OrderJumpHole_ForCompanion');",
              "            if(~ShipFindCustomShipInfoByType(cur_ship, 'OrderJumpHole_ForCompanion')) tint3 = ShipCustomShipInfoData(cur_ship, tint1, 2); //Запоминаем Id указанной в приказе чёрной дыры",
              "            //Если у игрока установлен приказ на прыжок в ЧД",
              "            if(ShipOrder(Player()) == 4)",
              "            {",
              "                cur_star = ShipStar(Player());",
              "                cur_hole = ShipOrderObj(Player());",
              "",
              "                //Если приказ на прыжок в данную ЧД кораблю ещё не выдан",
              "                if(tint3 != Id(cur_hole))",
              "                {",
              "                    tint2 = ShipTypeN(cur_ship);",
              "                    //Добавляем возможность отдать партнёру приказ о залёте в ЧД",
              "                    if(tint2 == t_Ranger)",
              "                    {",
              "                        tstr1 = CT('Script.Mod_ExpExplorers.PlayerCoalAsk');",
              "                        AddDialogInject('SendCoalPartnerToBH', '', tstr1, 10);",
              "                    }",
              "                    //Добавляем возможность отдать транклюкатору приказ о залёте в ЧД",
              "                    else if(tint2 == t_Tranclucator)",
              "                    {",
              "                        tstr1 = CT('Script.Mod_ExpExplorers.PlayerTrancAsk');",
              "                        AddDialogInject('SendTranclucatorToBH', '', tstr1, 10);",
              "                    }",
              "                    //Добавляем возможность отдать пирату-партнёру приказ о залёте в ЧД",
              "                    else",
              "                    {",
              "                        tstr1 = CT('Script.Mod_ExpExplorers.PlayerPirateAsk');",
              "                        AddDialogInject('SendPiratePartnerToBH', '', tstr1, 10);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  -40,
          "Parent":  -1,
          "#":  38,
          "Total.Lines":  102,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(tarr);",
              "//Проверка на кастомные ЧД (оригинальные будут всегда возвращать '')",
              "check = 1;",
              "if(HoleMap(cur_hole) == '')",
              "{",
              "    //Проверка на ЧД Келлера (если её вход и выход находятся в одной системе)",
              "    if(Keller())",
              "    {",
              "        if(HoleStar1(cur_hole) != HoleStar2(cur_hole)) check = 1;",
              "        else check = 0;",
              "    }",
              "    else check = 1;",
              "}",
              "else",
              "{",
              "    if(HoleMap(cur_hole) == 'SkipAB')",
              "    {",
              "        //Клисанские ЧД разрешаем",
              "        if(HoleStar1(cur_hole) == GalaxyStar(TortugatzId) || HoleStar2(cur_hole) == GalaxyStar(TortugatzId)) check = 1;",
              "        else check = 0;",
              "    }",
              "    else check = 0;",
              "}",
              "",
              "//Если ЧД прошла проверку на \"валидность\"",
              "if(check)",
              "{",
              "    //Если у партнёра осталось не менее 15% здоровья",
              "    if(HullDamage(cur_ship) <= 85)",
              "    {",
              "        tstr1='</color>'+CT('Script.Mod_ExpExplorers.CoalAgree');",
              "        //Если партнёров у игрока более одного, проверяем, сколько из них находятся в текущей системе",
              "        if(ShipPartners(Player()) > 1 || PlayerPirates())",
              "        {",
              "            for(i=0; i<ShipPartners(Player()); i=i+1)",
              "            {",
              "                tdwd1=ShipPartners(Player(),i);",
              "                if(!ShipInNormalSpace(tdwd1))continue;",
              "                if(ShipStar(tdwd1) != cur_star)continue;",
              "                ArrayAdd(tarr,tdwd1);",
              "            }",
              "            for(i=0; i<PlayerPirates(); i=i+1)",
              "            {",
              "                tdwd1=PlayerPirates(i);",
              "                if(!ShipInNormalSpace(tdwd1))continue;",
              "                if(ShipStar(tdwd1) != cur_star)continue;",
              "                ArrayAdd(tarr,tdwd1);",
              "            }",
              "            //Если партнёров несколько, выводим запрос и ответ о ретрансляции приказа всем доступным кораблям",
              "            if(ArrayDim(tarr) > 2)",
              "            {",
              "                tstr1=tstr1+CT('Script.Mod_ExpExplorers.LineBreak')+CT('Talk.Partner.IsOrderForAll');",
              "                tstr3='</color>'+CT('Talk.Partner.OrderForAll');",
              "                tstr2='</color>'+CT('Talk.Partner.OrderForYou');",
              "            }",
              "            else tstr2='</color>'+CT('Talk.Exit');",
              "        }",
              "        else tstr2='</color>'+CT('Talk.Exit');",
              "",
              "        //Направляем партнёра в указанную ЧД",
              "        if(HoleStar1(cur_hole) == cur_star)",
              "        {",
              "            OrderMove(cur_ship,HoleX1(cur_hole),HoleY1(cur_hole));",
              "            //Если у партнёра не было установлено приказа на полёт в ЧД",
              "            if(tint1 == -1)ShipAddCustomShipInfo(cur_ship,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX1(cur_hole),HoleY1(cur_hole));",
              "            //Если приказ на полёт в другую ЧД уже был установлен",
              "            else",
              "            {",
              "                ShipCustomShipInfoData(cur_ship,tint1,1,1);",
              "                ShipCustomShipInfoData(cur_ship,tint1,2,Id(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,1,HoleX1(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,2,HoleY1(cur_hole));",
              "            }",
              "        }",
              "        else",
              "        {",
              "            OrderMove(cur_ship,HoleX2(cur_hole),HoleY2(cur_hole));",
              "            //Если у партнёра не было установлено приказа на полёт в ЧД",
              "            if(tint1 == -1) ShipAddCustomShipInfo(cur_ship,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX2(cur_hole),HoleY2(cur_hole));",
              "            //Если приказ на полёт в другую ЧД уже был установлен",
              "            else",
              "            {",
              "                ShipCustomShipInfoData(cur_ship,tint1,1,1);",
              "                ShipCustomShipInfoData(cur_ship,tint1,2,Id(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,1,HoleX2(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,2,HoleY2(cur_hole));",
              "            }",
              "        }",
              "    }",
              "    //Партнёр отказался, т.к. его корабль слишком сильно повреждён",
              "    else",
              "    {",
              "        tstr1='</color>'+CT('Script.Mod_ExpExplorers.CoalDisagreeLowHP');",
              "        tstr2='</color>'+CT('Script.Mod_ExpExplorers.PlayerCoalDisagree');",
              "    }",
              "}",
              "//Партнёр отказался, т.к. игрок указал на скриптовую ЧД или на ЧД Келлера",
              "else",
              "{",
              "    tstr1='</color>'+CT('Script.Mod_ExpExplorers.CoalDisagree');",
              "    tstr2='</color>'+CT('Script.Mod_ExpExplorers.PlayerCoalDisagree');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  250,
          "Pos.y":  -40,
          "Parent":  -1,
          "#":  39,
          "Total.Lines":  102,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(tarr);",
              "//Проверка на кастомные ЧД (оригинальные будут всегда возвращать '')",
              "check = 1;",
              "if(HoleMap(cur_hole) == '')",
              "{",
              "    //Проверка на ЧД Келлера (если её вход и выход находятся в одной системе)",
              "    if(Keller())",
              "    {",
              "        if(HoleStar1(cur_hole) != HoleStar2(cur_hole)) check = 1;",
              "        else check = 0;",
              "    }",
              "    else check = 1;",
              "}",
              "else",
              "{",
              "    if(HoleMap(cur_hole) == 'SkipAB')",
              "    {",
              "        //Клисанские ЧД разрешаем",
              "        if(HoleStar1(cur_hole) == GalaxyStar(TortugatzId) || HoleStar2(cur_hole) == GalaxyStar(TortugatzId)) check = 1;",
              "        else check = 0;",
              "    }",
              "    else check = 0;",
              "}",
              "",
              "//Если ЧД прошла проверку на \"валидность\"",
              "if(check)",
              "{",
              "    //Если у пирата осталось не менее 25% здоровья",
              "    if(HullDamage(cur_ship) <= 75)",
              "    {",
              "        tstr1='</color>'+CT('Script.Mod_ExpExplorers.PirateAgree');",
              "        //Если партнёров у игрока более одного, проверяем, сколько из них находятся в текущей системе",
              "        if(PlayerPirates() > 1 || ShipPartners(Player()))",
              "        {",
              "            for(i=0; i<ShipPartners(Player()); i=i+1)",
              "            {",
              "                tdwd1=ShipPartners(Player(),i);",
              "                if(!ShipInNormalSpace(tdwd1))continue;",
              "                if(ShipStar(tdwd1) != cur_star)continue;",
              "                ArrayAdd(tarr,tdwd1);",
              "            }",
              "            for(i=0; i<PlayerPirates(); i=i+1)",
              "            {",
              "                tdwd1=PlayerPirates(i);",
              "                if(!ShipInNormalSpace(tdwd1))continue;",
              "                if(ShipStar(tdwd1) != cur_star)continue;",
              "                ArrayAdd(tarr,tdwd1);",
              "            }",
              "            //Если партнёров несколько, выводим запрос и ответ о ретрансляции приказа всем доступным кораблям",
              "            if(ArrayDim(tarr) > 2)",
              "            {",
              "                tstr1=tstr1+CT('Script.Mod_ExpExplorers.LineBreak')+CT('Talk.Pirate.IsOrderForAll');",
              "                tstr3='</color>'+CT('Talk.Pirate.OrderForAll');",
              "                tstr2='</color>'+CT('Talk.Pirate.OrderForYou');",
              "            }",
              "            else tstr2='</color>'+CT('Talk.Exit');",
              "        }",
              "        else tstr2='</color>'+CT('Talk.Exit');",
              "",
              "        //Направляем партнёра в указанную ЧД",
              "        if(HoleStar1(cur_hole) == cur_star)",
              "        {",
              "            OrderMove(cur_ship,HoleX1(cur_hole),HoleY1(cur_hole));",
              "            //Если у партнёра не было установлено приказа на полёт в ЧД",
              "            if(tint1 == -1) ShipAddCustomShipInfo(cur_ship,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX1(cur_hole),HoleY1(cur_hole));",
              "            //Если приказ на полёт в другую ЧД уже был установлен",
              "            else",
              "            {",
              "                ShipCustomShipInfoData(cur_ship,tint1,1,1);",
              "                ShipCustomShipInfoData(cur_ship,tint1,2,Id(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,1,HoleX1(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,2,HoleY1(cur_hole));",
              "            }",
              "        }",
              "        else",
              "        {",
              "            OrderMove(cur_ship,HoleX2(cur_hole),HoleY2(cur_hole));",
              "            //Если у партнёра не было установлено приказа на полёт в ЧД",
              "            if(tint1 == -1)ShipAddCustomShipInfo(cur_ship,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX2(cur_hole),HoleY2(cur_hole));",
              "            //Если приказ на полёт в другую ЧД уже был установлен",
              "            else",
              "            {",
              "                ShipCustomShipInfoData(cur_ship,tint1,1,1);",
              "                ShipCustomShipInfoData(cur_ship,tint1,2,Id(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,1,HoleX2(cur_hole));",
              "                ShipCustomShipInfoTextData(cur_ship,tint1,2,HoleY2(cur_hole));",
              "            }",
              "        }",
              "    }",
              "    //Партнёр отказался, т.к. его корабль слишком сильно повреждён",
              "    else",
              "    {",
              "        tstr1='</color>'+CT('Script.Mod_ExpExplorers.PirateDisagreeLowHP');",
              "        tstr2='</color>'+CT('Script.Mod_ExpExplorers.PlayerPirateDisagree');",
              "    }",
              "}",
              "//Партнёр отказался, т.к. игрок указал на скриптовую ЧД или на ЧД Келлера",
              "else",
              "{",
              "    tstr1='</color>'+CT('Script.Mod_ExpExplorers.PirateDisagree');",
              "    tstr2='</color>'+CT('Script.Mod_ExpExplorers.PlayerPirateDisagree');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  410,
          "Pos.y":  -40,
          "Parent":  -1,
          "#":  41,
          "Total.Lines":  94,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayClear(tarr);",
              "//Проверка на кастомные ЧД (оригинальные будут всегда возвращать '')",
              "check = 1;",
              "if(HoleMap(cur_hole) == '')",
              "{",
              "    //Проверка на ЧД Келлера (если её вход и выход находятся в одной системе)",
              "    if(Keller())",
              "    {",
              "        if(HoleStar1(cur_hole) != HoleStar2(cur_hole)) check = 1;",
              "        else check = 0;",
              "    }",
              "    else check = 1;",
              "}",
              "else",
              "{",
              "    if(HoleMap(cur_hole) == 'SkipAB')",
              "    {",
              "        //Клисанские ЧД разрешаем",
              "        if(HoleStar1(cur_hole) == GalaxyStar(TortugatzId) || HoleStar2(cur_hole) == GalaxyStar(TortugatzId)) check = 1;",
              "        else check = 0;",
              "    }",
              "    else check = 0;",
              "}",
              "",
              "//Если ЧД прошла проверку на \"валидность\"",
              "if(check)",
              "{",
              "    tstr1='</color>'+CT('Script.Mod_ExpExplorers.TrancAgree');",
              "    //Если транклюкаторов у игрока более одного, проверяем, сколько из них находятся в текущей системе",
              "    if(PlayerTranclucators() > 1)",
              "    {",
              "        for(i=0; i<PlayerTranclucators(); i=i+1)",
              "        {",
              "            tdwd1=PlayerTranclucators(i);",
              "            if(!ShipInNormalSpace(tdwd1))continue;",
              "            if(ShipStar(tdwd1) != cur_star)continue;",
              "            ArrayAdd(tarr,tdwd1);",
              "        }",
              "        //Если транклюкаторов у игрока несколько, выводим запрос и ответ о ретрансляции приказа всем доступным роботам",
              "        if(ArrayDim(tarr) > 2)",
              "        {",
              "            tstr3='</color>'+CT('Talk.Tranclucator.OrderForAll');",
              "            tstr2='</color>'+CT('Talk.Exit');",
              "        }",
              "        else tstr2='</color>'+CT('Talk.Exit');",
              "    }",
              "    else tstr2='</color>'+CT('Talk.Exit');",
              "",
              "    //Обнуляем все прочие активные приказы транклюкатора",
              "    TranclucatorData(cur_ship,'Docking',0);",
              "    TranclucatorData(cur_ship,'SeekItems',0);",
              "    TranclucatorData(cur_ship,'LandStorage',0);",
              "    TranclucatorData(cur_ship,'LandStorage',0);",
              "    //Если нашли у транклюкатора инфошку навигационного компьютера",
              "    if(ShipFindCustomShipInfoByType(cur_ship,'TrancNavComputerInfo'))",
              "        //Отменяем возможный приказ на прыжок в другую систему",
              "        ShipCustomShipInfoTextData(cur_ship,'TrancNavComputerInfo',3,'');",
              "",
              "    //Направляем транклюкатора в указанную ЧД",
              "    if(HoleStar1(cur_hole) == cur_star)",
              "    {",
              "        OrderMove(cur_ship,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если у транклюкатора не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(cur_ship,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(cur_ship,tint1,1,1);",
              "            ShipCustomShipInfoData(cur_ship,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(cur_ship,tint1,1,HoleX1(cur_hole));",
              "            ShipCustomShipInfoTextData(cur_ship,tint1,2,HoleY1(cur_hole));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        OrderMove(cur_ship,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если у транклюкатора не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1) ShipAddCustomShipInfo(cur_ship,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(cur_ship,tint1,1,1);",
              "            ShipCustomShipInfoData(cur_ship,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(cur_ship,tint1,1,HoleX2(cur_hole));",
              "            ShipCustomShipInfoTextData(cur_ship,tint1,2,HoleY2(cur_hole));",
              "        }",
              "    }",
              "}",
              "//транклюкатор отказался, т.к. игрок указал на скриптовую ЧД или на ЧД Келлера",
              "else",
              "{",
              "    tstr1='</color>'+CT('Script.Mod_ExpExplorers.TrancDisagree');",
              "    tstr2='</color>'+CT('Script.Mod_ExpExplorers.PlayerTrancDisagree');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  50,
          "Total.Lines":  47,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок решил раздать общий приказ на прыжок в ЧД всем доступным партнёрам",
              "for(i=1; i<ArrayDim(tarr); i=i+1)",
              "{",
              "    tdwd1=tarr[i];",
              "    //Пропускаем корабль, с которым игрок вёл диалог, и который ранее уже получил свой приказ",
              "    if(tdwd1 == cur_ship)continue;",
              "    //Пропускаем корабли со слишком большими повреждениями корпуса",
              "    if(HullDamage(tdwd1) > 85)continue;",
              "",
              "    //Проверяем, не выставлен ли у данного корабля приказ на указанную ЧД",
              "    tint1=ShipFindCustomShipInfoByType(tdwd1,'OrderJumpHole_ForCompanion');",
              "    if(tint1 > -1)",
              "    {",
              "        tint1=ShipCustomShipInfoData(tdwd1,tint1,2);",
              "        if(tint1 == Id(cur_hole))continue;",
              "    }",
              "",
              "    //Направляем корабль в указанную ЧД",
              "    if(HoleStar1(cur_hole) == cur_star)",
              "    {",
              "        OrderMove(tdwd1,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если у партнёра не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(tdwd1,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(tdwd1,tint1,1,1);",
              "            ShipCustomShipInfoData(tdwd1,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,1,HoleX1(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,2,HoleY1(cur_hole));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        OrderMove(tdwd1,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если у партнёра не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(tdwd1,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(tdwd1,tint1,1,1);",
              "            ShipCustomShipInfoData(tdwd1,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,1,HoleX2(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,2,HoleY2(cur_hole));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  180,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  51,
          "Total.Lines":  47,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок решил раздать общий приказ на прыжок в ЧД всем доступным партнёрам",
              "for(i=1; i<ArrayDim(tarr); i=i+1)",
              "{",
              "    tdwd1=tarr[i];",
              "    //Пропускаем корабль, с которым игрок вёл диалог, и который ранее уже получил свой приказ",
              "    if(tdwd1 == cur_ship)continue;",
              "    //Пропускаем корабли со слишком большими повреждениями корпуса",
              "    if(HullDamage(tdwd1) > 75)continue;",
              "",
              "    //Проверяем, не выставлен ли у данного корабля приказ на указанную ЧД",
              "    tint1=ShipFindCustomShipInfoByType(tdwd1,'OrderJumpHole_ForCompanion');",
              "    if(tint1 > -1)",
              "    {",
              "        tint1=ShipCustomShipInfoData(tdwd1,tint1,2);",
              "        if(tint1 == Id(cur_hole))continue;",
              "    }",
              "",
              "    //Направляем корабль в указанную ЧД",
              "    if(HoleStar1(cur_hole) == cur_star)",
              "    {",
              "        OrderMove(tdwd1,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если у партнёра не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(tdwd1,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(tdwd1,tint1,1,1);",
              "            ShipCustomShipInfoData(tdwd1,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,1,HoleX1(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,2,HoleY1(cur_hole));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        OrderMove(tdwd1,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если у партнёра не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(tdwd1,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(tdwd1,tint1,1,1);",
              "            ShipCustomShipInfoData(tdwd1,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,1,HoleX2(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,2,HoleY2(cur_hole));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  340,
          "Pos.y":  60,
          "Parent":  -1,
          "#":  52,
          "Total.Lines":  55,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок решил раздать общий приказ на прыжок в ЧД всем доступным транклюкаторам",
              "for(i=1; i<ArrayDim(tarr); i=i+1)",
              "{",
              "    tdwd1=tarr[i];",
              "    //Пропускаем транка, с которым игрок вёл диалог, и который ранее уже получил свой приказ",
              "    if(tdwd1 == cur_ship)continue;",
              "",
              "    //Проверяем, не выставлен ли у данного транка приказ на указанную ЧД",
              "    tint1=ShipFindCustomShipInfoByType(tdwd1,'OrderJumpHole_ForCompanion');",
              "    if(tint1 > -1)",
              "    {",
              "        tint1=ShipCustomShipInfoData(tdwd1,tint1,2);",
              "        if(tint1 == Id(cur_hole))continue;",
              "    }",
              "",
              "    //Обнуляем все прочие активные приказы транклюкатора",
              "    TranclucatorData(tdwd1,'Docking',0);",
              "    TranclucatorData(tdwd1,'SeekItems',0);",
              "    TranclucatorData(tdwd1,'LandStorage',0);",
              "    TranclucatorData(tdwd1,'LandStorage',0);",
              "    //Если нашли у транклюкатора инфошку навигационного компьютера",
              "    if(ShipFindCustomShipInfoByType(tdwd1,'TrancNavComputerInfo'))",
              "        //Отменяем возможный приказ на прыжок в другую систему",
              "        ShipCustomShipInfoTextData(tdwd1,'TrancNavComputerInfo',3,'');",
              "",
              "    //Направляем транка в указанную ЧД",
              "    if(HoleStar1(cur_hole) == cur_star)",
              "    {",
              "        OrderMove(tdwd1,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если у партнёра не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(tdwd1,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX1(cur_hole),HoleY1(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(tdwd1,tint1,1,1);",
              "            ShipCustomShipInfoData(tdwd1,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,1,HoleX1(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,2,HoleY1(cur_hole));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        OrderMove(tdwd1,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если у партнёра не было установлено приказа на полёт в ЧД",
              "        if(tint1 == -1)ShipAddCustomShipInfo(tdwd1,'OrderJumpHole_ForCompanion','NoShow',1,Id(cur_hole),0,HoleX2(cur_hole),HoleY2(cur_hole));",
              "        //Если приказ на полёт в другую ЧД уже был установлен",
              "        else",
              "        {",
              "            ShipCustomShipInfoData(tdwd1,tint1,1,1);",
              "            ShipCustomShipInfoData(tdwd1,tint1,2,Id(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,1,HoleX2(cur_hole));",
              "            ShipCustomShipInfoTextData(tdwd1,tint1,2,HoleY2(cur_hole));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  40,
          "Parent":  -1,
          "#":  59,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Разблокируем кнопку закрытия формы диалога, если опция группового приказа недоступна",
              "if(ArrayDim(tarr) < 2) InterfaceState('Talk', 'Close', 3);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  250,
          "Pos.y":  40,
          "Parent":  -1,
          "#":  60,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Разблокируем кнопку закрытия формы диалога, если опция группового приказа недоступна",
              "if(ArrayDim(tarr) < 2) InterfaceState('Talk', 'Close', 3);"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "PlanetNew",
          "Pos.x":  40,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  2,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  0,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "StarNew",
          "Pos.x":  40,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  1,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  220,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  13,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ShipIsTakeoff(Player())"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  44,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayDim(tarr) > 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  200,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  46,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayDim(tarr) > 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  360,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  48,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayDim(tarr) > 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  56,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  410,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  57,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  250,
          "Pos.y":  20,
          "Parent":  -1,
          "#":  58,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  40,
          "Pos.y":  230,
          "Parent":  -1,
          "#":  4,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "tdwd1",
          "Pos.x":  160,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  7,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  250,
          "Pos.y":  190,
          "Parent":  -1,
          "#":  8,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  250,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  9,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  280,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  10,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GgiveArtsArray",
          "Pos.x":  430,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  12,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr",
          "Pos.x":  420,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  14,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "countBH",
          "Pos.x":  250,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  15,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "forNextRank",
          "Pos.x":  250,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  16,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  340,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  17,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "infos",
          "Pos.x":  160,
          "Pos.y":  270,
          "Parent":  -1,
          "#":  18,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_rank",
          "Pos.x":  250,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  19,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "check",
          "Pos.x":  250,
          "Pos.y":  270,
          "Parent":  -1,
          "#":  20,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "lastShipId",
          "Pos.x":  160,
          "Pos.y":  290,
          "Parent":  -1,
          "#":  21,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd2",
          "Pos.x":  160,
          "Pos.y":  190,
          "Parent":  -1,
          "#":  22,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "chance",
          "Pos.x":  250,
          "Pos.y":  290,
          "Parent":  -1,
          "#":  23,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "CurABWasVisited",
          "Pos.x":  280,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  24,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TotalBHExplorersPercent",
          "Pos.x":  280,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  25,
          "Var.Type":  "Int",
          "Init":  "37",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ship",
          "Pos.x":  160,
          "Pos.y":  230,
          "Parent":  -1,
          "#":  26,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "minABFoes",
          "Pos.x":  250,
          "Pos.y":  370,
          "Parent":  -1,
          "#":  27,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "maxABFoes",
          "Pos.x":  250,
          "Pos.y":  390,
          "Parent":  -1,
          "#":  28,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint2",
          "Pos.x":  250,
          "Pos.y":  210,
          "Parent":  -1,
          "#":  29,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  340,
          "Pos.y":  190,
          "Parent":  -1,
          "#":  37,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_hole",
          "Pos.x":  160,
          "Pos.y":  250,
          "Parent":  -1,
          "#":  53,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_star",
          "Pos.x":  160,
          "Pos.y":  210,
          "Parent":  -1,
          "#":  54,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr3",
          "Pos.x":  340,
          "Pos.y":  210,
          "Parent":  -1,
          "#":  55,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint3",
          "Pos.x":  250,
          "Pos.y":  230,
          "Parent":  -1,
          "#":  61,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cnt",
          "Pos.x":  250,
          "Pos.y":  250,
          "Parent":  -1,
          "#":  62,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TortugatzId",
          "Pos.x":  160,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  63,
          "Var.Type":  "Int",
          "Init":  "70",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  2,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  0,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  13,
      "End":  11,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  31,
      "End":  38,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  38,
      "End":  32,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  36,
      "End":  39,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  39,
      "End":  34,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  40,
      "End":  41,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  41,
      "End":  42,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  44,
      "End":  45,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  46,
      "End":  47,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  48,
      "End":  49,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  47,
      "End":  51,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  57,
      "End":  43,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  44,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  56,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  34,
      "End":  46,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  34,
      "End":  58,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  42,
      "End":  48,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  42,
      "End":  57,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  56,
      "End":  59,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  59,
      "End":  33,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  58,
      "End":  60,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "BlockPar.EC.Total.Strings":  1,
  "BlockPar.EC":  
  [
    {
      "#":  "0",
      "String":  "<0>"    
    }  
  ]
}