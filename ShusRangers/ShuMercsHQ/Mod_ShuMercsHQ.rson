{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -2096,
  "ViewPos.y":  -130,
  "ScriptName":  "Mod_ShuMercsHQ",
  "ScriptFileOut":  "H:\\Mod_ShuMercsHQ.scr",
  "ScriptTextOut":  "H:\\Mod_ShuMercsHQ.txt",
  "GraphPoint.Count":  1114,
  "GraphLink.Count":  1030,
  "GraphRectText.Count":  2,
  "Variables.Count":  68,
  "Stars.Count":  1,
  "Planets.Count":  2,
  "Ships.Count":  1,
  "States.Count":  36,
  "Groups.Count":  15,
  "Places.Count":  6,
  "Items.Count":  4,
  "Ethers.Count":  0,
  "Dialogs.Count":  53,
  "DialogMessages.Count":  111,
  "DialogAnswers.Count":  213,
  "Operations.Count":  293,
  "Statements.Count":  311,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "DialogAnswers":      
      [
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  22,
          "#":  27,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  29,
          "#":  30,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  32,
          "#":  33,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  38,
          "#":  36,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  37,
          "#":  39,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  51,
          "#":  52,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "5"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -30,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  59,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "6"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  68,
          "#":  69,
          "Msg":  "",
          "AMsg.Num":  "7"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  71,
          "#":  79,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "8"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  72,
          "#":  80,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "9"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  73,
          "#":  81,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "10"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  74,
          "#":  82,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "11"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  75,
          "#":  83,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "12"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  76,
          "#":  84,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "13"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  77,
          "#":  85,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "14"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  78,
          "#":  86,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "15"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  95,
          "#":  96,
          "Msg":  "<tstr6>",
          "AMsg.Num":  "16"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -90,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  101,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "17"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  102,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "18"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -20,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  103,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "19"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  -40,
          "Pos.y":  130,
          "Parent":  -1,
          "#":  105,
          "Msg":  "",
          "AMsg.Num":  "20"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  -70,
          "Pos.y":  80,
          "Parent":  -1,
          "#":  110,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "21"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "planet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  114,
          "#":  115,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "22"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  116,
          "#":  117,
          "Msg":  "",
          "AMsg.Num":  "23"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  118,
          "#":  119,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "24"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  120,
          "#":  121,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "25"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  -430,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  128,
          "Msg":  "",
          "AMsg.Num":  "26"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -130,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  131,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "27"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -110,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  132,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "28"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -180,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  138,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "29"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  -150,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  144,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "30"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  51,
          "#":  145,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "31"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -320,
          "Pos.y":  0,
          "Parent":  -1,
          "#":  148,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "32"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -430,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  160,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "33"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -410,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  162,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "34"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -350,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  168,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "35"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  -120,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  173,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "36"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  177,
          "#":  178,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "37"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  179,
          "#":  180,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "38"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  197,
          "#":  190,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "39"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  184,
          "#":  191,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "40"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  185,
          "#":  192,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "41"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  186,
          "#":  193,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "42"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  195,
          "#":  196,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "43"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  199,
          "#":  200,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "44"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  207,
          "#":  210,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "45"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  208,
          "#":  211,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "46"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  209,
          "#":  212,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "47"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  214,
          "#":  215,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "48"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  219,
          "#":  220,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "49"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  225,
          "#":  226,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "50"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  253,
          "#":  256,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "51"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  254,
          "#":  257,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "52"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  255,
          "#":  258,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "53"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  272,
          "#":  270,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "54"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  273,
          "#":  271,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "55"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  275,
          "#":  276,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "56"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  277,
          "#":  279,
          "Msg":  "",
          "AMsg.Num":  "57"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  283,
          "#":  284,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "58"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  282,
          "#":  285,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "59"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  290,
          "#":  291,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "60"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  296,
          "#":  297,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "61"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  295,
          "#":  298,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "62"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  310,
          "#":  311,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "63"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  309,
          "#":  312,
          "Msg":  "<tstr1>",
          "AMsg.Num":  "64"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  313,
          "#":  315,
          "Msg":  "<tstr1>",
          "AMsg.Num":  "65"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  318,
          "#":  320,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "66"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  319,
          "#":  321,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "67"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  333,
          "#":  336,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "68"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  334,
          "#":  337,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "69"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  343,
          "#":  344,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "70"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  346,
          "#":  348,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "71"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  347,
          "#":  349,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "72"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  351,
          "#":  352,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "73"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  355,
          "#":  356,
          "Msg":  "<tstr6>",
          "AMsg.Num":  "74"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  392,
          "#":  393,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "75"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  419,
          "#":  416,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "76"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  420,
          "#":  417,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "77"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  421,
          "#":  418,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "78"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  424,
          "#":  423,
          "Msg":  "",
          "AMsg.Num":  "79"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  494,
          "#":  497,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "80"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  498,
          "#":  499,
          "Msg":  "",
          "AMsg.Num":  "81"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  505,
          "#":  507,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "82"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  506,
          "#":  508,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "83"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  509,
          "#":  510,
          "Msg":  "<tstr7>",
          "AMsg.Num":  "84"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  521,
          "#":  522,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "85"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  520,
          "#":  523,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "86"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  519,
          "#":  524,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "87"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  518,
          "#":  525,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "88"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  517,
          "#":  526,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "89"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  532,
          "#":  533,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "90"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  536,
          "#":  537,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "91"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  542,
          "#":  543,
          "Msg":  "<tstr6>",
          "AMsg.Num":  "92"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  547,
          "#":  548,
          "Msg":  "<tstr6>",
          "AMsg.Num":  "93"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  594,
          "#":  549,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "94"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  593,
          "#":  550,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "95"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  551,
          "#":  555,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "96"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  552,
          "#":  556,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "97"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  553,
          "#":  557,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "98"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  554,
          "#":  558,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "99"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  559,
          "#":  560,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "100"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  568,
          "#":  570,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "101"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  569,
          "#":  571,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "102"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  579,
          "#":  580,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "103"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  0,
          "Parent":  586,
          "#":  587,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "104"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  595,
          "#":  596,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "105"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  599,
          "#":  603,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "106"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  608,
          "#":  609,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "107"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  619,
          "#":  614,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "108"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  618,
          "#":  615,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "109"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  617,
          "#":  616,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "110"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  624,
          "#":  626,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "111"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  625,
          "#":  627,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "112"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  632,
          "#":  633,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "113"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  637,
          "#":  636,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "114"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  638,
          "#":  639,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "115"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  640,
          "#":  641,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "116"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  643,
          "#":  645,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "117"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  656,
          "#":  646,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "118"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  647,
          "#":  650,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "119"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  648,
          "#":  651,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "120"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  649,
          "#":  652,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "121"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  658,
          "#":  659,
          "Msg":  "",
          "AMsg.Num":  "122"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  664,
          "#":  672,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "123"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  673,
          "#":  674,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "124"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  678,
          "#":  679,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "125"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  689,
          "#":  690,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "126"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  693,
          "#":  694,
          "Msg":  "<tstr7>",
          "AMsg.Num":  "127"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  699,
          "#":  700,
          "Msg":  "<tstr6>",
          "AMsg.Num":  "128"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  707,
          "#":  708,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "129"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  713,
          "#":  714,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "130"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  719,
          "#":  720,
          "Msg":  "<tstr6>",
          "AMsg.Num":  "131"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  727,
          "#":  729,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "132"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  728,
          "#":  730,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "133"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  732,
          "#":  734,
          "Msg":  "",
          "AMsg.Num":  "134"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  740,
          "#":  741,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "135"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  742,
          "#":  743,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "136"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  747,
          "#":  754,
          "Msg":  "<tstr1>",
          "AMsg.Num":  "137"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  752,
          "#":  755,
          "Msg":  "<tstr1>",
          "AMsg.Num":  "138"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  753,
          "#":  756,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "139"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  748,
          "#":  757,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "140"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  749,
          "#":  758,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "141"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  751,
          "#":  759,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "142"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  776,
          "#":  760,
          "Msg":  "",
          "AMsg.Num":  "143"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  768,
          "#":  764,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "144"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  767,
          "#":  769,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "145"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  766,
          "#":  777,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "146"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  781,
          "#":  782,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "147"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  788,
          "#":  789,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "148"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  793,
          "#":  794,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "149"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  792,
          "#":  795,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "150"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  799,
          "#":  800,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "151"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  801,
          "#":  802,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "152"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  805,
          "#":  807,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "153"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  806,
          "#":  808,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "154"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  815,
          "#":  817,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "155"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  816,
          "#":  818,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "156"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  824,
          "#":  825,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "157"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  826,
          "#":  827,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "158"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  840,
          "#":  841,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "159"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  848,
          "#":  849,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "160"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  864,
          "#":  866,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "161"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  865,
          "#":  867,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "162"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  870,
          "#":  871,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "163"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  872,
          "#":  873,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "164"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  874,
          "#":  875,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "165"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  876,
          "#":  878,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "166"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  880,
          "#":  882,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "167"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  881,
          "#":  883,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "168"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  891,
          "#":  892,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "169"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  893,
          "#":  894,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "170"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  861,
          "#":  899,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "171"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  905,
          "#":  903,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "172"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  904,
          "#":  906,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "173"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "fastexit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  909,
          "#":  910,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "174"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  915,
          "#":  916,
          "Msg":  "",
          "AMsg.Num":  "175"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  922,
          "#":  919,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "176"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  923,
          "#":  921,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "177"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  924,
          "#":  925,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "178"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -80,
          "Parent":  927,
          "#":  930,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "179"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  682,
          "#":  934,
          "Msg":  "",
          "AMsg.Num":  "180"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  940,
          "#":  943,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "181"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  941,
          "#":  944,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "182"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  942,
          "#":  945,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "183"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  951,
          "#":  952,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "184"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  953,
          "#":  955,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "185"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  948,
          "#":  957,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "186"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  965,
          "#":  963,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "187"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  966,
          "#":  964,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "188"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1056,
          "#":  971,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "189"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  975,
          "#":  976,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "190"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  980,
          "#":  982,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "191"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  981,
          "#":  983,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "192"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  984,
          "#":  985,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "193"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  986,
          "#":  987,
          "Msg":  "",
          "AMsg.Num":  "194"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  997,
          "#":  998,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "195"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  996,
          "#":  999,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "196"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1005,
          "#":  1007,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "197"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1006,
          "#":  1008,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "198"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1014,
          "#":  1016,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "199"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1015,
          "#":  1017,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "200"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1021,
          "#":  1022,
          "Msg":  "<tstr5>",
          "AMsg.Num":  "201"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "continue",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  1030,
          "#":  1031,
          "Msg":  "",
          "AMsg.Num":  "202"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1039,
          "#":  1043,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "203"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  1039,
          "#":  1044,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "204"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1048,
          "#":  1049,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "205"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  -1580,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  1054,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "206"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "continue",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1057,
          "#":  1058,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "207"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1090,
          "#":  1091,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "208"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  1097,
          "#":  1098,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "209"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  0,
          "Parent":  1101,
          "#":  1103,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "210"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  1102,
          "#":  1104,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "211"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1106,
          "#":  1107,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "212"        
        }      
      ],
      "DialogMessages":      
      [
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  20,
          "#":  22,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  28,
          "#":  29,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  31,
          "#":  32,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  34,
          "#":  35,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  50,
          "#":  51,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  53,
          "#":  54,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "5"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  57,
          "#":  58,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "6"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  67,
          "#":  68,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "7"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  100,
          "Pos.y":  0,
          "Parent":  65,
          "#":  89,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "8"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -90,
          "Pos.y":  0,
          "Parent":  -1,
          "#":  100,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "9"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  104,
          "Msg":  "<tstr4>",
          "DMsg.Num":  "10"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  50,
          "Parent":  93,
          "#":  112,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "11"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  50,
          "Parent":  92,
          "#":  113,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "12"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -430,
          "Pos.y":  -110,
          "Parent":  -1,
          "#":  127,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "13"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  135,
          "#":  137,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "14"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -320,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  149,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "15"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -430,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  159,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "16"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -350,
          "Pos.y":  -110,
          "Parent":  -1,
          "#":  167,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "17"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -150,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  172,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "18"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  175,
          "#":  176,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "19"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  181,
          "#":  183,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "20"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  194,
          "#":  195,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "21"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  198,
          "#":  197,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "22"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  205,
          "#":  206,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "23"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  213,
          "#":  214,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "24"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  221,
          "#":  219,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "25"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  224,
          "#":  225,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "26"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  251,
          "#":  252,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "27"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  268,
          "#":  269,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "28"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  274,
          "#":  277,
          "Msg":  "<tstr4>",
          "DMsg.Num":  "29"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  280,
          "#":  278,
          "Msg":  "<tstr5>",
          "DMsg.Num":  "30"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  266,
          "#":  281,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "31"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  285,
          "#":  286,
          "Msg":  "<tstr5>",
          "DMsg.Num":  "32"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  289,
          "#":  290,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "33"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  293,
          "#":  294,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "34"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  308,
          "#":  314,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "35"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  316,
          "#":  317,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "36"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  330,
          "#":  331,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "37"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  336,
          "#":  338,
          "Msg":  "<tstr7>",
          "DMsg.Num":  "38"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  341,
          "#":  342,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "39"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  345,
          "#":  351,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "40"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  391,
          "#":  392,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "41"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  407,
          "#":  408,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "42"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  409,
          "#":  415,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "43"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  425,
          "#":  424,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "44"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  493,
          "#":  494,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "45"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  501,
          "#":  498,
          "Msg":  "<tstr3>",
          "DMsg.Num":  "46"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  503,
          "#":  504,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "47"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  515,
          "#":  516,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "48"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  540,
          "#":  541,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "49"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  545,
          "#":  546,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "50"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  561,
          "#":  565,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "51"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  563,
          "#":  566,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "52"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  564,
          "#":  567,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "53"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  527,
          "#":  586,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "54"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  597,
          "#":  598,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "55"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  606,
          "#":  607,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "56"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  611,
          "#":  628,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "57"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  630,
          "#":  631,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "58"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  662,
          "#":  642,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "59"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  657,
          "#":  658,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "60"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  671,
          "#":  663,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "61"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  676,
          "#":  677,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "62"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  920,
          "#":  681,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "63"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  688,
          "#":  689,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "64"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  562,
          "#":  695,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "65"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  725,
          "#":  726,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "66"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  733,
          "#":  732,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "67"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  738,
          "#":  740,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "68"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  741,
          "#":  742,
          "Msg":  "<tstr3>",
          "DMsg.Num":  "69"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  743,
          "#":  744,
          "Msg":  "<tstr5>",
          "DMsg.Num":  "70"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  739,
          "#":  746,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "71"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  763,
          "#":  765,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "72"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  0,
          "Parent":  770,
          "#":  771,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "73"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  759,
          "#":  776,
          "Msg":  "",
          "DMsg.Num":  "74"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  777,
          "#":  778,
          "Msg":  "<tstr4>",
          "DMsg.Num":  "75"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  780,
          "#":  781,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "76"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  786,
          "#":  785,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "77"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  790,
          "#":  791,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "78"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  357,
          "#":  799,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "79"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  804,
          "#":  803,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "80"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  813,
          "#":  814,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "81"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  823,
          "#":  824,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "82"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  819,
          "#":  826,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "83"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  839,
          "#":  840,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "84"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  847,
          "#":  848,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "85"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  852,
          "#":  855,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "86"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  868,
          "#":  872,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "87"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  895,
          "#":  876,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "88"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  877,
          "#":  879,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "89"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  890,
          "#":  891,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "90"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  901,
          "#":  902,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "91"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  20,
          "Parent":  908,
          "#":  909,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "92"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  913,
          "#":  914,
          "Msg":  "",
          "DMsg.Num":  "93"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  680,
          "#":  918,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "94"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  919,
          "#":  926,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "95"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  946,
          "#":  948,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "96"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  947,
          "#":  949,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "97"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  939,
          "#":  950,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "98"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  1059,
          "#":  970,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "99"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  978,
          "#":  979,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "100"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  977,
          "#":  986,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "101"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  969,
          "#":  995,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "102"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1004,
          "#":  1011,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "103"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  961,
          "#":  1012,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "104"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1023,
          "#":  1028,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "105"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1018,
          "#":  1030,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "106"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  1041,
          "#":  1039,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "107"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1089,
          "#":  1090,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "108"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  1099,
          "#":  1100,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "109"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1108,
          "#":  1109,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "110"        
        }      
      ],
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogMB",
          "Pos.x":  130,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  21        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogBridge",
          "Pos.x":  -50,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  45        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogBridge_Choosed",
          "Pos.x":  -50,
          "Pos.y":  -50,
          "Parent":  -1,
          "#":  56        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogPlanet",
          "Pos.x":  -320,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  63        
        },
        {
          "Type":  "TDialog",
          "Name":  "OutOfPrison",
          "Pos.x":  -430,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  125        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogDeliver",
          "Pos.x":  -190,
          "Pos.y":  -150,
          "Parent":  -1,
          "#":  170        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogWB/Dom",
          "Pos.x":  -600,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  174        
        },
        {
          "Type":  "TDialog",
          "Name":  "BuildOwnBase_Name",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  211,
          "#":  217        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogRC/PB",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  174,
          "#":  223        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseRenameDialogMB",
          "Pos.x":  320,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  250        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerMercsDialog",
          "Pos.x":  -940,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  265        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerMercsMoneyCall",
          "Pos.x":  -940,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  267        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerMercsLeaving",
          "Pos.x":  -1120,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  288        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerMercsAttack",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  286,
          "#":  292        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQBridgeDialog",
          "Pos.x":  -1280,
          "Pos.y":  150,
          "Parent":  -1,
          "#":  307        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerMercsStrikeGroup",
          "Pos.x":  -1120,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  329        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerStrikeAttack",
          "Pos.x":  0,
          "Pos.y":  110,
          "Parent":  329,
          "#":  340        
        },
        {
          "Type":  "TDialog",
          "Name":  "QuestHQShipDialog",
          "Pos.x":  -1210,
          "Pos.y":  1040,
          "Parent":  -1,
          "#":  390        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQQuestsDialog",
          "Pos.x":  -1260,
          "Pos.y":  790,
          "Parent":  -1,
          "#":  406        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQQuestChoose",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  426,
          "#":  427        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQIntroDialog",
          "Pos.x":  -1280,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  492        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQMercsDialog",
          "Pos.x":  -1440,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  502        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQFinanceDialog",
          "Pos.x":  -1440,
          "Pos.y":  -40,
          "Parent":  -1,
          "#":  514        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQStrikeDialog",
          "Pos.x":  -1470,
          "Pos.y":  150,
          "Parent":  -1,
          "#":  539        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQScienceDialog",
          "Pos.x":  -1760,
          "Pos.y":  150,
          "Parent":  -1,
          "#":  544        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQStrikeFire",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  576,
          "#":  577        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQStrikeHire",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  579,
          "#":  578        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQScienceSpeedUp",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  599,
          "#":  600        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQScienceRelImp",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  608,
          "#":  610        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQMedicineDialog",
          "Pos.x":  -1950,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  629        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQMedicineTreat",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  664,
          "#":  665        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQShipyardDialog",
          "Pos.x":  -1970,
          "Pos.y":  150,
          "Parent":  -1,
          "#":  670        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQArmoryDialog",
          "Pos.x":  -1780,
          "Pos.y":  -180,
          "Parent":  -1,
          "#":  675        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQImproveDialog",
          "Pos.x":  -1780,
          "Pos.y":  -60,
          "Parent":  -1,
          "#":  686        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQStrikeRefit",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  696,
          "#":  697        
        },
        {
          "Type":  "TDialog",
          "Name":  "GluonGunsQuestDialog1",
          "Pos.x":  -1590,
          "Pos.y":  680,
          "Parent":  -1,
          "#":  724        
        },
        {
          "Type":  "TDialog",
          "Name":  "GluonGunsQuestDialog2",
          "Pos.x":  -1420,
          "Pos.y":  680,
          "Parent":  -1,
          "#":  735        
        },
        {
          "Type":  "TDialog",
          "Name":  "GluonGunsQuestDialog3",
          "Pos.x":  -1260,
          "Pos.y":  680,
          "Parent":  -1,
          "#":  779        
        },
        {
          "Type":  "TDialog",
          "Name":  "OwnBaseDialogLock",
          "Pos.x":  40,
          "Pos.y":  100,
          "Parent":  89,
          "#":  784        
        },
        {
          "Type":  "TDialog",
          "Name":  "TziptzilotBeginQuestDialogs",
          "Pos.x":  90,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  811        
        },
        {
          "Type":  "TDialog",
          "Name":  "TziptzilotsKeyDialog",
          "Pos.x":  340,
          "Pos.y":  0,
          "Parent":  811,
          "#":  846        
        },
        {
          "Type":  "TDialog",
          "Name":  "TrancsBeginQuestDialog",
          "Pos.x":  180,
          "Pos.y":  0,
          "Parent":  811,
          "#":  851        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerDialog",
          "Pos.x":  340,
          "Pos.y":  130,
          "Parent":  811,
          "#":  912        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQShipyardProjectsList",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  927,
          "#":  928        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQPortalGeneratorDialog",
          "Pos.x":  -1280,
          "Pos.y":  270,
          "Parent":  -1,
          "#":  938        
        },
        {
          "Type":  "TDialog",
          "Name":  "PortalGeneratorShortJump",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  948,
          "#":  959        
        },
        {
          "Type":  "TDialog",
          "Name":  "PortalGeneratorLongJump",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  992,
          "#":  960        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQInHyper",
          "Pos.x":  130,
          "Pos.y":  60,
          "Parent":  938,
          "#":  972        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQLongJumpCancel",
          "Pos.x":  190,
          "Pos.y":  90,
          "Parent":  938,
          "#":  988        
        },
        {
          "Type":  "TDialog",
          "Name":  "PortalGeneratorBuild",
          "Pos.x":  20,
          "Pos.y":  -20,
          "Parent":  1029,
          "#":  1024        
        },
        {
          "Type":  "TDialog",
          "Name":  "MercCruiserDialog",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1037,
          "#":  1038        
        },
        {
          "Type":  "TDialog",
          "Name":  "QuestHQRuinDialog",
          "Pos.x":  -1350,
          "Pos.y":  1040,
          "Parent":  -1,
          "#":  1088        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlayerHQScienceRelImpChooseShip",
          "Pos.x":  40,
          "Pos.y":  -40,
          "Parent":  1110,
          "#":  1111        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  0,
          "Pos.y":  -30,
          "Parent":  1,
          "#":  9,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlanetQuestsShips",
          "Pos.x":  -80,
          "Pos.y":  210,
          "Parent":  -1,
          "#":  151,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlayerHQ",
          "Pos.x":  -670,
          "Pos.y":  610,
          "Parent":  -1,
          "#":  227,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlayerMercsFree",
          "Pos.x":  -670,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  229,
          "Owner":  894,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlayerMercsDefenders",
          "Pos.x":  -670,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  262,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlayerMercsStrike",
          "Pos.x":  -670,
          "Pos.y":  390,
          "Parent":  -1,
          "#":  304,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "QuestTarget",
          "Pos.x":  -670,
          "Pos.y":  680,
          "Parent":  -1,
          "#":  361,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "QuestMercs",
          "Pos.x":  -670,
          "Pos.y":  740,
          "Parent":  -1,
          "#":  362,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "RandomAttackers",
          "Pos.x":  -670,
          "Pos.y":  550,
          "Parent":  -1,
          "#":  368,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "QuestAttackers",
          "Pos.x":  -670,
          "Pos.y":  920,
          "Parent":  -1,
          "#":  379,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "QuestSupport",
          "Pos.x":  -670,
          "Pos.y":  860,
          "Parent":  -1,
          "#":  382,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "PlayerOrgTrancs",
          "Pos.x":  -670,
          "Pos.y":  580,
          "Parent":  -1,
          "#":  683,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "BlasterTziptzilot",
          "Pos.x":  -80,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  829,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "TrancsCollectors",
          "Pos.x":  -80,
          "Pos.y":  340,
          "Parent":  -1,
          "#":  856,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "CruisersDefenders",
          "Pos.x":  -670,
          "Pos.y":  340,
          "Parent":  -1,
          "#":  1033,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Items":      
      [
        {
          "Type":  "TItem",
          "Name":  "ApprovalDocuments",
          "Pos.x":  130,
          "Pos.y":  -260,
          "Parent":  -1,
          "#":  46,
          "Class":  5,
          "Item.Type":  0,
          "Size":  10,
          "Level":  1,
          "Radius":  150,
          "Owner":  6,
          "Useless":  ""        
        },
        {
          "Type":  "TItem",
          "Name":  "QuestItem",
          "Pos.x":  -1060,
          "Pos.y":  610,
          "Parent":  -1,
          "#":  385,
          "Class":  5,
          "Item.Type":  0,
          "Size":  10,
          "Level":  1,
          "Radius":  150,
          "Owner":  6,
          "Useless":  ""        
        },
        {
          "Type":  "TItem",
          "Name":  "HoloTablet",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  830,
          "#":  828,
          "Class":  5,
          "Item.Type":  0,
          "Size":  10,
          "Level":  1,
          "Radius":  150,
          "Owner":  6,
          "Useless":  ""        
        },
        {
          "Type":  "TItem",
          "Name":  "TziptzilotsKey",
          "Pos.x":  110,
          "Pos.y":  20,
          "Parent":  830,
          "#":  845,
          "Class":  5,
          "Item.Type":  0,
          "Size":  10,
          "Level":  1,
          "Radius":  150,
          "Owner":  6,
          "Useless":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -520,
          "Pos.y":  210,
          "Parent":  -1,
          "#":  3,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  3,
          "#":  4,
          "Total.Lines":  1459,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Запоминаем текущий ГТУ в отдельную переменную",
              "GTL = GalaxyTechLevel();",
              "",
              "//Стартовый перебор с запоминанием числа ВБ и доминионов в Галактике",
              "for(i = 0; i < GalaxyStars(); i = i + 1)",
              "{",
              "    cur_star = GalaxyStar(i);",
              "    if(StarRuins(cur_star, 'SB')) TotalSBCount = TotalSBCount + 1;",
              "    else if(StarRuins(cur_star, 'WB')) TotalWBCount = TotalWBCount + 1;",
              "    else if(StarRuins(cur_star, 'CB')) TotalCBCount = TotalCBCount + 1;",
              "}",
              "",
              "//Объявляем кастомные орудия",
              "InventShuMercsHQCustomGuns();",
              "//Функция для объявления и обновления кастомных орудий",
              "function InventShuMercsHQCustomGuns()",
              "{",
              "    for(int i = 1; i <= CT('Items.Weapon.CustomWeapon.ShuMercsHQ.Count'); i = i + 1)",
              "    {",
              "        //По очереди выбираем системное название каждой новой пушки из Lang",
              "        str gun_type = CT('Items.Weapon.CustomWeapon.ShuMercsHQ.' + i);",
              "        str path = 'Items.Weapon.CustomWeapon.';",
              "        //Прописываем пушку/сбрасываем уже прописанную пушку до уровня базовой из оригинальной игры",
              "        dword gun = InventNewCustomWeapon(gun_type, t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + gun_type + '.BaseGun')));",
              "        //Задаём характеристики оружия",
              "        SetCustomWeaponShotData(gun, CT(path + gun_type + '.ShotType'), CT(path + gun_type + '.Speed'), CT(path + gun_type + '.AverageRadius'), CT(path + gun_type + '.SecondaryDamageRadius'), CT(path + gun_type + '.MiningFactor'), CT(path + gun_type + '.ShotsPerTurn'));",
              "        SetCustomWeaponDamageData(gun, CT(path + gun_type + '.MinDamage'), CT(path + gun_type + '.MaxDamage'), CT(path + gun_type + '.DamageSet'), CT(path + gun_type + '.mWeaponDamage'));",
              "        SetCustomMissileWeaponStats(gun, CT(path + gun_type + '.MissileRadius'), CT(path + gun_type + '.MissileMaxSpeed'), CT(path + gun_type + '.MissileMinSpeed'), CT(path + gun_type + '.MissileChanceToBeHit'));",
              "        SetCustomWeaponPrimaryData(gun, CT(path + gun_type + '.TechLevel'), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + gun_type + '.InventTechLevel')), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + gun_type + '.ArcadeType')));",
              "        SetCustomWeaponSizeAndCost(gun, CT(path + gun_type + '.kCost'), CT(path + gun_type + '.AverageSize'));",
              "        SetCustomWeaponAvailability(gun, CT(path + gun_type + '.StoreAvailability'));",
              "        SetCustomWeaponSE(gun, CT(path + gun_type + '.ShotEffectPath'), CT(path + gun_type + '.SplashEffectPath'), CT(path + gun_type + '.MissileExplosionEffectPath'), CT(path + gun_type + '.ShotEffectPalette'));",
              "    }",
              "",
              "    CustomGunsUpdateCheck = CT('Items.Weapon.CustomWeapon.StatsVersion.ShuMercsHQ');",
              "}",
              "",
              "//Функция, удаляющая из трюма корабля всё оборудование и оружие, но не удаляющая скриптовые предметы",
              "function FreeAllHoldEquipment(ship)",
              "{",
              "    for(int i = ShipItems(ship) - 1; i > 0; i = i - 1)",
              "    {",
              "        dword item = ShipItems(ship, i);",
              "        if(ItemIsInUse(item)) continue;",
              "        if(ItemType(item) < t_FuelTanks) continue;",
              "        if(ItemType(item) > t_CustomWeapon) continue;",
              "        if(ItemInScript(item) == 1) continue;",
              "        FreeItem(GetItemFromShip(ship, i));",
              "    }",
              "}",
              "",
              "function AddNumSeparators(int number)",
              "{",
              "    str number_str = number;",
              "    if(number <= 999) number_str = number;",
              "    else if(number <= 9999) number_str = substr(number_str, 0, 1) + '.' + substr(number_str, 1);",
              "    else if(number <= 99999) number_str = substr(number_str, 0, 2) + '.' + substr(number_str, 2);",
              "    else if(number <= 999999) number_str = substr(number_str, 0, 3) + '.' + substr(number_str, 3);",
              "    else if(number <= 9999999) number_str = substr(number_str, 0, 1) + '.' + substr(number_str, 1, 3) + '.' + substr(number_str, 4);",
              "    else if(number <= 99999999) number_str = substr(number_str, 0, 2) + '.' + substr(number_str, 2, 3) + '.' + substr(number_str, 5);",
              "    else if(number <= 999999999) number_str = substr(number_str, 0, 3) + '.' + substr(number_str, 3, 3) + '.' + substr(number_str, 6);",
              "    else if(number <= 9999999999) number_str = substr(number_str, 0, 1) + '.' + substr(number_str, 1, 3) + '.' + substr(number_str, 4, 3) + '.' + substr(number_str, 7);",
              "    else if(number <= 99999999999) number_str = substr(number_str, 0, 2) + '.' + substr(number_str, 2, 3) + '.' + substr(number_str, 5, 3) + '.' + substr(number_str, 8);",
              "",
              "    result = number_str;",
              "}",
              "",
              "//Функции для внутристейтовых акткодов",
              "function PlayerActCode() //t_OnLeavingForm, t_OnChameleonConfusion //t_OnTakingDamageEn,t_OnTakingDamageSp,t_OnTakingDamageMi",
              "{",
              "    //Код для обработки t_OnStep",
              "    if(ScriptItemActionType(t_OnStep))",
              "    {",
              "        //Если в текущий момент идёт квест",
              "        if(ActiveQuestHQ)",
              "        {",
              "            //Если текущий квест это квест с пиратом",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 3] == 'Quest.ShuMercs.QuestsHQ.PirateClan.Protect.2')",
              "            {",
              "                //Если этап квеста 2",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "                {",
              "                    //Если момент когда должна открываться ЧД",
              "                    if(ActiveQuestsHQArray[ActiveQuestHQ, 2] == CurTurn())",
              "                    {",
              "                        //Изымаем и удаляем субпортал",
              "                        dword item = ScriptItemToItem(QuestItem);",
              "                        GetArtFromShip(GroupToShip(QuestSupport), item);",
              "                        FreeItem(item);",
              "",
              "                        //Заносим в target_star актуальный указатель на систему, так как при загрузке в момент когда должна открываться ЧД тернкод не успеет туда занести актуальный указатель",
              "                        target_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "                        //Создаём ЧД которая ведёт в туже систему, заранее слегка изменяя координаты скриптового места",
              "                        target_hole = HoleCreate2(target_star, target_star);",
              "                        HoleMap(target_hole, 'SkipAB');",
              "                        HoleTurnCreate(target_hole, CurTurn() + 100500);",
              "                        HoleX1(target_hole, QuestPlaceX);",
              "                        HoleX2(target_hole, QuestPlaceX);",
              "                        HoleY1(target_hole, QuestPlaceY);",
              "                        HoleY2(target_hole, QuestPlaceY);",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 10] = Id(target_hole);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //На всякий случай контролим выход с формы диалога, на случай, если игроку предложили напасть на его же наёмника и он согласился",
              "    else if(ScriptItemActionType(t_OnLeavingForm))",
              "    {",
              "        if(CurrentForm() == 'Talk')",
              "        {",
              "            dword player_star = ShipStar(Player());",
              "            for(int i = 0; i < StarShips(player_star); i = i + 1)",
              "            {",
              "                dword ship = StarShips(player_star, i);",
              "                if(ShipType(ship) != 'PlayerMerc') continue;",
              "",
              "                if(RelationToShip(ship, Player()) < 10)",
              "                {",
              "                    //Наёмник покидает организация, поскольку на него совершил нападение игрок",
              "                    if(ShipGroup(ship) == PlayerMercsStrike) int strike = 1;",
              "                    //Dialog(ship, '');",
              "",
              "                    FreePlayerMerc(ship);",
              "                    if(strike)",
              "                    {",
              "                        if(!GroupCount(PlayerMercsStrike))",
              "                        {",
              "                            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "                            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Позволяем наёмникам игрока нормально распознавать его даже под доминаторским камуфляжем",
              "    else //if(ScriptItemActionType(t_OnChameleonConfusion))",
              "    {",
              "        if(!ScriptItemActParam()) exit;",
              "        if(substr(ShipType(ScriptItemActObject1()), 0, 10) == 'PlayerMerc') ScriptItemActParam(0);",
              "    }",
              "}",
              "",
              "function BlasterTziptzilotActCode()",
              "{",
              "    dword tziptzilot = ScriptItemActShip();",
              "    //Если игрок отказал Ципцилоту в автографе и по пути к точке гиперпрыжка он был убит транками-коллекторами (либо чем-то ещё)",
              "    if(!BuildOwnBase_Condition)",
              "    {",
              "        if(!ShipInHyperSpace(tziptzilot)) BuildOwnBase_Condition = -1;",
              "    }",
              "}",
              "",
              "//Обновляем текст в описании бумаг на утверждение строительства (эта функция обновляет только текст, но не сами статусы)",
              "function ApprovalDocumentsTextUpdate(dword docs)",
              "{",
              "    //BuildOwnBase_InProcess == -2 - станция игрока разрушена, возможна повторная постройка;",
              "    //BuildOwnBase_InProcess == -1 - игрок уже просмотрел первый вариант диалога, повторно проматывать весь текст не придется;",
              "    //BuildOwnBase_InProcess == 0 - станция игрока ещё ни разу не строилась, диалог на ЦН ещё не триггерился;",
              "    //BuildOwnBase_InProcess == 1 - подготовка к постройке станции, нужно выбрать систему;",
              "    //BuildOwnBase_InProcess == 2 - подготовка к постройке станции, система выбрана, нужно получить разрешения;",
              "    //BuildOwnBase_InProcess == 3 - подготовка к постройке станции, все разрешения были получены, игрок отправляется на ЦН;",
              "    //BuildOwnBase_InProcess == 5 - игрок уже строил штаб, но тот был разрушен, игрок получает третий вариант диалога;",
              "    //BuildOwnBase_InProcess == 6 - штаб построен;",
              "    //Записанные в документы данные:",
              "    //ScriptItemData1 == овнер системы (Коалиция/пираты), которую выберет игрок (нужен для проверок захвата);",
              "    //ScriptItemTextData1 == Id системы, которую выберет игрок;",
              "    //ScriptItemData2 == маркер (0/1) о том, получил ли игрок одобрение правительства стороны конфликта, Коалиции или пиратов, а если идёт передислокация штаба, то маркер, были ли уже получены разрешения от всех обитаемых планет системы;",
              "    //ScriptItemTextData2 == номера всех обитаемых планет в списке системы в формате '0,2,3,'... (легко вернуть планету по StarPlanets(star, N))",
              "    //ScriptItemData3 == количество планет, одобрения которых необходимо получить (используется в качестве счётчика)",
              "    //ScriptItemTextData3 == маркера о получении одобрения от правительств обитаемых планет системы в формате '2,58,0,'...",
              "    //  Расшифровка сета значений в ScriptItemTextData3:",
              "    //    0 - одобрение не получено, базовое значение;",
              "    //    1 - задание взято;",
              "    //    2 - задание выполнено, осталось получить бумаги;",
              "    //    4 - задание провалено;",
              "    //    8 - попытка убеждения провалена;",
              "    //   16 - попытка запугивания провалена;",
              "    //   32 - провалена попытка усиленного запугивания (используется только как маркер для блокировки диалога);",
              "    //   64 - одобрение получено;",
              "",
              "    int total = 0;",
              "    //Если система для строительства ещё не выбрана",
              "    if(ScriptItemTextData(docs, 1) == '')",
              "    {",
              "        UselessItemText(docs, CT('UselessItems.ShuMercsHQ_ApprovalDocuments.Text') + CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextSystemNo'));",
              "        exit;",
              "    }",
              "    //Если уже выбрана",
              "    else dword star = GalaxyStar(ScriptItemTextData(docs, 1));",
              "",
              "    //Если строим штаб",
              "    if(BuildOwnBase_InProcess != 6)",
              "    {",
              "        str description = CT('UselessItems.ShuMercsHQ_ApprovalDocuments.Text') + \"<br>\";",
              "        description = description + Format(CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextSystemYes'), '<Star'+'>', Name(star)) + \"<br>\";",
              "    }",
              "    //Если передислоцируем штаб",
              "    else",
              "    {",
              "        description = CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextRelocation') + \"<br>\";",
              "        description = description + Format(CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextSystemRelocation'), '<Star'+'>', Name(star)) + \"<br>\";",
              "    }",
              "",
              "    //Перебираем планеты, проверяем их разрешения",
              "    str text1 = ScriptItemTextData(docs, 2);",
              "    str text2 = ScriptItemTextData(docs, 3);",
              "    int tint;",
              "    for(int i = 0; i < ScriptItemData(docs, 3); i = i + 1)",
              "    {",
              "        tint = GetParFromString(text1, ',', i, 0);",
              "        dword planet = StarPlanets(star, tint);",
              "",
              "        //Если разрешение от данной планеты уже было получено",
              "        if((int(GetParFromString(text2, ',', i, 0)) & 64))",
              "        {",
              "            description = description + Format(CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextPlanetPermYes'), '<Planet' + '>', Name(planet)) + \"<br>\";",
              "            total = total + 1;",
              "        }",
              "        //Если ещё нет",
              "        else description = description + Format(CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextPlanetPermNo'), '<Planet' + '>', Name(planet)) + \"<br>\";",
              "    }",
              "",
              "    //Необходимо только для строительства штаба",
              "    if(BuildOwnBase_InProcess != 6)",
              "    {",
              "        //Выбранная система принадлежит Коалиции",
              "        if(!StarOwner(star))",
              "        {",
              "            //Разрешение Коалиции (с ВБ) уже получено",
              "            if(ScriptItemData(docs, 2))",
              "            {",
              "                description = description + CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextCoalitionPermYes');",
              "                total = total + 1;",
              "            }",
              "            //Ещё нет",
              "            else description = description + CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextCoalitionPermNo');",
              "        }",
              "        //Выбранная система принадлежит пиратам",
              "        else",
              "        {",
              "            //Разрешение пиратского клана (с доминиона) уже получено",
              "            if(ScriptItemData(docs, 2))",
              "            {",
              "                description = description + CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextPiratePermYes');",
              "                total = total + 1;",
              "            }",
              "            //Ещё нет",
              "            else description = description + CT('UselessItems.ShuMercsHQ_ApprovalDocuments.TextPiratePermNo');",
              "        }",
              "    }",
              "",
              "    UselessItemText(docs, description);",
              "",
              "    //Проверяем, все ли подписи собраны, и если да, обновляем статус основного задания",
              "    if(BuildOwnBase_InProcess != 6)",
              "    {",
              "        //В ScriptItemData(docs, 3) записано число обитаемых планет в системе строительства",
              "        if(total >= ScriptItemData(docs, 3) + 1)",
              "        {",
              "            //Обновляем текст уведомления задания о постройке базы",
              "            description = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "            description = description + \"<br>\" + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Title');",
              "            description = description + \"<br>\" + '<clr><clrEnd>' + \"<br>\";",
              "            description = description + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Stage3'), '<Star'+'>', '<color=255,240,100>' + Name(star) + '</color>', '');",
              "            Ether(3, 'BuildOwnMCBase', description);",
              "",
              "            //Если игрок строит штаб впервые",
              "            if(!BasesSuccessfullyBuiltCount) BuildOwnBase_InProcess = 3;",
              "            //Если ранее штаб игрока был разрушен",
              "            else BuildOwnBase_InProcess = 5;",
              "        }",
              "    }",
              "    //Если передислоцируем штаб",
              "    else",
              "    {",
              "        //Достаточно только разрешений от планет",
              "        if(total >= ScriptItemData(docs, 3))",
              "        {",
              "            //Обновляем текст уведомления задания о постройке базы",
              "            description = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "            description = description + \"<br>\" + CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Title');",
              "            description = description + \"<br>\" + '<clr><clrEnd>' + \"<br>\";",
              "            description = description + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Stage2'), '<Star'+'>', '<color=255,240,100>' + Name(star) + '</color>', '');",
              "            CustomEther('QuestInProcess_PlayerMercsOrg', 3, 'PlayerHQRelocation', description);",
              "",
              "            ScriptItemData(docs, 2, 1);",
              "        }",
              "    }",
              "}",
              "",
              "function AddPlanetQuest(int type, dword client_planet, int client_planet_num, dword object, int time_limit, str quest_brief, str quest_Id, str quest_address, str quest_item_slot)",
              "{",
              "    quest_Id = quest_Id + '*' + CurTurn();",
              "    str quest_text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    quest_text = quest_text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day' + '>', time_limit - CurTurn(), '255,240,100');",
              "    quest_text = quest_text + \"<br>\" + Format(CT('Quest.Info.FromPlanet'), '<Planet' + '>', Name(client_planet), '<System' + '>', Name(PlanetToStar(client_planet)), '255,240,100');",
              "    quest_text = quest_text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + quest_brief;",
              "    Ether(3, quest_Id, quest_text, object);",
              "    //Если нужно, добавляем к игроку на корабль квестовый предмет",
              "    if(type == 3)",
              "    {",
              "        dword item = GetItemFromVault(quest_item_slot);",
              "        AddItemToShip(Player(), item);",
              "    }",
              "",
              "    //Структура BuildOwnBase_QuestsArray:",
              "    //BuildOwnBase_QuestsArray[0, N] - всегда пустая \"ветка\"",
              "    //---",
              "    //BuildOwnBase_QuestsArray[N, 0] - тип задания (1 - уничтожение корабля, 2 - защита корабля, 3 - доставка)",
              "    //BuildOwnBase_QuestsArray[N, 1] - Id квеста",
              "    //BuildOwnBase_QuestsArray[N, 2] - номер планеты в списке предмета ApprovalDocuments (для смены статуса)",
              "    //BuildOwnBase_QuestsArray[N, 3] - Id планеты заказчика",
              "    //BuildOwnBase_QuestsArray[N, 4] - Id цели задания (корабль/планета)",
              "    //BuildOwnBase_QuestsArray[N, 5] - крайний срок до провала/выполнения квеста (номер хода)",
              "    //BuildOwnBase_QuestsArray[N, 6] - строка с адресом задания в Lang",
              "    //BuildOwnBase_QuestsArray[N, 7] - собранный текст брифинга для подстановки в уведомление",
              "    //BuildOwnBase_QuestsArray[N, 8] - Id предмета задания (только для заданий доставки)",
              "    //Если у игрока ещё нет взятых планетарных квестов по заданию постройки штаба",
              "    int q_num;",
              "    if(ArrayDim(BuildOwnBase_QuestsArray) <= 1)",
              "    {",
              "        free(BuildOwnBase_QuestsArray);",
              "        BuildOwnBase_QuestsArray = newarray(2, 9);",
              "        q_num = 1;",
              "    }",
              "    else",
              "    {",
              "        //Эта arraychange хуйня добавляет сразу по 2 \"ветки\" вместо одной, так что используем костыльный обход",
              "        //arraychange(BuildOwnBase_QuestsArray, ArrayDim(BuildOwnBase_QuestsArray) + 1);",
              "        //q_num = ArrayDim(BuildOwnBase_QuestsArray) - 1;",
              "        unknown dummy;",
              "        q_num = ArrayDim(BuildOwnBase_QuestsArray);",
              "        ArrayAdd(BuildOwnBase_QuestsArray, dummy);",
              "        BuildOwnBase_QuestsArray[q_num] = newarray(9);",
              "    }",
              "",
              "    //Заносим в массив все данные по заданию",
              "    BuildOwnBase_QuestsArray[q_num, 0] = type;",
              "    BuildOwnBase_QuestsArray[q_num, 1] = quest_Id;",
              "    BuildOwnBase_QuestsArray[q_num, 2] = client_planet_num;",
              "    BuildOwnBase_QuestsArray[q_num, 3] = Id(client_planet);",
              "    BuildOwnBase_QuestsArray[q_num, 4] = Id(object);",
              "    BuildOwnBase_QuestsArray[q_num, 5] = time_limit;",
              "    BuildOwnBase_QuestsArray[q_num, 6] = quest_address;",
              "    BuildOwnBase_QuestsArray[q_num, 7] = quest_brief;",
              "    if(type == 3) BuildOwnBase_QuestsArray[q_num, 8] = Id(item);",
              "",
              "    //Меняем статус планеты в ApprovalDocuments, добавляем пометку, что был взят квест",
              "    quest_text = ScriptItemTextData(ApprovalDocuments, 3);",
              "    ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(quest_text, ',', client_planet_num, '' + (1 + GetParFromString(quest_text, ',', client_planet_num, 0))));",
              "}",
              "",
              "//Функция для ежеходной проверки статуса всех активных квестов",
              "//Крутим счётчики, а также выполняем и проваливаем квесты по времени именно здесь",
              "function QuestsStatusUpdate()",
              "{",
              "    for(int i = ArrayDim(BuildOwnBase_QuestsArray) - 1; i > 0; i = i - 1)",
              "    {",
              "        //Сразу пропускаем выполненные, но ещё не сданные квесты",
              "        if(BuildOwnBase_QuestsArray[i, 5] == -1) continue;",
              "",
              "        str quest_text;",
              "        dword client_planet = IdToPlanet(BuildOwnBase_QuestsArray[i, 3]);",
              "        dword object;",
              "        if(BuildOwnBase_QuestsArray[i, 0] == 3) object = IdToPlanet(BuildOwnBase_QuestsArray[i, 4]);",
              "        else object = IdToShip(BuildOwnBase_QuestsArray[i, 4]);",
              "        //Если выделенное на квест время истекло",
              "        if(BuildOwnBase_QuestsArray[i, 5] <= CurTurn())",
              "        {",
              "            //Квесты на уничтожение/защиту корабля (проверяем, жив ли корабль-цель)",
              "            //Последний шанс игроку выполнить квест... или же его провалить",
              "            if(BuildOwnBase_QuestsArray[i, 0] < 3)",
              "            {",
              "                //Если корабль был уничтожен",
              "                if(!object)",
              "                {",
              "                    //Квест на защиту будет провален",
              "                    if(BuildOwnBase_QuestsArray[i, 0] == 2)",
              "                    {",
              "                        QuestsStatusChange(i, 4, client_planet);",
              "                        continue;",
              "                    }",
              "                    //А квест на уничтожение выполнен",
              "                    else",
              "                    {",
              "                        QuestsStatusChange(i, 2, client_planet);",
              "                        continue;",
              "                    }",
              "                }",
              "            }",
              "            //Квест на уничтожение корабля/доставку, провален по истечении времени",
              "            if(BuildOwnBase_QuestsArray[i, 0] != 2)",
              "            {",
              "                QuestsStatusChange(i, 4, client_planet);",
              "                continue;",
              "            }",
              "            //Квест на защиту корабля, выполнен по истечении времени",
              "            else",
              "            {",
              "                QuestsStatusChange(i, 2, client_planet);",
              "                continue;",
              "            }",
              "        }",
              "        else",
              "        {",
              "            //Квесты на уничтожение/защиту корабля (проверяем, жив ли корабль-цель)",
              "            if(BuildOwnBase_QuestsArray[i, 0] < 3)",
              "            {",
              "                //Если корабль был уничтожен",
              "                if(!object)",
              "                {",
              "                    //Квест на защиту будет провален",
              "                    if(BuildOwnBase_QuestsArray[i, 0] == 2)",
              "                    {",
              "                        QuestsStatusChange(i, 4, client_planet);",
              "                        continue;",
              "                    }",
              "                    //А квест на уничтожение выполнен",
              "                    else",
              "                    {",
              "                        QuestsStatusChange(i, 2, client_planet);",
              "                        continue;",
              "                    }",
              "                }",
              "            }",
              "            //Иначе просто обновляем счётчик",
              "            quest_text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "            quest_text = quest_text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day' + '>', BuildOwnBase_QuestsArray[i, 5] - CurTurn(), '255,240,100');",
              "            quest_text = quest_text + \"<br>\" + Format(CT('Quest.Info.FromPlanet'), '<Planet' + '>', Name(client_planet), '<System' + '>', Name(PlanetToStar(client_planet)), '255,240,100');",
              "            quest_text = quest_text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + BuildOwnBase_QuestsArray[i, 7];",
              "            Ether(3, BuildOwnBase_QuestsArray[i, 1], quest_text, object);",
              "        }",
              "    }",
              "}",
              "//Если квест был выполнен, либо провален, меняем его статус в ApprovalDocuments",
              "function QuestsStatusChange(int quest_num, int quest_status, dword client_planet)",
              "{",
              "    //Если квест выполнен",
              "    if(quest_status == 2)",
              "    {",
              "        str quest_text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.AcceptedPapers') + '</color>';",
              "        quest_text = quest_text + \"<br>\" + Format(CT('Quest.Info.FromPlanet'), '<Planet' + '>', Name(client_planet), '<System' + '>', Name(PlanetToStar(client_planet)), '255,240,100');",
              "        quest_text = quest_text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + BuildOwnBase_QuestsArray[quest_num, 7];",
              "        Ether(3, BuildOwnBase_QuestsArray[quest_num, 1], quest_text);",
              "        NewsAdd(Format(CT('Quest.ShuMercs.QuestComplete'), '<Planet' + '>', Name(IdToPlanet(BuildOwnBase_QuestsArray[quest_num, 3])), '255,240,100'));",
              "",
              "        //Ставим маркер, что этот квест уже был выполнен",
              "        BuildOwnBase_QuestsArray[quest_num, 5] = -1;",
              "    }",
              "    //Если квест провален",
              "    else",
              "    {",
              "        quest_text = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        quest_text = quest_text + \"<br>\" + Format(CT('Quest.Info.FromPlanet'), '<Planet' + '>', Name(client_planet), '<System' + '>', Name(PlanetToStar(client_planet)), '255,240,100');",
              "        quest_text = quest_text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + BuildOwnBase_QuestsArray[quest_num, 7];",
              "        Ether(5, BuildOwnBase_QuestsArray[quest_num, 1], quest_text);",
              "        NewsAdd(Format(CT('Quest.ShuMercs.QuestFailed'), '<Planet' + '>', Name(IdToPlanet(BuildOwnBase_QuestsArray[quest_num, 3])), '255,240,100'));",
              "",
              "        //Портим отношения с планетой-заказчиком",
              "        if(!ShipOnSidePirateClan(Player()))",
              "        {",
              "            if(RelationToRanger(client_planet, Player()) > 10) RelationToRanger(client_planet, Player(), 10);",
              "        }",
              "        else",
              "        {",
              "            RelationToRanger(PlanetPirateClan(), Player(), RelationToRanger(PlanetPirateClan(), Player()) - 25);",
              "            if(RelationToRanger(PlanetPirateClan(), Player()) < 10) RelationToRanger(PlanetPirateClan(), Player(), 10);",
              "        }",
              "    }",
              "",
              "    str status_str = ScriptItemTextData(ApprovalDocuments, 3);",
              "    ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(status_str, ',', BuildOwnBase_QuestsArray[quest_num, 2], '' + (quest_status + GetParFromString(status_str, ',', BuildOwnBase_QuestsArray[quest_num, 2], 0) - 1)));",
              "",
              "    //И удаляем проваленный квест из массива",
              "    if(quest_status == 4)",
              "    {",
              "        free(BuildOwnBase_QuestsArray[quest_num]);",
              "        ArrayDelete(BuildOwnBase_QuestsArray, quest_num);",
              "    }",
              "}",
              "//Считаем шанс успеха \"убеждения\" на планете, военной базе, либо доминионе",
              "function PersuasionCalc(int status, dword planet, int owner)",
              "{",
              "    int chance;",
              "",
              "    //Если считаем убеждение на планете Коалиции",
              "    //Зависит от обаяния (25%) и военного рейтинга (25%) (максимальный шанс успеха до 50%)",
              "    if(~status)",
              "    {",
              "        if(!(status & 8)) chance = PortionInDiapason(ShipSkill(Player(), 'CharmCur'), 0, 6, 0, 25) + PortionInDiapason(ShipStatus(Player(), 2), 0, 100, 0, 25);",
              "        else chance = -1;",
              "    }",
              "    //Если считаем убеждение на военной базе/доминионе",
              "    else",
              "    {",
              "        //Всего в игровой Галактике находится 71 обитаемая система (не считая скрытый пиратский сектор)",
              "        //Военная база (если Коалицией захвачено менее 15% (10) систем, то шанс скалируется от ~10% до 100%, чем меньше, тем выше)",
              "        if(owner != 7) chance = PortionInDiapason(ControlledSystems(0), 12, 1, 0, 100);",
              "        //Доминион (если пиратами захвачено менее 12% (8) систем, то шанс скалируется от ~10% до 100%, чем меньше, тем выше)",
              "        else chance = PortionInDiapason(ControlledSystems(2), 10, 1, 0, 100);",
              "    }",
              "",
              "    result = chance;",
              "}",
              "//Считаем шанс успеха \"угрозы\" на планете",
              "function ThreatCalc(int status, dword planet, int owner)",
              "{",
              "    int chance;",
              "",
              "    //Коалиционная планета",
              "    if(owner <= 4)",
              "    {",
              "        if(!(status & 16))",
              "        {",
              "            //Зависит от обаяния (25%) и пиратского рейтинга (25%) (максимальный шанс успеха до 50%)",
              "            chance = PortionInDiapason(ShipSkill(Player(), 'CharmCur'), 0, 6, 0, 25) + PortionInDiapason(ShipStatus(Player(), 1), 0, 100, 0, 25);",
              "            if(owner == Maloc) chance = 0.50 * chance;",
              "            else if(owner == Peleng) chance = 0.80 * chance;",
              "            else if(owner == People) chance = 0.70 * chance;",
              "            else if(owner == Fei) chance = 0.90 * chance;",
              "            else if(owner == Gaal) chance = 0.80 * chance;",
              "        }",
              "        else chance = -1;",
              "    }",
              "    //Пиратская планета",
              "    else",
              "    {",
              "        //Зависит от обаяния (25%) и пиратского (50%) / военного (25%) рейтинга (максимальный шанс успеха/частичного успеха до 75%)",
              "        //Полный успех: одна треть от максимального шанса успеха (25% из 75% и т.д.)",
              "        //Частичный успех: две трети от максимального шанса успеха (50% из 75% и т.д.)",
              "        if(!(status & 16))",
              "        {",
              "            chance = PortionInDiapason(ShipSkill(Player(), 'CharmCur'), 0, 6, 0, 25) + PortionInDiapason(ShipStatus(Player(), 1), 0, 100, 0, 50) + PortionInDiapason(ShipStatus(Player(), 2), 0, 100, 0, 25);",
              "        }",
              "        else chance = -1;",
              "    }",
              "",
              "    result = chance;",
              "}",
              "//Считаем сумму взятки на планете, военной базе, либо доминионе",
              "function BribeCalc(int status, dword planet, int owner)",
              "{",
              "    int bribe;",
              "    if(~status)",
              "    {",
              "        //Коалиционная планета",
              "        if(owner <= 4)",
              "        {",
              "            bribe = max(250000 * (GalaxyDiffLevels(1) / 50), GalaxyMoney(4, 4) * 5);",
              "            if(owner == Maloc) bribe = 0.75 * bribe;",
              "            else if(owner == Peleng) bribe = 1.10 * bribe;",
              "            else if(owner == People) bribe = 1.00 * bribe;",
              "            else if(owner == Fei) bribe = 1.20 * bribe;",
              "            else if(owner == Gaal) bribe = 1.30 * bribe;",
              "",
              "            if(RelationToRanger(planet, Player()) < 60) bribe = 1.50 * bribe;",
              "        }",
              "        //Пиратская планета",
              "        else",
              "        {",
              "            bribe = max(250000 * (GalaxyDiffLevels(1) / 50), GalaxyMoney(4, 4) * 5);",
              "            bribe = 1.80 * bribe;",
              "",
              "            if(RelationToRanger(PlanetPirateClan(), Player()) < 60) bribe = 1.50 * bribe;",
              "        }",
              "    }",
              "    //Считаем взятку на военной базе/доминионе",
              "    else",
              "    {",
              "        bribe = max(250000 * (GalaxyDiffLevels(1) / 50), GalaxyMoney(4, 4) * 5);",
              "        bribe = 2.00 * bribe;",
              "    }",
              "",
              "    bribe = RoundTo(bribe, 100000, 0);",
              "    result = bribe;",
              "}",
              "",
              "//Объявляем (создаём) глюонные орудия",
              "function InventShuMercsHQCustomGuns()",
              "{",
              "    for(int i = 1; i <= CT('Items.Weapon.CustomWeapon.ShuMercsHQ.Count'); i = i + 1)",
              "    {",
              "        //По очереди выбираем системное название каждой новой пушки из Lang",
              "        str gun_name = CT('Items.Weapon.CustomWeapon.ShuMercsHQ.' + i);",
              "        str gun_block_path = 'Items.Weapon.CustomWeapon.';",
              "        //Прописываем пушку/сбрасываем уже прописанную пушку до уровня базовой из оригинальной игры",
              "        dword gun = InventNewCustomWeapon(gun_name, t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(gun_block_path + gun_name + '.BaseGun')));",
              "        //Задаём характеристики оружия",
              "        SetCustomWeaponShotData(gun, CT(gun_block_path + gun_name + '.ShotType'), CT(gun_block_path + gun_name + '.Speed'), CT(gun_block_path + gun_name + '.AverageRadius'), CT(gun_block_path + gun_name + '.SecondaryDamageRadius'), CT(gun_block_path + gun_name + '.MiningFactor'), CT(gun_block_path + gun_name + '.ShotsPerTurn'));",
              "        SetCustomWeaponDamageData(gun, CT(gun_block_path + gun_name + '.MinDamage'), CT(gun_block_path + gun_name + '.MaxDamage'), CT(gun_block_path + gun_name + '.DamageSet'), CT(gun_block_path + gun_name + '.mWeaponDamage'));",
              "        SetCustomMissileWeaponStats(gun, CT(gun_block_path + gun_name + '.MissileRadius'), CT(gun_block_path + gun_name + '.MissileMaxSpeed'), CT(gun_block_path + gun_name + '.MissileMinSpeed'), CT(gun_block_path + gun_name + '.MissileChanceToBeHit'));",
              "        SetCustomWeaponPrimaryData(gun, CT(gun_block_path + gun_name + '.TechLevel'), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(gun_block_path + gun_name + '.InventTechLevel')), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(gun_block_path + gun_name + '.ArcadeType')));",
              "        SetCustomWeaponSizeAndCost(gun, CT(gun_block_path + gun_name + '.kCost'), CT(gun_block_path + gun_name + '.AverageSize'));",
              "        SetCustomWeaponAvailability(gun, CT(gun_block_path + gun_name + '.StoreAvailability'));",
              "        SetCustomWeaponSE(gun, CT(gun_block_path + gun_name + '.ShotEffectPath'), CT(gun_block_path + gun_name + '.SplashEffectPath'), CT(gun_block_path + gun_name + '.MissileExplosionEffectPath'), CT(gun_block_path + gun_name + '.ShotEffectPalette'));",
              "    }",
              "",
              "    CustomGunsUpdateCheck = CT('Items.Weapon.CustomWeapon.StatsVersion.ShuMercsHQ');",
              "}",
              "",
              "//Создаёт одно из трёх типов глюонных орудий, сработает в полностью автономном режиме, если не указать два последних аргумента",
              "function CreateGluonGun(dword roll_object, int gun_type = -1, int GTL = -1)",
              "{",
              "    if(gun_type == -1) gun_type = RndObject(1, 3, roll_object);",
              "    if(GTL == -1) GTL = GalaxyTechLevel();",
              "",
              "    //Глюонный излучатель",
              "    if(gun_type == 1)",
              "    {",
              "        int size = GetCustomWeaponData('GluonEmitter', 'AverageSize');",
              "        size = RndObject(size / 2, size + size / 2, roll_object);",
              "        dword gun = CreateCustomWeapon('GluonEmitter', size, GTL, People);",
              "        LinkItemToScript(gun);",
              "        ItemOnActCode(gun, GenerateCodeStringFromBlock('ActCodeBlocksList.ShuMercsHQ_GluonizingEnergy'));",
              "        ItemExtraSpecialsAddByType(gun, FindBonusByNameInCfg('bonAIValue'), 500); //Повышаем ценность глюонного оружия в глазах бота",
              "    }",
              "    //Глюонный торментор",
              "    else if(gun_type == 2)",
              "    {",
              "        size = GetCustomWeaponData('GluonTormentor', 'AverageSize');",
              "        size = RndObject(size / 2, size + size / 2, roll_object);",
              "        gun = CreateCustomWeapon('GluonTormentor', size, GTL, People);",
              "        LinkItemToScript(gun);",
              "        ItemOnActCode(gun, GenerateCodeStringFromBlock('ActCodeBlocksList.ShuMercsHQ_GluonizingSplinter'));",
              "        ItemExtraSpecialsAddByType(gun, FindBonusByNameInCfg('bonAIValue'), 500); //Повышаем ценность глюонного оружия в глазах бота",
              "    }",
              "    //Глюонная торпедная установка",
              "    else if(gun_type == 3)",
              "    {",
              "        size = GetCustomWeaponData('GluonTorpedoLauncher', 'AverageSize');",
              "        size = RndObject(size / 2, size + size / 2, roll_object);",
              "        gun = CreateCustomWeapon('GluonTorpedoLauncher', size, GTL, People);",
              "        int new_ammo = WeaponMaxAmmunition(gun) * 2;",
              "        WeaponMaxAmmunition(gun, new_ammo);",
              "        WeaponAmmunition(gun, new_ammo);",
              "        LinkItemToScript(gun);",
              "        ItemOnActCode(gun, GenerateCodeStringFromBlock('ActCodeBlocksList.ShuMercsHQ_GluonizingMissile'));",
              "        ItemExtraSpecialsAddByType(gun, FindBonusByNameInCfg('bonAIValue'), 500); //Повышаем ценность глюонного оружия в глазах бота",
              "    }",
              "",
              "    EqCustomFaction(gun, 'SubFactionPlayerMercsFixedStanding');",
              "    result = gun;",
              "}",
              "",
              "//Спавним наёмника из организации игрока",
              "function SpawnPlayerMerc(dword planet, dword transfer_to, int ship_type_num, int count_ships = 1)",
              "{",
              "    for(int o = 1; o <= count_ships; o = o + 1)",
              "    {",
              "        //Обеспечиваем случайную расу появившегося наёмника",
              "        int planet_owner = PlanetOwner(planet);",
              "        int planet_race = PlanetRace(planet);",
              "        //С большей вероятностью новый корабль будет иметь расу ближайшей к штабу планеты",
              "        int new_planet_race = planet_race;",
              "        //Определяем расу будущего наёмника",
              "        //Раса наёмника из ударной группы передаётся в номере типа",
              "        int strike_merc_level = 0;",
              "        if(ship_type_num >= 110)",
              "        {",
              "            if(ship_type_num < 120)",
              "            {",
              "                strike_merc_level = 1;",
              "                new_planet_race = ship_type_num % 110;",
              "            }",
              "            else if(ship_type_num < 130)",
              "            {",
              "                strike_merc_level = 2;",
              "                new_planet_race = ship_type_num % 120;",
              "            }",
              "            else //if(ship_type_num >= 130)",
              "            {",
              "                strike_merc_level = 3;",
              "                new_planet_race = ship_type_num % 130;",
              "            }",
              "        }",
              "        //Иначе делаем бросок на выбор случайной расы с вероятностью в 30%",
              "        else if(RndObject(1, 100, planet) <= 30)",
              "        {",
              "            while(new_planet_race == planet_race) new_planet_race = RndObject(0, 4, planet);",
              "        }",
              "        //Проверка на \"таухитовую заразу\"",
              "        if(CurTurn() < 666)",
              "        {",
              "            if(!(CurTurn() % 6))",
              "            {",
              "                if(new_planet_race == People)",
              "                {",
              "                    while(new_planet_race == People) new_planet_race = RndObject(0, 4, planet);",
              "                }",
              "            }",
              "        }",
              "        PlanetOwner(planet, new_planet_race);",
              "        PlanetRace(planet, new_planet_race);",
              "",
              "        dword ship;",
              "        //Спавним наёмника в ударную группу",
              "        if(strike_merc_level)",
              "        {",
              "            ship = BuyRanger(planet, 600 * strike_merc_level + 250 * PlayerHQMainArray['Main', 'HQLevel']);",
              "            RangerExcludedFromRating(ship, 1);",
              "            ShipJoin(PlayerMercsStrike, ship);",
              "            ShipAddCustomShipInfo(ship, 'ShuMercsHQ_StrikeGroupMercInfo');",
              "            SetData(-2, 3, ship); //Маркер принадлежности наёмника к ударной группе",
              "        }",
              "        //Спавним \"гулящего\" наёмника",
              "        else if(ship_type_num == t_Ranger)",
              "        {",
              "            ship = BuyRanger(planet, 400 + 250 * PlayerHQMainArray['Main', 'HQLevel']);",
              "            RangerExcludedFromRating(ship, 1);",
              "            ShipJoin(PlayerMercsFree, ship);",
              "            //Взводим таймер следующего возвращения наёмника в штаб",
              "            SetData(CurTurn() + RndObject(int(CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMin')), int(CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMax')), ship), 3, ship);",
              "",
              "            if(IsScriptActive('Mod_EvoTranc'))",
              "            {",
              "                //Если уже была построена верфь, имеется шанс на выдачу наёмнику своего транка",
              "                if(PlayerHQMainArray['Shipyard', 'ProductionShipyard'])",
              "                {",
              "                    int rep = max(PlayerHQMainArray['Main', 'CoalitionReputation'], PlayerHQMainArray['Main', 'PirateClanReputation']);",
              "                    if(rep >= CT('Script.Mod_ShuMercsHQ.PlayerHQShipyardProjects.Tranclucator.RequiredReputation'))",
              "                    {",
              "                        if(RndObject(1, 100, ship) <= 25)",
              "                        {",
              "                            int trancs_num = 1;",
              "                            //Строка с Id всех имеющихся у хозяина транклюкаторов, вид: Id,Id,Id,Id,Id,Id",
              "                            str trancs_str1 = '';",
              "                            //Строка вида 'NNYRRN' о запущенных транклюкаторах: Y/N/R (Yes - запущен/No - не запущен/Return - возвращается)",
              "                            str trancs_str2 = '';",
              "                            //Статус всех транков (6 цифр): Z - транка в трюме нет, N - транк в порядке, R - нужен ремонт, U - транк устарел",
              "                            str trancs_str3 = '';",
              "",
              "                            //Увеличиваем навык техники корабля, если его недостаточно для владения указанным числом транклюкаторов",
              "                            if(ShipSkill(ship, 2) < trancs_num) ShipSkill(ship, 2, trancs_num);",
              "                            //Создаём транклюкаторов",
              "                            for(int i = 1; i <= trancs_num; i = i + 1)",
              "                            {",
              "                                dword art_tranc = CreateArt(t_ArtefactTranclucator, Peleng);",
              "                                dword tranc = ArtTranclucatorToShip(art_tranc);",
              "                                ItemSize(art_tranc, ItemSize(art_tranc) + RndObject(-9, 25, ship));",
              "                                TranclucatorData(tranc, 'ArtSize', ItemSize(art_tranc));",
              "                                TranclucatorData(tranc, 'Proprietor', ship);",
              "                                AddItemToShip(ship, art_tranc);",
              "                                NoDropItem(art_tranc, 1);",
              "",
              "                                dword tranc_hull = ShipItems(tranc, 0);",
              "                                int tranc_hull_lvl = ItemLevel(tranc_hull);",
              "                                //Слот радара (открываем с некоторым шансом)",
              "                                // if(tranc_hull_lvl >= 3)",
              "                                // {",
              "                                    // if(RndObject(1, 100, ship) <= tranc_hull_lvl + 9) //Бросок на шанс",
              "                                    // {",
              "                                        // ItemExtraSpecialsAddByType(tranc_hull, FindBonusByNameInCfg('EvoTranc_TrancAddSlotRadar'));",
              "                                        // ItemSize(tranc_hull, ItemSize(tranc_hull) - 25);",
              "                                        // ItemCost(tranc_hull, round(1.07 * ItemCost(tranc_hull)));",
              "                                    // }",
              "                                // }",
              "                                //Слот сканера (открываем с некоторым шансом)",
              "                                // if(tranc_hull_lvl >= 3)",
              "                                // {",
              "                                    // if(RndObject(1, 100, ship) <= tranc_hull_lvl + 3) //Бросок на шанс",
              "                                    // {",
              "                                        // ItemExtraSpecialsAddByType(tranc_hull, FindBonusByNameInCfg('EvoTranc_TrancAddSlotScaner'));",
              "                                        // ItemSize(tranc_hull, ItemSize(tranc_hull) - 25);",
              "                                        // ItemCost(tranc_hull, round(1.04 * ItemCost(tranc_hull)));",
              "                                    // }",
              "                                // }",
              "",
              "                                //Слот форсажа (открываем с некоторым шансом)",
              "                                // if(tranc_hull_lvl >= 4)",
              "                                // {",
              "                                    // if(RndObject(1, 100, ship) <= tranc_hull_lvl - 1) //Бросок на шанс",
              "                                    // {",
              "                                        // ItemExtraSpecialsAddByType(tranc_hull, FindBonusByNameInCfg('EvoTranc_TrancAddSlotForsage'));",
              "                                        // ItemSize(tranc_hull, ItemSize(tranc_hull) - 25);",
              "                                        // ItemCost(tranc_hull, round(1.07 * ItemCost(tranc_hull)));",
              "                                    // }",
              "                                // }",
              "",
              "                                ShipMoney(tranc, ShipMoney(ship) * 2);",
              "                                ShipRefit(tranc);",
              "                                ShipRefit(tranc);",
              "                                ShipMoney(tranc, 0);",
              "",
              "                                //Улучшаем оборудку и устраняем возможный перегруз транка",
              "                                ShipImproveItems(tranc, RndObject(2, 4, ship));",
              "                                HullHP(tranc, 'To100');",
              "",
              "                                //Установка фейкового навигационного компьютера (является лишь маркером и не несёт в себе исполняемого акткода)",
              "                                // if(tranc_hull_lvl >= 3)",
              "                                // {",
              "                                    // if(RndObject(1, 100, ship) <= 45)",
              "                                    // {",
              "                                        // ShipAddCustomShipInfo(tranc, 'TrancFakeNavComputerInfo');",
              "                                        // ItemCost(tranc_hull, round(1.15 * ItemCost(tranc_hull)));",
              "                                    // }",
              "                                // }",
              "",
              "                                //Перекраска транка в цвет организации",
              "                                EqCustomFaction(art_tranc, 'SubFactionPlayerMercsFixedStanding');",
              "                                ShipJoin(PlayerOrgTrancs, tranc);",
              "                                ShipCustomFaction(tranc, 'SubFactionPlayerMercsFixedStanding');",
              "                                ShipAddCustomShipInfo(tranc, 'ShuMercsHQ_PlayerOrgTrancInfo');",
              "                                Chameleon(tranc, 'Ship.TranclucatorCyan');",
              "                                TranclucatorData(tranc, 'ArtSysName', 'ArtTranclucatorCyan');",
              "                                EquipmentImageName(art_tranc, 'ArtTranclucatorCyan');",
              "",
              "                                //Шанс на переименование транка",
              "                                if(RndObject(1, 100, ship) <= 93)",
              "                                {",
              "                                    //Выбираем неповторяющееся имя (вплоть до N уникальных имён подряд, после чего могут начать повторяться)",
              "                                    int names_count = CT('ShipName.Tranclucator.Count');",
              "                                    str tranc_name = CT('ShipName.Tranclucator.' + RndObject(1, names_count, ship));",
              "                                    while(~findsubstr(last_spawned_tranc_names_global, '*' + tranc_name + '*')) tranc_name = CT('ShipName.Tranclucator.' + RndObject(1, names_count, ship));",
              "                                    last_spawned_tranc_names_global = last_spawned_tranc_names_global + tranc_name + '*';",
              "                                    //Если имён в строке скопилось слишком много, подчищаем её с конца",
              "                                    if(ParsCountFromString(last_spawned_tranc_names_global, '*') > (names_count - 10 + 2)) //В строке запоминается на 10 имён меньше от их максимального числа в списке",
              "                                    {",
              "                                        last_spawned_tranc_names_global = SetParFromString(last_spawned_tranc_names_global, '*', 1, '');",
              "                                        last_spawned_tranc_names_global = substr(last_spawned_tranc_names_global, 1);",
              "                                    }",
              "                                    SetName(tranc, tranc_name);",
              "                                }",
              "",
              "                                if(trancs_str1 == '') trancs_str1 = Id(tranc);",
              "                                else trancs_str1 = trancs_str1 + ',' + Id(tranc);",
              "                                trancs_str2 = trancs_str2 + 'N';",
              "                                trancs_str3 = trancs_str3 + 'N';",
              "",
              "                                //Разрешаем транку автоматически менять оборудование",
              "                                TranclucatorData(tranc, 'AutoArrange', 1);",
              "",
              "                                //Накидываем транку случайный набор навыков",
              "                                ShipSkill(tranc, 'Accuracy', RndObject(2, 4, ship));",
              "                                ShipSkill(tranc, 'Mobility', RndObject(2, 4, ship));",
              "                                ShipSkill(tranc, 'Technical', RndObject(2, 4, ship));",
              "",
              "                                //Вешаем на транка инфошку подчинённого",
              "                                if(tranc_hull_lvl < 8) ShipAddCustomShipInfo(tranc, 'TrancNPCAddInfo', 'NoShow', -1, 0, 0, '', '0', 'N');",
              "                                else ShipAddCustomShipInfo(tranc, 'TrancNPCAddInfo', 'NoShow', CurTurn() + RndObject(297, 403, ship), 0, 0, '', '', 'N');",
              "                            }",
              "",
              "                            //И под конец вешаем на нового хозяина его персональную инфошку",
              "                            ShipAddCustomShipInfo(ship, 'TrancNPCOwnerInfo', 'NoShow', RndObject(207, 459, ship), 1, trancs_num, trancs_str1, trancs_str2, trancs_str3);",
              "                            //А также добавляем ему предмет, который будет занимать место в трюме на то время, пока транклюкаторы находятся на вылете",
              "                            dword filler = CreateQuestItem('WeightReserve', 0);",
              "                            ItemSize(filler, 0);",
              "                            AddItemToShip(ship, filler);",
              "                            NoDropItem(filler, 1);",
              "                            ItemIsInUse(filler, ship, 1);",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Спавним наёмника-защитника",
              "        else if(ship_type_num == t_Warrior)",
              "        {",
              "            ship = BuyRanger(planet, 400 + 250 * PlayerHQMainArray['Main', 'HQLevel']);",
              "            RangerExcludedFromRating(ship, 1);",
              "            ShipSpecialBonuses(ship, bonFuel, ShipSpecialBonuses(ship, bonFuel) - 10000);",
              "            ShipJoin(PlayerMercsDefenders, ship, '', 0, 0, 0, -4);",
              "        }",
              "        //Спавним наёмника для задания",
              "        else if(ship_type_num == t_Transport || ship_type_num == t_Pirate)",
              "        {",
              "            ship = BuyRanger(planet, 450 + 250 * PlayerHQMainArray['Main', 'HQLevel']);",
              "            RangerExcludedFromRating(ship, 1);",
              "            if(ship_type_num == t_Transport) ShipJoin(QuestMercs, ship);",
              "            else",
              "            {",
              "                ShipJoin(QuestMercs, ship, 1);",
              "                ChangeState('QuestMercsKillState', ship);",
              "            }",
              "        }",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 0); //Пират",
              "        ShipStatus(ship, 2, 100); //Воин",
              "        //\"Внутренний\" неизменный характер для них также будет \"Воин\"",
              "        ShipSubType(ship, 2);",
              "",
              "        ShipType(ship, 'PlayerMerc');",
              "        dword hull = ShipItems(ship, 0);",
              "        if(!PlayerHQMainArray['Shipyard', 'ProductionShipyard']) SpecialToEquipment(FindBonusByCustomTag('PlayerMerc_Race' + new_planet_race), hull);",
              "        else",
              "        {",
              "            SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_PlayerMercSpecialHull'), hull);",
              "            EqCustomFaction(hull, 'SubFactionPlayerMercsFixedStanding');",
              "        }",
              "        Chameleon(ship);",
              "",
              "        SetName(ship, PlayerHQMainArray['Main', 'OrganisationName'] + ' ' + ShipName(ship));",
              "        for(i = 1; i <= 5; i = i + 1) ShipRefit(ship);",
              "",
              "        //Обновляем переменную корпуса на случай, если наёмник сменил его при рефите",
              "        hull = ShipItems(ship, 0);",
              "        HullSeries(hull, -1);",
              "        ItemSize(hull, max(ItemSize(hull), 100 * GTL, 230)); //Ограничение, чтобы на поздних ГТУ не спавнились совсем уж утырки (акрин срежет 20%)",
              "        ItemSize(hull, ItemSize(hull) + RndObject(-10, 10, ship));",
              "        NoDropItem(hull, 1);",
              "",
              "        //Накидываем ботам халявного опыта (распределяют пускай сами)",
              "        int add_exp = 750 * PlayerHQMainArray['Main', 'HQLevel'] * PlayerHQMainArray['Mercs', 'PlanetsCount'];",
              "        ShipFreeExp(ship, ShipFreeExp(ship) + add_exp);",
              "        SetShipExpByType(ship, GetShipExpByType(cur_ship) + add_exp, 0);",
              "",
              "        if(strike_merc_level)",
              "        {",
              "            //Бафаем навыки",
              "            for(i = 0; i <= 4; i = i + 1) ShipSkill(ship, i, RndObject(round(RoundTo(1.5 * strike_merc_level, 1.0, 3)), 2 * strike_merc_level, ship));",
              "        }",
              "        else",
              "        {",
              "            i = PortionInDiapason(PlayerHQMainArray['Main', 'HQLevel'], 1, PlayerHQMainArray['Main', 'HQLevelMax'], 1, 4);",
              "            ShipSkill(ship, 'Accuracy', max(ShipSkill(ship, 0), i));",
              "            ShipSkill(ship, 'Mobility', max(ShipSkill(ship, 1), i));",
              "            ShipSkill(ship, 'Technical', max(ShipSkill(ship, 2), i - 1));",
              "            ShipSkill(ship, 'Charm', max(ShipSkill(ship, 4), i + 1));",
              "        }",
              "        ShipSkill(ship, 'Leadership', 0); //Унижаем всем наёмникам лидерство, чтобы они не могли нанимать себе в подчинение другие корабли (в том числе других наёмников)",
              "        ShipSpecialBonuses(ship, bonSkill6, -30);",
              "",
              "        //Повышаем всем наёмникам пиратское звание до барона, чтоб, сука, уважали их тупые пираты!",
              "        RaisePirateRank(ship, 7);",
              "        //Уровень навыков использования доминаторского оружия равен ГТУ",
              "        ShipTechLevelKnowledge(ship, GTL);",
              "",
              "        //Запрещаем другим рейнджерам (и наёмникам) рэкетировать наёмников игрока",
              "        NoTargetToShip(ship, 3);",
              "",
              "        PlanetOwner(planet, planet_owner);",
              "        PlanetRace(planet, planet_race);",
              "",
              "        ShipOwner(ship, ShipOwner(transfer_to));",
              "",
              "        ShipCustomFaction(ship, 'SubFactionPlayerMercsFixedStanding');",
              "        ShipAddCustomShipInfo(ship, 'IgnoreCamoInfo', 'NoShow', 1); //Маркер 1, чтобы диалог в EvoYouDontFoolMe не добавлял лишний текст",
              "        //Выставляем наёмнику полный нейтралитет в конфликте Коалиции и пиратов",
              "        //Конкретную сторону будут принимать только наёмники на заданиях по захвату систем",
              "        ShipStanding(ship, 5);",
              "        TransferShip(ship, transfer_to);",
              "",
              "        //Также проводим дополнительный рефит уже из штаба, чтобы эти суки подобрали себе что-ниубдь",
              "        //получше стартового промлазера - уроды, блять!",
              "        for(i = 1; i <= 4 + PlayerHQMainArray['Main', 'HQLevel']; i = i + 1) ShipRefit(ship);",
              "",
              "        //Дополнительное усиление наёмников из ударной группы",
              "        if(strike_merc_level)",
              "        {",
              "            //Дополнительное усиление для наёмников из ударной группы",
              "            for(i = 1; i <= 2 * strike_merc_level + 1; i = i + 1) ShipRefit(ship);",
              "        }",
              "",
              "        //Добавляем метку на корпус наёмника (на случай, если в будущем игрок захочет его заменить)",
              "        //ItemExtraSpecialsAddByType(ShipItems(ship, 0), FindBonusByNameInCfg('ShuMercsHQ_StrikeMercOwnItemMark'));",
              "",
              "        dword gun = ShipWeapon(ship, 1);",
              "        if(ItemType(gun) == t_Weapon1 || PlayerHQMainArray['Science', 'GluonGunsDeveloped']) //Если тупой рейнджер снова экипировался говёным промлазером",
              "        {",
              "            FreeItem(GetItemFromShip(ship, gun));",
              "            //Выдаём ему вместо него лезку, ракетомёт или третон",
              "            if(!PlayerHQMainArray['Science', 'GluonGunsDeveloped']) gun = CreateEquipment(GetValueFromScript('', 't_Weapon' + RndObject(3, 5, ship)), RndObject(25, 50, ship), PlanetInventionLevel(planet, 7), new_planet_race);",
              "            //Если в штабе уже изобрели глюонные пушки, то выдаём наёмнику одну случайную",
              "            else",
              "            {",
              "                gun = CreateGluonGun(ship, -1, max(GTL - RndObject(0, 2, ship), 1));",
              "                NoDropItem(gun, 1);",
              "            }",
              "            AddItemToShip(ship, gun);",
              "        }",
              "        gun = ShipWeapon(ship, 2);",
              "        if(!gun) //Если тупой рейнджер установил себе всего одну пушку",
              "        {",
              "            //Выдаём ему лезку, ракетомёт или третон",
              "            gun = CreateEquipment(GetValueFromScript('', 't_Weapon' + RndObject(3, 5, ship)), RndObject(25, 50, ship), PlanetInventionLevel(planet, 7), new_planet_race);",
              "            AddItemToShip(ship, gun);",
              "        }",
              "",
              "        //При улучшении оборудования заодно устраняется и возможный перегруз наёмника",
              "        ShipImproveItems(ship, RndObject(1 + PlayerHQMainArray['Main', 'HQLevel'], 3 + PlayerHQMainArray['Main', 'HQLevel'], ship));",
              "        if(strike_merc_level) ShipImproveItems(ship, 3 * strike_merc_level + 1);",
              "        HullHP(hull, 'To100');",
              "",
              "        ArrangeItems(ship);",
              "        //FreeAllHoldEquipment(ship);",
              "    }",
              "",
              "    //Имеет смысл использовать данный возврат только в случае, если спавнился один наёмник, а не группа",
              "    result = ship;",
              "}",
              "",
              "//Функция для вывода наёмников игрока из скрипта и превращения их во фрилансеров",
              "function FreePlayerMerc(dword ship)",
              "{",
              "    //ShipCustomFaction(ship, 'SubFactionFixedStanding');",
              "    ShipCustomFaction(ship, 'SubFactionFreelancersFixedStanding');",
              "    ShipOwner(ship, ShipPilotRace(ship));",
              "    ShipStanding(ship, 5); //Выставляем будущему (возможно) фрилансеру полный нейтралитет в конфликте Коалиции и пиратов",
              "",
              "    if(ShipGroup(ship) == CruisersDefenders)",
              "    {",
              "        ShipOut(ship);",
              "        ShipJoinToScript(ship, 'Mod_ShuMercs.FreeMercs.MercToDieState'); //Данная функция не вызовет срабатывания стейт-кода при добавлении",
              "        exit;",
              "    }",
              "",
              "    SetName(ship, Format(ShipName(ship), PlayerHQMainArray['Main', 'OrganisationName'] + ' ', '', ''));",
              "    ShipType(ship, 'Freelancer');",
              "",
              "    if(ShipGroup(ship) == PlayerMercsStrike || PlayerHQMainArray['Mercs', 'FreedLimitCount'] >= 3)",
              "    {",
              "        ShipJoinToScript(ship, 'Mod_ShuMercs.FreeMercs.MercToDieState'); //Данная функция не вызовет срабатывания стейт-кода при добавлении",
              "        exit;",
              "    }",
              "    //Рандомизируем тех наёмников, которые реально уйдут во фрилансеры в рамках лимита",
              "    else if(!RndObject(0, 1, ship))",
              "    {",
              "        ShipJoinToScript(ship, 'Mod_ShuMercs.FreeMercs.MercToDieState'); //Данная функция не вызовет срабатывания стейт-кода при добавлении",
              "        exit;",
              "    }",
              "",
              "    OrderLock(ship, 0);",
              "    ShipJoinToScript(ship, 'Mod_ShuMercs.FreeMercs.MercNormal'); //Данная функция не вызовет срабатывания стейт-кода при добавлении",
              "    if(!ShipInHyperSpace(ship)) ShipFreeFlight(ship);",
              "}",
              "",
              "function ChangeShipScriptGroupFromInfo(dword ship)",
              "{",
              "    int info_num = ShipFindCustomShipInfoByType(ship, 'ChangeShipScriptGroupInfo');",
              "    if(info_num == -1)",
              "    {",
              "        result = 0;",
              "        exit;",
              "    }",
              "",
              "    str data_str = ShipCustomShipInfoTextData(ship, info_num, 1);",
              "    ShipJoinToScript(ship, GetParFromString(data_str, ',', 0, 0));",
              "    SetData(GetParFromString(data_str, ',', 1, 0), 0, ship);",
              "    SetData(GetParFromString(data_str, ',', 2, 0), 1, ship);",
              "    SetData(GetParFromString(data_str, ',', 3, 0), 2, ship);",
              "    SetData(GetParFromString(data_str, ',', 4, 0), 3, ship);",
              "",
              "    //Удаляем инфошку, либо сдвигаем очередь переключений скриптовой группы",
              "    data_str = ShipCustomShipInfoTextData(ship, info_num, 2);",
              "    if(data_str == '') ShipDeleteCustomShipInfo(ship, info_num);",
              "    else",
              "    {",
              "        ShipCustomShipInfoTextData(ship, info_num, 1, data_str);",
              "        data_str = ShipCustomShipInfoTextData(ship, info_num, 3);",
              "        if(data_str != '')",
              "        {",
              "            ShipCustomShipInfoTextData(ship, info_num, 2, data_str);",
              "            ShipCustomShipInfoTextData(ship, info_num, 3, '');",
              "        }",
              "        else ShipCustomShipInfoTextData(ship, info_num, 2, '');",
              "    }",
              "",
              "    result = 1;",
              "}",
              "",
              "//Функция для расчёта координат точек сближения двух кораблей",
              "//В теории возможна ситуация, когда два корабля назначат себе точки сближения прямо на звезде,",
              "//так что будьте внимательны",
              "function CalcApproachCoordinates(dword ship1, dword ship2, int how_close)",
              "{",
              "    how_close = how_close / 2;",
              "",
              "    int x1 = CoordX(ship1);",
              "    int y1 = CoordY(ship1);",
              "    int x2 = CoordX(ship2);",
              "    int y2 = CoordY(ship2);",
              "",
              "    int mX = round(0.5 * (x1 + x2));",
              "    int mY = round(0.5 * (y1 + y2));",
              "",
              "    int dX = mX - x1;",
              "    int dY = mY - y1;",
              "",
              "    float len = sqrt(sqr(dX) + sqr(dY));",
              "    dX = round(((len - how_close) / len) * dX);",
              "    dY = round(((len - how_close) / len) * dY);",
              "",
              "    //Получаем готовые координаты сближения и заносим в массив для возврата",
              "    free(tarr1);",
              "    tarr1 = newarray(4);",
              "",
              "    tarr1[0] = x1 + dX;",
              "    tarr1[1] = y1 + dY;",
              "",
              "    tarr1[2] = x2 - dX;",
              "    tarr1[3] = y2 - dY;",
              "",
              "    //Но чтобы не слишком близко к звезде",
              "    int correction = 0;",
              "    if(abs(tarr1[0]) < 650 && abs(tarr1[1]) < 650)",
              "    {",
              "        if(abs(dX) < abs(dY))",
              "        {",
              "            if(tarr1[0] >= 0) correction = 650 - tarr1[0];",
              "            else correction = -(650 - tarr1[0]);",
              "",
              "            tarr1[0] = tarr1[0] + correction;",
              "            tarr1[2] = tarr1[2] + correction;",
              "        }",
              "        else",
              "        {",
              "            if(tarr1[1] >= 0) correction = 650 - tarr1[1];",
              "            else correction = -(650 - tarr1[1]);",
              "",
              "            tarr1[1] = tarr1[1] + correction;",
              "            tarr1[3] = tarr1[3] + correction;",
              "        }",
              "    }",
              "}",
              "",
              "//Обновляем список кандидатов в наёмники ударной группы и перезапускаем таймер до следующего обновления списка",
              "function StrikeGroupCandidatesListUpdate()",
              "{",
              "    dword HQ = GroupToShip(PlayerHQ);",
              "    str list = '';",
              "    for(int i = 1; i <= 3; i = i + 1)",
              "    {",
              "        str merc_path = '';",
              "        int roll = RndObject(1, 100, HQ);",
              "        //Наёмники стандартного класса",
              "        if(roll <= 45) merc_path = merc_path + 'Class1.' + RndObject(1, int(CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class1.Count')), HQ);",
              "        //Наёмники среднего класса",
              "        else if(roll <= 80) merc_path = merc_path + 'Class2.' + RndObject(1, int(CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class2.Count')), HQ);",
              "        //Наёмники высшего класса",
              "        else merc_path = merc_path + 'Class3.' + RndObject(1, int(CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class3.Count')), HQ);",
              "",
              "        //\"Уникализируем\" подборку в список кандидатов",
              "        if(~findsubstr(list, merc_path))",
              "        {",
              "            i = i - 1;",
              "            continue;",
              "        }",
              "",
              "        str temp_name = CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + merc_path + '.Name');",
              "",
              "        //Пропускаем наёмников, чьи имена уже были добавлены в строку найма",
              "        //Также пропускаем наёмников, ранее погибших при исполнении",
              "        if(~findsubstr(PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'], temp_name) || ~findsubstr(PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesKIALine'], temp_name))",
              "        {",
              "            i = i - 1;",
              "            continue;",
              "        }",
              "",
              "        //Добавляем модификатор стоимости найма (на случай, если в список кандидатов попадут наёмники одного класса с одинаковой стоимостью)",
              "        merc_path = merc_path + '*' + round(0.01 * Rnd(90, 110, sqr(sqr(CurTurn() + 33 * i))));",
              "",
              "        list = list + merc_path;",
              "        if(i < 3) list = list + ',';",
              "    }",
              "",
              "    PlayerHQMainArray['Mercs', 'StrikeCandidatesList'] = list;",
              "    PlayerHQMainArray['Mercs', 'StrikeCandidatesListUpdate'] = CurTurn() + 30;",
              "}",
              "",
              "function PlayerHQActCode() //OnStep_0,1",
              "{",
              "    dword HQ = ScriptItemActShip();",
              "    if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1) //Если в штабе установлен портальный генератор",
              "    {",
              "        if(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] != '')",
              "        {",
              "            dword cur_star = ShipStar(HQ);",
              "            if(!ScriptItemActParam())",
              "            {",
              "                if(!ShipInHyperSpace(HQ))",
              "                {",
              "                    if(ShipOrder(HQ) != 7) //Если ещё не выставлен приказ на телепортацию обратно в домашнюю систему",
              "                    {",
              "                        int day_to_return = GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 0, 0);",
              "                        if(day_to_return + 1 <= CurTurn()) //Если пришла пора лететь домой",
              "                        {",
              "                            dword home_star = GalaxyStar(GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 1, 0));",
              "                            if(cur_star != home_star)",
              "                            {",
              "                                int coordX = GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 2, 0);",
              "                                int coordY = GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 3, 0);",
              "                                //Задаём число дней на совершение скачка обратно",
              "                                int jump_time = max(round(sqrt(Dist2Star(cur_star, home_star))) / 10, 2) * 2;",
              "",
              "                                OrderTeleport(HQ, home_star, coordX, coordY, 1, jump_time);",
              "",
              "                                //И ставим \"пометку в графе возврата\", чтобы код ниже не корректировал координаты штаба относительно позиции игрока",
              "                                PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] = SetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 0, 'WayBackHome');",
              "",
              "                                EtherDelete('PlayerHQ_ExtractionHasArrived');",
              "                            }",
              "                            //По прилёту назад обнуляем данные для возврата (до этого используется как маркер для возвращающихся в штаб наёмников)",
              "                            else PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] = '';",
              "                        }",
              "                    }",
              "                }",
              "                //Если штаб находится в преддверии выхода из гипера в системе, куда его вызвал игрок, выставляем ему координаты рядом с текущим местоположением игрока",
              "                else if(cur_star == ShipOrderObj(HQ))",
              "                {",
              "                    if(GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 0, 0) != 'WayBackHome') //Если штаб ещё не возвращается назад, т.к. в этом случае корректировать его координаты не нужно",
              "                    {",
              "                        day_to_return = GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 0, 0);",
              "                        int days_to_wait = CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionWaitDays');",
              "                        if(day_to_return - days_to_wait <= CurTurn())",
              "                        {",
              "                            float angle = 0.01 * RndObject(0, 200, HQ);",
              "                            int dist = 150;",
              "                            coordX = round(sin(angle * pi) * dist) + CoordX(Player());",
              "                            coordY = round(cos(angle * pi) * dist) + CoordY(Player());",
              "                            //Меняем точку выхода в приказе телепортации",
              "                            OrderTeleport(HQ, ShipOrderObj(HQ), coordX, coordY, 1, 0);",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else //if(ScriptItemActParam() == 1)",
              "            {",
              "                //Выводим уведомление для игрока по прибытии штаба в систему, куда его вызывал игрок (пока штаб в гипере на Step 0, вывести его невозможно)",
              "                day_to_return = GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 0, 0);",
              "                days_to_wait = CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionWaitDays');",
              "                if(day_to_return - days_to_wait == CurTurn())",
              "                {",
              "                    if(cur_star == ShipStar(Player()))",
              "                    {",
              "                        CustomEther('PlayerMercsOrg', 0, 'PlayerHQ_ExtractionHasArrived', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.PlayerExtractionHasArrived'),",
              "                                                                   '<DaysLeft'+'>', int(CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionWaitDays'))), HQ);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Обновляет общее квестовое зерно и возвращает временное для применения в конкретном квесте",
              "function GetQuestSeed()",
              "{",
              "    if((TempQuestHQSeed ^ GetObjectGenerationSeed(GalaxyPtr())) == CurTurn())",
              "    {",
              "        int seed = GetObjectGenerationSeed(GalaxyPtr()) ^ (CurTurn() + 7);",
              "        TempQuestHQSeed = seed;",
              "    }",
              "    else seed = TempQuestHQSeed;",
              "",
              "    result = seed;",
              "}",
              "",
              "//Сложное объявление ассиметричного массива с набором всех ключевых данных по штабу игрока (псевдокласс)",
              "function DeclarePlayerHQMainArray()",
              "{",
              "    unknown t_array;",
              "    ArrayDelete(PlayerHQMainArray, 0);",
              "    t_array = newarray(1);",
              "",
              "    ArrayDelete(t_array, 0);",
              "    ArrayAdd(t_array, '', 'OrganisationName');",
              "    ArrayAdd(t_array, 0, 'HQId'); //Текущее Id станции, которое может быть полезно для её возврата в других модах",
              "    ArrayAdd(t_array, -1, 'HQStar'); //Id (номер) звезды, в которой находится (либо ранее находился) штаб (имеет смысл запоминать, т.к. штаб в ней может временно отсутствовать)",
              "    ArrayAdd(t_array, 1, 'HQLevel'); //Текущий уровень штаба",
              "    ArrayAdd(t_array, 0 + CT('Script.Mod_ShuMercs.PlayerMercsParams.HQLevelMax'), 'HQLevelMax'); //Максимальный уровень штаба",
              "    ArrayAdd(t_array, 0, 'CoalitionReputation'); //Репутации организации игрока в кругах Коалиции",
              "    ArrayAdd(t_array, 0, 'PirateClanReputation'); //Репутации организации игрока в пиратских кругах",
              "    ArrayAdd(t_array, CurTurn() + 365, 'ReputationDecreaseTimer'); //Заводим таймер ежегодного постепенного снижения репутации у сторон конфликта (не зависит от выполнения контрактов)",
              "    ArrayAdd(t_array, 0, 'GreetingDialog'); //Маркер интро диалога на станции: 0 - интро ещё не было, 1 - необходимо проиграть интро после повторной постройки штаба, 2 - интро уже выводилось",
              "    ArrayAdd(t_array, 0, 'HQImproveDialog'); //Маркер интро о первом заходе в режим улучшения станции: 0 - интро ещё не было, 1 - интро уже выводилось",
              "    ArrayAdd(t_array, 0, 'HQScienceDialog'); //Маркер интро о первом заходе в научный отдел: 0 - интро ещё не было, 1 - интро уже выводилось",
              "    ArrayAdd(t_array, 0, 'HQArmoryDialog'); //Маркер интро о первом заходе в оружейный цех: 0 - интро ещё не было, 1 - интро уже выводилось",
              "    ArrayAdd(t_array, 0, 'HQMedicineDialog'); //Маркер интро о первом заходе в медблок: 0 - интро ещё не было, 1 - интро уже выводилось",
              "    ArrayAdd(t_array, 0, 'HQShipyardDialog'); //Маркер интро о первом заходе на верфь: 0 - интро ещё не было, 1 - интро уже выводилось",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Main');",
              "    t_array = newarray(1);",
              "",
              "    //Заполняем раздел массива Mercs",
              "    ArrayDelete(t_array, 0);",
              "    ArrayAdd(t_array, 0, 'PlanetsCount'); //Число обитаемых планет в системе штаба",
              "    ArrayAdd(t_array, 0, 'ReplenishmentFrequency'); //Максимальная частота появления нового наемника в штабе",
              "    ArrayAdd(t_array, 0, 'ReplenishmentTimer'); //Время до появления следующего наёмника в резерве",
              "    ArrayAdd(t_array, 1, 'ReplenishmentCount'); //Сколько наёмников будет поступать в резерв при каждом пополнении",
              "    ArrayAdd(t_array, 0, 'MercsEquipAtStock'); //Число \"комплектов снаряжения\" для оснащения новых наёмников, если не равно нулю, будет использоваться вместо списания суммы из бюджета",
              "    ArrayAdd(t_array, 0, 'MaxFree'); //Максимальное число \"гулящих\" (на свободном \"выпасе\") наёмников игрока",
              "    ArrayAdd(t_array, 0, 'CurrentMaxFree'); //Максимальное число \"гулящих\" наёмников, установленное самим игроком (не может быть выше максимального числа)",
              "    ArrayAdd(t_array, 0, 'MaxAtReady'); //Максимальное число готовых к вылету (сидят на базе, вылетают только на задания) наёмников игрока",
              "    ArrayAdd(t_array, 0, 'CurrentMaxAtReady'); //Максимальное число готовых к вылету наёмников, установленное самим игроком (не может быть выше максимального числа)",
              "    ArrayAdd(t_array, 0, 'CurrentAtReady'); //Текущее число готовых к вылету (фактически, запас готовых наёмников на базе)",
              "    ArrayAdd(t_array, 0, 'MaxStrike'); //Максимальное число \"личных\" (из состава ударной группы) наёмников игрока",
              "    ArrayAdd(t_array, '', 'StrikeCandidatesList'); //Строка со списком кандидатов в наёмники ударной группы (по 3 кандидата в месяц)",
              "    ArrayAdd(t_array, '', 'StrikeCandidatesNamesLine'); //Строка с именами нанятых в ударную группу наёмников, используется для \"уникализации\" подбора кандидатов",
              "    ArrayAdd(t_array, '', 'StrikeCandidatesNamesKIALine'); //Строка с именами погибших при исполнении наёмников ударной группы, чтобы нельзя было нанимать их повторно",
              "    ArrayAdd(t_array, 0, 'StrikeCandidatesListUpdate'); //Таймер до следующего обновления списка кандидатов",
              "    ArrayAdd(t_array, 0, 'StrikeGroupIsAlive'); //Маркер о том, что ударная группа в данный момент существует (необходим для вывода уведомления о гибели группы)",
              "    ArrayAdd(t_array, 0, 'MaxReserve'); //Максимальное число резервистов (сидят на базе без кораблей и снаряжения, потребляют минимум зарплаты)",
              "    ArrayAdd(t_array, 0, 'CurrentMaxReserve'); //Максимальное число резервистов, установленное самим игроком (не может быть выше максимального числа)",
              "    ArrayAdd(t_array, 0, 'CurrentReserve'); //Текущее число резервистов (фактически, запас наёмников для экстренного респавна, если запас готовых к вылету неожиданно иссяк)",
              "    ArrayAdd(t_array, 0, 'FreedLimitTimer'); //Номер хода, на котором произойдёт очередное обнуление числа наёмников ушедших во фрилансеры",
              "    ArrayAdd(t_array, 0, 'FreedLimitCount'); //Сколько наёмников было освобождено до очередного обнуления",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Mercs');",
              "    t_array = newarray(1);",
              "",
              "    //Заполняем раздел массива Finance",
              "    ArrayDelete(t_array, 0);",
              "    ArrayAdd(t_array, 0.0, 'CurrentBalance'); //Текущий кредитный баланс организации (хранится в double, чтобы увеличить потенциальный лимит)",
              "    //ArrayAdd(t_array, 0, 'FiscalPeriod'); //Таймер завершения отчётного периода финансовой статистики (все доходы и расходы за прошедший период обнуляются)",
              "    ArrayAdd(t_array, 0, 'SalariesDay'); //Таймер до ежемесячных зарплатных отчислений всем наёмникам и персоналу штаба",
              "    ArrayAdd(t_array, 0, 'StatsInEarnings'); //Месячные доходы за свободный заработок \"гулящих\" наёмников",
              "    ArrayAdd(t_array, 0, 'StatsInQuests'); //Месячные доходы за выполнение заданий",
              "    ArrayAdd(t_array, 0, 'StatsOutSalaries'); //Месячные расходы на зарплату наёмников",
              "    ArrayAdd(t_array, 0, 'StatsOutEquipments'); //Месячные расходы на оснащение новых наёмников",
              "    ArrayAdd(t_array, 0, 'StatsOutFleetMaintenance'); //Месячные расходы на содержание крупных кораблей",
              "    ArrayAdd(t_array, 0, 'StatsOutExpenses'); //Прочие месячные расходы организации",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Finance');",
              "    t_array = newarray(1);",
              "",
              "    //Заполняем раздел массива Finance",
              "    ArrayDelete(t_array, 0);",
              "    ArrayAdd(t_array, 0, 'PrivateQuestAppear'); //Таймер до появления нового частного контракта",
              "    ArrayAdd(t_array, 0, 'PrivateQuestsCompleted'); //Счётчик завершённых частных квестов",
              "    ArrayAdd(t_array, 0, 'PrivateQuestsFailed'); //Счётчик проваленных частных квестов",
              "    ArrayAdd(t_array, 0, 'CoalitionQuestAppear'); //Таймер до появления нового контракта от Коалиции",
              "    ArrayAdd(t_array, 0, 'CoalitionQuestsCompleted'); //Счётчик завершённых коалиционных квестов",
              "    ArrayAdd(t_array, 0, 'CoalitionQuestsFailed'); //Счётчик проваленных коалиционных квестов",
              "    ArrayAdd(t_array, 0, 'PirateClanQuestAppear'); //Таймер до появления нового пиратского контракта",
              "    ArrayAdd(t_array, 0, 'PirateClanQuestsCompleted'); //Счётчик завершённых пиратских квестов",
              "    ArrayAdd(t_array, 0, 'PirateClanQuestsFailed'); //Счётчик проваленных пиратских квестов",
              "    ArrayAdd(t_array, 0, 'MercsRestingAfterQuest'); //Таймер до возможности снова взять контракт после возвращения наёмников с предыдущего (если все квестовые наёмники погибли или переметнулись в \"гулящие\", то таймер взведён не будет)",
              "    ArrayAdd(t_array, 0, 'GluonGunsQuestStatus'); //Статусы квеста: -1 - завершён (выполнен, либо провален - не важно), больше выполнить данный квест нельзя, 0 - не взят, отсчёт не начат, 1 - начат отсчёт, 2 - отсчёт закончен, квест ожидает взятия от игрока, 3 - игрок поговорил о квесте, но пока отказался, 4 - первый этап квеста, 5 - второй этап квеста, 6 - квест выполнен, игрок ожидает получения доступа к оружию",
              "    ArrayAdd(t_array, 0, 'GluonGunsQuestTimer');",
              "    ArrayAdd(t_array, 0, 'GluonGunsQuestScienceBaseId');",
              "    ArrayAdd(t_array, 0, 'GluonGunsQuestDialogStateSet'); //Для записи состояния диалога с учёным",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Quests');",
              "    t_array = newarray(1);",
              "",
              "    ArrayAdd(t_array, 0, 'ScientificDepartment'); //Маркер наличия в штабе научного отдела",
              "    ArrayAdd(t_array, 0, 'SpeedUpRefill'); //Таймер до обновления запасов тетроазиновой жидкости (до возможности вновь ускорить движок)",
              "    ArrayAdd(t_array, 0, 'PortalGenerator'); //Установлен ли в штабе портальный генератор: 0 - нет, 1 - да, -1 - игрок уже узнал информацию насчёт условий постройки генератора, но ещё ни разу его не строил, -2 - игрок ранее уже строил генератор, но потом штаб был уничтожен, >1 - ход, в который будет завершена постройка генератора",
              "    ArrayAdd(t_array, int(CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorLongJumpRange')), 'PortalGeneratorRange'); //Максимальная дальность скачка для портального генератора в парсеках",
              "    ArrayAdd(t_array, 0, 'PortalGeneratorTimer'); //Ход, в который можно будет снова активировать портальный генератор",
              "    ArrayAdd(t_array, '', 'PortalGeneratorReturnData'); //Данные (в строке через запятую) о том, когда и куда должен вернуться штаб после подбора игрока: 0 - номер хода, в который нужно произвести скачок назад, 1 - номер системы, куда нужно вернуться, 2 - координата X, 3 - координата Y",
              "    ArrayAdd(t_array, 0, 'GluonGunsDeveloped'); //Маркер о том, что уже были разработаны особые орудия (можно приступать к их производству)",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Science');",
              "    t_array = newarray(1);",
              "",
              "    ArrayAdd(t_array, 0, 'ArmoryWorkshop'); //Маркер наличия в штабе оружейного цеха",
              "    ArrayAdd(t_array, 0, 'WeaponGoodsProductionTime'); //Таймер до хода, на котором будет происходить производство оружия в качестве товара (первая проверка сработает лишь после появления в штабе оружейного цеха)",
              "    ArrayAdd(t_array, 0, 'WeaponGoodsInProduction'); //Количество оружия, находящегося в производстве, будет добавлено в магазин по истечении таймера",
              "    ArrayAdd(t_array, 0, 'MercsHullShopTimer'); //Таймер до следующего добавления случайного корпуса наёмника игрока в магазин штаба",
              "    ArrayAdd(t_array, 0, 'GluonGunsShopTimer'); //Таймер до появления глюонных пушек в магазине штаба",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Armory');",
              "    t_array = newarray(1);",
              "",
              "    ArrayAdd(t_array, 0, 'MedicalDepartment'); //Маркер наличия в штабе медблока",
              "    ArrayAdd(t_array, 0, 'UniqueStimulantLastIntake'); //Ход, когда игрок последний раз принимал \"Экспир\", нужен, для определения времени возможности следующего приёма",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Medicine');",
              "    t_array = newarray(1);",
              "",
              "    ArrayAdd(t_array, 0, 'ProductionShipyard'); //Маркер наличия в штабе производственной верфи",
              "    ArrayAdd(t_array, 0, 'CapitalShipDock'); //Маркер наличия в производственной верфи инфраструктуры для постройки крупных кораблей (открывает доступ к постройке одного защитного крейсера: 1 - постройка доступна, 2 - крейсер уже был построен, доступна его кастомизация)",
              "    ArrayAdd(t_array, '', 'ShipInProduction'); //Маркер активной постройки корабля/транклюкатора (если не равен ''), хранит в себе путь до раздела со статами будущего корабля/транклюкатора",
              "    ArrayAdd(t_array, 0, 'ShipInProductionTime'); //Таймер до завершения постройки нового корабля/транклюкатора",
              "    ArrayAdd(t_array, 0, 'ShipInProductionCost'); //Стоимость корпуса корабля/транклюкатора, находящегося в производстве",
              "    ArrayAdd(t_array, 0, 'NextTrancProductionTime'); //Задержка до возможности произвести следующего транклюкатора, после окончания производства предыдущего",
              "    ArrayAdd(t_array, '', 'LastHQCruiserName'); //Здесь запоминается имя последнего штабного крейсера, чтобы была возможность вывести его в случае гибели",
              "    ArrayAdd(t_array, '', 'ShipsBuilt'); //Строка с путями и числом кораблей (из раздела в Lang), построенных на верфи за всю игру",
              "    ArrayAdd(PlayerHQMainArray, t_array, 'Shipyard');",
              "    t_array = newarray(1); //Переобъявляем массив для \"открепления\" адреса переменной от прошлого объекта массива (иначе будет обнулён записанный выше элемент массива)",
              "}",
              "",
              "//А эта - для его очистки в случае уничтожения штаба (чистим не всё, а только определённые данные)",
              "function ClearPlayerHQMainArray()",
              "{",
              "    PlayerHQMainArray['Main', 'HQId'] = 0;",
              "    PlayerHQMainArray['Main', 'HQStar'] = -1;",
              "    PlayerHQMainArray['Main', 'HQLevel'] = 1;",
              "    PlayerHQMainArray['Main', 'HQLevelMax'] = int(CT('Script.Mod_ShuMercs.PlayerMercsParams.HQLevelMax'));",
              "",
              "    PlayerHQMainArray['Mercs', 'PlanetsCount'] = 0;",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'] = 0;",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] = 0;",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentCount'] = 1;",
              "    PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = 0;",
              "    PlayerHQMainArray['Mercs', 'MaxFree'] = 0;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = 0;",
              "    PlayerHQMainArray['Mercs', 'MaxAtReady'] = 0;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = 0;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "    PlayerHQMainArray['Mercs', 'MaxStrike'] = 0;",
              "    PlayerHQMainArray['Mercs', 'StrikeCandidatesList'] = '';",
              "    PlayerHQMainArray['Mercs', 'StrikeCandidatesListUpdate'] = 0;",
              "    PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "    PlayerHQMainArray['Mercs', 'MaxReserve'] = 0;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = 0;",
              "    PlayerHQMainArray['Mercs', 'CurrentReserve'] = 0;",
              "    PlayerHQMainArray['Mercs', 'FreedLimitTimer'] = 0;",
              "    PlayerHQMainArray['Mercs', 'FreedLimitCount'] = 0;",
              "",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = 0.0;",
              "    //PlayerHQMainArray['Finance', 'FiscalPeriod'] = 0;",
              "    PlayerHQMainArray['Finance', 'SalariesDay'] = 0;",
              "    PlayerHQMainArray['Finance', 'StatsInEarnings'] = 0;",
              "    PlayerHQMainArray['Finance', 'StatsInQuests'] = 0;",
              "    PlayerHQMainArray['Finance', 'StatsOutSalaries'] = 0;",
              "    PlayerHQMainArray['Finance', 'StatsOutEquipments'] = 0;",
              "    PlayerHQMainArray['Finance', 'StatsOutFleetMaintenance'] = 0;",
              "    PlayerHQMainArray['Finance', 'StatsOutExpenses'] = 0;",
              "",
              "    PlayerHQMainArray['Quests', 'PrivateQuestAppear'] = 0;",
              "    PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = 0;",
              "    PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = 0;",
              "    PlayerHQMainArray['Quests', 'MercsRestingAfterQuest'] = 0;",
              "    //Если данный квест находился в процессе выполнения когда взорвали штаб, то проваливаем его наглухо",
              "    int tint = PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'];",
              "    if(tint > 3)",
              "    {",
              "        PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = -1;",
              "        dword ruin = IdToShip(PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId']);",
              "        if(ruin)",
              "        {",
              "            ShipOwner(ruin, Fei);",
              "            ShipOut(ruin);",
              "        }",
              "",
              "        if(tint < 6)",
              "        {",
              "            //Обновляем уведомление квеста",
              "            str tstr = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr = tstr + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "            tstr = tstr + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteFailedByHQDestroyed');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', tstr);",
              "        }",
              "    }",
              "    else if(~tint) PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 0;",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = 0;",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId'] = 0;",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] = 0;",
              "",
              "    PlayerHQMainArray['Science', 'ScientificDepartment'] = 0;",
              "    PlayerHQMainArray['Science', 'SpeedUpRefill'] = 0;",
              "    //Если портальный генератор уже был установлен, либо была начата его установка",
              "    if(PlayerHQMainArray['Science', 'PortalGenerator'] >= 1) PlayerHQMainArray['Science', 'PortalGenerator'] = -2;",
              "    PlayerHQMainArray['Science', 'PortalGeneratorRange'] = 0;",
              "    PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = 0;",
              "    PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] = '';",
              "",
              "    PlayerHQMainArray['Armory', 'ArmoryWorkshop'] = 0;",
              "    PlayerHQMainArray['Armory', 'WeaponGoodsProductionTime'] = 0;",
              "    PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'] = 0;",
              "    PlayerHQMainArray['Armory', 'MercsHullShopTimer'] = 0;",
              "    PlayerHQMainArray['Armory', 'GluonGunsShopTimer'] = 0;",
              "",
              "    PlayerHQMainArray['Medicine', 'MedicalDepartment'] = 0;",
              "",
              "    PlayerHQMainArray['Shipyard', 'ProductionShipyard'] = 0;",
              "    PlayerHQMainArray['Shipyard', 'ShipInProduction'] = '';",
              "    PlayerHQMainArray['Shipyard', 'ShipInProductionTime'] = 0;",
              "    PlayerHQMainArray['Shipyard', 'ShipInProductionCost'] = 0;",
              "    PlayerHQMainArray['Shipyard', 'CapitalShipDock'] = 0;",
              "    PlayerHQMainArray['Shipyard', 'LastHQCruiserName'] = '';",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  0,
          "Parent":  3,
          "#":  10,
          "Total.Lines":  1344,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Каждый ход обновляем переменную с текущим ГТУ",
              "GTL = GalaxyTechLevel();",
              "",
              "//Смена отношения на враждебное с планетой, с которой игрок совершил побег",
              "if(PrisonQuestCheck == -1)",
              "{",
              "    RelationToRanger(cur_planet, Player(), 0);",
              "    PrisonQuestCheck = 0;",
              "}",
              "",
              "//Автоматическое обновление характеристик кастомных орудий",
              "//Срабатывает, только если параметр StatsVersion для ShuMercsHQ был изменён",
              "if(CustomGunsUpdateCheck != CT('Items.Weapon.CustomWeapon.StatsVersion.ShuMercsHQ'))",
              "{",
              "    InventShuMercsHQCustomGuns();",
              "}",
              "",
              "//Если подключён мод ExpCB, то каждый ход обновляем через него данные по числу военных баз и доминионов в Галактике",
              "if(IsScriptActive('Mod_ExpCB'))",
              "{",
              "    TotalSBCount = GetValueFromScript('Mod_ExpCB', 'TotalSBCount');",
              "    TotalWBCount = GetValueFromScript('Mod_ExpCB', 'TotalWBCount');",
              "    TotalCBCount = GetValueFromScript('Mod_ExpCB', 'TotalCBCount');",
              "}",
              "else",
              "{",
              "    //Перебираем все последние галактические эвенты, ловим события уничтожения/постройки баз",
              "    for(i = GalaxyEvents() - 1; i >= 0; i = i - 1)",
              "    {",
              "        if(GalaxyEventDate(i) < CurTurn()) break;",
              "        tstr1 = GalaxyEventType(i);",
              "        tint1 = GalaxyEventData(i, 0);",
              "",
              "        //Была построена/уничтожена ВБ, либо доминион, обновляем счётчики",
              "        if(tstr1 == 'RuinsCreated')",
              "        {",
              "            if(tint1 == t_SB)",
              "            {",
              "                if(GalaxyEventsTextData(i, 1) == '') TotalSBCount = TotalSBCount + 1;",
              "            }",
              "            else if(tint1 == t_WB)",
              "            {",
              "                if(GalaxyEventsTextData(i, 1) == '') TotalWBCount = TotalWBCount + 1;",
              "            }",
              "            else if(tint1 == t_CB)",
              "            {",
              "                if(GalaxyEventsTextData(i, 1) == '') TotalCBCount = TotalCBCount + 1;",
              "            }",
              "        }",
              "        else if(tstr1 == 'RuinsDestroyed')",
              "        {",
              "            if(tint1 == t_SB)",
              "            {",
              "                if(GalaxyEventsTextData(i, 1) == '') TotalSBCount = max(TotalSBCount - 1, 0);",
              "            }",
              "            else if(tint1 == t_WB)",
              "            {",
              "                if(GalaxyEventsTextData(i, 1) == '') TotalWBCount = max(TotalWBCount - 1, 0);",
              "            }",
              "            else if(tint1 == t_CB)",
              "            {",
              "                if(GalaxyEventsTextData(i, 1) == '') TotalCBCount = max(TotalCBCount - 1, 0);",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Запускаем функцию обновления статуса планетарных квестов по заданию постройки штаба/оформления разрешения на передислокацию штаба в другую систему (если таковые имеются)",
              "if(ArrayDim(BuildOwnBase_QuestsArray) > 1) QuestsStatusUpdate();",
              "",
              "//Штаб игрока в процессе, либо уже построен",
              "if(BuildOwnBase_InProcess > 1)",
              "{",
              "    //Если штаб ещё не построен",
              "    if(BuildOwnBase_InProcess < 6)",
              "    {",
              "        //Если выбранную игроком систему захватили, либо если игрок сменил сторону после того, как уже выбрал систему, либо были уничтожены все лидеры группировок наёмников и ЦН стал свободным портом, отменяем задание на постройку штаба",
              "        cur_star = GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1)));",
              "        tint1 = ShipOnSidePirateClan(Player());",
              "        tint2 = ScriptItemData(ApprovalDocuments, 1);",
              "        if(",
              "           StarOwner(cur_star) != ScriptItemData(ApprovalDocuments, 1) ||",
              "           StarCustomFaction(cur_star) != '' ||",
              "           tint1 > tint2 ||",
              "           (!tint1 && tint2 == 2) ||",
              "           MercOrganisationsData['AllMercLeadersDead']",
              "          )",
              "        {",
              "            //Чистим всё руками, потому что при удалении предмета оно автоматом не чистится",
              "            ScriptItemData(ApprovalDocuments, 1, 0);",
              "            ScriptItemData(ApprovalDocuments, 2, 0);",
              "            ScriptItemData(ApprovalDocuments, 3, 0);",
              "            ScriptItemTextData(ApprovalDocuments, 1, '');",
              "            ScriptItemTextData(ApprovalDocuments, 2, '');",
              "            ScriptItemTextData(ApprovalDocuments, 3, '');",
              "            //Удаляем из трюма игрока пакет документов на постройку",
              "            cur_item = ScriptItemToItem(ApprovalDocuments);",
              "            ReleaseItemFromScript(ApprovalDocuments);",
              "            FreeItem(GetItemFromShip(Player(), cur_item));",
              "",
              "            //Обнуляем список выданных планетарных заданий при завершении задания на постройку штаба",
              "            GBuildOwnBase_QuestsGiven = '';",
              "",
              "            //Удаляем все взятые по данному квесту планетарные задания и очищаем массив",
              "            for(i = ArrayDim(BuildOwnBase_QuestsArray) - 1; i > 0; i = i - 1) EtherDelete(BuildOwnBase_QuestsArray[i, 1]);",
              "            free(BuildOwnBase_QuestsArray);",
              "            BuildOwnBase_QuestsArray = newarray(1, 1);",
              "",
              "            //Уведомление о провале задания на постройку штаба",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Title');",
              "",
              "            //Если были уничтожены все лидеры группировок наёмников и ЦН стал свободным портом",
              "            if(MercOrganisationsData['AllMercLeadersDead'])",
              "            {",
              "                tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Failed4'), '<Star'+'></color>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "            }",
              "            else if(ShipOnSidePirateClan(Player()) > ScriptItemData(ApprovalDocuments, 1))",
              "            {",
              "                if(ScriptItemData(ApprovalDocuments, 1)) tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Failed2'), '<Star'+'>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "                else tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Failed3'), '<Star'+'></color>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "            }",
              "            else tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Failed1'), '<Star'+'>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "",
              "            Ether(5, 'BuildOwnMCBase', tstr1);",
              "",
              "            //Если ранее игрок уже потерял одну или больше баз, то выдаём маркер на \"перестройку\"",
              "            if(BasesSuccessfullyBuiltCount) BuildOwnBase_InProcess = -2;",
              "            //Иначе выдаём маркер на первую постройку базы (влияет на диалоги на ЦН и стоимость постройки)",
              "            else BuildOwnBase_InProcess = -1;",
              "        }",
              "    }",
              "    //Если штаб уже был построен игроком",
              "    else",
              "    {",
              "        cur_ruin = GroupToShip(PlayerHQ);",
              "        if(cur_ruin) //Если штаб ещё цел",
              "        {",
              "            cur_star = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "            //Если был запущен квест по передислокации штаба в другую систему",
              "            if(ItemExist(ApprovalDocuments))",
              "            {",
              "                //Если выбранную игроком систему захватили, либо если игрок сменил сторону после того, как уже выбрал систему, отменяем задание на постройку штаба",
              "                tdwd1 = GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1)));",
              "                tint2 = ScriptItemData(ApprovalDocuments, 1);",
              "                if(",
              "                   StarOwner(tdwd1) != ScriptItemData(ApprovalDocuments, 1) ||",
              "                   StarCustomFaction(tdwd1) != ''",
              "                  )",
              "                {",
              "                    //Чистим всё руками, потому что при удалении предмета оно автоматом не чистится",
              "                    ScriptItemData(ApprovalDocuments, 1, 0);",
              "                    ScriptItemData(ApprovalDocuments, 2, 0);",
              "                    ScriptItemData(ApprovalDocuments, 3, 0);",
              "                    ScriptItemTextData(ApprovalDocuments, 1, '');",
              "                    ScriptItemTextData(ApprovalDocuments, 2, '');",
              "                    ScriptItemTextData(ApprovalDocuments, 3, '');",
              "                    //Удаляем из трюма игрока пакет документов на передислокацию",
              "                    cur_item = ScriptItemToItem(ApprovalDocuments);",
              "                    ReleaseItemFromScript(ApprovalDocuments);",
              "                    FreeItem(GetItemFromShip(Player(), cur_item));",
              "",
              "                    //Обнуляем список выданных планетарных заданий при завершении задания на передислокацию штаба",
              "                    GBuildOwnBase_QuestsGiven = '';",
              "",
              "                    //Удаляем все взятые по данному квесту планетарные задания и очищаем массив",
              "                    for(i = ArrayDim(BuildOwnBase_QuestsArray) - 1; i > 0; i = i - 1) EtherDelete(BuildOwnBase_QuestsArray[i, 1]);",
              "                    free(BuildOwnBase_QuestsArray);",
              "                    BuildOwnBase_QuestsArray = newarray(1, 1);",
              "",
              "                    //Уведомление о провале задания на передислокацию штаба",
              "                    tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Title');",
              "",
              "                    //Захватили доминаторы, либо ещё кто-то",
              "                    if(StarOwner(tdwd1) == 1) tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Failed1'), '<Star'+'>', '<color=255,240,100>' + Name(tdwd1) + '</color>', '');",
              "                    //Захватили пираты",
              "                    else if(StarOwner(tdwd1) == 2) tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Failed2'), '<Star'+'>', '<color=255,240,100>' + Name(tdwd1) + '</color>', '');",
              "                    //Захватила Коалиция",
              "                    else tstr1 = tstr1 + Format('<br><clr><clrEnd><br>') + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Failed3'), '<Star'+'></color>', '<color=255,240,100>' + Name(tdwd1) + '</color>', '');",
              "",
              "                    CustomEther('QuestFailed_PlayerMercsOrg', 5, 'PlayerHQRelocation', tstr1);",
              "                }",
              "            }",
              "",
              "            //Пришло время обновления финансовой статистики штаба (каждое 1 января)",
              "            if(!findsubstr(GameDateTxtByTurn(CurTurn()), CT('FormInfo.DecemberThirtyOne')))//if(PlayerHQMainArray['Finance', 'FiscalPeriod'] <= CurTurn())",
              "            {",
              "                //Обнуляем счётчики месячных доходов",
              "                PlayerHQMainArray['Finance', 'StatsInEarnings'] = 0;",
              "                PlayerHQMainArray['Finance', 'StatsInQuests'] = 0;",
              "",
              "                //Обнуляем счётчики месячных расходов",
              "                PlayerHQMainArray['Finance', 'StatsOutSalaries'] = 0;",
              "                PlayerHQMainArray['Finance', 'StatsOutEquipments'] = 0;",
              "                PlayerHQMainArray['Finance', 'StatsOutFleetMaintenance'] = 0;",
              "                PlayerHQMainArray['Finance', 'StatsOutExpenses'] = 0;",
              "",
              "                //PlayerHQMainArray['Finance', 'FiscalPeriod'] = CurTurn() + CT('Script.Mod_ShuMercs.PlayerMercsParams.FiscalPeriod');",
              "            }",
              "",
              "            //Пришло время обновления списка кандидатов на вступление в ударную группу наёмников",
              "            if(PlayerHQMainArray['Mercs', 'StrikeCandidatesListUpdate'] <= CurTurn())",
              "            {",
              "                StrikeGroupCandidatesListUpdate();",
              "            }",
              "",
              "            //Пришло время платить зарплату",
              "            if(PlayerHQMainArray['Finance', 'SalariesDay'] <= CurTurn())",
              "            {",
              "                //Сперва считаем расходы на \"штабной персонал\"",
              "                tint3 = GalaxyMoney(1, 1) * Rnd(3, 5, sqr(sqr(CurTurn() + 50)));",
              "                //Если денег в бюджете хватает на зарплату персонала (записывается в графе \"прочих расходов\")",
              "                if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                {",
              "                    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                    PlayerHQMainArray['Finance', 'StatsOutExpenses'] = PlayerHQMainArray['Finance', 'StatsOutExpenses'] + tint3;",
              "                }",
              "                //Если не хватает, то весь остаток бюджета уходит в их зарплату",
              "                else",
              "                {",
              "                    PlayerHQMainArray['Finance', 'StatsOutExpenses'] = PlayerHQMainArray['Finance', 'StatsOutExpenses'] + PlayerHQMainArray['Finance', 'CurrentBalance'];",
              "                    PlayerHQMainArray['Finance', 'CurrentBalance'] = 0;",
              "                }",
              "",
              "                //Ударная группа получает значительно больше",
              "                check = 0;",
              "                for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                {",
              "                    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "                    tint1 = ShipStatistic(cur_ship, 11);",
              "                    tint2 = PortionInDiapason(CurTurn(), tint1, tint1 + 1825, 0, 4);",
              "                    //На размер зарплаты также влияет и класс наёмника (записан в GetData(0))",
              "                    tint3 = round(2.5 * GalaxyMoney(2, tint2) * ((1.0 + 0.5) * substr(GetData(0, cur_ship), 0, 1)));",
              "",
              "                    //Если денег в бюджете хватает на зарплату наёмника",
              "                    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                    {",
              "                        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                        PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + tint3;",
              "                    }",
              "                    //Иначе он имеет шанс свалить за неуплату",
              "                    else",
              "                    {",
              "                        if(RndObject(1, 100, cur_ruin) <= (50 - 10 * tint2))",
              "                        {",
              "                            //Но уйти \"ударник\" сможет только если прямо сейчас не находится на вылете",
              "                            if(!ShipInNormalSpace(cur_ship))",
              "                            {",
              "                                //Выводим уведомление об уходе наёмника из ударной группы",
              "                                tstr1 = Format(ShipName(cur_ship), PlayerHQMainArray['Main', 'OrganisationName'] + ' ', '', '');",
              "                                CustomEther('PlayerMercsOrg', 0, '', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeMercLeftOrg'), '<Name'+'>', tstr1, '<Cost'+'>', tint3, '255,240,100'));",
              "                                ShipDestroy(cur_ship, 1);",
              "",
              "                                check = check + 1;",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Если вся ударная группа покинула службу за неуплату",
              "                if(PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'])",
              "                {",
              "                    if(check)",
              "                    {",
              "                        if(!(GroupCount(PlayerMercsStrike) - check))",
              "                        {",
              "                            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuitMoney'));",
              "                            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Также в приоритете наёмники из группы, выполняющей задание, взятое игроком",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    cur_ship = GroupShip(QuestMercs, i);",
              "",
              "                    //tint1 = ShipStatistic(cur_ship, 11);",
              "                    //tint2 = PortionInDiapason(CurTurn(), tint1, tint1 + 1825, 0, 4);",
              "                    tint3 = round(1.5 * GalaxyMoney(2, 2));",
              "",
              "                    //Если денег в бюджете хватает на зарплату наёмника",
              "                    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                    {",
              "                        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                        PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + tint3;",
              "                    }",
              "                    //Иначе он имеет шанс свалить за неуплату",
              "                    else",
              "                    {",
              "                        if(RndObject(1, 100, cur_ruin) <= 25)",
              "                        {",
              "                            FreePlayerMerc(cur_ship);",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Следующими получают ЗП \"гулящие\" наёмники",
              "                //Средний наёмник начинает получать ЗП с минималки и получает максимум только через 5 лет активной службы",
              "                for(i = 0; i < GroupCount(PlayerMercsFree); i = i + 1)",
              "                {",
              "                    cur_ship = GroupShip(PlayerMercsFree, i);",
              "",
              "                    tint1 = ShipStatistic(cur_ship, 11);",
              "                    tint2 = PortionInDiapason(CurTurn(), tint1, tint1 + 1825, 0, 4);",
              "                    tint3 = GalaxyMoney(2, tint2);",
              "",
              "                    //Если денег в бюджете хватает на зарплату наёмника",
              "                    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                    {",
              "                        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                        PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + tint3;",
              "                    }",
              "                    //Иначе он имеет шанс свалить за неуплату",
              "                    else",
              "                    {",
              "                        if(RndObject(1, 100, cur_ruin) <= (70 - 12 * tint2))",
              "                        {",
              "                            FreePlayerMerc(cur_ship);",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Наёмники-защитники получают меньше",
              "                for(i = 0; i < GroupCount(PlayerMercsDefenders); i = i + 1)",
              "                {",
              "                    cur_ship = GroupShip(PlayerMercsDefenders, i);",
              "",
              "                    //tint1 = ShipStatistic(cur_ship, 11);",
              "                    //tint2 = PortionInDiapason(CurTurn(), tint1, tint1 + 1825, 0, 4);",
              "                    tint3 = GalaxyMoney(2, 2);",
              "",
              "                    //Если денег в бюджете хватает на зарплату наёмника",
              "                    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                    {",
              "                        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                        PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + tint3;",
              "                    }",
              "                    //Иначе он имеет шанс свалить за неуплату",
              "                    else",
              "                    {",
              "                        if(RndObject(1, 100, cur_ruin) <= 25)",
              "                        {",
              "                            FreePlayerMerc(cur_ship);",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Считаем расходы на содержание крейсера, если таковой в штабе есть",
              "                if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "                {",
              "                    tint3 = GalaxyMoney(2, 2) * 10;",
              "",
              "                    //Если денег в бюджете хватает на содержание крейсера",
              "                    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                    {",
              "                        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                        PlayerHQMainArray['Finance', 'StatsOutFleetMaintenance'] = PlayerHQMainArray['Finance', 'StatsOutFleetMaintenance'] + tint3;",
              "                    }",
              "                    //Иначе он будет разобран и продан",
              "                    else",
              "                    {",
              "                        //Не будет разобран, только если в данный момент находится на вылете",
              "                        if(GroupIn(CruisersDefenders, cur_ruin))",
              "                        {",
              "                            //На Меркурий",
              "                            cur_ship = GroupToShip(CruisersDefenders);",
              "                            TransferShip(cur_ship, StarPlanets(GalaxyStar(People), 0));",
              "                            ShipDestroy(cur_ship, 1);",
              "                            PlayerHQMainArray['Shipyard', 'CapitalShipDock'] = 1;",
              "",
              "                            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.CruiserDefenderSoldByNoMaintenance'));",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Считаем зарплату для наёмников из в боевой готовности",
              "                //(их не существует физически, а потому они получают ЗП, в два раза меньше)",
              "                tint1 = GalaxyMoney(2, 2) / 2; //Зарплата одного наёмника \"на готове\"",
              "                tint3 = tint1 * PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "                //Если денег в бюджете хватает на зарплату всем",
              "                if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                {",
              "                    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                    PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + tint3;",
              "                }",
              "                else",
              "                {",
              "                    //Определяем, сколько конкретно наёмников не получили свои зарплаты",
              "                    tint2 = tint3 - PlayerHQMainArray['Finance', 'CurrentBalance']; //Сумма, которой недостаёт для полной выплаты зарплат",
              "                    tint2 = RoundTo(1.0 * tint2 / tint1, 1, 1);",
              "                    //Число наёмников, которым хватило денег",
              "                    tint4 = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - tint2;",
              "                    //Выплачиваем зарплату тем наёмникам, которым можем",
              "                    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - (tint1 * tint4);",
              "                    PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + (tint1 * tint4);",
              "",
              "                    //После чего делаем \"проброс\" на случайный уход тех, кому денег не хватило",
              "                    for(i = 1; i <= tint2; i = i + 1)",
              "                    {",
              "                        if(RndObject(1, 100, cur_ruin) <= 65)",
              "                        {",
              "                            PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - 1;",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Под конец считаем зарплату для наёмников из резерва",
              "                //(их не существует физически, но они всё равно получают ЗП, пусть и в пять раз меньше)",
              "                tint1 = GalaxyMoney(2, 2) / 5; //Зарплата одного \"резервиста\"",
              "                tint3 = tint1 * PlayerHQMainArray['Mercs', 'CurrentReserve'];",
              "                //Если денег в бюджете хватает на зарплату всем \"резервистам\"",
              "                if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                {",
              "                    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                    PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + tint3;",
              "                }",
              "                else",
              "                {",
              "                    //Определяем, сколько конкретно \"резервистов\" не получили свои зарплаты",
              "                    tint2 = tint3 - PlayerHQMainArray['Finance', 'CurrentBalance']; //Сумма, которой недостаёт для полной выплаты зарплат \"резервистов\"",
              "                    tint2 = RoundTo(1.0 * tint2 / tint1, 1, 1);",
              "                    //Число \"резервистов\", которым хватило денег",
              "                    tint4 = PlayerHQMainArray['Mercs', 'CurrentReserve'] - tint2;",
              "                    //Выплачиваем зарплату тем \"резервистам\", которым можем",
              "                    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - (tint1 * tint4);",
              "                    PlayerHQMainArray['Finance', 'StatsOutSalaries'] = PlayerHQMainArray['Finance', 'StatsOutSalaries'] + (tint1 * tint4);",
              "",
              "                    //После чего делаем \"проброс\" на случайный уход тех, кому денег не хватило",
              "                    for(i = 1; i <= tint2; i = i + 1)",
              "                    {",
              "                        if(RndObject(1, 100, cur_ruin) <= 65)",
              "                        {",
              "                            PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] - 1;",
              "                        }",
              "                    }",
              "                }",
              "                //Обновляем таймер до следующей выплаты зарплат",
              "                PlayerHQMainArray['Finance', 'SalariesDay'] = CurTurn() + 30;",
              "            }",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentReserve'])",
              "            {",
              "                //Если количество \"гулящих\" наёмников опустилось ниже максимального лимита, \"доспавниваем\" ещё из числа наёмников резерва",
              "                if(GroupCount(PlayerMercsFree) < PlayerHQMainArray['Mercs', 'CurrentMaxFree'])",
              "                {",
              "                    //Считаем условную цену оснащения одного нового \"гулящего\" наёмника",
              "                    tint3 = round(0.1 * RndObject(8, 12, cur_ruin) * (3.5 * GalaxyMoney(2, 4)));",
              "                    if(PlayerHQMainArray['Armory', 'ArmoryWorkshop']) tint3 = tint3 / 2; //Если у штаба уже имеется свой оружейный цех",
              "",
              "                    while(GroupCount(PlayerMercsFree) < PlayerHQMainArray['Mercs', 'CurrentMaxFree'])",
              "                    {",
              "                        if(!PlayerHQMainArray['Mercs', 'CurrentReserve']) break;",
              "",
              "                        if(!PlayerHQMainArray['Mercs', 'MercsEquipAtStock'])",
              "                        {",
              "                            if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= tint3)",
              "                            {",
              "                                PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - tint3;",
              "                                PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + tint3;",
              "                                PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] - 1;",
              "                                SpawnPlayerMerc(NearCivilPlanet(cur_ruin), cur_ruin, t_Ranger, 1);",
              "                            }",
              "                            else break;",
              "                        }",
              "                        else",
              "                        {",
              "                            PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] - 1; //Экипируем наёмника уже имеющимся \"снаряжением\"",
              "                            PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] - 1;",
              "                            SpawnPlayerMerc(NearCivilPlanet(cur_ruin), cur_ruin, t_Ranger, 1);",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //Пришло время пополнять список готовых к бою (физически этих кораблей, также как и резерва, не существует), пополняется из числа наёмников резерва",
              "                //Перед пополнением считаем всех наёмников на вылете, иначе получится переполнение, что ведёт к лишним тратам бюджета",
              "                tint1 = GroupCount(QuestMercs) + GroupCount(PlayerMercsDefenders);",
              "                if(tint1 + PlayerHQMainArray['Mercs', 'CurrentAtReady'] < PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'])",
              "                {",
              "                    //Считаем условную цену оснащения (кораблём и оборудованием) одного нового наёмника",
              "                    cost = round(0.1 * RndObject(8, 12, cur_ruin) * (3.5 * GalaxyMoney(2, 4)));",
              "                    if(PlayerHQMainArray['Armory', 'ArmoryWorkshop']) cost = cost / 2; //Если у штаба уже имеется свой оружейный цех",
              "",
              "                    while(tint1 + PlayerHQMainArray['Mercs', 'CurrentAtReady'] < PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'])",
              "                    {",
              "                        if(!PlayerHQMainArray['Mercs', 'CurrentReserve']) break;",
              "",
              "                        if(!PlayerHQMainArray['Mercs', 'MercsEquipAtStock'])",
              "                        {",
              "                            if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost)",
              "                            {",
              "                                PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "                                PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "                                PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] - 1;",
              "                                PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] + 1;",
              "                            }",
              "                            else break;",
              "                        }",
              "                        else",
              "                        {",
              "                            PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] - 1; //Экипируем наёмника уже имеющимся \"снаряжением\"",
              "                            PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] - 1;",
              "                            PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] + 1;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "",
              "            //Пришло время пополнять резерв наёмников (физически этих кораблей не существует)",
              "            if(PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] <= CurTurn())",
              "            {",
              "                //Если в списке резервистов ещё осталось свободное место",
              "                if(PlayerHQMainArray['Mercs', 'CurrentReserve'] < PlayerHQMainArray['Mercs', 'CurrentMaxReserve'])",
              "                {",
              "                    //Нулевое значение может быть присвоено таймеру, если на момент последней проверки резерв был полностью забит",
              "                    if(!PlayerHQMainArray['Mercs', 'ReplenishmentTimer'])",
              "                    {",
              "                        PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] = CurTurn() + PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'];",
              "                    }",
              "                    else",
              "                    {",
              "                        //Непосредственное пополнение резерва происходит бесплатно",
              "                        PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] = CurTurn() + PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'];",
              "                    }",
              "",
              "                    //Пополняем резерв",
              "                    PlayerHQMainArray['Mercs', 'CurrentReserve'] = min(PlayerHQMainArray['Mercs', 'CurrentReserve'] + PlayerHQMainArray['Mercs', 'ReplenishmentCount'], PlayerHQMainArray['Mercs', 'CurrentMaxReserve']);",
              "                }",
              "                //Если резерв заполнен, то сразу после освобождения в нём места перезапускаем таймер заново",
              "                else PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] = 0;",
              "            }",
              "",
              "            //Производим оружие из минералов, если в штабе уже был построен оружейный цех",
              "            if(PlayerHQMainArray['Armory', 'ArmoryWorkshop'])",
              "            {",
              "                if(PlayerHQMainArray['Armory', 'WeaponGoodsProductionTime'] <= CurTurn())",
              "                {",
              "                    //Если на момент проверки товаров оружия в производстве нет, то делаем проверку на наличие в магазине минералов",
              "                    if(!PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'])",
              "                    {",
              "                        //Если обнаружили в магазине минералы, забираем некоторое их количество (или все) для производства оружия",
              "                        //(также не должен быть превышен лимит числа оружия в магазине)",
              "                        tint1 = GoodsAdd(cur_ruin, t_Minerals, 0);",
              "                        tint2 = CT('Script.Mod_ShuMercs.PlayerMercsParams.MineralTonsPerOneWeaponGoodsTon');",
              "                        if(tint1 >= tint2 && GoodsAdd(cur_ruin, t_Arms, 0) < CT('Script.Mod_ShuMercs.PlayerMercsParams.MaxWeaponGoodsInStore'))",
              "                        {",
              "                            rand = CT('Script.Mod_ShuMercs.PlayerMercsParams.MaxWeaponGoodsToProduceAtOnce');",
              "                            if(tint1 >= rand * tint2)",
              "                            {",
              "                                GoodsAdd(cur_ruin, t_Minerals, -(rand * tint2));",
              "                                PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'] = rand;",
              "                            }",
              "                            else",
              "                            {",
              "                                tint1 = tint1 - (tint1 % tint2);",
              "                                GoodsAdd(cur_ruin, t_Minerals, -tint1);",
              "                                PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'] = tint1 / tint2;",
              "                            }",
              "",
              "                            //Обновляем таймер до окончания производства текущей партии оружия",
              "                            tflt1 = CT('Script.Mod_ShuMercs.PlayerMercsParams.WeaponGoodsProductionTimePerTon');",
              "                            PlayerHQMainArray['Armory', 'WeaponGoodsProductionTime'] = CurTurn() + round(tflt1 * PlayerHQMainArray['Armory', 'WeaponGoodsInProduction']);",
              "                        }",
              "                        //Иначе просто перезапускаем таймер до следующей проверки на наличие в магазине минералов",
              "                        else",
              "                        {",
              "                            PlayerHQMainArray['Armory', 'WeaponGoodsProductionTime'] = CurTurn() + 10;",
              "                        }",
              "                    }",
              "                    //Если на момент проверки в производстве уже находилась партия оружия",
              "                    else",
              "                    {",
              "                        //Добавляем в магазин произведённое оружие",
              "                        GoodsAdd(cur_ruin, t_Arms, PlayerHQMainArray['Armory', 'WeaponGoodsInProduction']);",
              "                        PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'] = 0;",
              "",
              "                        //После чего ищем в магазине минералы, и забираем некоторое их количество (или все) для производства оружия",
              "                        //(также не должен быть превышен лимит числа оружия в магазине)",
              "                        tint1 = GoodsAdd(cur_ruin, t_Minerals, 0);",
              "                        tint2 = CT('Script.Mod_ShuMercs.PlayerMercsParams.MineralTonsPerOneWeaponGoodsTon');",
              "                        if(tint1 >= tint2 && GoodsAdd(cur_ruin, t_Arms, 0) < CT('Script.Mod_ShuMercs.PlayerMercsParams.MaxWeaponGoodsInStore'))",
              "                        {",
              "                            rand = CT('Script.Mod_ShuMercs.PlayerMercsParams.MaxWeaponGoodsToProduceAtOnce');",
              "                            if(tint1 >= rand * tint2)",
              "                            {",
              "                                GoodsAdd(cur_ruin, t_Minerals, -(rand * tint2));",
              "                                PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'] = rand;",
              "                            }",
              "                            else",
              "                            {",
              "                                tint1 = tint1 - (tint1 % tint2);",
              "                                GoodsAdd(cur_ruin, t_Minerals, -tint1);",
              "                                PlayerHQMainArray['Armory', 'WeaponGoodsInProduction'] = tint1 / tint2;",
              "                            }",
              "",
              "                            //Обновляем таймер до окончания производства текущей партии оружия",
              "                            tflt1 = CT('Script.Mod_ShuMercs.PlayerMercsParams.WeaponGoodsProductionTimePerTon');",
              "                            PlayerHQMainArray['Armory', 'WeaponGoodsProductionTime'] = CurTurn() + round(tflt1 * PlayerHQMainArray['Armory', 'WeaponGoodsInProduction']);",
              "                        }",
              "                        //Иначе просто перезапускаем таймер до следующей проверки на наличие в магазине минералов",
              "                        else",
              "                        {",
              "                            PlayerHQMainArray['Armory', 'WeaponGoodsProductionTime'] = CurTurn() + 10;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "",
              "            //Если стал доступен коалиционный или пиратский контракт (выводим уведомление)",
              "            if(PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] == CurTurn())",
              "            {",
              "                if(!CoalitionDefeated())",
              "                {",
              "                    if(GetShipRuins(Player()) != cur_ruin) CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.CoalitionQuestIsAvailable'));",
              "                }",
              "                else PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = CurTurn() + 62;",
              "            }",
              "            if(PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] == CurTurn())",
              "            {",
              "                if(PirateWin() != 3 && PirateWin() != 4)",
              "                {",
              "                    if(GetShipRuins(Player()) != cur_ruin) CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.PirateClanQuestIsAvailable'));",
              "                }",
              "                else PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = CurTurn() + 62;",
              "            }",
              "",
              "            //Если завершилась постройка нового корабля/транклюкатора",
              "            if(PlayerHQMainArray['Shipyard', 'ShipInProduction'] != '')",
              "            {",
              "                if(PlayerHQMainArray['Shipyard', 'ShipInProductionTime'] == CurTurn())",
              "                {",
              "                    tstr1 = GetParFromString(PlayerHQMainArray['Shipyard', 'ShipInProduction'], '.', ParsCountFromString(PlayerHQMainArray['Shipyard', 'ShipInProduction'], '.') - 2, 0);",
              "",
              "                    //Завершилось строительство транклюкатора организации",
              "                    if(tstr1 == 'Tranclucator')",
              "                    {",
              "                        //Создаём и перекрашиваем транклюкатора в цвет организации",
              "                        cur_item = CreateArt(t_ArtefactTranclucator, Peleng);",
              "                        EqCustomFaction(cur_item, 'SubFactionPlayerMercsFixedStanding');",
              "",
              "                        //Задаём предмету транклюкатора ту цену, которую игрок заплатил за его постройку",
              "                        ItemCost(cur_item, PlayerHQMainArray['Shipyard', 'ShipInProductionCost']);",
              "",
              "                        cur_ship = ArtTranclucatorToShip(cur_item);",
              "                        ShipJoin(PlayerOrgTrancs, cur_ship);",
              "                        ShipCustomFaction(cur_ship, 'SubFactionPlayerMercsFixedStanding');",
              "                        //Вероятно, вешать кастомную фракцию на корпус будет излишне, т.к. в этом случае игроку будет сложнее определять совместимость ММ",
              "                        //EqCustomFaction(ShipItems(cur_ship, 0), 'SubFactionPlayerMercsFixedStanding');",
              "                        ShipAddCustomShipInfo(cur_ship, 'ShuMercsHQ_PlayerOrgTrancInfo');",
              "                        Chameleon(cur_ship, 'Ship.TranclucatorCyan');",
              "                        EquipmentImageName(cur_ship, 'ArtTranclucatorCyan');",
              "                        EquipmentImageName(cur_item, 'ArtTranclucatorCyan');",
              "                        AddItemToStorage(cur_ruin, cur_item);",
              "                    }",
              "                    //Завершилось строительство крейсера организации",
              "                    else if(tstr1 == 'PlayerOrgCruiser')",
              "                    {",
              "                        cur_planet = 0;",
              "                        cur_planet = FindPlanetByAdvancement(100, 0);",
              "                        if(!cur_planet) cur_planet = FindPlanetByAdvancement(100, 2);",
              "                        tint1 = PlanetOwner(cur_planet);",
              "                        tint2 = PlanetRace(cur_planet);",
              "                        PlanetOwner(cur_planet, Peleng);",
              "                        PlanetRace(cur_planet, Peleng);",
              "",
              "                        //Временный флагман для копирования статов и оборудования",
              "                        tdwd1 = BuyBigWarrior(cur_planet);",
              "                        ShipMoney(tdwd1, 100000000);",
              "                        for(i = 1; i <= 8; i = i + 1) ShipRefit(tdwd1);",
              "                        if(!ShipEqInSlot(tdwd1, t_RepairRobot))",
              "                        {",
              "                            cur_item = CreateEquipment(t_RepairRobot, RndObject(45, 65, tdwd1), GTL, Peleng);//ShipPilotRace(tdwd1));",
              "                            AddItemToShip(tdwd1, cur_item);",
              "                            ItemIsInUse(cur_item, tdwd1, 1);",
              "                        }",
              "                        if(!ShipEqInSlot(tdwd1, t_CargoHook))",
              "                        {",
              "                            cur_item = CreateEquipment(t_CargoHook, RndObject(45, 65, tdwd1), GTL, Peleng);//ShipPilotRace(tdwd1));",
              "                            AddItemToShip(tdwd1, cur_item);",
              "                            ItemIsInUse(cur_item, tdwd1, 1);",
              "                        }",
              "                        if(!ShipEqInSlot(tdwd1, t_DefGenerator))",
              "                        {",
              "                            cur_item = CreateEquipment(t_DefGenerator, RndObject(45, 65, tdwd1), GTL, Peleng);//ShipPilotRace(tdwd1));",
              "                            AddItemToShip(tdwd1, cur_item);",
              "                            ItemIsInUse(cur_item, tdwd1, 1);",
              "                        }",
              "",
              "                        ShipImproveItems(tdwd1, 16);",
              "",
              "                        //Рейнджер, который будет изображать из себя флагман",
              "                        cur_ship = BuyRanger(cur_planet);",
              "                        ShipOwner(cur_ship, ShipOwner(cur_ruin));",
              "                        ShipMoney(cur_ship, min(ShipMoney(cur_ship) + (GalaxyMoney(2, 2) * 10) * 10, 50000000)); //Сумма стандартного месячного обеспечения крейсера",
              "",
              "                        ShipStatus(cur_ship, 0, 0); //Торговец",
              "                        ShipStatus(cur_ship, 1, 0); //Пират",
              "                        ShipStatus(cur_ship, 2, 100); //Воин",
              "                        //\"Внутренний\" неизменный характер для крейсера также будет \"Воин\" (естественно :{)",
              "                        ShipSubType(cur_ship, 2);",
              "",
              "                        //Запрещаем другим рейнджерам (и наёмникам) рэкетировать крейсер",
              "                        NoTargetToShip(cur_ship, 3);",
              "",
              "                        for(i = 0; i <= 4; i = i + 1) ShipSkill(cur_ship, i, ShipSkill(tdwd1, i));",
              "                        ShipSkill(cur_ship, 'Leadership', 0); //Чтобы не нанимал себе в напарники других наёмников",
              "                        ShipSpecialBonuses(cur_ship, bonSkill6, -30);",
              "",
              "                        PlayerHQMainArray['Shipyard', 'LastHQCruiserName'] = ShipName(cur_ship); //Переменная PlayerHQMainArray['Shipyard', 'LastHQCruiserName'] запоминается для последующего вывода имени в случае гибели крейсера",
              "                        SetName(cur_ship, PlayerHQMainArray['Main', 'OrganisationName'] + ' ' + PlayerHQMainArray['Shipyard', 'LastHQCruiserName']);",
              "                        ShipType(cur_ship, 'PlayerMercCruiser');",
              "                        RangerExcludedFromRating(cur_ship, 1);",
              "                        ShipJoinToScript(cur_ship, 'Mod_ShuMercsHQ.CruisersDefenders.CruiserWaitState');",
              "                        ShipCustomFaction(cur_ship, 'SubFactionPlayerMercsFixedStanding');",
              "                        ShipStanding(cur_ship, 5); //Полная нейтральность в конфликте Коалиции и пиратов",
              "                        ShipAddCustomShipInfo(cur_ship, 'ShuMercsHQ_StrikeGroupMercInfo');",
              "                        ShipSpecialBonuses(cur_ship, bonSlotForsage, -1);",
              "",
              "                        //Возвращаем планете её оригинальную расу",
              "                        PlanetOwner(cur_planet, tint1);",
              "                        PlanetRace(cur_planet, tint2);",
              "",
              "                        if(CurrentMods('Evolution\\EvoArmada'))",
              "                        {",
              "                            cur_item = ShipItems(tdwd1, 0);",
              "                            tint1 = ItemLevel(cur_item);",
              "                            HullSeries(cur_item, -1);",
              "                            NoDropItem(cur_item, 1);",
              "",
              "                            //Задаём размер корпуса линкора в зависимости от общей сложности и текущего ТУ",
              "                            ItemSize(cur_item, round((0.00085 * GalaxyDiffLevels() + 1) * tint1 * 950) + RndObject(-100, 175, tdwd1));",
              "                            //На всякий случай, устанавливаем минимальный размер корпуса в 3200",
              "                            if(ItemSize(cur_item) < 3200) ItemSize(cur_item, 3200);",
              "                            HullHP(cur_item, ItemSize(cur_item));",
              "",
              "                            //Пеленгам даём дополнительную скорость, дальность стрельбы",
              "                            tint2 = GalaxyDiffLevels() / 50;",
              "                            ItemExtraSpecialsAddByType(cur_item, FindBonusByNameInCfg('EvoArmada_ExtraSpecialsLineBreak'));",
              "                            tint3 = (6.0 * tint2) + (6.0 * PortionInDiapason(tint1, 1, 8, 1, 10));",
              "                            ItemExtraSpecialsAddByType(cur_item, FindBonusByNameInCfg('EvoArmada_bonWRadius'), tint3);",
              "                            tint3 = round((0.5 * tint2) + (0.5 * PortionInDiapason(tint1, 1, 8, 1, 10)));",
              "                            ItemExtraSpecialsAddByType(cur_item, FindBonusByNameInCfg('EvoArmada_bonHull'), tint3);",
              "                            tint3 = (20 * tint2) + (20 * (PortionInDiapason(tint1, 1, 8, 1, 10) / 2));",
              "                            ItemExtraSpecialsAddByType(cur_item, FindBonusByNameInCfg('EvoArmada_bonSpeed'), tint3);",
              "                            SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_PlayerMercCruiser'), cur_item);",
              "                            //EqCustomFaction(cur_item, 'SubFactionPlayerMercsFixedStanding');",
              "",
              "                            //Выдаём рейнджеру корпус флагмана",
              "                            cur_item = GetItemFromShip(cur_ship, 0);",
              "                            AddItemToShip(cur_ship, GetItemFromShip(tdwd1, 0));",
              "                            NoDropItem(ShipItems(cur_ship, 0), 1);",
              "",
              "                            //На всякий случай выдаём временному флагману рейнджерский корпус (а то, мало ли, будет крашить при обсчёте хода)",
              "                            AddItemToShip(tdwd1, cur_item);",
              "",
              "                            //Выдаём рейнджеру дополнительные залпы и плюс к манёвренности",
              "                            ShipSkill(cur_ship, 'Mobility', ShipSkill(cur_ship, 'Mobility') + 1);",
              "                            ShipSpecialBonuses(cur_ship, bonAttacks, 3);",
              "                            //Вешаем инфошку для пересчёта числа доп. залпов при стрельбе крупных кораблей по более мелким судам",
              "                            ShipAddCustomShipInfo(cur_ship, 'EvoArmada_CapitalShipInfos', 'NoShow', 3);",
              "",
              "                            Chameleon(cur_ship);",
              "                        }",
              "                        //Иначе просто меняем корпусу флагмана имя и скин, после чего надеваем его на рейнджера",
              "                        else",
              "                        {",
              "                            cur_item = ShipItems(tdwd1, 0);",
              "                            HullSeries(cur_item, -1);",
              "                            SetName(cur_item, Format(CT('MicroModuls.ShuMercsHQ_PlayerMercCruiser.Name'), '<Type'+'>', CT('Items.Hull.Type.' + ItemLevel(cur_item)), ''));",
              "                            EqCustomFaction(cur_item, 'SubFactionPlayerMercsFixedStanding');",
              "",
              "                            //Выдаём рейнджеру корпус флагмана",
              "                            cur_item = GetItemFromShip(cur_ship, 0);",
              "                            AddItemToShip(cur_ship, GetItemFromShip(tdwd1, 0));",
              "                            NoDropItem(ShipItems(cur_ship, 0), 1);",
              "",
              "                            //На всякий случай выдаём временному флагману рейнджерский корпус (а то, мало ли, будет крашить при обсчёте хода)",
              "                            AddItemToShip(tdwd1, cur_item);",
              "",
              "                            Chameleon(cur_ship, 'Ship.Akrin.PlayerMercCruiser');",
              "                        }",
              "",
              "                        //Лочим рейнджеру корпус, а то начнёт его сам менять",
              "                        NoDropItem(ShipItems(cur_ship, 0), 1);",
              "",
              "                        //Перекладываем все вещи из флагмана на корабль рейнджера",
              "                        for(i = ShipItems(cur_ship) - 1; i > 0; i = i - 1) FreeItem(GetItemFromShip(cur_ship, i));",
              "                        for(i = ShipItems(tdwd1) - 1; i > 0; i = i - 1)",
              "                        {",
              "                            cur_item = GetItemFromShip(tdwd1, i);",
              "                            AddItemToShip(cur_ship, cur_item);",
              "                            ItemIsInUse(cur_item, cur_ship, 1);",
              "                        }",
              "",
              "                        //Избавляемся от временного флагмана",
              "                        TransferShip(tdwd1, StarPlanets(GalaxyStar(People), 0));",
              "                        ShipDestroy(tdwd1, 1);",
              "",
              "                        //Отправляем готовый \"крейсер\" в штаб",
              "                        TransferShip(cur_ship, cur_ruin);",
              "",
              "                        //Может использовать доминаторское оружие любого ТУ",
              "                        ShipTechLevelKnowledge(cur_ship, 8);",
              "                        ArrangeItems(cur_ship);",
              "                        FreeAllHoldEquipment(cur_ship);",
              "",
              "                        //Вешаем инфошку, чтобы наёмники игрока не атаковали крейсер",
              "                        ShipAddCustomShipInfo(cur_ship, 'ShuMercsHQ_GuardedShip', 'NoShow');",
              "",
              "                        //Маркер готовности крейсера",
              "                        PlayerHQMainArray['Shipyard', 'CapitalShipDock'] = 2;",
              "                    }",
              "                    //Завершилось строительство какого-то другого корпуса из списка проектов",
              "                    else",
              "                    {",
              "                        if(!BlockExist(PlayerHQMainArray['Shipyard', 'ShipInProduction'] + 'ConstructionDoneCode'))",
              "                        {",
              "                            //",
              "                        }",
              "                        //На случай, если для создания корпуса необходима какая-то особая процедура (передаём PlayerHQ в качестве аргумента)",
              "                        else ExecuteCodeFromString(GenerateCodeStringFromBlock(PlayerHQMainArray['Shipyard', 'ShipInProduction'] + 'ConstructionDoneCode'), 'PlayerHQ', cur_ruin);",
              "                    }",
              "",
              "                    //Запоминаем, какой конкретно и сколько данных кораблей было построено за игру",
              "                    if(findsubstr(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], PlayerHQMainArray['Shipyard', 'ShipInProduction']) == -1)",
              "                    {",
              "                        if(PlayerHQMainArray['Shipyard', 'ShipsBuilt'] == '') PlayerHQMainArray['Shipyard', 'ShipsBuilt'] = PlayerHQMainArray['Shipyard', 'ShipInProduction'] + '/1';",
              "                        else PlayerHQMainArray['Shipyard', 'ShipsBuilt'] = PlayerHQMainArray['Shipyard', 'ShipsBuilt'] + ',' + PlayerHQMainArray['Shipyard', 'ShipInProduction'] + '/1';",
              "                    }",
              "                    else",
              "                    {",
              "                        tint1 = ParsCountFromString(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], ',');",
              "                        for(i = 0; i < tint1; i = i + 1)",
              "                        {",
              "                            tstr1 = GetParFromString(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], ',', i, 0);",
              "                            if(GetParFromString(tstr1, '/', 0, 0) == PlayerHQMainArray['Shipyard', 'ShipInProduction'])",
              "                            {",
              "                                tstr1 = SetParFromString(tstr1, '/', 1, '' + (1 + GetParFromString(tstr1, '/', 1, 0)));",
              "                                if(tint1 > 1) PlayerHQMainArray['Shipyard', 'ShipsBuilt'] = SetParFromString(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], ',', i, tstr1);",
              "                                else PlayerHQMainArray['Shipyard', 'ShipsBuilt'] = tstr1;",
              "                                break;",
              "                            }",
              "                        }",
              "                    }",
              "",
              "                    //Выводим уведомление о завершении постройки",
              "                    CustomEther('PlayerMercsOrg', 0, '', CT(PlayerHQMainArray['Shipyard', 'ShipInProduction'] + 'ConstructionDoneMsg'));",
              "",
              "                    PlayerHQMainArray['Shipyard', 'ShipInProduction'] = '';",
              "                    PlayerHQMainArray['Shipyard', 'ShipInProductionTime'] = 0;",
              "                    PlayerHQMainArray['Shipyard', 'ShipInProductionCost'] = 0;",
              "                }",
              "            }",
              "",
              "            if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] > 0)",
              "            {",
              "                //Если заведён таймер до старта квеста на изобретение новых пушек",
              "                if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 1)",
              "                {",
              "                    if(PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] <= CurTurn())",
              "                    {",
              "                        if(TotalSBCount)",
              "                        {",
              "                            //Подбираем подходящую НБ",
              "                            cur_ship = 0;",
              "                            tint1 = 0;",
              "                            ArrayClear(tarr1);",
              "                            for(i = 0; i < GalaxyStars(); i = i + 1)",
              "                            {",
              "                                tdwd2 = GalaxyStar(i);",
              "",
              "                                tdwd1 = StarRuins(tdwd2, 'SB');",
              "                                if(!tdwd1) continue;",
              "                                if(tdwd2 == cur_star) continue; //Не должна находиться в системе штаба, иначе выполнение квеста будет выглядеть тупо",
              "                                if(ShipInScript(tdwd1, 0)) continue;",
              "                                if(HullDamage(tdwd1) > 50) continue;",
              "",
              "                                ArrayAdd(tarr1, tdwd1);",
              "                                tint1 = tint1 + 1;",
              "                                if(tint1 == TotalSBCount) break;",
              "                            }",
              "                            if(ArrayDim(tarr1) > 1) cur_ship = tarr1[RndObject(1, ArrayDim(tarr1) - 1, cur_ruin)];",
              "",
              "                            if(cur_ship)",
              "                            {",
              "                                PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 2;",
              "                                PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId'] = Id(cur_ship);",
              "",
              "                                //Просто на всякий случай",
              "                                ShipJoin(PlanetQuestsShips, cur_ship);",
              "                                SetData(CurTurn() + 1095, 0, cur_ship);",
              "",
              "                                if(GetShipRuins(Player()) != cur_ruin)",
              "                                {",
              "                                    if(BuildOwnBase_Condition == 6) tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.GluonGunsQuestIsReadyTziptzilot');",
              "                                    else tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.GluonGunsQuestIsReady');",
              "                                    CustomEther('PlayerMercsOrg', 6, 'PlayerMercsOrgGluonGunsQuestIsReady', tstr1);",
              "                                }",
              "                            }",
              "                            else PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + 14;",
              "                        }",
              "                    }",
              "                }",
              "                //Ждём пока игрок \"ответит на вызов\"",
              "                else if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 2 || PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 3)",
              "                {",
              "                    //Если целевую научку сломали, а подходящей замены нет, то квест уходит на перезагрузку",
              "                    if(!IdToShip(PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId']))",
              "                    {",
              "                        //Ищем новую подходящую НБ",
              "                        cur_ship = 0;",
              "                        if(TotalSBCount)",
              "                        {",
              "                            tint1 = 0;",
              "                            ArrayClear(tarr1);",
              "                            for(i = 0; i < GalaxyStars(); i = i + 1)",
              "                            {",
              "                                tdwd2 = GalaxyStar(i);",
              "",
              "                                tdwd1 = StarRuins(tdwd2, 'SB');",
              "                                if(!tdwd1) continue;",
              "                                if(tdwd2 == cur_star) continue; //Не должна находиться в системе штаба, иначе выполнение квеста будет выглядеть тупо",
              "                                if(ShipInScript(tdwd1, 0)) continue;",
              "                                if(HullDamage(tdwd1) > 50) continue;",
              "",
              "                                ArrayAdd(tarr1, tdwd1);",
              "                                tint1 = tint1 + 1;",
              "                                if(tint1 == TotalSBCount) break;",
              "                            }",
              "                            if(ArrayDim(tarr1) > 1) cur_ship = tarr1[RndObject(1, ArrayDim(tarr1) - 1, cur_ruin)];",
              "                        }",
              "",
              "                        if(!cur_ship)",
              "                        {",
              "                            //PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = -1;",
              "                            PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 1;",
              "                            PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + RndObject(56, 112, cur_ruin);",
              "                            PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId'] = 0;",
              "                        }",
              "                        else",
              "                        {",
              "                            PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId'] = Id(cur_ship);",
              "                        }",
              "                    }",
              "                }",
              "                //Задание было взято и находится в процессе выполнения",
              "                else if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 4)",
              "                {",
              "                    //Если целевую научку сломали, то квест сразу провален",
              "                    if(!IdToShip(PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId']))",
              "                    {",
              "                        PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = -1;",
              "                        PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId'] = 0;",
              "                        PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = 0;",
              "",
              "                        //Обновляем уведомление квеста",
              "                        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "                        tstr1 = tstr1 + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "                        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteFailedBySBDestroyed');",
              "                        CustomEther('QuestFailed_PlayerMercsOrg', 5, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', tstr1);",
              "                    }",
              "                }",
              "                //Профессор уговорился и отправился в штаб, ждём неделю и выводим уведомление об успешном завершении квеста",
              "                else if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 5)",
              "                {",
              "                    //Первая проверка здесь типа убирает профессора с базы, заменяя его другим челом",
              "                    if(PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] - 6 == CurTurn())",
              "                    {",
              "                        cur_ship = IdToShip(PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId']);",
              "                        if(cur_ship) ShipOwner(cur_ship, Fei);",
              "                        PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId'] = 0;",
              "                        ShipOut(cur_ship);",
              "                    }",
              "                    else if(PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] <= CurTurn())",
              "                    {",
              "                        if(BuildOwnBase_Condition == 6) tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.GluonGunsQuestCompleteTziptzilot');",
              "                        else tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.GluonGunsQuestComplete');",
              "                        CustomEther('PlayerMercsOrg', 6, 'PlayerMercsOrgGluonGunsQuestComplete', tstr1);",
              "",
              "                        //Обновляем уведомление квеста",
              "                        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "                        tstr1 = tstr1 + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "                        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteSuccess');",
              "                        CustomEther('QuestComplete_PlayerMercsOrg', 4, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', tstr1);",
              "",
              "                        PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + 93;",
              "                        PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 6;",
              "                    }",
              "                }",
              "                //Задание выполнено, игрок ожидает уведомления о готовности новых пушек",
              "                else if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 6)",
              "                {",
              "                    if(PlayerHQMainArray['Quests', 'GluonGunsQuestTimer']) //Хватит и одного срабатывания :{",
              "                    {",
              "                        if(PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] <= CurTurn())",
              "                        {",
              "                            if(BuildOwnBase_Condition == 6) tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.GluonGunsWereInventedTziptzilot');",
              "                            else tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.GluonGunsWereInvented');",
              "                            CustomEther('PlayerMercsOrg', 6, 'PlayerMercsOrgGluonGunsWereInvented', tstr1);",
              "",
              "                            PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = 0;",
              "                            PlayerHQMainArray['Science', 'GluonGunsDeveloped'] = 1;",
              "                            PlayerHQMainArray['Armory', 'GluonGunsShopTimer'] = CurTurn() + RndObject(45, 61, cur_ruin);",
              "",
              "                            //Добавляем новые глюонные пушки ударной группе, если она в данный момент находится в штабе",
              "                            if(GroupIn(PlayerMercsStrike, cur_ruin))",
              "                            {",
              "                                for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                                {",
              "                                    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "                                    //Но только если в корпусе ещё имеются незанятые слоты",
              "                                    check = GetEquipmentStats(ShipItems(cur_ship, 0), 1);",
              "                                    for(j = 1; j <= ShipCntWeapon(cur_ship); j = j + 1)",
              "                                    {",
              "                                        cur_item = ShipWeapon(cur_ship, i);",
              "                                        if(NoDropItem(cur_item)) check = check - 1;",
              "                                    }",
              "",
              "                                    if(check)",
              "                                    {",
              "                                        cur_item = CreateGluonGun(cur_ship, -1, max(GTL - RndObject(0, 2, cur_ship), 1));",
              "                                        AddItemToShip(cur_ship, cur_item);",
              "                                        NoDropItem(cur_item, 1);",
              "                                    }",
              "                                }",
              "                            }",
              "",
              "                            //Ну и крейсеру тоже до кучи",
              "                            if(GroupIn(CruisersDefenders, cur_ruin))",
              "                            {",
              "                                cur_ship = GroupToShip(CruisersDefenders);",
              "",
              "                                //Но только если в корпусе ещё имеются незанятые слоты",
              "                                check = GetEquipmentStats(ShipItems(cur_ship, 0), 1);",
              "                                for(j = 1; j <= ShipCntWeapon(cur_ship); j = j + 1)",
              "                                {",
              "                                    cur_item = ShipWeapon(cur_ship, i);",
              "                                    if(NoDropItem(cur_item)) check = check - 1;",
              "                                }",
              "",
              "                                if(check)",
              "                                {",
              "                                    cur_item = CreateGluonGun(cur_ship, -1, max(GTL - RndObject(0, 2, cur_ship), 1));",
              "                                    AddItemToShip(cur_ship, cur_item);",
              "                                    NoDropItem(cur_item, 1);",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "",
              "            //Если строительство портального генератора в процессе, но ещё не завершено",
              "            //if(PlayerHQMainArray['Science', 'PortalGenerator'] > 1)",
              "            //{",
              "            //    if(PlayerHQMainArray['Science', 'PortalGenerator'] <= CurTurn())",
              "            //    {}",
              "            //}",
              "",
              "            if(PlayerHQMainArray['Science', 'GluonGunsDeveloped'])",
              "            {",
              "                //Если подошло время, добавляем в магазин случайную глюонную пушку того типа, которого в нём ещё нет",
              "                if(PlayerHQMainArray['Armory', 'GluonGunsShopTimer'] <= CurTurn())",
              "                {",
              "                    check = 0;",
              "                    for(i = 0; i < ShopItems(cur_ruin); i = i + 1)",
              "                    {",
              "                        cur_item = ShopItems(cur_ruin, i);",
              "                        if(ItemType(cur_item) != t_CustomWeapon) continue;",
              "",
              "                        tstr1 = CustomWeaponType(cur_item);",
              "                        if(tstr1 == 'GluonEmitter')",
              "                        {",
              "                            if(!(check & 1)) check = check + 1;",
              "                        }",
              "                        else if(tstr1 == 'GluonTormentor')",
              "                        {",
              "                            if(!(check & 2)) check = check + 2;",
              "                        }",
              "                        else if(tstr1 == 'GluonTorpedoLauncher')",
              "                        {",
              "                            if(!(check & 4)) check = check + 4;",
              "                        }",
              "                    }",
              "",
              "                    if(check < 7)",
              "                    {",
              "                        tint1 = RndObject(1, 3, cur_ruin);",
              "                        while((check & (1 << tint1))) tint1 = RndObject(1, 3, cur_ruin);",
              "",
              "                        cur_item = CreateGluonGun(cur_ruin, tint1, max(GTL - RndObject(0, 2, cur_ruin), 1));",
              "                        AddItemToShop(cur_ruin, cur_item);",
              "                    }",
              "",
              "                    PlayerHQMainArray['Armory', 'GluonGunsShopTimer'] = CurTurn() + RndObject(45, 61, cur_ruin);",
              "                }",
              "            }",
              "",
              "            //Добавляем в магазин штаба один из базовых наёмничьих (организации игрока) корпусов",
              "            if(PlayerHQMainArray['Armory', 'MercsHullShopTimer'] <= CurTurn())",
              "            {",
              "                //Ищем в первых пяти слотах один из наёмничьих корпусов и если не нашли, то добавляем в магазин один случайный",
              "                j = min(5, ShopItems(cur_ruin));",
              "                for(i = 0; i < j; i = i + 1)",
              "                {",
              "                    cur_item = ShopItems(cur_ruin, i);",
              "                    tint1 = EqSpecial(cur_item);",
              "                    if(tint1 == -1)",
              "                    {",
              "                        //Пока не проверили все 5 первых слотов магазина",
              "                        if(i != j - 1) continue;",
              "                    }",
              "                    else",
              "                    {",
              "                        if(findsubstr(BonusNumInCfg(tint1), 'ShuMercsHQ_PlayerMerc'))",
              "                        {",
              "                            //Пока не проверили все 5 первых слотов магазина",
              "                            if(i != j - 1) continue;",
              "                        }",
              "                        else break;",
              "                    }",
              "",
              "                    tint1 = max(GTL + RndObject(-2, 0, cur_ruin), 1);",
              "                    tint2 = ItemSize(ShipItems(Player(), 0));",
              "                    tint2 = RndObject(round(0.5 * tint2), max(tint2 + 200, round(PortionInDiapason(tint1, 1, 8, 0.7, 2.0) * CT('Items.Hull.AverageSize'))), cur_ruin); //Считаем размер нового корпуса в магазине по ванильной формуле (акрин срежет 20%)",
              "                    //Для транспортов и лайнеров вместо константы 200 используется 300 (а при продаже на БЦ даже 400), для дипломатов 50, а для всех остальных типов корпусов всегда 200",
              "                    tint2 = min(tint2, 1500) + RndObject(-50, 50, cur_ruin); //Ограничение до 1500, а то будут наращивать размеры до бесконечности",
              "                    cur_item = CreateHull(0, tint2, tint1, RndObject(0, 4, cur_ruin), -1);",
              "",
              "                    //Вешаем акрин (обычный, либо, если уже построена верфь, с шансом особый)",
              "                    if(!PlayerHQMainArray['Shipyard', 'ProductionShipyard']) SpecialToEquipment(FindBonusByCustomTag('PlayerMerc_Race' + ItemOwner(cur_item)), cur_item);",
              "                    else if(RndObject(1, 100, cur_ruin) <= 33) SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_PlayerMercSpecialHull'), cur_item);",
              "                    else SpecialToEquipment(FindBonusByCustomTag('PlayerMerc_Race' + ItemOwner(cur_item)), cur_item);",
              "",
              "                    AddItemToShop(cur_ruin, cur_item);",
              "                    break;",
              "                }",
              "",
              "                PlayerHQMainArray['Armory', 'MercsHullShopTimer'] = CurTurn() + RndObject(45, 75, cur_ruin);",
              "            }",
              "",
              "            //Если штаб в данный момент не отправился на экстренное извлечение игрока",
              "            if(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] == '')",
              "            {",
              "                //Если на систему со штабом в данный момент не совершается нападение",
              "                if(!GetData(3, cur_ruin))",
              "                {",
              "                    //На систему со штабом напали, высылаем оборонительные силы (весь свободный резерв)",
              "                    //Но сперва проверяем, кто конкретно напал на систему",
              "                    //Используем нестандартную проверку StarBattle(), поскольку она не сработает, если система будет залочена от захвата каким-либо скриптом",
              "                    if(ShipNearbyShips(cur_ruin, -1, 0, 1, '', ''))//StarBattle(cur_star))",
              "                    {",
              "                        //Если напали не Коалиция/пираты, то выставляем маркер атаки, призывающий всех наёмников на оборону",
              "                        for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "                        {",
              "                            cur_ship = StarShips(cur_star, i);",
              "                            if(ShipInHyperSpace(cur_ship)) continue;",
              "",
              "                            tstr1 = ShipCustomFaction(cur_ship);",
              "                            if(tstr1 == '')",
              "                            {",
              "                                //Если обнаружили вторжение доминаторов",
              "                                if(ShipTypeN(cur_ship) == t_Kling)",
              "                                {",
              "                                    //Выводим уведомление о нападении доминаторов на систему штаба",
              "                                    if(ShipStar(Player()) != cur_star || !ShipInNormalSpace(Player()))",
              "                                    {",
              "                                        CustomEther('PlayerMercsOrg', 6, 'PlayerMercsOrgStarAttack', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.HQStarIsUnderAttackDom'), '<Star'+'>', Name(cur_star), '255,240,100'));",
              "                                    }",
              "",
              "                                    SetData(1, 3, cur_ruin);",
              "                                    break;",
              "                                }",
              "                            }",
              "                            else",
              "                            {",
              "                                //Если обнаружили в системе корабли с враждебной кастомной фракцией",
              "                                if(findsubstr(tstr1, 'SubFaction') == -1)",
              "                                {",
              "                                    //Выводим уведомление о нападении хер пойми кого на систему штаба",
              "                                    if(ShipStar(Player()) != cur_star || !ShipInNormalSpace(Player()))",
              "                                    {",
              "                                        CustomEther('PlayerMercsOrg', 6, 'PlayerMercsOrgStarAttack', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.HQStarIsUnderAttack'), '<Star' + '>', Name(cur_star), '255,240,100'));",
              "                                    }",
              "",
              "                                    SetData(1, 3, cur_ruin);",
              "                                    break;",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        if(GetData(3, cur_ruin))",
              "                        {",
              "                            //Выпускаем всех доступных дежурных",
              "                            if(PlayerHQMainArray['Mercs', 'CurrentAtReady'])",
              "                            {",
              "                                SpawnPlayerMerc(NearCivilPlanet(cur_ruin), cur_ruin, t_Warrior, PlayerHQMainArray['Mercs', 'CurrentAtReady']);",
              "                                PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "                            }",
              "",
              "                            //Также выпускаем ударную группу, если она сидит в штабе",
              "                            for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                            {",
              "                                cur_ship = GroupShip(PlayerMercsStrike, i);",
              "                                if(!StateIs(cur_ship, 'SittingBaseState')) continue;",
              "",
              "                                OrderTakeOff(cur_ship);",
              "                                ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) - 10000);",
              "                                SetData(1, 2, cur_ship); //Выставляем маркер о том, что этот корабль занят обороной штабной системы",
              "                                ChangeState('DefendingStarState', cur_ship);",
              "                            }",
              "",
              "                            //Пускаем в бой и крейсер, если таковой в штабе есть",
              "                            if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "                            {",
              "                                if(GroupCount(CruisersDefenders))",
              "                                {",
              "                                    cur_ship = GroupToShip(CruisersDefenders);",
              "                                    if(StateIs(cur_ship, 'CruiserWaitState', 'LandingBaseState'))",
              "                                    {",
              "                                        if(!ShipInNormalSpace(cur_ship)) OrderTakeOff(cur_ship);",
              "                                        ShipSpecialBonuses(cur_ship, bonFuel, -10000);",
              "                                        SetData(1, 2, cur_ship); //Выставляем маркер о том, что этот корабль занят обороной штабной системы",
              "                                        ChangeState('DefendingStarState', cur_ship);",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                //Если на систему со штабом напали",
              "                else",
              "                {",
              "                    //Пока в системе идёт бой, постоянно переводим всех наёмников в боевой готовности в состав оборонительной группы",
              "                    if(ShipNearbyShips(cur_ruin, -1, 0, 1, '', ''))//StarBattle(cur_star))",
              "                    {",
              "                        if(PlayerHQMainArray['Mercs', 'CurrentAtReady'])",
              "                        {",
              "                            SpawnPlayerMerc(NearCivilPlanet(cur_ruin), cur_ruin, t_Warrior, PlayerHQMainArray['Mercs', 'CurrentAtReady']);",
              "                            PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "                        }",
              "                    }",
              "                    //А если бой уже закончился, обнуляем маркер и возвращаем всех наёмников назад",
              "                    else",
              "                    {",
              "                        //Возвращаем дежурных из обороны",
              "                        for(i = 0; i < GroupCount(PlayerMercsDefenders); i = i + 1)",
              "                        {",
              "                            cur_ship = GroupShip(PlayerMercsDefenders, i);",
              "",
              "                            OrderLock(cur_ship, 1);",
              "                            ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) + 10000);",
              "                            ChangeState('LandingBaseState', cur_ship);",
              "                        }",
              "                        //Возвращаем ударную группу из обороны",
              "                        for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                        {",
              "                            cur_ship = GroupShip(PlayerMercsStrike, i);",
              "                            if(!StateIs(cur_ship, 'DefendingStarState')) continue;",
              "",
              "                            OrderLock(cur_ship, 1);",
              "                            ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) + 10000);",
              "                            ChangeState('LandingBaseState', cur_ship);",
              "                        }",
              "",
              "                        //И крейсер, если он у штаба есть",
              "                        if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "                        {",
              "                            if(GroupCount(CruisersDefenders))",
              "                            {",
              "                                cur_ship = GroupToShip(CruisersDefenders);",
              "                                if(StateIs(cur_ship, 'DefendingStarState'))",
              "                                {",
              "                                    OrderLock(cur_ship, 1);",
              "                                    ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) + 10000);",
              "                                    ChangeState('LandingBaseState', cur_ship);",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        EtherDelete('PlayerMercsOrgStarAttack');",
              "                        SetData(0, 3, cur_ruin);",
              "                    }",
              "                }",
              "            }",
              "",
              "            //Выводим уведомление о гибели всей ударной группы игрока",
              "            if(PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'])",
              "            {",
              "                if(!GroupCount(PlayerMercsStrike))",
              "                {",
              "                    CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasLost'));",
              "                    PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "                }",
              "            }",
              "",
              "            //Выводим уведомление о гибели защитного крейсера для штаба",
              "            if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "            {",
              "                if(!GroupCount(CruisersDefenders))",
              "                {",
              "                    CustomEther('PlayerMercsOrg', 0, '', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.CruiserDefenderWasLost'), '<Name'+'>', PlayerHQMainArray['Shipyard', 'LastHQCruiserName'], '255,240,100'));",
              "                    PlayerHQMainArray['Shipyard', 'CapitalShipDock'] = 1;",
              "                }",
              "            }",
              "        }",
              "        //Если штаб игрока был уничтожен, обновляем статус постройки и выводим уведомление",
              "        else",
              "        {",
              "            NewsAdd(Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.HQWasDestroyed'), '<Star'+'>', Name(GalaxyStar(PlayerHQMainArray['Main', 'HQStar']))));",
              "",
              "            PlayerHQMainArray['Main', 'GreetingDialog'] = 1;",
              "            ClearPlayerHQMainArray();",
              "            PlayerHQMainArray['Main', 'HQId'] = 0;",
              "            PlayerHQMainArray['Main', 'HQStar'] = 0;",
              "            BuildOwnBase_InProcess = -2;",
              "        }",
              "",
              "        //Обнуляем лимит переведённых во фрилансеры наёмников игрока в указанный промежуток времени",
              "        //Все прочие наёмники сверх этого лимита вместо перевода во фрилансеры просто сразу уничтожаются",
              "        if(PlayerHQMainArray['Mercs', 'FreedLimitTimer'] <= CurTurn())",
              "        {",
              "            PlayerHQMainArray['Mercs', 'FreedLimitTimer'] = CurTurn() + 50;",
              "            PlayerHQMainArray['Mercs', 'FreedLimitCount'] = 0;",
              "        }",
              "    }",
              "}",
              "",
              "//Если игрок уже построил хотя бы один штаб за партию",
              "if(0)//ArrayDim(PlayerHQMainArray) > 1)",
              "{",
              "    //Ежегодно снижаем репутацию организации игрока среди обеих враждующих сторон (отключено)",
              "    if(0)//PlayerHQMainArray['Main', 'ReputationDecreaseTimer'] <= CurTurn())",
              "    {",
              "        PlayerHQMainArray['Main', 'CoalitionReputation'] = max(PlayerHQMainArray['Main', 'CoalitionReputation'] - RndObject(25, 50, GalaxyStar(Gaal)), 0);",
              "        PlayerHQMainArray['Main', 'PirateClanReputation'] = max(PlayerHQMainArray['Main', 'PirateClanReputation'] - RndObject(25, 50, GalaxyStar(Gaal)), 0);",
              "",
              "        PlayerHQMainArray['Main', 'ReputationDecreaseTimer'] = CurTurn() + 365;",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  3,
          "#":  11,
          "Total.Lines":  358,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "//Если игрок начал разговор с кораблём в космосе",
              "cur_ship = GetTalkShip();",
              "if(cur_ship)",
              "{",
              "    if(IsPlayer(cur_ship))",
              "    {",
              "        if(BuildOwnBase_Condition == 2)",
              "        {",
              "            AddDialogOverride('PlayerDialog', 1000);",
              "            exit;",
              "        }",
              "    }",
              "",
              "    //Игрок инициировал разговор с NPC в космосе",
              "    if(!TalkByAI())",
              "    {",
              "        //Если игрок заговорил с квестовым кораблём (по заданию штаба)",
              "        if(ShipInCurScript(cur_ship))",
              "        {",
              "            tint1 = ShipGroup(cur_ship);",
              "            if(tint1 == QuestTarget || tint1 == QuestSupport || tint1 == QuestAttackers)",
              "            {",
              "                if(ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestShipNotScriptDialog') == -1) AddDialogOverride('QuestHQShipDialog', 5000);",
              "                exit;",
              "            }",
              "        }",
              "",
              "        tstr1 = ShipType(cur_ship);",
              "        //Игрок связался с одним из своих наёмников",
              "        if(tstr1 == 'PlayerMerc' || tstr1 == 'PlayerMercCruiser')",
              "        {",
              "            //Игрок связался с наёмником (или, возможно, крейсером) из ударной группы",
              "            if(ShipGroup(cur_ship) == PlayerMercsStrike)",
              "            {",
              "                //\"Ударник\" прямо сейчас обороняет штабную систему или возвращается в штаб после такой обороны",
              "                if(GetData(2, cur_ship) == 1) AddDialogOverride('PlayerMercsStrikeGroup', 1000);",
              "                //Игрок сам вызвал \"ударника\" на вылет",
              "                else AddDialogOverride('PlayerMercsStrikeGroup', 1000);",
              "            }",
              "            else if(tstr1 == 'PlayerMercCruiser')",
              "            {",
              "                //Крейсер прямо сейчас обороняет штабную систему или возвращается в штаб после такой обороны",
              "                if(GetData(2, cur_ship) == 1) AddDialogOverride('PlayerMercsDialog', 1000);",
              "                //Крейсер на вылете вместе с ударной группой",
              "                else if(StateIs(cur_ship, 'SittingBaseState', 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState', 'LandingBaseState'))",
              "                {",
              "                    AddDialogOverride('PlayerMercsStrikeGroup', 1000);",
              "                }",
              "                else AddDialogOverride('PlayerMercsDialog', 1000);",
              "            }",
              "            //Игрок связался с каким-то другим своим наёмником",
              "            else AddDialogOverride('PlayerMercsDialog', 1000);",
              "        }",
              "    }",
              "    //Если диалог с игроком инициировал NPC",
              "    else",
              "    {",
              "        tstr1 = ShipType(cur_ship);",
              "        //Если диалог с игроком инициировал наёмник из его организации",
              "        if(tstr1 == 'PlayerMerc' || tstr1 == 'PlayerMercCruiser')",
              "        {",
              "            //Если наёмник требует денег/груза,",
              "            //то переводим требование в безобидный запрос прибавки к зарплате",
              "            if(GetTalkType() == TalkMoney || GetTalkType() == TalkGoods)",
              "            {",
              "                AddDialogOverride('PlayerMercsMoneyCall', 3000);",
              "            }",
              "            //Если наёмник просит помощи игрока в атаке, меняем текст реплики наёмника",
              "            else if(GetTalkType() == TalkAttack)",
              "            {",
              "                tstr1 = Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.MercAskAttack' + RndObject(1, 2, cur_ship)), '<TargetShip'+'>', Name(ShipGetBad(cur_ship)));",
              "                AddDialogBlock('BlockThis', 2);",
              "                AddDialogInject('Block', tstr1, 'BlockThis', 0, 1);",
              "            }",
              "        }",
              "    }",
              "}",
              "else",
              "{",
              "    //Если игрок находится на станции/мостике",
              "    cur_ruin = GetShipRuins(Player());",
              "    if(cur_ruin)",
              "    {",
              "        tint1 = PlayerBridge();",
              "        if(tint1)",
              "        {",
              "            //Если игрок находится на главном экране мостика",
              "            if(tint1 <= 3)",
              "            {",
              "                //Если игрок взял задание на постройку своего штаба и в данный момент находится на этапе выбора системы",
              "                if(BuildOwnBase_InProcess == 1)",
              "                {",
              "                    if(ShipInNormalSpace(Player()))",
              "                    {",
              "                        tstr1 = CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgePlayerCall1');",
              "                        check = 0;",
              "                        for(int i = 0; i < GalaxyStars(); i = i + 1)",
              "                        {",
              "                            tdwd1 = GalaxyStar(i);",
              "                            if(StarOwner(tdwd1) == 1) continue;",
              "",
              "                            if(StarRuins(tdwd1, 'MB'))",
              "                            {",
              "                                check = 1;",
              "                                break;",
              "                            }",
              "                            else if(StarRuins(tdwd1, 'Manaan'))",
              "                            {",
              "                                check = 1;",
              "                                break;",
              "                            }",
              "                        }",
              "                        if(!check) AddDialogBlock(tstr1, 1);",
              "                        AddDialogInject('OwnBaseDialogBridge', '', tstr1, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            tstr1 = ShipType(cur_ruin);",
              "",
              "            if(QuestHQFlashDrivesGiven > 0)",
              "            {",
              "                //Сдача флешки с зеттакойном в бизнес-центр",
              "                if(tstr1 == 'WB')",
              "                {",
              "                    for(i = 1; i < ShipItems(Player()); i = i + 1)",
              "                    {",
              "                        cur_item = ShipItems(Player(), i);",
              "                        if(ItemType(cur_item) != t_UselessItem) continue;",
              "                        if(EquipmentImageName(cur_item) != 'ShuMercsHQ_PirateFlashDrive') continue;",
              "                        if(UselessItemData(cur_item, 1) != 1) continue;",
              "",
              "                        AddDialogInject('QuestHQRuinDialog', '', CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.PlayerAskWBAboutFlashDrive'), 1, 0, t_WB);",
              "                        break;",
              "                    }",
              "                }",
              "                else if(tstr1 == 'BK')",
              "                {",
              "                    if(QuestHQFlashDrivesGiven > 1) //Если игрок уже получал флешку с зетакойном",
              "                    {",
              "                        for(i = 1; i < ShipItems(Player()); i = i + 1)",
              "                        {",
              "                            cur_item = ShipItems(Player(), i);",
              "                            if(ItemType(cur_item) != t_UselessItem) continue;",
              "                            if(EquipmentImageName(cur_item) != 'ShuMercsHQ_PirateFlashDrive') continue;",
              "                            if(UselessItemData(cur_item, 1) != 2) continue;",
              "",
              "                            AddDialogInject('QuestHQRuinDialog', '', CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.PlayerAskBKAboutFlashDrive'), 1, 0, t_BK);",
              "                            break;",
              "                        }",
              "                    }",
              "                }",
              "                else if(tstr1 == 'CB')",
              "                {",
              "                    for(i = 1; i < ShipItems(Player()); i = i + 1)",
              "                    {",
              "                        cur_item = ShipItems(Player(), i);",
              "                        if(ItemType(cur_item) != t_UselessItem) continue;",
              "                        if(EquipmentImageName(cur_item) != 'ShuMercsHQ_PirateFlashDrive') continue;",
              "                        if(UselessItemData(cur_item, 1) != 1) continue;",
              "",
              "                        AddDialogInject('QuestHQRuinDialog', '', CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.PlayerAskCBAboutFlashDrive'), 1, 0, t_CB);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "",
              "            //Если игрок находится на ВБ, ПБ, ЦР или доминионе",
              "            if(tstr1 == 'WB' || tstr1 == 'PB' || tstr1 == 'RC' || tstr1 == 'CB')",
              "            {",
              "                //Блочим смену подданства на ПБ, если игрок в данный момент выполняет задание на захват/оборону системы",
              "                //(блочится только на ПБ в целевой системе)",
              "                tint1 = ShipFindCustomShipInfoByType(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo');",
              "                if(~tint1)",
              "                {",
              "                    if(ShipStar(cur_ruin) == GalaxyStar(ShipCustomShipInfoData(Player(), tint1, 1) - 1))",
              "                    {",
              "                        AddDialogBlock(CT('FormRuins.PB.ChangeNationality.ChangeNationality'), 1);",
              "                    }",
              "                }",
              "",
              "                //Если игрок находится на этапе получения разрешений на строительство",
              "                if(BuildOwnBase_InProcess == 2)",
              "                {",
              "                    //Если разрешение \"властей\" ещё не получено",
              "                    if(!ScriptItemData(ApprovalDocuments, 2))",
              "                    {",
              "                        //На ПБ такой диалог возможен только в случае уничтожения всех доминионов",
              "                        //Для учёта числа доминионов используется мод ExpCB, если он подключён",
              "                        if(tstr1 == 'WB' || tstr1 == 'RC') check = 0;",
              "                        else check = 7;",
              "",
              "                        if(!ShipOnSidePirateClan(Player()))",
              "                        {",
              "                            //Если в Галактике ещё остались ВБ",
              "                            if(TotalWBCount > 0) //Некоторые каким-то непостижимым образом умудряются загонять эти счётчики в минус",
              "                            {",
              "                                if(tstr1 == 'WB')",
              "                                {",
              "                                    tstr1 = CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBAskP');",
              "                                    AddDialogInject('OwnBaseDialogWB/Dom', '', tstr1, 1);",
              "                                }",
              "                            }",
              "                            else",
              "                            {",
              "                                if(tstr1 == 'RC')",
              "                                {",
              "                                    tstr1 = CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.RCAskP');",
              "                                    AddDialogInject('OwnBaseDialogRC/PB', '', tstr1, 1);",
              "                                }",
              "                            }",
              "                        }",
              "                        else",
              "                        {",
              "                            //Если в Галактике ещё остались доминионы",
              "                            if(TotalCBCount > 0) //Некоторые каким-то непостижимым образом умудряются загонять эти счётчики в минус",
              "                            {",
              "                                if(tstr1 == 'CB')",
              "                                {",
              "                                    tstr1 = CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomAskP');",
              "                                    AddDialogInject('OwnBaseDialogWB/Dom', '', tstr1, 1);",
              "                                }",
              "                            }",
              "                            else",
              "                            {",
              "                                if(tstr1 == 'PB')",
              "                                {",
              "                                    tstr1 = CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.PBAskP');",
              "                                    AddDialogInject('OwnBaseDialogRC/PB', '', tstr1, 1);",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else",
              "            {",
              "                //Игрок находится на научной базе",
              "                if(tstr1 == 'SB')",
              "                {",
              "                    //Проверяем, не запущен ли квест на изобретение глюонных пушек",
              "                    if(BuildOwnBase_InProcess == 6)",
              "                    {",
              "                        if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 4)",
              "                        {",
              "                            //Если игрок находится на целевой НБ",
              "                            if(IdToShip(PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId']) == cur_ruin)",
              "                            {",
              "                                if(!(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 1)) tstr1 = CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBeginPlayer');",
              "                                else tstr1 = CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBeginPlayerTwice');",
              "                                AddDialogInject('GluonGunsQuestDialog2', '', tstr1, 3);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                //Игрок в центре наёмников",
              "                else if(tstr1 == 'MB' || tstr1 == 'Manaan')",
              "                {",
              "                    //Если у него при себе имеется ключ Ципцилота, то он может получить бонус",
              "                    if(ItemIn(TziptzilotsKey, Player()))",
              "                    {",
              "                        tstr1 = CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAskAboutTziptzilotsKey');",
              "                        AddDialogInject('TziptzilotsKeyDialog', '', tstr1, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        //Игрок зашёл в правительство планеты",
              "        cur_planet = GetShipPlanet(Player());",
              "        if(cur_planet)",
              "        {",
              "            //Игрока только что выпустили из тюрьмы, в которую он угодил за запугивание правителя",
              "            if(PrisonQuestCheck == 1)",
              "            {",
              "                if(BuildOwnBase_InProcess == 2) dialog_path = 'Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.';",
              "                else dialog_path = 'Script.Mod_ShuMercsHQ.PlayerHQRelocation.';",
              "",
              "                AddDialogOverride('OutOfPrison', 9999);",
              "            }",
              "",
              "            //Если игрок находится на этапе получения разрешений на строительство, либо передислокацию штаба",
              "            if(BuildOwnBase_InProcess == 2 || (BuildOwnBase_InProcess == 6 && ItemExist(ApprovalDocuments)))",
              "            {",
              "                //Находится в системе, которую выбрал для строительства",
              "                cur_star = GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1)));",
              "                if(ShipStar(Player()) == cur_star)",
              "                {",
              "                    //Проверяем, на какой конкретно планете находится игрок",
              "                    tstr1 = ScriptItemTextData(ApprovalDocuments, 2);",
              "                    i = 0;",
              "                    while(1)",
              "                    {",
              "                        tint1 = GetParFromString(tstr1, ',', i, 0);",
              "                        //Если нашли планету, проверяем, получил ли уже игрок с неё разрешение",
              "                        if(cur_planet == StarPlanets(cur_star, tint1))",
              "                        {",
              "                            status = GetParFromString(ScriptItemTextData(ApprovalDocuments, 3), ',', i, 0);",
              "                            //Если ещё не получил",
              "                            if(!(status & 64))",
              "                            {",
              "                                if(BuildOwnBase_InProcess == 2) dialog_path = 'Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.';",
              "                                else dialog_path = 'Script.Mod_ShuMercsHQ.PlayerHQRelocation.';",
              "",
              "                                //Запоминаем номер планеты, на которой находится игрок, в статусной строке",
              "                                num = i;",
              "                                //Запоминаем принадлежность правителя планеты для выбора подходящих реплик в диалоге",
              "                                check = PlanetOwner(cur_planet);",
              "                                //Если игрока собираются посадить/расстрелять за провал запугивания",
              "                                if(GotoGov()) AddDialogOverride('OwnBaseDialogLock', 1000000);",
              "                                //Если игрок ещё не брал, либо уже завершил взятое задание тем или иным путём",
              "                                else if(!(status & 1) && !(status & 2)) tstr1 = CT(dialog_path + 'PlanetPlayerAsk1');",
              "                                //Если игрок в данный момент выполняет задание для текущей планеты",
              "                                else tstr1 = CT(dialog_path + 'PlanetPlayerQuestAsk1');",
              "                                AddDialogInject('OwnBaseDialogPlanet', '', tstr1, 0);",
              "                            }",
              "                            break;",
              "                        }",
              "                        i = i + 1;",
              "                    }",
              "                }",
              "                //Если игрок имеет задания на доставку предметов (задания касательно строительства штаба)",
              "                //То проверяем, не прилетел ли он на ту самую планету, куда ему нужно доставить посылку",
              "                else",
              "                {",
              "                    //Ищем нужный квест в массиве",
              "                    for(i = 1; i < ArrayDim(BuildOwnBase_QuestsArray); i = i + 1)",
              "                    {",
              "                        //Сразу пропускаем выполненные, но ещё не сданные квесты",
              "                        if(BuildOwnBase_QuestsArray[i, 5] == -1) continue;",
              "",
              "                        //Если нашли",
              "                        if(Id(cur_planet) == BuildOwnBase_QuestsArray[i, 4])",
              "                        {",
              "                            //Определяем, имеется ли у игрока на корабле предмет, который он должен был доставить",
              "                            cur_item = IdToItem(BuildOwnBase_QuestsArray[i, 8]);",
              "                            if(cur_item)",
              "                            {",
              "                                if(~FindItemInShip(Player(), cur_item))",
              "                                {",
              "                                    num = i;",
              "                                    tstr4 = BuildOwnBase_QuestsArray[i, 6];",
              "                                    tstr1 = CT(tstr4 + 'QuestDeliveredP');",
              "                                    AddDialogInject('OwnBaseDialogDeliver', '', tstr1, 0);",
              "                                    break;",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  24,
          "#":  20,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//BuildOwnBase_InProcess == -2 - станция игрока разрушена, возможна повторная постройка",
              "//BuildOwnBase_InProcess == -1 - игрок уже просмотрел первый вариант диалога, повторно проматывать весь текст не придётся",
              "//BuildOwnBase_InProcess == 0 - станция игрока ещё ни разу не строилась, диалог на ЦН ещё не проматывался",
              "//BuildOwnBase_InProcess == 1 - подготовка к постройке станции, нужно выбрать систему",
              "//BuildOwnBase_InProcess == 2 - подготовка к постройке станции, система выбрана, нужно получить разрешения",
              "//BuildOwnBase_InProcess == 3 - подготовка к постройке станции, все разрешения были получены, игрок отправляется на ЦН",
              "//BuildOwnBase_InProcess == 5 - игрок уже строил штаб, но тот был разрушен, игрок получает третий вариант диалога",
              "//BuildOwnBase_InProcess == 6 - штаб построен",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswer1');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAsk2');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  170,
          "Parent":  25,
          "#":  26,
          "Total.Lines":  43,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок спрашивает насчёт создания первой в партии организации повторно",
              "if(BuildOwnBase_Condition == 6)",
              "{",
              "    cost = max(2500000, GalaxyMoney(4, 4) * 50);",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerAgainConditionYes'), '<Cost'+'>', cost);",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAgainConditionYesStart');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAgainConditionYesCancel');",
              "    tint1 = 1;",
              "",
              "    //Ищем все подходящие для выбора системы",
              "    ArrayClear(tarr1);",
              "    if(!ShipOnSidePirateClan(Player())) tint2 = 0;",
              "    else tint2 = 2;",
              "    for(i = 0; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        cur_star = StarNearbyStars(ShipStar(Player()), i);",
              "        if(!SectorVisible(StarToCon(cur_star))) continue;",
              "        if(StarOwner(cur_star) != tint2) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        if(StarToCon(cur_star) == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "        //Пропускаем систему с ЦН",
              "        if(StarRuins(cur_star, 'MB')) continue;",
              "",
              "        ArrayAdd(tarr1, cur_star);",
              "    }",
              "",
              "    if(ArrayDim(tarr1) > 1)",
              "    {",
              "        //Выстраиваем список подходящих систем в ответы",
              "        for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "        {",
              "            cur_star = tarr1[i];",
              "            InjectAnswer('OwnBaseDialogBridge_Choosed', CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerChooseStar') + ' <color=0,50,200>' + Name(cur_star) + '</color>', cur_star);",
              "        }",
              "    }",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerAgainConditionNo');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAgainConditionNo');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAgainConditionNoReAsk');",
              "    tint1 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  27,
          "#":  28,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswer2');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAsk3');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  30,
          "#":  31,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswer3');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerAsk4');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  33,
          "#":  34,
          "Total.Lines":  53,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//BuildOwnBase_Condition == < 0 - игрок тем или иным образом провалил квест, повторить больше не получится (значение равно этапу квеста, на котором он был провален, но со знаком минус)",
              "//BuildOwnBase_Condition ==   0 - квест на получение доступа к строительству штаба ещё не запускался",
              "//BuildOwnBase_Condition ==   1 - квест был запущен, появился Ципцилот и транки, Ципцилоту выдан приказ на взлёт с планеты, на которой сидит игрок",
              "//BuildOwnBase_Condition ==   2 - игрок подобрал планшет, натравливаем на него транков и ждём развязки",
              "//BuildOwnBase_Condition ==   3 - игрок уже поговорил с одним из транков в первый раз",
              "//BuildOwnBase_Condition ==   4 - игрок разрешил конфликт с транками тем или иным путём, с ЦН вылетает Ципцилот (если игрок находится в системе с ЦН) для финального диалога",
              "//BuildOwnBase_Condition ==   5 - по результату диалога с игроком Ципцилот либо нападает (квест сразу провален), либо отправляется в ЦН",
              "//BuildOwnBase_Condition ==   6 - Ципцилот добрался до ЦН после финального диалога, квест успешно завершён",
              "",
              "if(BuildOwnBase_Condition == 6)",
              "{",
              "    cost = RoundTo(max(2500000, GalaxyMoney(4, 4) * 50), 1000, 0);",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerConditionYes'), '<Cost'+'>', cost);",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionYesStart');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionYesCancel');",
              "    tint1 = 1;",
              "",
              "    //Ищем все подходящие для выбора системы",
              "    ArrayClear(tarr1);",
              "    if(!ShipOnSidePirateClan(Player())) tint2 = 0;",
              "    else tint2 = 2;",
              "    for(i = 0; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        cur_star = StarNearbyStars(ShipStar(Player()), i);",
              "        if(!SectorVisible(StarToCon(cur_star))) continue;",
              "        if(StarOwner(cur_star) != tint2) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        if(StarToCon(cur_star) == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "        //Пропускаем систему с ЦН",
              "        if(StarRuins(cur_star, 'MB')) continue;",
              "",
              "        ArrayAdd(tarr1, cur_star);",
              "    }",
              "",
              "    if(ArrayDim(tarr1) > 1)",
              "    {",
              "        //Выстраиваем список подходящих систем в ответы",
              "        for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "        {",
              "            cur_star = tarr1[i];",
              "            InjectAnswer('OwnBaseDialogBridge_Choosed', CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerChooseStar') + ' <color=0,50,200>' + Name(cur_star) + '</color>', cur_star);",
              "        }",
              "    }",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerConditionNo');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionNoOk');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionNoReAsk');",
              "    tint1 = 0;",
              "}",
              "",
              "BuildOwnBase_InProcess = -1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  150,
          "Parent":  42,
          "#":  43,
          "Total.Lines":  32,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cost = max(1250000, GalaxyMoney(4, 4) * 25);",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerTwice'), '<Cost'+'>', cost);",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerTwiceYes');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerTwiceNo');",
              "tint1 = 1;",
              "",
              "//Ищем все подходящие для выбора системы",
              "ArrayClear(tarr1);",
              "if(!ShipOnSidePirateClan(Player())) tint2 = 0;",
              "else tint2 = 2;",
              "for(i = 0; i < GalaxyStars(); i = i + 1)",
              "{",
              "    cur_star = StarNearbyStars(ShipStar(Player()), i);",
              "    if(!SectorVisible(StarToCon(cur_star))) continue;",
              "    if(StarOwner(cur_star) != tint2) continue;",
              "    if(StarCustomFaction(cur_star) != '') continue;",
              "    if(StarToCon(cur_star) == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "    //Пропускаем систему с ЦН",
              "    if(StarRuins(cur_star, 'MB')) continue;",
              "",
              "    ArrayAdd(tarr1, cur_star);",
              "}",
              "",
              "if(ArrayDim(tarr1) > 1)",
              "{",
              "    //Выстраиваем список подходящих систем в ответы",
              "    for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "    {",
              "        cur_star = tarr1[i];",
              "        InjectAnswer('OwnBaseDialogBridge_Choosed', CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerChooseStar') + ' <color=0,50,200>' + Name(cur_star) + '</color>', cur_star);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  36,
          "#":  44,
          "Total.Lines":  34,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Title');",
              "tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Stage1');",
              "Ether(3, 'BuildOwnMCBase', tstr1);",
              "//Выдаём игроку документы для сбора одобрений",
              "//(также в них записываем Id необходимых планет, Id системы и сами маркеры о том, были ли получены разрешения)",
              "//Записанные данные:",
              "//ScriptItemData1 == хозяин системы (Коалиция/пираты), которую выберет игрок (нужен для проверок захвата);",
              "//ScriptItemTextData1 == Id системы, которую выберет игрок;",
              "//ScriptItemData2 == маркер (0/1) о том, получил ли игрок одобрение правительства стороны конфликта, Коалиции или пиратов;",
              "//ScriptItemTextData2 == номера всех обитаемых планет в списке системы в формате '0,2,3,'... (легко вернуть планету по StarPlanets(star, N))",
              "//ScriptItemData3 == количество планет, одобрения которых необходимо получить (используется в качестве счётчика)",
              "//ScriptItemTextData3 == маркера о получении одобрения от правительств обитаемых планет системы в формате '2,58,0,'...",
              "//  Расшифровка сета значений в ScriptItemTextData3:",
              "//    0 - одобрение не получено, базовое значение",
              "//    1 - задание взято",
              "//    2 - задание выполнено, осталось получить бумаги",
              "//    4 - задание провалено",
              "//    8 - попытка убеждения провалена",
              "//   16 - попытка запугивания провалена",
              "//   32 - провалена попытка повторного запугивания (используется только как маркер для блокировки диалога)",
              "//   64 - одобрение получено",
              "",
              "cur_item = CreateQuestItem('ShuMercsHQ_ApprovalDocuments', ShipPilotRace(cur_ruin));",
              "ItemSize(cur_item, 10);",
              "LinkItemToScript(cur_item, ApprovalDocuments);",
              "AddItemToShip(Player(), cur_item);",
              "NoDropItem(cur_item, 1);",
              "ApprovalDocumentsTextUpdate(cur_item);",
              "//Если игрок решил получать доступ не через Ципцилота",
              "if(tint1 == 2) BuildOwnBase_Condition == -3;",
              "",
              "//Запущен процесс подготовки к постройке базы, необходимо выбрать систему",
              "BuildOwnBase_InProcess = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  49,
          "#":  50,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgeMBAnswer1');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgePlayerCall2');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgePlayerCallOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  52,
          "#":  53,
          "Total.Lines":  31,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!ShipOnSidePirateClan(Player())) tint1 = 0;",
              "else tint1 = 2;",
              "",
              "//Ищем все подходящие для выбора системы",
              "ArrayClear(tarr1);",
              "for(i = 0; i < GalaxyStars(); i = i + 1)",
              "{",
              "    cur_star = StarNearbyStars(ShipStar(Player()), i);",
              "    if(!SectorVisible(StarToCon(cur_star))) continue;",
              "    if(StarOwner(cur_star) != tint1) continue;",
              "    if(StarCustomFaction(cur_star) != '') continue;",
              "    if(StarToCon(cur_star) == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "    //Пропускаем системы с ЦН и штабами конкурентов",
              "    if(StarRuins(cur_star, 'MB')) continue;",
              "    if(StarRuins(cur_star, 'Manaan')) continue;",
              "    if(StarRuins(cur_star, 'MercHQ')) continue;",
              "    if(StarRuins(cur_star, 'MercHQ_licensed')) continue;",
              "",
              "    ArrayAdd(tarr1, cur_star);",
              "}",
              "",
              "if(ArrayDim(tarr1) > 1)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgeMBAnswer2');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgePlayerCall3');",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgeMBAnswerNoStars');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgePlayerCallNoStars');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  54,
          "#":  55,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Выстраиваем список подходящих систем в ответы",
              "for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    cur_star = tarr1[i];",
              "    InjectAnswer('OwnBaseDialogBridge_Choosed', CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgeChooseStar') + ' <color=0,50,200>' + Name(cur_star) + '</color>', cur_star);",
              "}",
              "DAnswer('restart~' + tstr2);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  56,
          "#":  57,
          "Total.Lines":  8,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_star = GAnswerData;",
              "check = 0;",
              "if(ShipType(cur_ruin) == 'MB') check = 1;",
              "",
              "//Если игрок указал систему уже на ЦН",
              "if(check) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovChooseStarDone'), '<Star'+'>', Name(cur_star));",
              "//Если игрок указал систему с мостика",
              "else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgeMBAnswer3'), '<Star'+'>', Name(cur_star));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  58,
          "#":  62,
          "Total.Lines":  51,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если игрок указал систему уже на ЦН",
              "if(check)",
              "{",
              "    cur_item = CreateQuestItem('ShuMercsHQ_ApprovalDocuments', ShipPilotRace(cur_ruin));",
              "    ItemSize(cur_item, 10);",
              "    LinkItemToScript(cur_item, ApprovalDocuments);",
              "    AddItemToShip(Player(), cur_item);",
              "    NoDropItem(cur_item, 1);",
              "}",
              "//Если игрок указал систему с мостика",
              "else cur_item = ScriptItemToItem(ApprovalDocuments);",
              "",
              "//Заносим базовый набор данных в переменные скриптового предмета",
              "ScriptItemTextData(cur_item, 1, Id(cur_star) - 1);",
              "ScriptItemData(cur_item, 1, StarOwner(cur_star));",
              "",
              "tstr1 = '';",
              "tstr2 = '';",
              "for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "{",
              "    cur_planet = StarPlanets(cur_star, i);",
              "    if(PlanetOwner(cur_planet) == 6) continue;",
              "    //ScriptItemTextData2 == номера всех обитаемых планет в списке системы в формате '0,2,3'... (легко вернуть планету по StarPlanets(star, N))",
              "    //ScriptItemTextData3 == маркера о получении одобрения от правительств обитаемых планет системы в формате '0,1,0'...",
              "    tstr1 = tstr1 + i + ',';",
              "    tstr2 = tstr2 + '0,';",
              "    ScriptItemData(cur_item, 3, ScriptItemData(cur_item, 3) + 1);",
              "}",
              "ScriptItemTextData(cur_item, 2, tstr1);",
              "ScriptItemTextData(cur_item, 3, tstr2);",
              "",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(cur_item);",
              "//Если игрок решил получать доступ не через Ципцилота",
              "if(tint1 == 2) BuildOwnBase_Condition == -3;",
              "",
              "//Обновляем текст уведомления задания о постройке базы",
              "tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Title');",
              "tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\";",
              "if(!ShipOnSidePirateClan(Player())) tstr1 = tstr1 + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Stage2_Coalition'), '<Star'+'>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "else tstr1 = tstr1 + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Stage2_PirateClan'), '<Star'+'>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "Ether(3, 'BuildOwnMCBase', tstr1);",
              "",
              "//Система выбрана",
              "BuildOwnBase_InProcess = 2;",
              "",
              "//Если игрок указал систему уже на ЦН",
              "if(check) tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerChooseStarDone');",
              "//Если игрок указал систему с мостика",
              "else tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.BridgePlayerCallEnd');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  64,
          "#":  65,
          "Total.Lines":  100,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Шансы запугивания на пиратских планетах любой расы:",
              "//Успех/частичный успех:",
              "//1-25% (треть от шанса на успех, полученного с рейтинга) - полный успех",
              "//26-75% (две трети от шанса на успех, полученного с рейтинга) - частичный успех (со скидкой 50% от стоимости подкупа),",
              "//либо повторное запугивание с шансом полного успеха 10% (примерно одна седьмая от шанса на успех, полученного с рейтинга)",
              "//Провал:",
              "//25% (оставшаяся часть) - игрока сразу убивают",
              "//",
              "//Подкуп, формула: max(250000 * (GalaxyDiffLevels(1) / 50), GalaxyMoney(4, 4) * 5);",
              "//Процент снижения стоимости зависит от суммы статуса торговца (до 17%) и навыка торговли (до 17%), максимум до 34%",
              "//Суммы подкупа на планетах, модификатор:",
              "//Малоки 0.75",
              "//Пеленги 1.10",
              "//Люди 1.00",
              "//Фэяне 1.20",
              "//Гаальцы 1.30",
              "//Пираты 1.80",
              "//(при низком отношении планеты дополнительно домножаем на 1.5)",
              "",
              "//Военные (на ВБ) / пиратский клан (на доминионе) 2.0 (скидки от статуса и навыка нет)",
              "",
              "//Если планета коалиционная",
              "if(check <= 4)",
              "{",
              "    if(RelationToRanger(cur_planet, Player()) >= 60)",
              "    {",
              "        //Вступительная реплика",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalGood');",
              "        //Задание",
              "        //(если не было провалено)",
              "        if(!(status & 4)) tint1 = 1;",
              "        //(если провалено, блокируем ответ)",
              "        else tint1 = -1;",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalQuest');",
              "        //Убеждение",
              "        tint2 = PersuasionCalc(status, cur_planet, check);",
              "        tstr3 = '</color>' + CT(dialog_path + 'PlanetGovCoalPersuasion');",
              "        //Угроза",
              "        tint3 = ThreatCalc(status, cur_planet, check);",
              "        tstr4 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatGood');",
              "    }",
              "    else",
              "    {",
              "        //Вступительная реплика",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalBad');",
              "        //Задание (недоступно при низком отношении)",
              "        tint1 = -2;",
              "        //Убеждение (недоступно при низком отношении)",
              "        tint2 = -2;",
              "        //Угроза",
              "        tint3 = ThreatCalc(status, cur_planet, check);",
              "        tstr4 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatBad');",
              "    }",
              "",
              "    //Взятка",
              "    tint4 = 1;",
              "    cost = BribeCalc(0, cur_planet, check);",
              "    tstr5 = '</color>' + CT(dialog_path + 'PlanetGovCoalBribe');",
              "    //Отмена диалога",
              "    tstr6 = '</color>' + CT(dialog_path + 'PlanetGovCoalReturn');",
              "}",
              "//Если планета пиратская",
              "else",
              "{",
              "    if(RelationToRanger(PlanetPirateClan(), Player()) >= 60)",
              "    {",
              "        //Вступительная реплика",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirGood');",
              "        //Задание",
              "        //(если не было провалено)",
              "        if(!(status & 4)) tint1 = 1;",
              "        //(если провалено, блокируем ответ)",
              "        else tint1 = -1;",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirQuest');",
              "        //Убеждение (недоступно на пиратских планетах)",
              "        tint2 = -2;",
              "        //Угроза",
              "        tint3 = ThreatCalc(status, cur_planet, check);",
              "        tstr4 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatGood');",
              "    }",
              "    else",
              "    {",
              "        //Вступительная реплика",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirBad');",
              "        //Задание (недоступно при низком отношении)",
              "        tint1 = -2;",
              "        //Убеждение (недоступно на пиратских планетах)",
              "        tint2 = -2;",
              "        //Угроза",
              "        tint3 = ThreatCalc(status, cur_planet, check);",
              "        tstr4 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatBad');",
              "    }",
              "",
              "    //Взятка",
              "    tint4 = 1;",
              "    cost = BribeCalc(0, cur_planet, check);",
              "    tstr5 = '</color>' + CT(dialog_path + 'PlanetGovPirBribe');",
              "    //Отмена диалога",
              "    tstr6 = '</color>' + CT(dialog_path + 'PlanetGovPirReturn');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  66,
          "#":  67,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если планета коалиционная",
              "if(check <= 4) tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalQuestInProcess');",
              "//Если планета пиратская",
              "else tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirQuestInProcess');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  20,
          "Parent":  79,
          "#":  91,
          "Total.Lines":  596,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Заполняем массив квестов перед перебором Галактики (не более 10 квестов каждого типа для каждой расы)",
              "//Первый уровень - тип задания (всего 3)",
              "//Второй уровень - разделы заданий (до 10 разных заданий), нулевой элемент tarr1[i, 0, 0] отведён под общее число заданий в каждом разделе каждой фракции",
              "//Третий уровень - условия выдачи задания (всего до 12 условий + адрес задания в Lang):",
              "//Задания на уничтожение/охрану корабля:",
              "//   tarr1[i, j, 0] == сет подходящих владельцев системы, в которой будет находиться целевой корабль на старте:",
              "//      1 - Коалиция",
              "//      4 - пиратский клан",
              "//   tarr1[i, j, 1] == сет подходящих числовых типов корабля:",
              "//      1  - доминатор",
              "//      2  - рейнджер",
              "//      4  - гражданский (не только транспорт)",
              "//      8  - пират (в т.ч. и клановый)",
              "//      16 - военный",
              "//      32 - транклюкатор",
              "//   tarr1[i, j, 2] == сет подходящих подтипов корабля (смотреть в списке функций), всего до 8 различных подтипов",
              "//   tarr1[i, j, 3] == строчный (кастомный) тип корабля (возможно перечисление нескольких типов через запятую)",
              "//   tarr1[i, j, 4] == сет подходящих рас корабля:",
              "//      1  - малок",
              "//      2  - пеленг",
              "//      4  - человек",
              "//      8  - фэянин",
              "//      16 - гаалец",
              "//   tarr1[i, j, 5] == сет подходящих владельцев (owner) корабля:",
              "//      1   - малоки",
              "//      2   - пеленги",
              "//      4   - люди",
              "//      8   - фэяни",
              "//      16  - гаалцы",
              "//      32  - доминаторы",
              "//      64  - неизвестные",
              "//      128 - пиратский клан",
              "//   tarr1[i, j, 6] == минимальное расстояние в парсеках до системы с целевым кораблём",
              "//   tarr1[i, j, 7] == максимальное расстояние в парсеках до системы с целевым кораблём",
              "//   tarr1[i, j, 8] == минимальное число дней на выполнение задания",
              "//   tarr1[i, j, 9] == максимальное число дней на выполнение задания",
              "//   tarr1[i, j, 11] == адрес раздела задания в Lang",
              "//Задания на доставку:",
              "//   tarr1[i, j, 0] == сет подходящих владельцев системы, в которой будет находиться целевая планета доставки:",
              "//      1 - Коалиция",
              "//      4 - пиратский клан",
              "//   tarr1[i, j, 1] == сет рас целевой планеты:",
              "//      1  - малок",
              "//      2  - пеленг",
              "//      4  - человек",
              "//      8  - фэянин",
              "//      16 - гаалец",
              "//   tarr1[i, j, 2] == сет владельцев (owner) целевой планеты:",
              "//      1   - малоки",
              "//      2   - пеленги",
              "//      4   - люди",
              "//      8   - фэяни",
              "//      16  - гаалцы",
              "//      32  - доминаторские",
              "//      64  - незаселёнки",
              "//      128 - пиратский клан",
              "//   tarr1[i, j, 3] == минимальное расстояние в парсеках до системы с целевой планетой",
              "//   tarr1[i, j, 4] == максимальное расстояние в парсеках до системы с целевой планетой",
              "//   tarr1[i, j, 5] == минимальное число дней на выполнение задания",
              "//   tarr1[i, j, 6] == максимальное число дней на выполнение задания",
              "//   tarr1[i, j, 7] == системное название доставляемого юзлесного предмета",
              "//   tarr1[i, j, 8] == сет рас-производителей доставляемого юзлесного предмета (если -1, то пропускаем этот пункт во время создания предмета)",
              "//      1   - малоки",
              "//      2   - пеленги",
              "//      4   - люди",
              "//      8   - фэяни",
              "//      16  - гаалцы",
              "//      32  - доминаторы",
              "//      64  - неизвестные",
              "//      128 - пиратский клан",
              "//   tarr1[i, j, 9] == цена доставляемого юзлесного предмета (если -1, то пропускаем этот пункт во время создания предмета)",
              "//   tarr1[i, j, 10] == вес доставляемого юзлесного предмета (если -1, то пропускаем этот пункт во время создания предмета)",
              "//   tarr1[i, j, 11] == адрес раздела задания в Lang",
              "free(tarr1);",
              "tarr1 = newarray(3, 11, 12);",
              "//Используем эту переменную для записи максимального удаления системы задания от системы игрока в парсеках",
              "tint4 = 0;",
              "",
              "tdwd1 = ShipStar(Player());",
              "if(check <= 4) tstr2 = 'Coalition.';",
              "else tstr2 = 'PirateClan.';",
              "//Три типа заданий",
              "for(i = 0; i <= 2; i = i + 1)",
              "{",
              "    if(!i) tstr1 = 'Quest.ShuMercs.KillShip.' + tstr2;",
              "    else if(i == 1) tstr1 = 'Quest.ShuMercs.DefShip.' + tstr2;",
              "    else tstr1 = 'Quest.ShuMercs.SendLetter.' + tstr2;",
              "",
              "    //Инициализируем ячейку счётчика заданий",
              "    tarr1[i, 0, 0] = 0;",
              "    //Перебираем задания в разделе соответствующей фракции",
              "    tint2 = 0; //Счётчик непосредственно доступных заданий",
              "    for(j = 1; j <= CT(tstr1 + 'Count'); j = j + 1)",
              "    {",
              "        tstr3 = tstr1 + j;",
              "        if(BlockExist(CT(tstr3)))",
              "        {",
              "            tstr3 = tstr3 + '.';",
              "",
              "            //Если ранее это задание уже было взято/выполнено/провалено игроком, повторно оно выдано не будет (исключая универсальные задания)",
              "            if(~findsubstr(GBuildOwnBase_QuestsGiven, CT(tstr3 + 'QuestId'))) continue;",
              "",
              "            //Проверяем возможную расу планеты заказчика",
              "            //Если текущая планета не подходит по расе, то сразу пропускаем такой квест",
              "            tstr4 = CT(tstr3 + 'StartPlanetRace');",
              "            //Проверка на то, что заданию подходит планета любой расы",
              "            if(tstr4 != '' && tstr4 != 'Any')",
              "            {",
              "                k = 0;",
              "                tint1 = 0;",
              "                tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                while(tstr5 != '')",
              "                {",
              "                    //Нашли соответствие",
              "                    if(PlanetRace(cur_planet) == GetValueFromScript('', tstr5))",
              "                    {",
              "                        tint1 = 1;",
              "                        break;",
              "                    }",
              "",
              "                    k = k + 1;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                }",
              "",
              "                if(!tint1) continue;",
              "            }",
              "",
              "            //Увеличиваем счётчик доступных заданий данного типа",
              "            tint2 = tint2 + 1;",
              "            //Если планета подходит, то переходим к заполнению условий",
              "            //Если записываем задание на уничтожение/защиту корабля (имеют одинаковый набор условий)",
              "            if(i < 2)",
              "            {",
              "                //Заносим условие владельца целевой звезды (где будет находиться корабль на старте)",
              "                tstr4 = CT(tstr3 + 'TargetStarOwner');",
              "                //Если подходит любая, то записываем Коалицию и пиратский клан, сет 1+4 (5)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 0] = 5;",
              "                //Если указано, что система должна соответствовать стартовой, то запоминаем сет стартовой системы",
              "                else if(tstr4 == 'AsStartStar') tarr1[i, tint2, 0] = 1 << StarOwner(tdwd1); //Система игрока",
              "                //Иначе просто подставляем значение из параметра",
              "                else",
              "                {",
              "                    if(tstr4 == 'Coalition') tarr1[i, tint2, 0] = 1;",
              "                    else tarr1[i, tint2, 0] = 4;",
              "                }",
              "",
              "                //Заносим условие цифрового типа корабля",
              "                tstr4 = CT(tstr3 + 'TargetShipType');",
              "                //Если подходит любой, то записываем все возможные типы кораблей (включая транклюкатора) в виде сета 1+2+4+8+16+32 (63)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 1] = 63;",
              "                //Иначе делаем подробный перебор доступных для задания типов через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 1] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        tint1 = GetValueFromScript('', tstr5);",
              "                        //Запоминаем сет полученного типа",
              "                        tarr1[i, tint2, 1] = tarr1[i, tint2, 1] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Заносим условие подтипа корабля",
              "                tstr4 = CT(tstr3 + 'TargetShipSubType');",
              "                //Если подходит любой, то записываем все возможные подтипы кораблей в виде сета 1+2+4+8+16+32+64+128 (255)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 2] = 255;",
              "                //Иначе делаем подробный перебор доступных для задания типов через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 2] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        //В Lang должны быть записаны в виде цифр",
              "                        tint1 = tstr5;",
              "                        //Запоминаем сет полученного подтипа",
              "                        tarr1[i, tint2, 2] = tarr1[i, tint2, 2] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Заносим условие строчного типа корабля (возможно перечисление нескольких типов через запятую)",
              "                tarr1[i, tint2, 3] = CT(tstr3 + 'TargetShipStringType');",
              "",
              "                //Заносим условие расы корабля (всего 5)",
              "                tstr4 = CT(tstr3 + 'TargetShipRace');",
              "                //Если подходит любой, то записываем все возможные расы кораблей в виде сета 1+2+4+8+16 (31)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 4] = 31;",
              "                //Если указано, что раса должна соответствовать стартовой планете, то запоминаем её сет",
              "                else if(tstr4 == 'AsStartPlanet') tarr1[i, tint2, 4] = 1 << PlanetRace(cur_planet);",
              "                //Иначе делаем подробный перебор значений через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 4] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        tint1 = GetValueFromScript('', tstr5);",
              "                        //Запоминаем сет",
              "                        tarr1[i, tint2, 4] = tarr1[i, tint2, 4] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Заносим условие владельца корабля (всего 8)",
              "                tstr4 = CT(tstr3 + 'TargetShipOwner');",
              "                //Если подходит любой, то записываем всех возможных владельцев кораблей в виде сета 1+2+4+8+16+32+64+128 (255)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 5] = 255;",
              "                //Если указано, что владелец должен соответствовать стартовой планете, то запоминаем её сет",
              "                else if(tstr4 == 'AsStartPlanet') tarr1[i, tint2, 5] = 1 << PlanetOwner(cur_planet);",
              "                //Иначе делаем подробный перебор значений через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 5] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        tint1 = GetValueFromScript('', tstr5);",
              "                        //Запоминаем сет",
              "                        tarr1[i, tint2, 5] = tarr1[i, tint2, 5] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Заносим условия удалённости целевой системы со стартовой позицией корабля в парсеках",
              "                tarr1[i, tint2, 6] = 0 + CT(tstr3 + 'MinStarParsecRange');",
              "                tarr1[i, tint2, 7] = 0 + CT(tstr3 + 'MaxStarParsecRange');",
              "                if(tarr1[i, tint2, 7] > tint4) tint4 = tarr1[i, tint2, 7];",
              "",
              "                //Заносим условия минимальной и максимальной продолжительности задания (напрямую зависит от удалённости системы)",
              "                tarr1[i, tint2, 8] = 0 + CT(tstr3 + 'MinTime');",
              "                tarr1[i, tint2, 9] = 0 + CT(tstr3 + 'MaxTime');",
              "",
              "                //В последнюю ячейку запоминаем адрес к разделу задания в Lang",
              "                tarr1[i, tint2, 11] = tstr3;",
              "            }",
              "            //Если записываем задание на доставку",
              "            else",
              "            {",
              "                //Заносим условие владельца целевой звезды (где будет находиться планета для доставки)",
              "                tstr4 = CT(tstr3 + 'TargetStarOwner');",
              "                //Если подходит любая, то записываем Коалицию и пиратский клан, сет 1+4 (5)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 0] = 5;",
              "                //Если указано, что система должна соответствовать стартовой, то запоминаем сет стартовой системы",
              "                else if(tstr4 == 'AsStartStar') tarr1[i, tint2, 0] = 1 << StarOwner(ShipStar(Player()));",
              "                //Иначе просто подставляем значение из параметра",
              "                else",
              "                {",
              "                    if(tstr4 == 'Coalition') tarr1[i, tint2, 0] = 1;",
              "                    else tarr1[i, tint2, 0] = 4;",
              "                }",
              "",
              "                //Заносим условие расы целевой планеты (всего 5 рас)",
              "                tstr4 = CT(tstr3 + 'TargetPlanetRace');",
              "                //Если подходит любая, то записываем все возможные расы планеты (включая транклюкатора) в виде сета 1+2+4+8+16 (31)",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 1] = 31;",
              "                //Если указано, что раса должна соответствовать стартовой планете, то запоминаем её сет",
              "                else if(tstr4 == 'AsStartPlanet') tarr1[i, tint2, 1] = 1 << PlanetRace(cur_planet);",
              "                //Иначе делаем подробный перебор доступных для планеты рас через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 1] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        tint1 = GetValueFromScript('', tstr5);",
              "                        //Запоминаем сет полученного типа",
              "                        tarr1[i, tint2, 1] = tarr1[i, tint2, 1] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Заносим условие владельца целевой планеты (всего 8)",
              "                tstr4 = CT(tstr3 + 'TargetPlanetOwner');",
              "                //Если подходит любой, то записываем всех возможных владельцев планет в виде сета 1+2+4+8+16+128 (159), исключая доминаторские и незаселёнки",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 2] = 159;",
              "                //Если указано, что владелец должен соответствовать стартовой планете, то запоминаем её сет",
              "                else if(tstr4 == 'AsStartPlanet') tarr1[i, tint2, 2] = 1 << PlanetOwner(cur_planet);",
              "                //Иначе делаем подробный перебор значений через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 2] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        tint1 = GetValueFromScript('', tstr5);",
              "                        //Запоминаем сет",
              "                        tarr1[i, tint2, 2] = tarr1[i, tint2, 2] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Заносим условия удалённости целевой системы с планетой доставки в парсеках",
              "                tarr1[i, tint2, 3] = 0 + CT(tstr3 + 'MinStarParsecRange');",
              "                tarr1[i, tint2, 4] = 0 + CT(tstr3 + 'MaxStarParsecRange');",
              "                if(tarr1[i, tint2, 4] > tint4) tint4 = tarr1[i, tint2, 4];",
              "",
              "                //Заносим условия минимальной и максимальной продолжительности задания (напрямую зависит от удалённости системы)",
              "                tarr1[i, tint2, 5] = 0 + CT(tstr3 + 'MinTime');",
              "                tarr1[i, tint2, 6] = 0 + CT(tstr3 + 'MaxTime');",
              "",
              "                //Запоминаем системное имя предмета, который игроку необходимо будет доставить по заданию",
              "                tarr1[i, tint2, 7] = CT(tstr3 + 'QuestItemName');",
              "",
              "                //Запоминаем расу-производителя доставляемого предмета (если нужно установить напрямую)",
              "                tstr4 = CT(tstr3 + 'QuestItemOwner');",
              "                //Если параметр не менялся, то пропускаем его",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 8] = -1;",
              "                //Если указано, что раса-производитель должна соответствовать стартовой планете, то запоминаем её сет",
              "                else if(tstr4 == 'AsStartPlanet') tarr1[i, tint2, 8] = 1 << PlanetOwner(cur_planet);",
              "                //Иначе делаем подробный перебор значений через запятую",
              "                else",
              "                {",
              "                    //Инициализируем тип ячейки",
              "                    tarr1[i, tint2, 8] = 0;",
              "",
              "                    k = 0;",
              "                    tint1 = 0;",
              "                    tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    while(tstr5 != '')",
              "                    {",
              "                        tint1 = GetValueFromScript('', tstr5);",
              "                        //Запоминаем сет",
              "                        tarr1[i, tint2, 8] = tarr1[i, tint2, 8] + (1 << tint1);",
              "",
              "                        k = k + 1;",
              "                        tstr5 = GetParFromString(tstr4, ',', k, 1);",
              "                    }",
              "                }",
              "",
              "                //Запоминаем стоимость доставляемого предмета (если нужно установить напрямую)",
              "                tstr4 = CT(tstr3 + 'QuestItemCost');",
              "                //Если параметр не менялся, то пропускаем его",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 9] = -1;",
              "                else tarr1[i, tint2, 9] = 0 + tstr4;",
              "",
              "                //Запоминаем вес доставляемого предмета (если нужно установить напрямую)",
              "                tstr4 = CT(tstr3 + 'QuestItemSize');",
              "                //Если параметр не менялся, то пропускаем его",
              "                if(tstr4 == '' || tstr4 == 'Any') tarr1[i, tint2, 10] = -1;",
              "                else tarr1[i, tint2, 10] = 0 + tstr4;",
              "",
              "                //В последнюю ячейку запоминаем адрес к разделу задания в Lang",
              "                tarr1[i, tint2, 11] = tstr3;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Запоминаем итоговое число доступных заданий данного типа",
              "    tarr1[i, 0, 0] = tint2;",
              "}",
              "",
              "//Начинаем искать в Галактике корабли и планеты, подходящие для записанных в массив заданий",
              "//Сюда заносим номера всех подходящих для выдачи заданий (их адрес в массиве)",
              "tstr6 = '';",
              "//Общий перебор всех систем (начиная с ближайших от системы игрока)",
              "for(k = 1; k < GalaxyStars(); k = k + 1)",
              "{",
              "    cur_star = StarNearbyStars(tdwd1, k);",
              "    //Убеждаемся, что система в данный момент не находится под атакой",
              "    if(StarBattle(cur_star)) continue;",
              "    //Пропускаем закрытые сектора и тайный пиратский сектор",
              "    tdwd3 = StarToCon(cur_star);",
              "    if(!SectorVisible(tdwd3)) continue;",
              "    if(tdwd3 == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "    //Перебор всех 3-х типов заданий",
              "    for(i = 0; i <= 2; i = i + 1)",
              "    {",
              "        //Перебор всех доступных заданий каждого типа",
              "        for(j = 1; j <= tarr1[i, 0, 0]; j = j + 1)",
              "        {",
              "            //Структура записанного в строке задания: i*j*NNN,i*j*NNN...",
              "            //i == номер типа задания",
              "            //j == номер самого задания",
              "            //NNN == адрес (в памяти) корабля/планеты, которые были подобраны для данного задания",
              "            //Если ранее это задание уже было занесено в список выдачи, то пропускаем его лишние переборы",
              "            if(~findsubstr(tstr6, '' + i + '*' + j + '*')) continue;",
              "",
              "            //Если ищем в системе подходящие корабли",
              "            if(i < 2)",
              "            {",
              "                //Если владелец целевой системы не совпадает с условием задания",
              "                if(!(tarr1[i, j, 0] & (1 << StarOwner(cur_star)))) continue;",
              "                if(StarCustomFaction(cur_star) != '') continue;",
              "",
              "                tint1 = round(sqrt(Dist2Star(cur_star, tdwd1)));",
              "                //Если система ближе минимального диапазона парсек для данного задания",
              "                if(tint1 < tarr1[i, j, 6]) continue;",
              "                //Если система дальше максимального диапазона парсек для данного задания",
              "                if(tint1 > tarr1[i, j, 7])",
              "                {",
              "                    if(tint1 > tint4)",
              "                    {",
              "                        tint4 = 0;",
              "                        break;",
              "                    }",
              "                    continue;",
              "                }",
              "",
              "                //Начинаем перебор кораблей",
              "                for(m = 0; m < StarShips(cur_star); m = m + 1)",
              "                {",
              "                    cur_ship = StarShips(cur_star, m);",
              "",
              "                    //Пропускаем все скриптовые и корабли с OrderLock",
              "                    if(ShipInScript(cur_ship)) continue;",
              "                    //Пропускаем корабли, которые прямо сейчас сидят в тюрьме",
              "                    if(ShipInPrison(cur_ship)) continue;",
              "                    //Если корабль слишком сильно покоцан",
              "                    if(HullDamage(cur_ship) > 33) continue;",
              "                    //Если числовой тип корабля не совпадает с условием задания",
              "                    if(!(tarr1[i, j, 1] & (1 << ShipTypeN(cur_ship)))) continue;",
              "                    //Если подтип корабля не совпадает с условием задания",
              "                    if(!(tarr1[i, j, 2] & (1 << ShipSubType(cur_ship)))) continue;",
              "                    //Если владелец корабля не совпадает с условием задания",
              "                    if(!(tarr1[i, j, 5] & (1 << ShipOwner(cur_ship)))) continue;",
              "                    //Если раса пилота корабля не совпадает с условием задания",
              "                    if(!(tarr1[i, j, 4] & (1 << ShipPilotRace(cur_ship)))) continue;",
              "                    //Перебираем кастомные строчные типы корабля из условия и сверяем их с типом текущего корабля",
              "                    tstr4 = tarr1[i, j, 3];",
              "                    //Проверка на то, что заданию подходит корабль с любым строчным типом",
              "                    if(tstr4 != '' && tstr4 != 'Any')",
              "                    {",
              "                        n = 0;",
              "                        tint1 = 0;",
              "                        tstr5 = GetParFromString(tstr4, ',', n, 1);",
              "                        while(tstr5 != '')",
              "                        {",
              "                            //Нашли соответствие",
              "                            if(ShipType(cur_ship) == tstr5)",
              "                            {",
              "                                tint1 = 1;",
              "                                break;",
              "                            }",
              "",
              "                            n = n + 1;",
              "                            tstr5 = GetParFromString(tstr4, ',', n, 1);",
              "                        }",
              "",
              "                        if(!tint1) continue;",
              "                    }",
              "",
              "                    //Если корабль подошёл по всем условиям задания, то добавляем это задание в список возможной выдачи",
              "                    tstr6 = tstr6 + ',' + i + '*' + j + '*' + cur_ship + '*' + tarr1[i, j, 11];",
              "                    break;",
              "                }",
              "            }",
              "            //Если ищем планеты",
              "            else",
              "            {",
              "                //Если владелец системы не совпадает с условием задания",
              "                if(!((1 << StarOwner(cur_star)) & tarr1[i, j, 0])) continue;",
              "                if(StarCustomFaction(cur_star) != '') continue;",
              "",
              "                tint1 = round(sqrt(Dist2Star(cur_star, tdwd1)));",
              "                //Если система ближе минимального диапазона парсек для данного задания",
              "                if(tint1 < tarr1[i, j, 3]) continue;",
              "                //Если система дальше максимального диапазона парсек для данного задания",
              "                if(tint1 > tarr1[i, j, 4])",
              "                {",
              "                    if(tint1 > tint4)",
              "                    {",
              "                        tint4 = 0;",
              "                        break;",
              "                    }",
              "                    continue;",
              "                }",
              "",
              "                //Начинаем перебор планет",
              "                for(m = 0; m < StarPlanets(cur_star); m = m + 1)",
              "                {",
              "                    tdwd2 = StarPlanets(cur_star, m);",
              "                    //Если владелец планеты не совпадает с условием задания",
              "                    if(!(tarr1[i, j, 2] & (1 << PlanetOwner(tdwd2)))) continue;",
              "                    //Если раса планеты не совпадает с условием задания",
              "                    if(!(tarr1[i, j, 1] & (1 << PlanetRace(tdwd2)))) continue;",
              "",
              "                    //Если планета подошла по всем условиям задания, то добавляем это задание в список возможной выдачи",
              "                    tstr6 = tstr6 + ',' + i + '*' + j + '*' + tdwd2 + '*' + tarr1[i, j, 11];",
              "                    break;",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если перебор систем уже превысил максимально допустимую дистанцию для всех заданий в списке,",
              "    //то дальнейший перебор систем будет бессмысленным, поэтому прерываем его",
              "    if(!tint4) break;",
              "}",
              "",
              "//Выбираем задание для выдачи игроку",
              "if(ParsCountFromString(tstr6, ','))",
              "{",
              "    tstr6 = GetParFromString(tstr6, ',', Rnd(1, ParsCountFromString(tstr6, ',') - 1, sqr(Id(cur_planet) + CurTurn() + 21)), 0);",
              "",
              "    i = GetParFromString(tstr6, '*', 0, 0);",
              "    j = GetParFromString(tstr6, '*', 1, 0);",
              "    //Цель задания, корабль или планета",
              "    tdwd1 = GetParFromString(tstr6, '*', 2, 0);",
              "    //Путь к разделу задания в Lang",
              "    tstr5 = GetParFromString(tstr6, '*', 3, 0);",
              "    tstr3 = 'ERROR!';",
              "    if(ObjectType(tdwd1) == 5)",
              "    {",
              "        tdwd2 = ShipStar(tdwd1);",
              "        tstr3 = ShipName(tdwd1);",
              "",
              "        //Считаем время, выделенное на выполнение задания",
              "        tint4 = CurTurn() + PortionInDiapason(round(sqrt(Dist2Star(ShipStar(Player()), tdwd2))), tarr1[i, j, 6], tarr1[i, j, 7], tarr1[i, j, 8], tarr1[i, j, 9]);",
              "    }",
              "    else",
              "    {",
              "        tdwd2 = PlanetToStar(tdwd1);",
              "        //Считаем время, выделенное на выполнение задания",
              "        tint4 = CurTurn() + PortionInDiapason(round(sqrt(Dist2Star(ShipStar(Player()), tdwd2))), tarr1[i, j, 3], tarr1[i, j, 4], tarr1[i, j, 5], tarr1[i, j, 6]);",
              "",
              "        //Создаём и переносим в хранилище квестовый предмет для доставки",
              "        cur_item = CreateQuestItem(tarr1[i, j, 7]);",
              "        if(~tarr1[i, j, 8])",
              "        {",
              "            tint2 = -1;",
              "            while(!(tarr1[i, j, 8] & (1 << tint2))) tint2 = RndObject(Maloc, PirateClan, tdwd2);",
              "            ItemOwner(cur_item, tint2);",
              "        }",
              "        if(~tarr1[i, j, 9]) ItemCost(cur_item, tarr1[i, j, 9]);",
              "        if(~tarr1[i, j, 10]) ItemSize(cur_item, tarr1[i, j, 10]);",
              "        PutItemInVault('BuildOwnBase_QuestItem', cur_item);",
              "    }",
              "",
              "    tstr4 = GameDateTxtByTurn(tint4);",
              "    tstr1 = '</color>' + Format(CT(tstr5 + 'QuestIntro'), '<StartPlanet'+'>', Name(cur_planet), '<TargetShip'+'>', tstr3, '<TargetShipFull'+'>', Name(tdwd1), '<TargetPlanet'+'>', Name(tdwd1), '<TargetStar'+'>', Name(tdwd2), '<EndDate'+'>', tstr4, '0,50,200');",
              "    tstr2 = '</color>' + CT(tstr5 + 'QuestTakeYesP');",
              "    tstr3 = '</color>' + CT(tstr5 + 'QuestTakeNoP');",
              "",
              "    tint1 = 1;",
              "}",
              "else",
              "{",
              "    //Если планета коалиционная",
              "    if(check <= 4)",
              "    {",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalQuestNo');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalQuestNoP');",
              "    }",
              "    //Если планета пиратская",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirQuestNo');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirQuestNoP');",
              "    }",
              "",
              "    tint1 = 0;",
              "}",
              "",
              "//Возвращаем временный массив в его исходное состояние",
              "free(tarr1);",
              "tarr1 = newarray(1);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  81,
          "#":  92,
          "Total.Lines":  32,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если планета коалиционная",
              "if(check <= 4)",
              "{",
              "    //Если попытка убеждения успешна",
              "    if(Rnd(1, 100, sqr(Id(cur_planet) + 1010)) <= tint2)",
              "    {",
              "        tint2 = 1;",
              "        //Обновляем сет статуса данной планеты",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "        //Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "        ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "        //Отношение к игроку возрастает до отличного",
              "        RelationToRanger(cur_planet, Player(), 100);",
              "",
              "        tstr1 = '</color>' + Format(CT(dialog_path + 'PlanetGovCoalPersuasionSuccess'), '<Cost'+'>', cost);",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalPersuasionSuccessP');",
              "    }",
              "    //Если попытка убеждения не удалась",
              "    else",
              "    {",
              "        tint2 = 0;",
              "        //Обновляем сет статуса данной планеты (блокируем опцию убеждения)",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (8 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "        tstr1 = '</color>' + Format(CT(dialog_path + 'PlanetGovCoalPersuasionFail'), '<Cost'+'>', cost);",
              "    }",
              "}",
              "//Если планета пиратская",
              "else",
              "{}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  83,
          "#":  93,
          "Total.Lines":  122,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если планета коалиционная",
              "if(check <= 4)",
              "{",
              "    //Отношение к игроку положительное",
              "    if(RelationToRanger(cur_planet, Player()) >= 60)",
              "    {",
              "        //Если попытка запугивания успешна",
              "        if(Rnd(1, 100, sqr(Id(cur_planet) + 2150)) <= tint3)",
              "        {",
              "            tint3 = -1;",
              "            //Обновляем сет статуса данной планеты",
              "            tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "            ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "            //Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "            ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "            //Отношение к игроку падает до минимального не враждебного",
              "            RelationToRanger(cur_planet, Player(), 10);",
              "",
              "            tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatGoodSuccess');",
              "            tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatSuccessP');",
              "        }",
              "        else",
              "        {",
              "            //Снижаем шанс запугать для возможной повторной попытки игрока",
              "            tint3 = tint3 / 2;",
              "            cost = 0;",
              "            //Обновляем сет статуса данной планеты (блокируем опцию угрозы)",
              "            tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "            ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (16 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "            tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSure');",
              "            tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureYesP');",
              "            tstr3 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureNoP');",
              "        }",
              "    }",
              "    //Отношение к игроку отрицательное",
              "    else",
              "    {",
              "        //Если попытка запугивания успешна",
              "        if(Rnd(1, 100, sqr(Id(cur_planet) + 1445)) <= tint3)",
              "        {",
              "            tint3 = -1;",
              "            //Обновляем сет статуса данной планеты",
              "            tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "            ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "            //Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "            ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "            //Отношение к игроку падает до минимального не враждебного",
              "            RelationToRanger(cur_planet, Player(), 10);",
              "",
              "            tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatBadSuccess');",
              "            tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatSuccessP');",
              "        }",
              "        else",
              "        {",
              "            //Маркер о запирании игрока в тюрьму",
              "            tint3 = -2;",
              "            GotoGov(2);",
              "            //Обновляем сет статуса данной планеты (блокируем опцию угрозы)",
              "            tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "            ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (16 + GetParFromString(tstr1, ',', num, 0))));",
              "            //Отношение к игроку падает до минимального враждебного",
              "            //RelationToRanger(cur_planet, Player(), 0);",
              "",
              "            tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatFail');",
              "            tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatFailP');",
              "        }",
              "    }",
              "}",
              "//Если планета пиратская",
              "else",
              "{",
              "    //Если попытка запугивания успешна",
              "    if(Rnd(1, 100, sqr(Id(cur_planet) + 1950)) <= tint3 / 3)",
              "    {",
              "        tint3 = -1;",
              "        //Обновляем сет статуса данной планеты",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "        //Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "        ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "        //Отношение к игроку падает до минимального не враждебного",
              "        if(check <= 4)",
              "        {",
              "            RelationToRanger(cur_planet, Player(), 10);",
              "        }",
              "        else",
              "        {",
              "            RelationToRanger(PlanetPirateClan(), Player(), RelationToRanger(PlanetPirateClan(), Player()) - 25);",
              "            if(RelationToRanger(PlanetPirateClan(), Player()) < 10) RelationToRanger(PlanetPirateClan(), Player(), 10);",
              "        }",
              "",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatSuccess');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatSuccessP');",
              "    }",
              "    else if(Rnd(1, 100, sqr(Id(cur_planet) + 1950)) <= tint3)",
              "    {",
              "        //Снижаем шанс запугать для возможной повторной попытки игрока",
              "        tint3 = round(1.0 * tint3 / 7.5);",
              "        cost = cost / 2;",
              "        //Обновляем сет статуса данной планеты (блокируем опцию угрозы)",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (16 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "        tstr1 = '</color>' + Format(CT(dialog_path + 'PlanetGovPirThreatHaHa'), '<Cost'+'>', cost);",
              "        tstr4 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatHaHaP1');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatHaHaP2');",
              "        tstr3 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatHaHaP3');",
              "    }",
              "    else",
              "    {",
              "        //Маркер об убийстве игрока",
              "        tint3 = -2;",
              "        GotoGov(2);",
              "        //Обновляем сет статуса данной планеты (блокируем опцию угрозы)",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (16 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatFail');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatDead');",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  20,
          "Parent":  85,
          "#":  94,
          "Total.Lines":  15,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если планета коалиционная",
              "if(check <= 4)",
              "{",
              "    tstr1 = '</color>' + Format(CT(dialog_path + 'PlanetGovCoalBribeCost'), '<Cost'+'>', cost);",
              "    tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalBribeYes');",
              "    tstr3 = '</color>' + CT(dialog_path + 'PlanetGovCoalBribeNo');",
              "    tstr4 = '</color>' + CT(dialog_path + 'PlanetGovCoalBribeNoOut');",
              "}",
              "//Если планета пиратская",
              "else",
              "{",
              "    tstr1 = '</color>' + Format(CT(dialog_path + 'PlanetGovPirBribeCost'), '<Cost'+'>', cost);",
              "    tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirBribeYes');",
              "    tstr3 = '</color>' + CT(dialog_path + 'PlanetGovPirBribeNo');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -90,
          "Pos.y":  80,
          "Parent":  -1,
          "#":  106,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обновляем сет статуса данной планеты",
              "tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "",
              "//Списываем деньги за взятку",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  121,
          "#":  122,
          "Total.Lines":  15,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Провал запугивания",
              "//Если планета коалиционная (игрока сажают в тюрьму)",
              "if(check <= 4)",
              "{",
              "    GotoGov(0);",
              "    StartTextQuest('Prison', '', '');",
              "    FormChange('Planet');",
              "}",
              "//Если планета пиратская (игрока просто убивают)",
              "else",
              "{",
              "    GotoGov(0);",
              "    //CustomLose(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.PlanetGovPirThreatEndGame'));",
              "    CustomLose(CT('FormGameEnd.Loss'));",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -40,
          "Parent":  10,
          "#":  124,
          "Total.Lines":  69,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обработчик победы/провала скриптового квеста тюрьмы",
              "//PrisonQuestCheck == -1 - игрок совершил побег, отношение с планетой будет испорчено до минимального враждебного",
              "//PrisonQuestCheck ==  0 - нейтральное значение",
              "//PrisonQuestCheck ==  1 - игрок отсидел положенный срок, переводим в правительство и выдаём особую реплику",
              "",
              "if(GQuestStatus == 2)",
              "{",
              "    tdwd1 = GetShipPlanet(Player());",
              "",
              "    if(RelationToRanger(tdwd1, Player()) < 40) RelationToRanger(tdwd1, Player(), 40);",
              "    PrisonQuestCheck = 1;",
              "    GotoGov(2);",
              "",
              "    if(ItemIn(ApprovalDocuments, Player()))",
              "    {",
              "        //Если игрок отбывал наказание за попытку повторного запугивания, снимаем маркер, чтобы он не попадал в тюрьму повторно",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 2);",
              "        for(i = 0; i < ParsCountFromString(tstr1, ','); i = i + 1)",
              "        {",
              "            //Если нашли планету, проверяем, получил ли уже игрок с неё разрешение",
              "            if(tdwd1 == StarPlanets(ShipStar(Player()), GetParFromString(tstr1, ',', i, 0)))",
              "            {",
              "                status = GetParFromString(ScriptItemTextData(ApprovalDocuments, 3), ',', i, 0);",
              "                //Если ещё не получил",
              "                if((status & 32))",
              "                {",
              "                    status = status - 32;",
              "                    ScriptItemTextData(ApprovalDocuments, 3, status);",
              "                }",
              "                break;",
              "            }",
              "        }",
              "",
              "        status = 0;",
              "    }",
              "",
              "    exit;",
              "}",
              "else if(GQuestStatus == 3)",
              "{",
              "    PrisonQuestCheck = -1;",
              "    cur_planet = GetShipPlanet(Player());",
              "",
              "    if(ItemIn(ApprovalDocuments, Player()))",
              "    {",
              "        //Если игрок отбывал наказание за попытку повторного запугивания, снимаем маркер, чтобы он не попадал в тюрьму повторно",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 2);",
              "        for(i = 0; i < ParsCountFromString(tstr1, ','); i = i + 1)",
              "        {",
              "            //Если нашли планету, проверяем, получил ли уже игрок с неё разрешение",
              "            if(cur_planet == StarPlanets(ShipStar(Player()), GetParFromString(tstr1, ',', i, 0)))",
              "            {",
              "                status = GetParFromString(ScriptItemTextData(ApprovalDocuments, 3), ',', i, 0);",
              "                //Если ещё не получил",
              "                if((status & 32))",
              "                {",
              "                    status = status - 32;",
              "                    ScriptItemTextData(ApprovalDocuments, 3, status);",
              "                }",
              "                break;",
              "            }",
              "        }",
              "",
              "        status = 0;",
              "    }",
              "",
              "    ExtremalTakeOff();",
              "    exit;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -430,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  126,
          "Total.Lines":  6,
          "Code.Type":  "Turn",
          "Code":          
          [
              "SkipGreeting();",
              "",
              "PrisonQuestCheck = 0;",
              "GotoGov(0);",
              "",
              "tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatOutOfPrison');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -110,
          "Pos.y":  80,
          "Parent":  -1,
          "#":  133,
          "Total.Lines":  6,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Отношение к игроку снижается, но не может стать враждебным (только на коалиционных планетах)",
              "if(check <= 4)",
              "{",
              "    RelationToRanger(cur_planet, Player(), RelationToRanger(cur_planet, Player()) - 30);",
              "    if(RelationToRanger(cur_planet, Player()) < 10) RelationToRanger(cur_planet, Player(), 10);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -130,
          "Pos.y":  150,
          "Parent":  -1,
          "#":  134,
          "Total.Lines":  72,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если планета коалиционная",
              "if(check <= 4)",
              "{",
              "    //Если попытка повторного запугивания успешна",
              "    if(Rnd(1, 100, sqr(Id(cur_planet) + 831)) <= tint3)",
              "    {",
              "        tint3 = -1;",
              "        //Обновляем сет статуса данной планеты",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "        //Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "        ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "        //Отношение к игроку падает до минимального не враждебного",
              "        RelationToRanger(cur_planet, Player(), 10);",
              "",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureSuccess');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureSuccessP');",
              "    }",
              "    else",
              "    {",
              "        //Маркер о запирании игрока в тюрьму",
              "        tint3 = -2;",
              "        GotoGov(2);",
              "        //Обновляем сет статуса данной планеты (ставим маркер, что игрок провалил повторное запугивание)",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (32 + GetParFromString(tstr1, ',', num, 0))));",
              "        //Отношение к игроку падает до минимального враждебного",
              "        //RelationToRanger(cur_planet, Player(), 0);",
              "",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureFail');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureFailP');",
              "    }",
              "}",
              "//Если планета пиратская",
              "else",
              "{",
              "    //Если попытка запугивания успешна",
              "    if(Rnd(1, 100, sqr(Id(cur_planet) + 731)) <= tint3 / 3)",
              "    {",
              "        tint3 = -1;",
              "        //Обновляем сет статуса данной планеты",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "        //Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "        ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "        //Отношение к игроку падает до минимального не враждебного",
              "        if(check <= 4)",
              "        {",
              "            RelationToRanger(cur_planet, Player(), 10);",
              "        }",
              "        else",
              "        {",
              "            RelationToRanger(PlanetPirateClan(), Player(), RelationToRanger(PlanetPirateClan(), Player()) - 25);",
              "            if(RelationToRanger(PlanetPirateClan(), Player()) < 10) RelationToRanger(PlanetPirateClan(), Player(), 10);",
              "        }",
              "",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatSuccess');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatSuccessP');",
              "    }",
              "    else",
              "    {",
              "        //Маркер об убийстве игрока",
              "        tint3 = -2;",
              "        GotoGov(2);",
              "        //Обновляем сет статуса данной планеты (ставим маркер, что игрок провалил повторное запугивание)",
              "        tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "        ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (32 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatFail');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatDead');",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -180,
          "Pos.y":  130,
          "Parent":  -1,
          "#":  141,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обновляем сет статуса данной планеты",
              "tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "",
              "//Списываем деньги за взятку",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -430,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  161,
          "Total.Lines":  34,
          "Code.Type":  "Turn",
          "Code":          
          [
              "i = GetParFromString(tstr6, '*', 0, 0);",
              "j = GetParFromString(tstr6, '*', 1, 0);",
              "//Объект квеста, корабль/планета",
              "tdwd1 = GetParFromString(tstr6, '*', 2, 0);",
              "",
              "//Меняем цвет выделения в брифинге квеста для подстановки в уведомление",
              "tstr1 = Format(tstr1, '<color=0,50,200' + '>', '<color=255,240,100' + '>', '');",
              "",
              "//Если выпал квест с уничтожением корабля",
              "if(!i)",
              "{",
              "    AddPlanetQuest(1, cur_planet, num, tdwd1, tint4, tstr1, CT(tstr5 + 'QuestId'), tstr5, '');",
              "    //Заносим целевой корабль в группу на время выполнения квеста",
              "    ShipJoin(PlanetQuestsShips, tdwd1);",
              "    //Таймер для автоматического вывода корабля из скрипта по истечении времени квеста",
              "    SetData(tint4, 0, tdwd1);",
              "}",
              "//Если выпал квест с защитой корабля",
              "else if(i == 1)",
              "{",
              "    AddPlanetQuest(2, cur_planet, num, tdwd1, tint4, tstr1, CT(tstr5 + 'QuestId'), tstr5, '');",
              "    //Заносим целевой корабль в группу на время выполнения квеста",
              "    ShipJoin(PlanetQuestsShips, tdwd1);",
              "    //Таймер для автоматического вывода корабля из скрипта по истечении времени квеста",
              "    SetData(tint4, 0, tdwd1);",
              "}",
              "//Если выпал квест с доставкой",
              "else",
              "{",
              "    AddPlanetQuest(3, cur_planet, num, tdwd1, tint4, tstr1, CT(tstr5 + 'QuestId'), tstr5, 'BuildOwnBase_QuestItem');",
              "}",
              "",
              "//Запоминаем, что игрок взял неуниверсальный одноразовый квест (повторно в этой партии он выдаваться не будет)",
              "if(findsubstr(CT(tstr5 + 'QuestId'), 'Universal') == -1) GBuildOwnBase_QuestsGiven = GBuildOwnBase_QuestsGiven + '*' + CT(tstr5 + 'QuestId');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -350,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  166,
          "Total.Lines":  39,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обновляем сет статуса данной планеты",
              "tstr1 = ScriptItemTextData(ApprovalDocuments, 3);",
              "ScriptItemTextData(ApprovalDocuments, 3, SetParFromString(tstr1, ',', num, '' + (64 + GetParFromString(tstr1, ',', num, 0))));",
              "RelationToRanger(cur_planet, Player(), 100);",
              "",
              "//Ищем нужный квест в массиве",
              "for(i = 1; i < ArrayDim(BuildOwnBase_QuestsArray); i = i + 1)",
              "{",
              "    if(num == BuildOwnBase_QuestsArray[i, 2])",
              "    {",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.FromPlanet'), '<Planet'+'>', Name(cur_planet), '<System'+'>', Name(PlanetToStar(cur_planet)), '255,240,100');",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + BuildOwnBase_QuestsArray[i, 7];",
              "        Ether(4, BuildOwnBase_QuestsArray[i, 1], tstr1);",
              "        //Запоминаем адрес раздела данного квеста в Lang",
              "        tstr1 = BuildOwnBase_QuestsArray[i, 6];",
              "",
              "        //Удаляем выполненный квест из массива",
              "        free(BuildOwnBase_QuestsArray[i]);",
              "        ArrayDelete(BuildOwnBase_QuestsArray, i);",
              "        break;",
              "    }",
              "}",
              "",
              "//Улучшаем отношения с планетой-заказчиком",
              "if(check <= 4)",
              "{",
              "    RelationToRanger(cur_planet, Player(), 100);",
              "}",
              "else",
              "{",
              "    RelationToRanger(PlanetPirateClan(), Player(), RelationToRanger(PlanetPirateClan(), Player()) + 25);",
              "}",
              "",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "",
              "tstr2 = '</color>' + CT(tstr1 + 'QuestCompleteP');",
              "tstr1 = '</color>' + CT(tstr1 + 'QuestComplete');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -190,
          "Pos.y":  -130,
          "Parent":  -1,
          "#":  171,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "FreeItem(GetItemFromShip(Player(), cur_item));",
              "tdwd1 = IdToPlanet(BuildOwnBase_QuestsArray[num, 3]);",
              "QuestsStatusChange(num, 2, tdwd1);",
              "tstr1 = '</color>' + Format(CT(tstr4 + 'QuestOutro'), '<StartPlanet'+'>', Name(tdwd1));",
              "tstr2 = '</color>' + CT(tstr4 + 'QuestDeliveredEndP');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  50,
          "Parent":  174,
          "#":  175,
          "Total.Lines":  18,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если игрок находится на ВБ",
              "if(check <= 4)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBAnswer');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBPersuasionP');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeP');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBReturn');",
              "}",
              "//Если игрок находится на доминионе",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomAnswer');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomPersuasionP');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeP');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomReturn');",
              "}",
              "//Маркер для добавления ответа убеждения",
              "tint2 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  178,
          "#":  181,
          "Total.Lines":  17,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Считаем и озвучиваем цену взятки",
              "cost = BribeCalc(-1, cur_ruin, check);",
              "",
              "//Если игрок находится на ВБ",
              "if(check <= 4)",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeAnswer'), '<Cost'+'>', cost);",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeYesP');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeNoP');",
              "}",
              "//Если игрок находится на доминионе",
              "else",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeAnswer'), '<Cost'+'>', cost);",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeYesP');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeNoP');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  180,
          "#":  182,
          "Total.Lines":  44,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Делаем бросок убеждения в зависимости от числа захваченных фракцией систем",
              "tint1 = PersuasionCalc(-1, cur_ruin, check);",
              "if(Rnd(1, 100, sqr(Id(cur_ruin) + 546)) <= tint1) tint1 = 1;",
              "else tint1 = 0;",
              "",
              "//Убеждение успешно",
              "if(tint1)",
              "{",
              "    //Если игрок находится на ВБ",
              "    if(check <= 4)",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBPersuasionYes');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBPersuasionYesP');",
              "    }",
              "    //Если игрок находится на доминионе",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomPersuasionYes');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomPersuasionYesP');",
              "    }",
              "}",
              "//Убеждение провалено",
              "else",
              "{",
              "    //Если игрок находится на ВБ",
              "    if(check <= 4)",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBPersuasionNo');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBPersuasionP');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeP');",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBReturn');",
              "    }",
              "    //Если игрок находится на доминионе",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomPersuasionNo');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomPersuasionP');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeP');",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomReturn');",
              "    }",
              "",
              "    //Маркер для отключения ответа убеждения",
              "    tint2 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  191,
          "#":  194,
          "Total.Lines":  20,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обновляем статус разрешения \"властей\"",
              "ScriptItemData(ApprovalDocuments, 2, 1);",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "",
              "//Если игрок находится на ВБ",
              "if(check <= 4)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeYes');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.WBBribeDoneP');",
              "}",
              "//Если игрок находится на доминионе",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeYes');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.DomBribeDoneP');",
              "}",
              "",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  189,
          "#":  198,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обновляем статус разрешения \"властей\"",
              "ScriptItemData(ApprovalDocuments, 2, 1);",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  152,
          "#":  201,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если время на задание истекло, выводим корабль из группы",
              "if(GetData(0))",
              "{",
              "    if(GetData(0) <= CurTurn()) ShipOut(CurShip);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  204,
          "#":  205,
          "Total.Lines":  23,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Начиная отсюда, приступаем к непосредственному строительству штаба",
              "if(BuildOwnBase_InProcess == 3)",
              "{",
              "    if(BuildOwnBase_Condition == -3) cost = RoundTo(max(3500000, GalaxyMoney(4, 4) * 70), 1000, 0);",
              "    else cost = RoundTo(max(2500000, GalaxyMoney(4, 4) * 50), 1000, 0);",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuild'), '<Cost'+'>', cost);",
              "",
              "    //Маркер, что игрок уже видел первый вариант диалога постройки",
              "    BuildOwnBase_InProcess == 4;",
              "}",
              "else if(BuildOwnBase_InProcess == 4)",
              "{",
              "    if(BuildOwnBase_Condition == -3) cost = RoundTo(max(3500000, GalaxyMoney(4, 4) * 70), 1000, 0);",
              "    else cost = RoundTo(max(2500000, GalaxyMoney(4, 4) * 50), 1000, 0);",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuildAgain'), '<Cost'+'>', cost);",
              "}",
              "else",
              "{",
              "    cost = RoundTo(max(1250000, GalaxyMoney(4, 4) * 25), 1000, 0);",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuildTwice'), '<Cost'+'>', cost);",
              "}",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerBuildPayYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerBuildPayNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  243,
          "#":  213,
          "Total.Lines":  9,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuildName');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovPlayerBuildName');",
              "",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');",
              "",
              "//Игрок будет сидеть на следующем экране, пока не ввёдет нормальное название для организации",
              "GotoGov(2);",
              "BuildOwnBase_ChooseName = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  50,
          "Parent":  217,
          "#":  216,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "SkipGreeting();",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuildName');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovPlayerBuildName');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  215,
          "#":  218,
          "Total.Lines":  176,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если массив с данными штаба ещё не был объявлен, то объявляем его при первой постройке штаба",
              "if(ArrayDim(PlayerHQMainArray) == 1)",
              "{",
              "    DeclarePlayerHQMainArray();",
              "}",
              "",
              "//Игрок будет сидеть на этом экране, пока не ввёдет что-нибудь, отличное от пустой строки",
              "//(если ранее игрок уже оформлял организацию, то повторно вводить название не заставят)",
              "if(PlayerHQMainArray['Main', 'OrganisationName'] == '') PlayerHQMainArray['Main', 'OrganisationName'] = TextBox(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.TextBoxName'), '', 30);",
              "",
              "if(PlayerHQMainArray['Main', 'OrganisationName'] != '')",
              "{",
              "    cur_star = GalaxyStar(ScriptItemTextData(ApprovalDocuments, 1));",
              "    //Игрок строит штаб в первый раз",
              "    if(BuildOwnBase_InProcess < 5)",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuildDone'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '<PlayerOrgStar'+'>', Name(cur_star));",
              "        AddPlanetNews(Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.GalaxyNews'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '<PlayerOrgStar'+'>', Name(cur_star)));",
              "        NewsAdd(Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.GalaxyNews'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '<PlayerOrgStar'+'>', Name(cur_star), '255,240,100'));",
              "    }",
              "    //Игрок уже ранее потерял как минимум один штаб",
              "    else",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerBuildDoneTwice'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '<PlayerOrgStar'+'>', Name(cur_star));",
              "        AddPlanetNews(Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.GalaxyNewsTwice'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '<PlayerOrgStar'+'>', Name(cur_star)));",
              "        NewsAdd(Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.GalaxyNewsTwice'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '<PlayerOrgStar'+'>', Name(cur_star), '255,240,100'));",
              "    }",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerBuildDone');",
              "",
              "    //Чистим всё руками, потому что при удалении предмета оно автоматом не чистится",
              "    ScriptItemData(ApprovalDocuments, 1, 0);",
              "    ScriptItemData(ApprovalDocuments, 2, 0);",
              "    tint2 = ScriptItemData(ApprovalDocuments, 3);",
              "    ScriptItemData(ApprovalDocuments, 3, 0);",
              "    ScriptItemTextData(ApprovalDocuments, 1, '');",
              "    ScriptItemTextData(ApprovalDocuments, 2, '');",
              "    ScriptItemTextData(ApprovalDocuments, 3, '');",
              "    //Удаляем из трюма игрока пакет документов на постройку",
              "    cur_item = ScriptItemToItem(ApprovalDocuments);",
              "    ReleaseItemFromScript(ApprovalDocuments);",
              "    FreeItem(GetItemFromShip(Player(), cur_item));",
              "",
              "    //Обнуляем список выданных планетарных заданий при завершении задания на постройку штаба",
              "    GBuildOwnBase_QuestsGiven = '';",
              "",
              "    //Уведомление о выполнении задания на постройку штаба",
              "    tstr3 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "    tstr3 = tstr3 + \"<br>\" + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Title');",
              "    tstr3 = tstr3 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.QuestMessage.Complete'), '<Star'+'>', '<color=255,240,100>' + Name(cur_star) + '</color>', '');",
              "    Ether(4, 'BuildOwnMCBase', tstr3);",
              "",
              "    //После чего заполняем массив",
              "    PlayerHQMainArray['Main', 'HQStar'] = Id(cur_star) - 1;",
              "    PlayerHQMainArray['Mercs', 'PlanetsCount'] = tint2;",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'] = CT('Script.Mod_ShuMercs.PlayerMercsParams.ReplenishmentFrequency');",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] = CurTurn() + PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'];",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentCount'] = tint2; //Количество рекрутов в месяц зависит непосредственно от числа планет",
              "    PlayerHQMainArray['Mercs', 'MaxFree'] = 8;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = 0;",
              "    //Готовые к вылету",
              "    PlayerHQMainArray['Mercs', 'MaxAtReady'] = 4;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = 3;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 3;",
              "    //Лимит для ударной группы",
              "    PlayerHQMainArray['Mercs', 'MaxStrike'] = int(CT('Script.Mod_ShuMercs.PlayerMercsParams.MaxStrikeGroupShipsCount'));",
              "    //Резервисты",
              "    PlayerHQMainArray['Mercs', 'MaxReserve'] = 10;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = PlayerHQMainArray['Mercs', 'MaxReserve'];",
              "    PlayerHQMainArray['Mercs', 'CurrentReserve'] = 5;",
              "    //Начальный запас бесплатного снаряжения для найма наёмников",
              "    PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = 3;",
              "    //Таймер до следующего обнуления лимита уходов наёмников игрока во фрилансеры",
              "    PlayerHQMainArray['Mercs', 'FreedLimitTimer'] = CurTurn() + 50;",
              "    PlayerHQMainArray['Mercs', 'FreedLimitCount'] = 0;",
              "    //Начальный кредитный баланс организации",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = 100000;",
              "    //Заводим счётчик окончания отсчётного периода по статистике доходов/расходов",
              "    //PlayerHQMainArray['Finance', 'FiscalPeriod'] = CurTurn() + CT('Script.Mod_ShuMercs.PlayerMercsParams.FiscalPeriod');",
              "    //Заводим счётчик до следующих зарплатных отчислений из бюджета организации",
              "    PlayerHQMainArray['Finance', 'SalariesDay'] = CurTurn() + 15;",
              "    //Заводим счётчики до появления первых крупных контрактов",
              "    PlayerHQMainArray['Quests', 'PrivateQuestAppear'] = CurTurn() + Rnd(7, 14);",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, 14, 3);",
              "        PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, 21, 14);",
              "    }",
              "    else",
              "    {",
              "        PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, 21, 14);",
              "        PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, 14, 3);",
              "    }",
              "    //Заводим таймер до появления первого случайного корпуса наёмника в магазине штаба",
              "    PlayerHQMainArray['Armory', 'MercsHullShopTimer'] = CurTurn() + RndObject(62, 93, cur_ruin);",
              "    //Заводим таймер до появления глюонных пушек в магазине штаба, если они уже были изобретены учёными штаба ранее",
              "    if(PlayerHQMainArray['Science', 'GluonGunsDeveloped']) PlayerHQMainArray['Armory', 'GluonGunsShopTimer'] = CurTurn() + RndObject(45, 61, cur_ruin);",
              "",
              "    //Наконец, строим сам штаб",
              "    cur_ruin = BuildCustomRuins(cur_star, 'PlayerMercHQLevel1', 5);",
              "    Chameleon(cur_ruin, 'Ruins.PlayerMercHQLevel1'); //Вешаем хамелеон, чтобы запретить последующие автоматические сбросы графики, как, например, при исцелении святого фанатизма",
              "    ShipType(cur_ruin, 'PlayerMercHQ');",
              "    PlayerHQMainArray['Main', 'HQId'] = Id(cur_ruin);",
              "    //HullSpecial(cur_ruin, FindBonusByNameInCfg('ShuMercsHQ_PlayerMercHQLevel1'));",
              "    //HullType(cur_ruin, 9); //Меняем тип корпуса на акриновый",
              "",
              "    ItemOwner(ShipItems(cur_ruin, 0), Peleng);",
              "    EqCustomFaction(ShipItems(cur_ruin, 0), 'SubFactionPlayerMercsFixedStanding');",
              "    ShipPilotRace(cur_ruin, Peleng);",
              "    if(ShipPilotRace(Player()) != Peleng || ShipFace(Player()) != 1) ShipFace(cur_ruin, 1);",
              "    else ShipFace(cur_ruin, 0);",
              "    SetName(cur_ruin, Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.HQMainName'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], ''));",
              "    ShipJoin(PlayerHQ, cur_ruin);",
              "",
              "    ShipCustomFaction(cur_ruin, 'SubFactionPlayerMercsFixedStanding');",
              "    //Блочим обновление магазина товаров, чистим его, а также сбрасываем все его цены до нуля (хуй там, ниже 1 не сбрасываются никак!)",
              "    NoShopUpdate(cur_ruin, 2);",
              "    for(i = t_Food; i <= t_Narcotics; i = i + 1)",
              "    {",
              "        GoodsAdd(cur_ruin, i, -GoodsAdd(cur_ruin, i, 0));",
              "        GoodsSellPrice(cur_ruin, i, 0);",
              "        GoodsBuyPrice(cur_ruin, i, 0);",
              "    }",
              "",
              "    //Вешаем на штаб инфошку для авторемонта и автоперезарядки ракетных орудий",
              "    ShipAddCustomShipInfo(cur_ruin, 'ShuMercsHQ_PlayerMercHQAutoRepair', 'NoShow', 0, 35);",
              "",
              "    //Формируем список кандидатов в ударную группу на первый месяц",
              "    StrikeGroupCandidatesListUpdate();",
              "",
              "    //Ищем всех \"разбежавшихся\" наёмников игрока с прошлой постройки базы (в теории могли и уцелеть),",
              "    //и возвращаем их обратно",
              "    for(i = 0; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        cur_star = GalaxyStar(i);",
              "",
              "        for(j = 0; j < StarShips(cur_star); j = j + 1)",
              "        {",
              "            cur_ship = StarShips(cur_star, j);",
              "",
              "            if(ShipType(cur_ship) == 'Freelancer')",
              "            {",
              "                //Если нашли кого-то из \"наших\"",
              "                if(!findsubstr(BonusNumInCfg(EqSpecial(ShipItems(cur_ship, 0))), 'ShuMercsHQ_PlayerMerc'))",
              "                {",
              "                    if(ShipInScript(cur_ship, 0)) ShipOut(cur_ship);",
              "",
              "                    ShipType(cur_ship, 'PlayerMerc');",
              "                    SetName(cur_ship, PlayerHQMainArray['Main', 'OrganisationName'] + ' ' + ShipName(cur_ship));",
              "",
              "                    //Число активных \"гулящих\" наёмников игрока",
              "                    ShipJoin(PlayerMercsFree, cur_ship);",
              "                    ShipCustomFaction(cur_ship, 'SubFactionPlayerMercsFixedStanding');",
              "                    //Выставляем маркер, что наёмнику пришло время вернуться в штаб",
              "                    SetData(CurTurn(), 3, cur_ship);",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    //Производим стартовый спавн трёх \"гулящих\" наёмников, если их лимит ещё не превышен",
              "    //(вместо этого сейчас происходит стартовое пополнение наймников, готовых к бою на базе)",
              "    if(0)//GroupCount(PlayerMercsFree) < PlayerHQMainArray['Mercs', 'CurrentMaxFree'])",
              "    {",
              "        if(PlayerHQMainArray['Mercs', 'CurrentMaxFree'] - GroupCount(PlayerMercsFree) >= 3) tint1 = 3;",
              "        else tint1 = PlayerHQMainArray['Mercs', 'CurrentMaxFree'] - GroupCount(PlayerMercsFree);",
              "",
              "        SpawnPlayerMerc(NearCivilPlanet(cur_ruin), cur_ruin, t_Ranger, tint1);",
              "    }",
              "",
              "    //Штаб успешно построен, выставляем соответствующий маркер",
              "    BuildOwnBase_InProcess = 6;",
              "    BasesSuccessfullyBuiltCount = BasesSuccessfullyBuiltCount + 1;",
              "",
              "    GotoGov(0);",
              "    BuildOwnBase_ChooseName = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  223,
          "#":  224,
          "Total.Lines":  17,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Обновляем статус разрешения \"властей\"",
              "ScriptItemData(ApprovalDocuments, 2, 1);",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(ScriptItemToItem(ApprovalDocuments));",
              "",
              "//Если игрок находится на ЦР",
              "if(check <= 4)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.RCAnswer');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.RCDoneP');",
              "}",
              "//Если игрок находится на ПБ",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.PBAnswer');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.PBDoneP');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  231,
          "#":  235,
          "Total.Lines":  166,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные наёмника в группе PlayerMercsFree:",
              "//Data0 == остаток времени выполнения текущего задания (если выбрано задание на охрану)",
              "//      == если задание не взято / уже выполнено, то записываем сюда же ход его завершения",
              "//Data1 == Id корабля-цели (если выбрано задание на охрану)",
              "//      == Id планеты-цели (если выбрано задание на доставку)",
              "//      == Id корабля, указанного игроком для атаки (если наёмник в стейте OrderAttackState)",
              "//Data2 == Id доставляемого предмета (если выбрано задание на доставку)",
              "//Data3 == таймер (CurTurn() + N) до необходимости возврата наёмника в штаб (если меньше нуля, то это также маркер о возвращении в штаб без добытого заработка)",
              "",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "dword cur_item; //Потребуется в следующем блоке Op",
              "",
              "//Вручную корректируем характер наёмника",
              "ShipStatus(CurShip, 0, 15); //Торговец",
              "ShipStatus(CurShip, 1, 50); //Пират",
              "ShipStatus(CurShip, 2, 35); //Воин",
              "",
              "//Не трогаем корабль, пока тот находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "OrderLock(CurShip, 0);",
              "//Если наёмнику пришло время вернуться в штаб на \"дозаправку\" и сдачу заработка",
              "int time_to_go_home = GetData(3);",
              "if(!time_to_go_home) SetData(CurTurn() + RndObject(CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMin'), CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMax'), CurShip), 3); //Чисто на всякий случай",
              "else if(abs(time_to_go_home) <= CurTurn())",
              "{",
              "    //Обновляем таймер возвращения в штаб",
              "    //(временное обновление, чтоб наёмник не летал туда-сюда, нормальный таймер будет задан по прибытии)",
              "    if(~time_to_go_home) SetData(CurTurn() + 500, 3);",
              "    else SetData(-(CurTurn() + 500), 3); //-1 сюда выставляется при сокращении лимита наёмников из штаба",
              "",
              "    ChangeState('ReturningBaseState');",
              "    exit;",
              "}",
              "else",
              "{",
              "    if(ShipInNormalSpace(CurShip))",
              "    {",
              "        //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "        dword target = ShipGetBad(CurShip);",
              "        if(target)",
              "        {",
              "            if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "            {",
              "                int no_tar = NoTargetToShip(target);",
              "                //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "                NoTargetToShip(target, 4);",
              "                TruceBetweenShips(CurShip, target);",
              "                NoTargetToShip(target, no_tar);",
              "                //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "            else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "            {",
              "                no_tar = NoTargetToShip(target);",
              "                //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "                NoTargetToShip(target, 4);",
              "                TruceBetweenShips(CurShip, target);",
              "                NoTargetToShip(target, no_tar);",
              "                //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "        }",
              "",
              "        //Если с момента последнего выполненного кораблём задания прошло не менее N дней",
              "        if(GetData(0) + 31 <= CurTurn())",
              "        {",
              "            if(!ShipIsPartner(CurShip))",
              "            {",
              "                if(!StarBattle(cur_star))",
              "                {",
              "                    //Если корабль не совершает прыжок",
              "                    if(ShipOrder(CurShip) != 3)",
              "                    {",
              "                        //Не ведёт с кем-то бой",
              "                        if(!(ShipOrder(CurShip) == 6 && ShipOrderData1(CurShip) == 1))",
              "                        {",
              "                            //И не драпает от кого-нибудь",
              "                            if(!ShipInFear(CurShip))",
              "                            {",
              "                                //Если наёмник имеет относительно целый корабль",
              "                                if(HullDamage(CurShip) <= 20)",
              "                                {",
              "                                    if(ItemDurability(ShipEqInSlot(CurShip, t_Engine)))",
              "                                    {",
              "                                        //Кидаем шанс на получение нового задания",
              "                                        if(Rnd(1, 100, sqr(Id(CurShip) + CurTurn())) <= 6)",
              "                                        {",
              "                                            //Если выпало задание на охрану",
              "                                            if(Rnd(0, 2, sqr(Id(CurShip) + CurTurn())))",
              "                                            {",
              "                                                ArrayClear(tarr1);",
              "                                                for(int i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "                                                {",
              "                                                    cur_ship = StarShips(cur_star, i);",
              "",
              "                                                    //Допускаем к перебору только транспорты/лайнеры/дипломаты",
              "                                                    if(ShipTypeN(cur_ship) != t_Transport) continue;",
              "                                                    //Пропускаем корабли в скрипте и корабли неподходящей расы",
              "                                                    if(ShipInScript(cur_ship, 0)) continue;",
              "                                                    int own = ShipOwner(cur_ship);",
              "                                                    if(own > Gaal && own != PirateClan) continue;",
              "                                                    //Пропускаем корабли, которые уже охраняют другие наёмники игрока",
              "                                                    //if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_GuardedShip')) continue;",
              "                                                    //Также проверяем, что и потенциальная цель и наёмник, оба относятся друг к другу хорошо",
              "                                                    //(иначе со стороны это может выглядеть очень тупо)",
              "                                                    if(",
              "                                                       RelationToRanger(cur_ship, CurShip) < 10 ||",
              "                                                       ShipGetBad(cur_ship) == CurShip ||",
              "                                                       ShipGetBad(CurShip) == cur_ship",
              "                                                      ) continue;",
              "",
              "                                                    ArrayAdd(tarr1, cur_ship);",
              "                                                }",
              "",
              "                                                //Если нашли в системе хотя бы один подходящий корабль",
              "                                                if(ArrayDim(tarr1) > 1)",
              "                                                {",
              "                                                    cur_ship = tarr1[RndObject(1, ArrayDim(tarr1) - 1, CurShip)];",
              "",
              "                                                    //Выставляем таймер времени охраны корабля и запоминаем саму цель для охраны",
              "                                                    SetData(CurTurn() + RndObject(45, 60, CurShip), 0);",
              "                                                    SetData(Id(cur_ship), 1);",
              "",
              "                                                    //Вешаем инфошку, чтобы \"ловить\" агрессии игрока в отношении охраняемой наёмником цели",
              "                                                    ShipAddCustomShipInfo(cur_ship, 'ShuMercsHQ_GuardedShip', 'NoShow', Id(CurShip));",
              "                                                    //Запрещаем другим рейнджерам (и наёмникам) рэкетировать охраняемую наёмником цель",
              "                                                    NoTargetToShip(cur_ship, 3);",
              "                                                    ChangeState('GuardingQState');",
              "                                                }",
              "                                                exit;",
              "                                            }",
              "                                            //Если выпало задание на доставку",
              "                                            else",
              "                                            {",
              "                                                dword cur_planet = NearCivilPlanet(CurShip);",
              "                                                if(RelationToRanger(cur_planet, CurShip) < 60) RelationToRanger(cur_planet, CurShip, 60);",
              "                                                //Задание будет \"взято\" на ближайшей обитаемой планете",
              "                                                OrderLanding(CurShip, cur_planet);",
              "                                                ChangeState('DeliveryQState');",
              "                                                exit;",
              "                                            }",
              "                                        }",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  232,
          "#":  236,
          "Total.Lines":  112,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQstar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "//Меняем овнера на всякий случай, чтобы при захвате системы со штабом,",
              "//овнер наёмников оставался не враждебным системе",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//На случай, если игрок сократит число наёмников пока те сидят в штабе",
              "if(GetShipRuins(CurShip) == HQ)",
              "{",
              "    ChangeState('LandingBaseState');",
              "    exit;",
              "}",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "//ShipFreeFlight(CurShip, 1);",
              "",
              "if(ShipInNormalSpace(CurShip))",
              "{",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword target = ShipGetBad(CurShip);",
              "    if(target)",
              "    {",
              "        if(ShipType(target) == 'PlayerMerc')",
              "        {",
              "            int no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "    }",
              "",
              "    //Если наёмник ещё не вернулся в систему со штабом, то отправляем его туда",
              "    if(cur_star != HQstar)",
              "    {",
              "        //Однако если в текущей системе наёмника идёт бой, то пока не отрываем его \"от дел\"",
              "        if(!StarBattle(cur_star))",
              "        {",
              "            //Если корабль не совершает прыжок",
              "            if(ShipOrder(CurShip) != 3)",
              "            {",
              "                //Не ведёт с кем-то бой",
              "                if(!(ShipOrder(CurShip) == 6 && ShipOrderData1(CurShip) == 1))",
              "                {",
              "                    //И не драпает от кого-нибудь",
              "                    if(!ShipInFear(CurShip))",
              "                    {",
              "                        if(ItemDurability(ShipEqInSlot(CurShip, t_Engine)))",
              "                        {",
              "                            OrderLock(CurShip, 1);",
              "                            OrderJump(CurShip, HQstar);",
              "                            exit;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Наёмник добрался до системы со штабом",
              "    else",
              "    {",
              "        //GetData(3, HQ) - маркер штаба об атаке системы",
              "        if(!GetData(3, HQ))",
              "        {",
              "            OrderLock(CurShip, 1);",
              "            ChangeState('LandingBaseState');",
              "        }",
              "        //Если наёмник прибыл в систему со штабом, а там бой, то сперва принимаем бой",
              "        else",
              "        {",
              "            //Ставим маркер о необходимости наёмника совершить посадку в штаб после боя",
              "            SetData(-1, 3);",
              "            ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "",
              "            //DefendingBaseState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "            OrderLock(CurShip, 0);",
              "            ShipFreeFlight(CurShip);",
              "            ChangeState('DefendingBaseState');",
              "        }",
              "",
              "        exit;",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  233,
          "#":  237,
          "Total.Lines":  168,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Опосредованно снимаем \"охранную\" инфошку с охраняемой цели",
              "    SetData(0, 1);",
              "",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Чтобы стейт не блочил скриптовые приказы",
              "OrderLock(CurShip, 1);",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "dword cur_item;",
              "//Если срок охраны корабля подошёл к концу",
              "dword cur_ship = IdToShip(GetData(1));",
              "if(int(GetData(0)) <= CurTurn())",
              "{",
              "    //Если задание по охране выполнено успешно",
              "    if(~int(GetData(0)))",
              "    {",
              "        ShipMoney(CurShip, round(1.2 * ShipMoney(CurShip)));",
              "        int free_exp = ShipFreeExp(CurShip);",
              "        int add_exp = round(0.2 * free_exp);",
              "        ShipFreeExp(CurShip, free_exp + add_exp);",
              "        SetShipExpByType(CurShip, GetShipExpByType(CurShip) + add_exp, 0);",
              "    }",
              "    //Задание было прервано игроком, который атаковал охраняемый корабль",
              "    else",
              "    {",
              "        SetData(CurTurn(), 0);",
              "        str tstr1 = Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GuardingQuestOverByPlayer'), '<GuardedShip'+'>', Name(cur_ship), '255,240,100');",
              "        Ether(10, '', Name(CurShip) + \"<br>\" + '<color=0,0,0></color>' + \"<br>\" + tstr1);",
              "    }",
              "",
              "    SetData(0, 1);",
              "",
              "    //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "    OrderLock(CurShip, 0);",
              "    ShipFreeFlight(CurShip);",
              "    ChangeState('FreeEarningState');",
              "    exit;",
              "}",
              "else",
              "{",
              "    //Если охраняемый корабль был уничтожен",
              "    if(!cur_ship)",
              "    {",
              "        SetData(CurTurn(), 0);",
              "        SetData(0, 1);",
              "",
              "        //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "        OrderLock(CurShip, 0);",
              "        ShipFreeFlight(CurShip);",
              "        ChangeState('FreeEarningState');",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        if(ShipInNormalSpace(CurShip))",
              "        {",
              "            //Следим, чтобы наёмник не пытался ограбить охраняемую цель",
              "            if(ShipGetBad(CurShip) == cur_ship) ShipSetBad(CurShip, 0);",
              "            //Следим, чтобы охраняемый корабль не агрился на своего охранника",
              "            RelationToRanger(cur_ship, CurShip, 100);",
              "",
              "            //Если охраняемый корабль сел на планету, отправляем туда же и наёмника",
              "            //(для заправки, ремонта и т.д.)",
              "            dword cur_planet = GetShipPlanet(cur_ship);",
              "            if(cur_planet)",
              "            {",
              "                OrderLanding(CurShip, cur_planet);",
              "                exit;",
              "            }",
              "            //Если охраняемый корабль отправился в другую систему",
              "            if(ShipStar(cur_ship) != cur_star)",
              "            {",
              "                OrderJump(CurShip, ShipStar(cur_ship));",
              "                exit;",
              "            }",
              "            //Если охраняемый корабль ещё только намеревается прыгать",
              "            //else if(ShipOrder(cur_ship) == 3)",
              "            //{",
              "            //    if(!ShipGetBad(cur_ship))",
              "            //    {",
              "            //        if(Dist(cur_ship, CurShip) <= 250)",
              "            //        {",
              "            //            OrderJump(CurShip, ShipOrderObj(cur_ship));",
              "            //            exit;",
              "            //        }",
              "            //    }",
              "            //}",
              "",
              "            dword tdwd3 = ShipGetBad(cur_ship);",
              "            //Если охраняемый корабль на кого-то агрится, то вынуждаем наёмника атаковать ту же цель",
              "            if(ShipGetBad(tdwd3))",
              "            {",
              "                if(tdwd3 != CurShip)",
              "                {",
              "                    //Если на охраняемый корабль напал игрок, завершаем задание наёмника",
              "                    if(tdwd3 != Player())",
              "                    {",
              "                        //Проверяем, чтобы корабль, на который агрится транспорт, находился в этой же системе",
              "                        if(ShipInNormalSpace(tdwd3))",
              "                        {",
              "                            if(ShipStar(tdwd3) == cur_star)",
              "                            {",
              "                                OrderFollowShip(CurShip, tdwd3, 1);",
              "                                ShipSetBad(CurShip, tdwd3);",
              "                                exit;",
              "                            }",
              "                        }",
              "                    }",
              "                    else",
              "                    {",
              "                        SetData(CurTurn(), 0);",
              "                        SetData(0, 1);",
              "                        //Снимаем запрет на рэкет охраняемого корабля",
              "                        NoTargetToShip(cur_ship, 0);",
              "                        //И удаляем с него соответствующую инфошку",
              "                        ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_GuardedShip');",
              "                        tstr1 = Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GuardingQuestOverByPlayer'), '<GuardedShip'+'>', Name(cur_ship), '255,240,100');",
              "                        Ether(10, '', Name(CurShip) + \"<br>\" + '<color=0,0,0></color>' + \"<br>\" + tstr1);",
              "",
              "                        //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "                        OrderLock(CurShip, 0);",
              "                        ShipFreeFlight(CurShip);",
              "                        ChangeState('FreeEarningState');",
              "                        exit;",
              "                    }",
              "                }",
              "                else ShipSetBad(cur_ship, 0);",
              "            }",
              "",
              "            //Иначе наёмник будет просто следовать за охраняемым кораблём",
              "            OrderFollowShip(CurShip, cur_ship, 0);",
              "        }",
              "        else",
              "        {",
              "            //Если охраняемая цель сидит на планете",
              "            cur_planet = GetShipPlanet(cur_ship);",
              "            if(cur_planet)",
              "            {",
              "                //Вынуждаем корабль наёмника выполнять автоматический ремонт и т.д.,",
              "                //пока он сидит на планете с целью",
              "                if(GetShipPlanet(CurShip) == cur_planet)",
              "                {",
              "                    ShipFreeFlight(CurShip);",
              "                    OrderNone(CurShip);",
              "                }",
              "            }",
              "            else if(GetShipPlanet(CurShip)) OrderTakeOff(CurShip);",
              "",
              "            exit;",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  234,
          "#":  238,
          "Total.Lines":  186,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "",
              "dword HQStar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Чтобы стейт не блочил скриптовые приказы",
              "OrderLock(CurShip, 1);",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Если предмет ещё не был подобран наёмником",
              "if(!GetData(2))",
              "{",
              "    dword cur_planet = GetShipPlanet(CurShip);",
              "    //Если наёмник добрался до планеты",
              "    if(cur_planet)",
              "    {",
              "        //Сперва ищем любую ближайшую подходящую систему, которая не захвачена врагом",
              "        ArrayClear(tarr1);",
              "        for(int i = 1; i <= 5; i = i + 1)",
              "        {",
              "            tdwd3 = StarNearbyStars(cur_star, i);",
              "",
              "            //Сразу пропускаем доминаторские системы и системы с кастомной фракцией",
              "            if(StarOwner(tdwd3) == 1) continue;",
              "            if(StarCustomFaction(tdwd3) != '') continue;",
              "            if(StarBattle(tdwd3)) continue;",
              "            //Пропускаем скрытый пиратский сектор",
              "            if(StarToCon(tdwd3) == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            for(int j = 0; j < StarPlanets(tdwd3); j = j + 1)",
              "            {",
              "                dword cur_item = StarPlanets(tdwd3, j);",
              "                if(PlanetOwner(cur_item) == None) continue;",
              "                ArrayAdd(tarr1, cur_item);",
              "            }",
              "",
              "            //Запоминаем случайную обитаемую планету в подходящей системе",
              "            SetData(Id(tarr1[RndObject(1, ArrayDim(tarr1) - 1, CurShip)]), 1);",
              "            //Создаём случайный квестовый юзлес, который добавляем в трюм наёмника и также запоминаем",
              "            cur_item = CreateQuestItem('Usl_' + RndObject(0, 75, CurShip));",
              "            AddItemToShip(CurShip, cur_item);",
              "            NoDropItem(cur_item, 1);",
              "            ArrangeItems(CurShip);",
              "            SetData(Id(cur_item), 2);",
              "",
              "            //Отдаём наёмнику команду на взлёт",
              "            OrderTakeOff(CurShip);",
              "            break;",
              "        }",
              "",
              "        //Если подходящих систем неподалёку не нашли, завершаем взятия задания",
              "        if(!GetData(2))",
              "        {",
              "            SetData(CurTurn(), 0);",
              "",
              "            //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "            OrderLock(CurShip, 0);",
              "            ShipFreeFlight(CurShip);",
              "            ChangeState('FreeEarningState');",
              "            exit;",
              "        }",
              "    }",
              "    else OrderLanding(CurShip, NearCivilPlanet(CurShip));",
              "}",
              "//Если предмет уже находится в трюме",
              "else",
              "{",
              "    //Отправляем наёмника в систему с целевой планетой",
              "    cur_planet = IdToPlanet(GetData(1));",
              "    if(ShipInNormalSpace(CurShip))",
              "    {",
              "        tdwd3 = PlanetToStar(cur_planet);",
              "        if(cur_star == tdwd3)",
              "        {",
              "            //Если целевая система не захвачена",
              "            if(StarOwner(tdwd3) != 1 && StarCustomFaction(tdwd3) == '')",
              "            {",
              "                OrderLanding(CurShip, cur_planet);",
              "            }",
              "            else",
              "            {",
              "                //Обнуляем данные о задании, и возвращаем наёмника в обычный стейт",
              "                SetData(CurTurn(), 0);",
              "                SetData(0, 1);",
              "                cur_item = IdToItem(GetData(2));",
              "                NoDropItem(cur_item, 0);",
              "                SetData(0, 2);",
              "",
              "                //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "                OrderLock(CurShip, 0);",
              "                ShipFreeFlight(CurShip);",
              "                ChangeState('FreeEarningState');",
              "                exit;",
              "            }",
              "        }",
              "        else",
              "        {",
              "            //Если целевая система не захвачена",
              "            if(StarOwner(tdwd3) != 1 && StarCustomFaction(tdwd3) == '')",
              "            {",
              "                OrderJump(CurShip, tdwd3);",
              "            }",
              "            else",
              "            {",
              "                //Обнуляем данные о задании, и возвращаем наёмника в обычный стейт",
              "                SetData(CurTurn(), 0);",
              "                SetData(0, 1);",
              "                cur_item = IdToItem(GetData(2));",
              "                NoDropItem(cur_item, 0);",
              "                SetData(0, 2);",
              "",
              "                //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "                OrderLock(CurShip, 0);",
              "                ShipFreeFlight(CurShip);",
              "                ChangeState('FreeEarningState');",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        //Если наёмник уже сел на нужную планету, то забираем у него предмет и \"завершаем квест\"",
              "        if(GetShipPlanet(CurShip) == cur_planet)",
              "        {",
              "            SetData(CurTurn(), 0);",
              "            SetData(0, 1);",
              "            cur_item = IdToItem(GetData(2));",
              "            FreeItem(GetItemFromShip(CurShip, cur_item));",
              "            SetData(0, 2);",
              "            ShipMoney(CurShip, round(1.4 * ShipMoney(CurShip)));",
              "            int free_exp = ShipFreeExp(CurShip);",
              "            int add_exp = round(0.4 * free_exp);",
              "            ShipFreeExp(CurShip, free_exp + add_exp);",
              "            SetShipExpByType(CurShip, GetShipExpByType(CurShip) + add_exp, 0);",
              "",
              "            //Также у наёмника имеется некоторый шанс получить рандомный артефакт",
              "            if(IsScriptActive('Mod_ExpExplorers'))",
              "            {",
              "                if(!ShipArts(CurShip))",
              "                {",
              "                    //С шансом в 9%",
              "                    if(RndObject(1, 100, CurShip) <= 9)",
              "                    {",
              "                        int art_num;",
              "                        if(IsScriptActive('Mod_ExpArts')) art_num = RndObject(1, ArrayDim(GgiveArtsArray) - 1, CurShip); //+4 дополнительных артефакта из ExpArts",
              "                        else art_num = 27;",
              "",
              "                        //Создаём оригинальный артефакт",
              "                        if(art_num <= 27)",
              "                        {",
              "                            art_num = CreateArt(GgiveArtsArray[art_num], 6);",
              "                            if(ShipFreeSpace(CurShip) >= ItemSize(art_num)) AddItemToShip(CurShip, art_num);",
              "                            else FreeItem(art_num);",
              "                        }",
              "                        //Создаём кастомный артефакт из ExpArts",
              "                        else",
              "                        {",
              "                            art_num = CreateCustomArt(GgiveArtsArray[art_num], CustomArtSizeCalc(int(CT('Artefacts.CustomArtefacts.' + GgiveArtsArray[art_num] + '.Size'))), CustomArtCostCalc(int(CT('Artefacts.CustomArtefacts.' + GgiveArtsArray[art_num] + '.Cost'))), 6);",
              "                            if(ShipFreeSpace(CurShip) >= ItemSize(art_num)) AddItemToShip(CurShip, art_num);",
              "                            else FreeItem(art_num);",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "",
              "            //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "            OrderLock(CurShip, 0);",
              "            ShipFreeFlight(CurShip);",
              "            ChangeState('FreeEarningState');",
              "            exit;",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  239,
          "#":  240,
          "Total.Lines":  58,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Стейт обороны штабной системы базы только для \"гулящих\" наёмников из PlayerMercsFree",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "",
              "OrderLock(CurShip, 0);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//На случай, если наёмник по каким-то причинам не выдал себе приказ на текущий ход сам",
              "if(!ShipOrder(CurShip)) ShipFreeFlight(CurShip);",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "dword target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc')",
              "    {",
              "        int no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "}",
              "",
              "//Бой за систему закончился, возвращаем наёмника в \"норму\"",
              "if(!GetData(3, HQ))",
              "{",
              "    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) + 10000);",
              "",
              "    //Если наёмник попал в стейт боя из стейта ReturningBaseState (-1)",
              "    int tint = GetData(3);",
              "    if(tint == -1) ChangeState('LandingBaseState');",
              "    //Если наёмник попал в стейт боя как обычно, из FreeEarningState",
              "    else ChangeState('FreeEarningState');",
              "    exit;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  228,
          "#":  242,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные штаба в группе PlayerHQ:",
              "//Data0 ==",
              "//Data1 ==",
              "//Data2 ==",
              "//Data3 == маркер о том, была ли атакована система со штабом (атаки Коалиции на пиратов и пиратов на Коалицию игнорируются)",
              "",
              "//Меняем овнера базы на овнера системы при её захвате",
              "dword cur_star = ShipStar(CurShip);",
              "if(!ShipOnSidePirateClan(CurShip))",
              "{",
              "    if(StarOwner(cur_star) == 2) ShipOwner(CurShip, PirateClan);",
              "}",
              "else",
              "{",
              "    if(!StarOwner(cur_star)) ShipOwner(CurShip, ShipPilotRace(CurShip));",
              "}",
              "",
              "//Отношение штаба к игроку всегда должно быть отличным",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  244,
          "#":  245,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  260,
          "#":  247,
          "Total.Lines":  54,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Меняем овнера на всякий случай, чтобы при захвате системы со штабом,",
              "//овнер наёмников оставался не враждебным системе",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Отправляем наёмника защищать штаб, если на систему со штабом неожиданно напали",
              "//GetData(3, HQ) - маркер штаба об атаке системы",
              "if(GetData(3, HQ))",
              "{",
              "    //Маркер базы может обновиться позднее срабатывания данного кода,",
              "    //поэтому делаем дополнительную проверку во избежание Stack overflow",
              "    if(StarBattle(HQStar))",
              "    {",
              "        if(ShipInNormalSpace(CurShip))",
              "        {",
              "            if(cur_star != HQStar)",
              "            {",
              "                //Однако если в текущей системе наёмника идёт бой, то пока не отрываем его \"от дел\"",
              "                if(!StarBattle(cur_star))",
              "                {",
              "                    OrderLock(CurShip, 1);",
              "                    OrderJump(CurShip, HQStar);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                //Обнуляем данные о возможном задании наёмника",
              "                SetData(CurTurn(), 0);",
              "                SetData(0, 1);",
              "                //Если в данный момент наёмник как раз занимался доставкой предмета,",
              "                //то также снимаем запрет на его дроп",
              "                cur_item = IdToItem(GetData(2));",
              "                if(cur_item)",
              "                {",
              "                    if(~FindItemInShip(CurShip, cur_item))",
              "                    {",
              "                        NoDropItem(cur_item, 0);",
              "                    }",
              "                }",
              "                SetData(0, 2);",
              "",
              "                //DefendingBaseState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "                ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                OrderLock(CurShip, 0);",
              "                ShipFreeFlight(CurShip);",
              "                ChangeState('DefendingBaseState');",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//На случай, если \"гуляка\" временно остался без приказа (может случиться, например, при возвращении корабля из стейта OrderAttackState)",
              "if(!ShipOrder(CurShip)) ShipFreeFlight(CurShip);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  248,
          "#":  249,
          "Total.Lines":  331,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(Hit(CurShip, 0))",
              "    {",
              "        if(ShipGroup(CurShip) == PlayerMercsStrike) int strike = 1;",
              "    }",
              "",
              "    if(HQ && strike)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQstar = ShipStar(HQ);",
              "",
              "OrderLock(CurShip, 1);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Наёмник приземлился в штаб",
              "if(GetShipRuins(CurShip) == HQ)",
              "{",
              "    int group = ShipGroup(CurShip);",
              "",
              "    //Если наёмник всё ещё жив, то перезаряжаем его орудия и производим ремонт",
              "    //Перезаряжаем ракетные орудия",
              "    int gluon_gun = 0;",
              "    int check = GetEquipmentStats(ShipItems(CurShip, 0), 1);",
              "    for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "    {",
              "        dword cur_item = ShipEqInSlot(CurShip, t_Weapon1, i);",
              "        if(MissilesToRearm(cur_item)) MissilesToRearm(cur_item, MissilesToRearm(cur_item));",
              "",
              "        if(gluon_gun) continue;",
              "        if(NoDropItem(cur_item)) check = check - 1;",
              "        if(ItemType(cur_item) != t_CustomWeapon) continue;",
              "        if(!findsubstr(CustomWeaponType(cur_item), 'Gluon')) gluon_gun = 1; //Если нашли хоть одну глюонную пушку, то больше выдавать не будем",
              "    }",
              "",
              "    //Если уже были изобретены глюонные пушки",
              "    if(PlayerHQMainArray['Science', 'GluonGunsDeveloped'])",
              "    {",
              "        //Если у этого наёмника ещё нет ни одной, добавляем ему случайную",
              "        //Пропускаем ударную группу, чтобы игрок не мог через них фармить себе глюонные пушки",
              "        if(!gluon_gun)",
              "        {",
              "            if(check) //Если имеются свободные и незанятые неснимаемыми пушками слоты",
              "            {",
              "                if(group != PlayerMercsStrike)",
              "                {",
              "                    if(group != CruisersDefenders)",
              "                    {",
              "                        cur_item = CreateGluonGun(CurShip, -1, max(GTL - RndObject(0, 2, CurShip), 1));",
              "                        AddItemToShip(CurShip, cur_item);",
              "                        NoDropItem(cur_item, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    //Чиним корпус наёмника",
              "    HullHP(CurShip, ItemSize(ShipItems(CurShip, 0)));",
              "",
              "    //Чиним всё оборудование и артефакты наёмника",
              "    if(ShipType(GetShipRuins(CurShip)) == 'PlayerMercHQ_licensed') int fix_special = 1;",
              "    else fix_special = 0;",
              "    for(i = 0; i < ShipItems(CurShip); i = i + 1)",
              "    {",
              "        cur_item = ShipItems(CurShip, i);",
              "        if(!ItemIsInUse(cur_item)) continue;",
              "        tint2 = ItemType(cur_item);",
              "        if(tint2 < t_FuelTanks || tint2 > t_CustomWeapon) continue;",
              "        if(ItemDurability(cur_item) < 100)",
              "        {",
              "            //Чиним всю оборудку, кроме нестандартных орудий, которые чиним, только если штаб уже имеет лицензию",
              "            if(tint2 <= t_DefGenerator) ItemDurability(cur_item, 100);",
              "            else",
              "            {",
              "                if(tint2 >= t_Weapon13 && tint2 <= t_Weapon15)",
              "                {",
              "                    if(fix_special) ItemDurability(cur_item, 100);",
              "                }",
              "                else if(tint2 == t_CustomWeapon)",
              "                {",
              "                    if(GetCustomWeaponData(CustomWeaponType(cur_item), 'Availability') == 'NotSoldAndNodeRepair')",
              "                    {",
              "                        if(fix_special) ItemDurability(cur_item, 100);",
              "                    }",
              "                    else ItemDurability(cur_item, 100);",
              "                }",
              "                else ItemDurability(cur_item, 100);",
              "            }",
              "        }",
              "    }",
              "    //Чиним экипированные арты, но только если штаб уже имеет лицензию",
              "    if(fix_special)",
              "    {",
              "        for(i = 0; i < ShipArts(CurShip); i = i + 1)",
              "        {",
              "            cur_item = ShipArts(CurShip, i);",
              "            if(!ItemIsInUse(cur_item)) continue;",
              "            if(ItemDurability(cur_item) < 100) ItemDurability(cur_item, 100);",
              "        }",
              "    }",
              "",
              "    dword hull = ShipItems(CurShip, 0);",
              "    int hull_check = 1;",
              "    if(group != CruisersDefenders)",
              "    NoDropItem(hull, 0);",
              "",
              "    if(group == PlayerMercsFree || group == PlayerMercsStrike)",
              "    {",
              "        if(group == PlayerMercsStrike)",
              "        {",
              "            int counter = ItemExtraSpecials(hull);",
              "            if(!counter)",
              "            {",
              "                hull_check = 0;",
              "                NoDropItem(hull, 1);",
              "            }",
              "            else for(i = 0; i < counter; i = i + 1)",
              "            {",
              "                if(BonusNumInCfg(ItemExtraSpecials(hull, i)) == 'ShuMercsHQ_StrikeMercOwnItemMark') break;",
              "                if(i == counter - 1)",
              "                {",
              "                    hull_check = 0;",
              "                    NoDropItem(hull, 1);",
              "                }",
              "            }",
              "        }",
              "",
              "        //Если игрок уже построил в штабе верфь, то заменяем корпус/акрин наёмника на особый от организации (если нужно)",
              "        if(PlayerHQMainArray['Shipyard', 'ProductionShipyard'])",
              "        {",
              "            if(hull_check) //Менять корпус, переданный игроком, бот не будет",
              "            {",
              "                if(BonusNumInCfg(EqSpecial(hull)) != 'ShuMercsHQ_PlayerMercSpecialHull')",
              "                {",
              "                    SpecialToEquipment(-1, hull); //Снимаем возможные модификаторы стоимости и размера",
              "                    SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_PlayerMercSpecialHull'), hull);",
              "                    EqCustomFaction(hull, 'SubFactionPlayerMercsFixedStanding');",
              "                    Chameleon(CurShip);",
              "                }",
              "            }",
              "        }",
              "    }",
              "",
              "    //Также проводим небольшую реэкипировку",
              "    ShipRefit(CurShip);",
              "    ShipRefit(CurShip);",
              "    if(hull_check)",
              "    {",
              "        hull = ShipItems(CurShip, 0); //В процессе реэкипировки бот мог заменить себе корпус",
              "        HullSeries(hull, -1);",
              "        NoDropItem(hull, 1);",
              "    }",
              "",
              "    if(RndObject(1, 100, CurShip) <= 33) ShipImproveItems(CurShip, 1);",
              "",
              "    //Излечиваем наёмника от всех болезней, если в штабе уже имеется свой медблок (кроме наркомании и лучевой болезни)",
              "    if(PlayerHQMainArray['Medicine', 'MedicalDepartment'])",
              "    {",
              "        for(i = 1; i <= 12; i = i + 1)",
              "        {",
              "            if(ShipHealthFactorStatus(CurShip, i) > 50)",
              "            {",
              "                ShipHealthFactor(CurShip, i, 0);",
              "                if(RndObject(1, 100, CurShip) <= 66 || i <= 3 || i == 6) ShipHealthFactorStatus(CurShip, i, 0);",
              "                //Имеется шанс, что болезнь не вылечат полностью",
              "                else ShipHealthFactorStatus(CurShip, i, RndObject(1, 15, CurShip));",
              "            }",
              "        }",
              "    }",
              "",
              "    //Вернулись \"гулящие\" наёмники, возвращаём их обратно \"на большак\", либо в резерв",
              "    if(group == PlayerMercsFree)",
              "    {",
              "        //Пополняем баланс организации привезёнными наёмником деньгами (более опытные (старые) наёмники привозят больше)",
              "        if(int(GetData(3)) >= 0) //Если этот наёмник не был направлен обратно в штаб принудительно в результате сокращения штата \"гулящих\" игроком",
              "        {",
              "            int tint = ShipStatistic(CurShip, 11); //Ход рождения корабля",
              "            tint = PortionInDiapason(CurTurn(), tint, tint + 1825, 0, 4);",
              "            tint = round(0.23 * RndObject(7, 14, CurShip) * GalaxyMoney(2, tint) * 5 * (0.70 * PortionInDiapason(PlayerHQMainArray['Main', 'HQLevel'], 1, PlayerHQMainArray['Main', 'HQLevelMax'], 1.1, 2.2))); //1.2 - 2.4",
              "            PlayerHQMainArray['Finance', 'CurrentBalance'] = min(PlayerHQMainArray['Finance', 'CurrentBalance'] + tint, 1000000000);",
              "            //Для отчёта доходности лимит на 1 млрд не ставим, т.к. незачем",
              "            PlayerHQMainArray['Finance', 'StatsInEarnings'] = PlayerHQMainArray['Finance', 'StatsInEarnings'] + tint;",
              "        }",
              "",
              "        //Если число активных \"гулящих\" наёмников превысило лимит",
              "        if(GroupCount(PlayerMercsFree) > PlayerHQMainArray['Mercs', 'CurrentMaxFree'])",
              "        {",
              "            //Сперва пробуем записать этого наёмника в список боеготовых",
              "            if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] < PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] + 1;",
              "                ShipDestroy(CurShip, 1);",
              "            }",
              "            //Если в списке боеготовых мест нет, то пробуем перевести в резерв",
              "            else if(PlayerHQMainArray['Mercs', 'CurrentReserve'] < PlayerHQMainArray['Mercs', 'CurrentMaxReserve'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] + 1;",
              "                PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] + 1;",
              "                ShipDestroy(CurShip, 1);",
              "            }",
              "            else",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] + 1; //Типа сдаёт \"снаряжение\" на склад",
              "                ShipDestroy(CurShip, 1);",
              "            }",
              "",
              "            exit;",
              "        }",
              "",
              "        //Обновляем таймер до следующего возвращения в штаб",
              "        SetData(CurTurn() + RndObject(CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMin'), CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMax'), CurShip), 3);",
              "",
              "        //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "        OrderLock(CurShip, 0);",
              "        ShipFreeFlight(CurShip);",
              "        ChangeState('FreeEarningState');",
              "    }",
              "    //Вернулись наёмники с задания (QuestMercs) или с обороны штабной системы (PlayerMercsDefenders)",
              "    else if(group == QuestMercs || group == PlayerMercsDefenders)",
              "    {",
              "        //Сперва пробуем записать этого наёмника обратно в список боеготовых",
              "        if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] < PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'])//PlayerHQMainArray['Mercs', 'MaxReserve'])",
              "        {",
              "            PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] + 1;",
              "            ShipDestroy(CurShip, 1);",
              "            exit;",
              "        }",
              "        //Если список боеготовых уже заполнен, то проверяем, нет ли свободных мест в резерве",
              "        else if(PlayerHQMainArray['Mercs', 'CurrentReserve'] < PlayerHQMainArray['Mercs', 'CurrentMaxReserve'])",
              "        {",
              "            PlayerHQMainArray['Mercs', 'CurrentReserve'] = PlayerHQMainArray['Mercs', 'CurrentReserve'] + 1;",
              "            PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] + 1; //Типа сдаёт \"снаряжение\" на склад",
              "            ShipDestroy(CurShip, 1);",
              "            exit;",
              "        }",
              "        //Если и резерв уже заполнен, то проверяем, нет ли свободных мест в списке \"гулящих\" наёмников",
              "        else if(GroupCount(PlayerMercsFree) < PlayerHQMainArray['Mercs', 'CurrentMaxFree'])",
              "        {",
              "            //Если есть, то переводим наёмника в их ряды, во избежание лишних трат из бюджета",
              "            SetData(0, 0);",
              "            SetData(0, 1);",
              "            SetData(0, 2);",
              "            //Обновляем таймер до следующего возвращения в штаб",
              "            SetData(CurTurn() + RndObject(CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMin'), CT('Script.Mod_ShuMercs.PlayerMercsParams.ReturnToBaseTimerMax'), CurShip), 3);",
              "            ShipOut(CurShip);",
              "",
              "            //FreeEarningState - стейт типа Free, поэтому первый приказ кораблю приходится отдавать отсюда (сам стейт при переключении ему приказ не сменит)",
              "            OrderLock(CurShip, 0);",
              "            ShipFreeFlight(CurShip);",
              "            ShipJoin(PlayerMercsFree, CurShip);",
              "            exit;",
              "        }",
              "        //И только если мест вообще нигде не оказалось, убиваем этого наёмника с переносом его оборудования на склад",
              "        else",
              "        {",
              "            PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] + 1;",
              "            ShipDestroy(CurShip, 1);",
              "            exit;",
              "        }",
              "    }",
              "    //Вернулись наёмники из ударной группы",
              "    else if(group == PlayerMercsStrike)",
              "    {",
              "        if(GetData(2) == 1) SetData(0, 2); //Если стояла метка об обороне штабной системы",
              "        ChangeState('SittingBaseState');",
              "    }",
              "    //Вернулся с защиты системы или с вылета по запросу игрока крейсер организации",
              "    else if(group == CruisersDefenders)",
              "    {",
              "        if(GetData(2) == 1) SetData(0, 2); //Если стояла метка об обороне штабной системы",
              "        ChangeState('CruiserWaitState');",
              "        exit;",
              "    }",
              "    else throw 'LandingBaseState error! Ship with wrong script group was landed.';",
              "}",
              "//Если наёмник ещё не сел в штаб",
              "else",
              "{",
              "    if(ShipInNormalSpace(CurShip))",
              "    {",
              "        //Дополнительная проверка на корректность системы, т.к. штаб вполне может упрыгнуть в другую, пока наёмник ещё не успел совершить посадку",
              "        if(cur_star == HQstar)",
              "        {",
              "            if(ShipInNormalSpace(HQ))",
              "            {",
              "                OrderLanding(CurShip, HQ);",
              "            }",
              "            else",
              "            {",
              "                float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "                OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "            }",
              "        }",
              "        else",
              "        {",
              "            //Если штаб сейчас не совершает временный скачок для экстракции игрока",
              "            if(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] == '')",
              "            {",
              "                if(ShipGroup(CurShip) != PlayerMercsStrike) ChangeState('ReturningBaseState');",
              "                else ChangeState('ReturningStrikeState');",
              "            }",
              "            //Иначе просто ждём возвращения штаба",
              "            else",
              "            {",
              "                angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "                OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "            }",
              "        }",
              "    }",
              "    //Не знаю, как, но как-то они могут иногда засесть куда-то не туда (на планету, например)",
              "    //Этот приказ здесь просто на всякий случай",
              "    else OrderTakeOff(CurShip);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  250,
          "#":  251,
          "Total.Lines":  6,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Диалог о переименовании организации наёмников игрока",
              "cost = RoundTo(max(100000, 3 * GalaxyMoney(4, 4)), 1000, 0);",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBAnswerRename'), '<Cost'+'>', cost);",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.PlayerAskRenameYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.PlayerAskRenameNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  256,
          "#":  259,
          "Total.Lines":  32,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок будет сидеть на этом экране, пока не ввёдет что-нибудь, отличное от пустой строки",
              "//(если ранее игрок уже оформлял организацию, то повторно вводить название не заставят)",
              "tstr4 = TextBox(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.TextBoxName'), '', 30);",
              "",
              "if(tstr4 != '')",
              "{",
              "    //Временно запоминаем старое имя и устанавливаем новое",
              "    tstr3 = PlayerHQMainArray['Main', 'OrganisationName'];",
              "    PlayerHQMainArray['Main', 'OrganisationName'] = tstr4;",
              "",
              "    //Меняем название организации в имени штаба",
              "    SetName(GroupToShip(PlayerHQ), Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.HQMainName'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], ''));",
              "    //Ищем всех наёмников игрока, и также меняем название организации ещё и им",
              "    for(i = 0; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        cur_star = GalaxyStar(i);",
              "",
              "        for(j = 0; j < StarShips(cur_star); j = j + 1)",
              "        {",
              "            cur_ship = StarShips(cur_star, j);",
              "",
              "            //Если нашли кого-то из \"наших\"",
              "            if(ShipType(cur_ship) == 'PlayerMerc')",
              "            {",
              "                SetName(cur_ship, PlayerHQMainArray['Main', 'OrganisationName'] + ' ' + Format(ShipName(cur_ship), tstr3 + ' ', '', ''));",
              "            }",
              "        }",
              "    }",
              "",
              "    ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "    Sound('Sound.Buy');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  263,
          "#":  264,
          "Total.Lines":  87,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Стейт обороны штабной системы только для наёмников-дежурных и для ударной группы",
              "//Data0 == ---",
              "//Data1 == Id корабля, указанного игроком для атаки (если наёмник в стейте OrderAttackState)",
              "//Data2 == ---",
              "//Data3 == маркер -4 - означает принадлежность данного наёмника к оборонной группе",
              "",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "if(ShipInNormalSpace(CurShip)) OrderLock(CurShip, 0);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(Hit(CurShip, 0))",
              "    {",
              "        if(ShipGroup(CurShip) == PlayerMercsStrike) int strike = 1;",
              "    }",
              "",
              "    if(HQ && strike)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "//Вручную корректируем характер наёмника",
              "ShipStatus(CurShip, 0, 0); //Торговец",
              "ShipStatus(CurShip, 1, 0); //Пират",
              "ShipStatus(CurShip, 2, 100); //Воин",
              "",
              "//Если штаб передислоцировался",
              "if(cur_star != HQStar)",
              "{",
              "    //Защитники отправятся вслед за штабом",
              "    OrderLock(CurShip, 1);",
              "    ShipFreeFlight(CurShip);",
              "    OrderJump(CurShip, HQStar);",
              "    exit;",
              "}",
              "//Если штаб покинул свою систему временно",
              "else if(cur_star != ShipStar(HQ))",
              "{",
              "    if(!ShipNearbyShips(CurShip, -1, 0, 1, '', ''))",
              "    {",
              "        //Защитники будут ожидать возвращения штаба",
              "        OrderLock(CurShip, 1);",
              "        float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "        OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "        exit;",
              "    }",
              "}",
              "",
              "//На случай, если наёмник по каким-то причинам не выдал себе приказ на текущий ход сам",
              "//(может случиться после его первого взлёта со штаба, хз почему)",
              "if(!ShipOrder(CurShip)) ShipFreeFlight(CurShip);",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "dword target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc')",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  265,
          "#":  266,
          "Total.Lines":  185,
          "Code.Type":  "Turn",
          "Code":          
          [
              "SkipGreeting();",
              "",
              "cur_ship = GetTalkShip();",
              "//При вызове диалога из стейта, переменная, возвращаемая функцией GetTalkShip(), ещё не выставлена :|",
              "if(!cur_ship) cur_ship = CurShip;",
              "cur_star = ShipStar(cur_ship);",
              "",
              "if(ShipGroup(cur_ship) == PlayerMercsStrike) //Если это наёмник из ударной группы",
              "{",
              "    //Используется для выбора не общих, а частных уникальных реплик наёмника, если они были для него прописаны",
              "    phrases_path = 'Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class' + substr(GetData(0, cur_ship), 0, 1) + '.' + substr(GetData(0, cur_ship), 1) + '.PersonalPhrases';",
              "    if(!BlockExist(phrases_path)) phrases_path = 'Script.Mod_ShuMercs.PlayerMercsStrikeGroup'; //Раздел общих реплик для \"ударников\"",
              "}",
              "//Если это крейсер организации",
              "else if(ShipGroup(cur_ship) == CruisersDefenders) phrases_path = 'Script.Mod_ShuMercs.PlayerMercCruiserDialog'; //Сюда добавляется путь до уникальных реплик крейсера",
              "else phrases_path = '';",
              "",
              "tint1 = 1;",
              "",
              "//Если игрок напал на этого наёмника",
              "if(Hit(cur_ship, 0))",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.AreLeavingByPlayerHit');",
              "    tstr4 = '</color>' + CT('Talk.Exit'); //Конец связи",
              "    tint1 = 0;",
              "",
              "    FreePlayerMerc(cur_ship);",
              "}",
              "else",
              "{",
              "    //Наёмникам-партнёрам (чужим) игрок отдавать приказы не может",
              "    tdwd3 = ShipIsPartner(cur_ship);",
              "    if(tdwd3) tint1 = 0;",
              "    tstr5 = '';",
              "",
              "    //Если наёмник ведёт бой",
              "    tdwd1 = ShipGetBad(cur_ship);",
              "    if(ShipOrder(cur_ship) == 6 && ShipOrderData1(cur_ship) && !GroupIs(cur_ship, QuestMercs))// && tdwd1)",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileAttack' + RndObject(1, 3, cur_ship)), '<TargetShip'+'>', ShipName(tdwd1), '<TargetShipFull'+'>', Name(tdwd1));",
              "    }",
              "    //Наёмник занят выполнением задания штаба и не может помочь",
              "    else if(GroupIs(cur_ship, QuestMercs))",
              "    {",
              "        tint1 = 0;",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileOnQuestHQ');",
              "    }",
              "    //Наёмник из дежурных или ударников (или крейсер) обороняет систему со штабом",
              "    else if(GroupIs(cur_ship, PlayerMercsDefenders, PlayerMercsStrike, CruisersDefenders))",
              "    {",
              "        //Блокируем возможность отдавать приказы таким наёмникам",
              "        if(ShipGroup(cur_ship) == PlayerMercsDefenders)",
              "        {",
              "            if(StateIs(cur_ship, 'DefendingStarState')) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileDefending');",
              "            else",
              "            {",
              "                tint1 = 0;",
              "                tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileReturningAtReady');",
              "            }",
              "        }",
              "        //Наёмник из ударной группы или крейсер организации",
              "        else",
              "        {",
              "            if(StateIs(cur_ship, 'DefendingStarState'))",
              "            {",
              "                if(phrases_path != '') tstr1 = '</color>' + CT(phrases_path + '.DefendingHQStar');",
              "                else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.DefendingHQStar');",
              "            }",
              "            else",
              "            {",
              "                tint1 = 0;",
              "                if(phrases_path != '') tstr1 = '</color>' + CT(phrases_path + '.ReturningFromDefendingHQStar');",
              "                else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.ReturningFromDefendingHQStar');",
              "            }",
              "        }",
              "    }",
              "    //Наёмник на \"свободном выпасе\"",
              "    else if(StateIs(cur_ship, 'FreeEarningState'))",
              "    {",
              "        if(!tdwd3) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileEarning' + RndObject(1, 9, cur_ship)), '<MercName'+'>', Format(Name(cur_ship), PlayerHQMainArray['Main', 'OrganisationName'] + ' ', '', ''));",
              "        else",
              "        {",
              "            tint3 = CurTurn() + ShipIsPartner(tdwd3, 1); //Дата завершения партнёрского контракта наёмника",
              "            tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhilePartner'), '<TargetShip'+'>', ShipName(tdwd3), '<TargetShipFull'+'>', Name(tdwd3), '<EndPartnerDate'+'>', GameDateTxtByTurn(tint3));",
              "        }",
              "    }",
              "    //Наёмник охраняет цель",
              "    else if(StateIs(cur_ship, 'GuardingQState'))",
              "    {",
              "        tdwd1 = IdToShip(GetData(1, cur_ship));",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileGuarding' + RndObject(1, 3, cur_ship)), '<TargetShip'+'>', ShipName(tdwd1), '<TargetShipFull'+'>', Name(tdwd1));",
              "        tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.HelpIHaveQuest');",
              "    }",
              "    //Наёмник занят доставкой",
              "    else if(StateIs(cur_ship, 'DeliveryQState'))",
              "    {",
              "        //Уже забрал предмет с планеты",
              "        if(GetData(1, cur_ship))",
              "        {",
              "            tdwd1 = IdToPlanet(GetData(1, cur_ship));",
              "            tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileDelivery' + RndObject(1, 4, cur_ship)), '<TargetPlanet'+'>', Name(tdwd1));",
              "            tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.HelpIHaveQuest');",
              "        }",
              "        //Иначе приветствие будет обычное",
              "        else",
              "        {",
              "            tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileEarning' + RndObject(1, 9, cur_ship)), '<MercName'+'>', Format(Name(cur_ship), PlayerHQMainArray['Main', 'OrganisationName'] + ' ', '', ''));",
              "        }",
              "    }",
              "    //Наёмник возвращается в штаб",
              "    else if(StateIs(cur_ship, 'ReturningBaseState', 'LandingBaseState'))",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileReturning' + RndObject(1, 3, cur_ship));",
              "    }",
              "    //Наёмник обороняет систему со штабом",
              "    else if(StateIs(cur_ship, 'DefendingBaseState'))",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.GreetingWhileDefending');",
              "    }",
              "",
              "    //Отдельный набор реплик для уникальных от \"ударников\" или крейсера организации",
              "    if(phrases_path != '')",
              "    {",
              "        tstr2 = '</color>' + CT(phrases_path + '.PlayerCallForHelp');",
              "        if(StateIs(cur_ship, 'OrderAttackState'))",
              "        {",
              "            dword target = IdToShip(GetData(1, cur_ship));",
              "            tstr3 = '</color>' + Format(CT(phrases_path + '.PlayerCallAtEasy'), '<TargetShip'+'>', Name(target));",
              "        }",
              "        tstr4 = '</color>' + CT('Talk.Exit');",
              "        if(tstr5 == '') tstr5 = '</color>' + CT(phrases_path + '.HelpWhoToShootAt');",
              "    }",
              "    else",
              "    {",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerCallForHelp');",
              "        if(StateIs(cur_ship, 'OrderAttackState'))",
              "        {",
              "            target = IdToShip(GetData(1, cur_ship));",
              "            tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerCallAtEasy'), '<TargetShip'+'>', Name(target));",
              "        }",
              "        tstr4 = '</color>' + CT('Talk.Exit');",
              "        if(tstr5 == '') tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.HelpWhoToShootAt');",
              "    }",
              "",
              "    //Если игрок уже на кого-то нацелен, то выбираем его цель в качестве основной",
              "    ArrayClear(tarr1);",
              "    //Если игрок не связался с возвращающимся на базу \"резервным\" наёмником",
              "    if(tint1)",
              "    {",
              "        if(",
              "           (ShipOrder(Player()) == 6 && ShipOrderData1(Player())) ||",
              "            ShipOrder(Player()) == -1",
              "          )",
              "        {",
              "            //Если игрок не нападает на своего же наёмника",
              "            if(ShipType(ShipOrderObj(Player())) != 'PlayerMerc') ArrayAdd(tarr1, ShipOrderObj(Player()));",
              "        }",
              "",
              "        for(int i = 1; i <= ShipCntWeapon(Player()); i = i + 1)",
              "        {",
              "            dword cur_target = WeaponTarget(ShipWeapon(Player(), i));",
              "",
              "            //Если ещё не добавляли в массив данную цель",
              "            if(ArrayDim(tarr1) > 1)",
              "            {",
              "                int chk = 0;",
              "                for(int j = 1; j < ArrayDim(tarr1); j = j + 1)",
              "                {",
              "                    if(cur_target == tarr1[j])",
              "                    {",
              "                        chk = 1;",
              "                        break;",
              "                    }",
              "                }",
              "                if(chk) continue;",
              "            }",
              "",
              "            if(ObjectType(cur_target) == 4 || ObjectType(cur_target) == 5)",
              "            {",
              "                //Если игрок не нападает на своего же наёмника",
              "                if(ShipType(cur_target) != 'PlayerMerc') ArrayAdd(tarr1, cur_target);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  267,
          "#":  268,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "SkipGreeting();",
              "",
              "//Сразу обнуляем агрессию к игроку",
              "ShipSetBad(cur_ship, 0);",
              "",
              "tint1 = Rnd(1, 4, sqr(Id(cur_ship) + CurTurn()));",
              "cost = GalaxyMoney(1, 4);",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.SalaryIncrease' + tint1), '<Payment' + '>', cost);",
              "tstr2 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.SalaryIncreasePlayerYes' + tint1), '<Payment' + '>', cost);",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.SalaryIncreasePlayerNo' + tint1);",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.SalaryIncreaseYes' + tint1);",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.SalaryIncreaseNo' + tint1);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  270,
          "#":  274,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Выставляем \"отличное\" отношение",
              "RelationToRanger(cur_ship, Player(), 100);",
              "",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');",
              "",
              "ButtonClick('Talk', 'Close');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  271,
          "#":  280,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Выставляем \"нормальное\" отношение",
              "RelationToRanger(cur_ship, Player(), 50);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  286,
          "#":  287,
          "Total.Lines":  21,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ищем подходящие для атаки наёмника корабли в системе",
              "for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "{",
              "    tdwd1 = StarShips(cur_star, i);",
              "",
              "    if(tdwd1 == Player()) continue;",
              "    if(!ShipInNormalSpace(tdwd1)) continue;",
              "    //Оставляем в списке только корабли",
              "    if(ObjectType(tdwd1) != 5) continue;",
              "    //Пропускаем других наёмников из организации игрока",
              "    if(ShipType(tdwd1) == 'PlayerMerc') continue;",
              "    //Пропускаем корабли, охраняемые наёмниками игрока",
              "    if(~ShipFindCustomShipInfoByType(tdwd1, 'ShuMercsHQ_GuardedShip')) continue;",
              "    //Пропускаем доминаторских боссов",
              "    //if(ShipTypeN(tdwd1) == t_Kling && !ShipSubType(tdwd1)) continue;",
              "",
              "    InjectAnswer('PlayerMercsAttack', Name(tdwd1) + '<Object=' + tdwd1 + ',23,17,0>', tdwd1);",
              "}",
              "",
              "DAnswer('restart~' + CT('FormGameSet2.Common.HelpCancel')); //\"Назад\"",
              "DAnswer('fastexit~' + CT('Talk.Exit')); //\"Конец связи\""          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  288,
          "#":  289,
          "Total.Lines":  6,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок атаковал своего наёмника - наёмник уходит из организации и становится фрилансером",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.AreLeavingByPlayerHit');",
              "tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "//Портим отношения с наёмником до минимально \"плохого\"",
              "RelationToRanger(GetTalkShip(), Player(), 10);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  292,
          "#":  293,
          "Total.Lines":  75,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если наёмник выполнял задание, то дропаем его",
              "if(StateIs(cur_ship, 'GuardingQState', 'DeliveryQState'))",
              "{",
              "    //Обнуляем все данные о задании данного наёмника",
              "    SetData(CurTurn(), 0, cur_ship);",
              "    SetData(0, 1, cur_ship);",
              "    //Если в данный момент наёмник как раз занимался доставкой предмета,",
              "    //то также снимаем запрет на его дроп",
              "    cur_item = IdToItem(GetData(2, cur_ship));",
              "    if(cur_item)",
              "    {",
              "        if(~FindItemInShip(cur_ship, cur_item))",
              "        {",
              "            NoDropItem(cur_item, 0);",
              "        }",
              "    }",
              "    SetData(0, 2, cur_ship);",
              "}",
              "",
              "tdwd3 = GAnswerData;",
              "RelationToRanger(tdwd3, Player(), 0);",
              "SetData(Id(tdwd3), 1, cur_ship); //Запоминаем указанную игроком цель атаки",
              "ChangeState('OrderAttackState', cur_ship);",
              "",
              "//Ищем других свободных наёмников в системе",
              "ArrayClear(tarr1);",
              "for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "{",
              "    tdwd2 = StarShips(cur_star, i);",
              "",
              "    if(tdwd2 == cur_ship) continue;",
              "    if(!ShipInNormalSpace(tdwd2)) continue;",
              "    //Пропускаем все корабли, кроме других наёмников из организации игрока",
              "    if(ShipType(tdwd2) != 'PlayerMerc') continue;",
              "    //Пропускаем наёмников с боевого дежурства и обороняющих систему ударников",
              "    if(StateIs(tdwd2, 'DefendingStarState')) continue;",
              "    //Пропускаем наёмников, выполняющих квест",
              "    if(ShipGroup(tdwd2) == QuestMercs) continue;",
              "",
              "    ArrayAdd(tarr1, tdwd2);",
              "}",
              "",
              "//Если нашли хотя бы парочку",
              "if(ArrayDim(tarr1) > 1)",
              "{",
              "    tint1 = 1;",
              "",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.IsItGroupOrder');",
              "        tstr2 = '</color>' + CT(phrases_path + '.PlayerYesItsForGroup');",
              "        tstr3 = '</color>' + CT(phrases_path + '.PlayerNoItsPersonal');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.IsItGroupOrder');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerYesItsForGroup');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerNoItsPersonal');",
              "    }",
              "}",
              "else",
              "{",
              "    tint1 = 0;",
              "",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.HelpRogerRoger');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.HelpRogerRoger');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  297,
          "#":  299,
          "Total.Lines":  39,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Отправляем всех свободных наёмников в системе атаковать указанную игроком цель",
              "for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    cur_ship = tarr1[i];",
              "",
              "    if(StateIs(cur_ship, 'GuardingQState', 'DeliveryQState'))",
              "    {",
              "        //Обнуляем все данные о задании данного наёмника",
              "        SetData(CurTurn(), 0, cur_ship);",
              "        SetData(0, 1, cur_ship);",
              "        //Если в данный момент наёмник как раз занимался доставкой предмета,",
              "        //то также снимаем запрет на его дроп",
              "        cur_item = IdToItem(GetData(2, cur_ship));",
              "        if(cur_item)",
              "        {",
              "            if(~FindItemInShip(cur_ship, cur_item))",
              "            {",
              "                NoDropItem(cur_item, 0);",
              "            }",
              "        }",
              "",
              "        SetData(0, 2, cur_ship);",
              "    }",
              "",
              "    //\"Ударников\", если они были вызваны в данную систему игроком, а не от нападения на штаб, заносим в другой стейт",
              "    if(ShipGroup(cur_ship) == PlayerMercsStrike)",
              "    {",
              "        if(!StateIs(cur_ship, 'DefendingStarState', 'OrderAttackState'))",
              "        {",
              "            SetData(Id(tdwd3), 1, cur_ship); //Запоминаем указанную игроком цель для атаки",
              "            ChangeState('StrikeAttackState', cur_ship);",
              "        }",
              "    }",
              "    else",
              "    {",
              "        SetData(Id(tdwd3), 1, cur_ship); //Запоминаем указанную игроком цель для атаки",
              "        ChangeState('OrderAttackState', cur_ship);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  300,
          "#":  301,
          "Total.Lines":  77,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "",
              "//Это нужно, чтобы тупорылые боты не требовали с цели деньги за отстать",
              "if(ShipFindCustomShipInfoByType(CurShip, 'ShuMercsHQ_MercTalksBlock') == -1)",
              "{",
              "    ShipAddCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "}",
              "OrderLock(CurShip, 1);",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в \"тыкву\"",
              "for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "dword target = IdToShip(GetData(1));",
              "//Если атакуемая цель ещё жива",
              "if(target)",
              "{",
              "    //Если цель ещё не покинула систему",
              "    if(ShipStar(target) == cur_star && !ShipInHyperSpace(target, 1))",
              "    {",
              "        ShipSetBad(CurShip, target);",
              "        OrderFollowShip(CurShip, target, 1);",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 1);",
              "",
              "        ShipDeleteCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "        NoTalkToShip(CurShip, 0);",
              "        OrderLock(CurShip, 0);",
              "        ShipFreeFlight(CurShip);",
              "",
              "        //Наёмники из ударной группы",
              "        if(ShipGroup(CurShip) == PlayerMercsStrike) ChangeState('DefendingBaseState');",
              "        //Дежурные наёмники-защитники",
              "        else if(ShipGroup(CurShip) == PlayerMercsDefenders) ChangeState('DefendingStarState');",
              "        //В противном случае, это должны быть обычные гулящие наёмники, которых мы возвращаем обратно в их стейт",
              "        else ChangeState('FreeEarningState');",
              "",
              "        exit;",
              "    }",
              "}",
              "else",
              "{",
              "    SetData(0, 1);",
              "",
              "    ShipDeleteCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "    NoTalkToShip(CurShip, 0);",
              "    OrderLock(CurShip, 0);",
              "    ShipFreeFlight(CurShip);",
              "",
              "    //Наёмники из ударной группы",
              "    if(ShipGroup(CurShip) == PlayerMercsStrike) ChangeState('DefendingBaseState');",
              "    //Дежурные наёмники-защитники",
              "    else if(ShipGroup(CurShip) == PlayerMercsDefenders) ChangeState('DefendingStarState');",
              "    //В противном случае, это должны быть обычные гулящие наёмники, которых мы возвращаем обратно в их стейт",
              "    else ChangeState('FreeEarningState');",
              "",
              "    exit;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  302,
          "#":  303,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    if(phrases_path != '') InjectAnswer('PlayerMercsAttack', Format(CT(phrases_path + '.PlayerCallForHelpWith'), '<TargetShip'+'>', Name(tarr1[i]) + '<Object=' + tarr1[i] + ',23,17,0>'), tarr1[i]);",
              "    else InjectAnswer('PlayerMercsAttack', Format(CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerCallForHelpWith'), '<TargetShip'+'>', Name(tarr1[i]) + '<Object=' + tarr1[i] + ',23,17,0>'), tarr1[i]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  305,
          "#":  306,
          "Total.Lines":  72,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные наёмника в группе PlayerMercsStrike:",
              "//Data0 == класс (1-3) наёмника, влияющий на его зарплату",
              "//Data1 == Id цели для атаки, указанной игроком для стейта StrikeAttackState, либо для стейта OrderAttackState",
              "//Data2 == Id системы, в которую необходимо вылететь группе",
              "//      == таймер времени нахождения группы в системе (CurTurn() + N) / маркер первого диалога после прибытия (-1)",
              "//      == таймер времени на \"заправку и ремонт\" после возвращения в штаб -(CurTurn() + N)",
              "//      == маркер возвращения на базу после обороны штабной системы от нападения (равен 1 и только если наёмник в стейте LandingBaseState), будет сброшен в 0 по возвращении в штаб",
              "//Примечание: Все эти данные имеют тип dword, так что перед проверкой отрицательных значений необходимо конвертировать их в int.",
              "//Data3 == маркер принадлежности наёмника к штурмовой группе, всегда равен -2",
              "",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(HQ)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "//dword HQstar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Вручную корректируем характер наёмника",
              "ShipStatus(CurShip, 0, 0); //Торговец",
              "ShipStatus(CurShip, 1, 0); //Пират",
              "ShipStatus(CurShip, 2, 100); //Воин",
              "",
              "OrderLock(CurShip, 0);",
              "int tint = GetData(2);",
              "if(tint)",
              "{",
              "    //Корабль из группы только что вернулся с вылета",
              "    if(tint > 0)",
              "    {",
              "        //Выставляем трёхдневный маркер для \"заправки и ремонта\"",
              "        SetData(-(CurTurn() + 3), 2);",
              "    }",
              "    //Проверяем, не закончился ли таймер \"заправки и ремонта\"",
              "    else",
              "    {",
              "        //И обнуляем переменную, если да",
              "        if(abs(tint) <= CurTurn())",
              "        {",
              "            for(int i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "            {",
              "                dword cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "                int tint_2 = GetData(2, cur_ship);",
              "                //Если хоть один корабль из состава группы ещё не \"отремонтирован\"",
              "                if(abs(tint_2) > CurTurn()) break;",
              "                //Если \"отремонтированы\" все, то выводим уведомление",
              "                else",
              "                {",
              "                    if(i == GroupCount(PlayerMercsStrike) - 1) CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasReturn'));",
              "                }",
              "            }",
              "",
              "            SetData(0, 2);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  307,
          "#":  308,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ruin = GroupToShip(PlayerHQ);",
              "",
              "if(BuildOwnBase_Condition == 6) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.HQDialogStartTziptzilot');",
              "else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.HQDialogStart');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerCallHQOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  312,
          "#":  316,
          "Total.Lines":  60,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//tint1 == 0 - крейсер не существует и не может участвовать в вылете группы",
              "//tint1 == 1 - крейсер существует и может участвовать в вылете группы",
              "//tint1 == 2 - крейсер существует, но не может участвовать в вылете группы",
              "//tint1 == 3 - крейсер существует и участвует в вылете группы",
              "",
              "cur_star = ShipStar(Player());",
              "tdwd2 = ShipStar(tdwd1);",
              "//Игрок вызвал группу из другой системы (считаем время прибытия, время в гипере + примерное случайное время пролёта по системе штаба)",
              "if(cur_star != tdwd2)",
              "{",
              "    check = max(2, round(0.1 * Dist(tdwd2, cur_star)) + 1) + Rnd(5, 8, sqr(CurTurn()));",
              "    if(tint1 == 3) check = check + 3; //Накидываем дополнительное время за вызов крейсера в составе группы",
              "}",
              "//Игрок вызвал группу в системе со штабом",
              "else check = -1;",
              "",
              "//Если у игрока в организации имеется готовый к вылету крейсер, игрок может усилить им ударную группу",
              "if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "{",
              "    if(tint1 < 3)",
              "    {",
              "        //Возможность добавить крейсер в группу, если он находится в штабе",
              "        if(GroupIn(CruisersDefenders, GroupToShip(PlayerHQ)))",
              "        {",
              "            //При этом основная ударная группа должна состоять не менее чем из трёх кораблей",
              "            if(GroupCount(PlayerMercsStrike) >= 3)",
              "            {",
              "                tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupAddCruiser');",
              "                tint1 = 1;",
              "            }",
              "            else",
              "            {",
              "                tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupAddCruiserNotEnoughStrikeShips');",
              "                tint1 = 2; //Вариант ответа будет заблокирован",
              "            }",
              "        }",
              "        else",
              "        {",
              "            tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupAddCruiserOut');",
              "            tint1 = 2; //Вариант ответа будет заблокирован",
              "        }",
              "    }",
              "    //Возможность исключить крейсер из состава группы, если он уже в неё добавлен",
              "    else",
              "    {",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupExcludeCruiser');",
              "    }",
              "}",
              "",
              "if(~check) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.GroupLaunchConfirm'), '<PlayerStar'+'>', Name(cur_star), '<TimeToArrive'+'>', check);",
              "else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.GroupLaunchHomeConfirm'), '<PlayerStar'+'>', Name(cur_star));",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerConfirmYes');",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerConfirmNo');",
              "",
              "//Группа ещё не вернулась с прошлого вылета (теперь это проверяется выше)",
              "//else",
              "//{",
              "//    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.GroupIsOut');",
              "//    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerGroupIsOut');",
              "//}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  320,
          "#":  323,
          "Total.Lines":  26,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "    //Записываем всем кораблям группы систему назначения",
              "    SetData(Id(cur_star) - 1, 2, cur_ship);",
              "    //И сразу переносим их в гипер, если игрок вызвал их из другой системы",
              "    if(~check) MakeShipEnterStar(cur_ship, cur_star, tdwd2, check - 1);",
              "    ChangeState('MovingOutState', cur_ship);",
              "}",
              "//Также отправляем с ними крейсер, если игрок решил усилить им группу",
              "if(tint1 == 3)",
              "{",
              "    cur_ship = GroupToShip(CruisersDefenders);",
              "",
              "    //Запоминаем систему назначения",
              "    SetData(Id(cur_star) - 1, 2, cur_ship);",
              "    //И сразу переносим крейсер в гипер, если игрок вызвал группу из другой системы",
              "    if(~check) MakeShipEnterStar(cur_ship, cur_star, tdwd2, check - 1);",
              "    ChangeState('MovingOutState', cur_ship);",
              "}",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.GroupWasSent');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerCallHQOut');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupOut');",
              "check = 0;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  321,
          "#":  324,
          "Total.Lines":  14,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Группа доступна, но игрок отказался",
              "if(tint1)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.GroupLaunchDecline');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerCallHQOut');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroup');",
              "}",
              "//Группа ещё не вернулась с прошлого вылета",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.HQDialogReask');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerCallHQOut');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroup');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  325,
          "#":  326,
          "Total.Lines":  117,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(HQ)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQstar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "OrderLock(CurShip, 1);",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "dword tdwd = GalaxyStar(GetData(2));",
              "",
              "//Если игрок вызвал отряд в систему со штабом",
              "if(tdwd == cur_star)",
              "{",
              "    //Если наёмник не находится в гипере",
              "    if(ShipOrder(CurShip) != 3)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip))",
              "        {",
              "            OrderTakeOff(CurShip);",
              "            exit;",
              "        }",
              "        else",
              "        {",
              "            //Игрок вызвал группу в систему со штабом",
              "            if(cur_star == HQstar)",
              "            {",
              "                CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupArrivedHome'));",
              "",
              "                //Переводим всех наёмников из ударной группы в стейт базового поведения",
              "                for(int i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                {",
              "                    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "                    SetData(CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.StrikeGroupDutyDays'), 2, cur_ship);",
              "                    ChangeState('StrikeAtEasyState', cur_ship);",
              "                }",
              "",
              "                //А также крейсер, если он находится в составе ударной группы",
              "                if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "                {",
              "                    cur_ship = GroupToShip(CruisersDefenders);",
              "                    if(StateIs(cur_ship, 'MovingOutState'))",
              "                    {",
              "                        SetData(CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.StrikeGroupDutyDays'), 2, cur_ship);",
              "                        ChangeState('StrikeAtEasyState', cur_ship);",
              "                    }",
              "                }",
              "",
              "                exit;",
              "            }",
              "            //Игрок вызвал группу в другую систему",
              "            else",
              "            {",
              "                if(cur_star == ShipStar(Player()))",
              "                {",
              "                    if(ShipInNormalSpace(Player()) && Dist(CurShip, Player()) <= ShipRadarRange(Player()))",
              "                    {",
              "                        //Ставим маркер начала диалога с игроком",
              "                        SetData(-1, 2);",
              "                        Dialog(PlayerMercsStrikeGroup, CurShip);",
              "",
              "                        //Если игрок поменял группе базовый приказ, то отменяем дальнейшее исполнение стейта (само не отменится)",
              "                        if(!StateIs(CurShip, 'MovingOutState')) exit;",
              "                    }",
              "                    else",
              "                    {",
              "                        CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupArrived'));",
              "                    }",
              "                }",
              "                else",
              "                {",
              "                    CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupArrivedPlayerMissing'));",
              "                }",
              "",
              "                //Переводим всех наёмников из ударной группы в стейт базового поведения",
              "                for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                {",
              "                    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "                    SetData(CurTurn() + 2 * CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.StrikeGroupDutyDays'), 2, cur_ship); //2 * N дней до возвращения обратно в штаб (если выполняют прямой приказ игрока, то не улетят)",
              "                    ChangeState('StrikeAtEasyState', cur_ship);",
              "                }",
              "",
              "                //А также крейсер, если он находится в составе ударной группы",
              "                if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "                {",
              "                    cur_ship = GroupToShip(CruisersDefenders);",
              "                    if(StateIs(cur_ship, 'MovingOutState'))",
              "                    {",
              "                        SetData(CurTurn() + 2 * CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.StrikeGroupDutyDays'), 2, cur_ship); //2 * N дней до возвращения обратно в штаб (если выполняют прямой приказ игрока, то не улетят)",
              "                        ChangeState('StrikeAtEasyState', cur_ship);",
              "                    }",
              "                }",
              "",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  327,
          "#":  328,
          "Total.Lines":  199,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(HQ)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "",
              "//Это нужно, чтобы тупорылые боты не требовали с цели деньги за отстать",
              "if(ShipFindCustomShipInfoByType(CurShip, 'ShuMercsHQ_MercTalksBlock') == -1)",
              "{",
              "    ShipAddCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "}",
              "",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "dword target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        int no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "}",
              "",
              "//Если время вылета ударной группы истекло",
              "if(GetData(2) <= CurTurn())",
              "{",
              "    for(int i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "    {",
              "        dword cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "        ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_MercTalksBlock');",
              "        NoTalkToShip(cur_ship, 0);",
              "        OrderLock(cur_ship, 1);",
              "        ChangeState('ReturningStrikeState', cur_ship);",
              "    }",
              "",
              "    //А также крейсер, если он находится в составе ударной группы",
              "    if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "    {",
              "        cur_ship = GroupToShip(CruisersDefenders);",
              "        if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "        {",
              "            ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_MercTalksBlock');",
              "            NoTalkToShip(cur_ship, 0);",
              "            OrderLock(cur_ship, 1);",
              "            //У крейсера стейт возвращения на базу будет другим",
              "            //ChangeState('ReturningBaseState', cur_ship);",
              "            //Или нет, хз",
              "            ChangeState('ReturningStrikeState', cur_ship);",
              "        }",
              "    }",
              "",
              "    if(GroupCount(PlayerMercsStrike)) CustomEther('PlayerMercsOrg', 0, '', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupReturning'), '<Star'+'>', Name(cur_star), '255,240,100'));",
              "    //На случай, если из всей ударной группы уцелел только крейсер",
              "    else CustomEther('PlayerMercsOrg', 0, '', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupReturningOnlyCruiser'), '<Star'+'>', Name(cur_star), '255,240,100'));",
              "",
              "    exit;",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "dword player_star = ShipStar(Player());",
              "",
              "//В другую систему они за игроком будут следовать только из стейта Follow",
              "//if(player_star != cur_star)",
              "//{",
              "//    OrderJump(CurShip, player_star);",
              "//    exit;",
              "//}",
              "",
              "//Если ранее наёмник совершил посадку вслед за игроком, то в этом месте он будет получать приказ на взлёт",
              "if(!ShipInNormalSpace(CurShip))",
              "{",
              "    if(ShipInNormalSpace(Player()))",
              "    {",
              "        OrderLock(CurShip, 1);",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Ищем в системе любые враждебные игроку цели, выбираем ближайшую, и атакуем",
              "int closest_dist = 500000;",
              "target = 0;",
              "for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "{",
              "    dword ship = StarShips(cur_star, i);",
              "",
              "    if(IsPlayer(ship)) continue; //Но не игрока (если вдруг игрок долбоёб, и напал сам на себя)",
              "    if(ShipInHyperSpace(ship, 1)) continue;",
              "    if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "    if(RelationToShip(ship, Player()) < 10)",
              "    {",
              "        if(!ShipInScript(ship, 0))",
              "        {",
              "            ShipJoin(RandomAttackers, ship);",
              "            //Через 10 дней этот корабль автоматически удалится из группы",
              "            SetData(CurTurn() + 10, 0, ship);",
              "        }",
              "",
              "        int dist = Dist(CurShip, ship);",
              "        if(dist < closest_dist)",
              "        {",
              "            //Если ближайший корабль не засел на планете/станции,",
              "            //либо если других враждебных кораблей в системе не осталось",
              "            if(ShipInNormalSpace(ship) || !target)",
              "            {",
              "                closest_dist = dist;",
              "                target = ship;",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Если нашли подходящую цель, то выставляем её в качестве основного врага для наёмника",
              "if(target)",
              "{",
              "    OrderLock(CurShip, 1);",
              "    ShipSetBad(CurShip, target);",
              "    OrderFollowShip(CurShip, target, 1);",
              "    //Это здесь нужно, чтобы также добавлять в группу нападающих всяких левых мудаков (пираты)",
              "    if(!ShipInScript(target, 0))",
              "    {",
              "        ShipJoin(RandomAttackers, target);",
              "        //Через 10 дней этот корабль автоматически удалится из группы",
              "        SetData(CurTurn() + 10, 0, target);",
              "    }",
              "}",
              "//Иначе врубаем режим обычного следования за игроком",
              "else",
              "{",
              "    //Если игрока в системе нет, то группа будет просто летать и \"резвиться\" вокруг звезды",
              "    if(player_star != cur_star || ShipInHyperSpace(Player(), 1))",
              "    {",
              "        OrderLock(CurShip, 0);",
              "    }",
              "    else",
              "    {",
              "        OrderLock(CurShip, 1);",
              "        if(ShipInNormalSpace(Player()))",
              "        {",
              "            OrderFollowShip(CurShip, Player(), 0);",
              "        }",
              "        else",
              "        {",
              "            dword player_planet = GetShipPlanet(Player());",
              "            if(!player_planet) player_planet = GetShipRuins(Player());",
              "",
              "            OrderLanding(CurShip, player_planet);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  329,
          "#":  330,
          "Total.Lines":  173,
          "Code.Type":  "Turn",
          "Code":          
          [
              "SkipGreeting();",
              "",
              "cur_ship = GetTalkShip();",
              "//При вызове диалога из стейта, переменная, возвращаемая функцией GetTalkShip(), ещё не выставлена :|",
              "if(!cur_ship) cur_ship = CurShip;",
              "cur_star = ShipStar(cur_ship);",
              "",
              "if(ShipGroup(cur_ship) == PlayerMercsStrike) //Если это наёмник из ударной группы",
              "{",
              "    //Используется для выбора не общих, а частных уникальных реплик наёмника, если они были для него прописаны",
              "    phrases_path = 'Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class' + substr(GetData(0, cur_ship), 0, 1) + '.' + substr(GetData(0, cur_ship), 1) + '.PersonalPhrases';",
              "    if(!BlockExist(phrases_path)) phrases_path = '';",
              "}",
              "//Если это крейсер организации",
              "else phrases_path = 'Script.Mod_ShuMercs.PlayerMercCruiserDialog'; //Сюда добавляется путь до уникальных реплик крейсера",
              "",
              "tint1 = 1;",
              "",
              "//Если игрок напал на этого наёмника",
              "if(Hit(cur_ship, 0))",
              "{",
              "    if(phrases_path != '') tstr1 = '</color>' + CT(phrases_path + '.AreLeavingByPlayerHit');",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.AreLeavingByPlayerHit');",
              "    tstr6 = '</color>' + CT('Talk.Exit'); //Конец связи",
              "    tint1 = 0;",
              "",
              "    FreePlayerMerc(cur_ship);",
              "}",
              "else",
              "{",
              "    //Ищем в системе любые корабли или станции, враждебные к игроку",
              "    tint2 = 0;",
              "    for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "    {",
              "        dword ship = StarShips(cur_star, i);",
              "",
              "        if(ShipInHyperSpace(ship)) continue;",
              "        if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "        if(RelationToShip(ship, Player()) > 9) continue;",
              "",
              "        tint2 = 1;",
              "        break;",
              "    }",
              "    //Если группа только прибыла в систему и вышла с игроком на связь (вызывает случайный первый наёмник или крейсер)",
              "    if(GetData(2, cur_ship) == -1)",
              "    {",
              "        //Заводим таймер самостоятельного нахождения группы в системе",
              "        for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(PlayerMercsStrike, i);",
              "            SetData(CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.StrikeGroupDutyDays'), 2, tdwd1);",
              "        }",
              "",
              "        //А также для крейсера, если он находится в составе ударной группы",
              "        if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "        {",
              "            tdwd1 = GroupToShip(CruisersDefenders);",
              "            if(StateIs(tdwd1, 'MovingOutState'))",
              "            {",
              "                SetData(CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.StrikeGroupDutyDays'), 2, tdwd1);",
              "            }",
              "        }",
              "",
              "        if(phrases_path != '')",
              "        {",
              "            tstr1 = '</color>' + CT(phrases_path + '.GroupHasArrived');",
              "            tstr2 = '</color>' + CT(phrases_path + '.PlayerOrderAttack');",
              "            tstr3 = '</color>' + CT(phrases_path + '.PlayerOrderFollowMe');",
              "            tstr4 = '</color>' + CT(phrases_path + '.PlayerOrderAtEasy');",
              "            tstr5 = '</color>' + CT(phrases_path + '.PlayerOrderToReturn');",
              "            tstr6 = '</color>' + CT('Talk.Exit');",
              "            tstr7 = '</color>' + CT(phrases_path + '.AttackWhat');",
              "        }",
              "        else",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.GroupHasArrived');",
              "            tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderAttack');",
              "            tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderFollowMe');",
              "            tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderAtEasy');",
              "            tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderToReturn');",
              "            tstr6 = '</color>' + CT('Talk.Exit');",
              "            tstr7 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.AttackWhat');",
              "        }",
              "    }",
              "    //Игрок сам связался с наёмником из ударной группы",
              "    else",
              "    {",
              "        //Если группа ещё находится на вылете",
              "        if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState'))",
              "        {",
              "            if(phrases_path != '')",
              "            {",
              "                tstr1 = '</color>' + CT(phrases_path + '.TalkBegin');",
              "                tstr2 = '</color>' + CT(phrases_path + '.PlayerOrderAttack');",
              "                tstr3 = '</color>' + CT(phrases_path + '.PlayerOrderFollowMe');",
              "                tstr4 = '</color>' + CT(phrases_path + '.PlayerOrderAtEasy');",
              "                tstr5 = '</color>' + CT(phrases_path + '.PlayerOrderToReturn');",
              "                tstr6 = '</color>' + CT('Talk.Exit');",
              "                tstr7 = '</color>' + CT(phrases_path + '.AttackWhat');",
              "            }",
              "            else",
              "            {",
              "                tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.TalkBegin');",
              "                tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderAttack');",
              "                tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderFollowMe');",
              "                tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderAtEasy');",
              "                tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderToReturn');",
              "                tstr6 = '</color>' + CT('Talk.Exit');",
              "                tstr7 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.AttackWhat');",
              "            }",
              "        }",
              "        //Если группа возвращается в штаб",
              "        else if(StateIs(cur_ship, 'ReturningStrikeState'))",
              "        {",
              "            tint1 = 0;",
              "            if(phrases_path != '') tstr1 = '</color>' + CT(phrases_path + '.GroupIsReturning');",
              "            else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.GroupIsReturning');",
              "            tstr6 = '</color>' + CT('Talk.Exit');",
              "        }",
              "        //Если группа возвращается в штаб и совершает посадку",
              "        else if(StateIs(cur_ship, 'LandingBaseState'))",
              "        {",
              "            //Наёмники из ударной группы использует этот же стейт для посадки",
              "            //(как после возвращения с вылета, так и после обороны системы, однако во время обороны диалог кидает их в другую ветку)",
              "            tint1 = 0;",
              "            //Если для данного наёмника прописаны отдельные уникальные реплики, то выбираем из них - иначе из общих",
              "            if(phrases_path != '') tstr1 = '</color>' + CT(phrases_path + '.GroupIsReturning');",
              "            else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.GroupIsReturning');",
              "            tstr6 = '</color>' + CT('Talk.Exit');",
              "        }",
              "    }",
              "",
              "    //Если игрок уже на кого-то нацелен, то выбираем его цель в качестве основной",
              "    ArrayClear(tarr1);",
              "    //Если игрок не связался с возвращающимся на базу \"резервным\" наёмником",
              "    if(tint1)",
              "    {",
              "        if(",
              "           (ShipOrder(Player()) == 6 && ShipOrderData1(Player())) ||",
              "            ShipOrder(Player()) == -1",
              "          )",
              "        {",
              "            //Если игрок не нападает на своего же наёмника",
              "            if(ShipType(ShipOrderObj(Player())) != 'PlayerMerc') ArrayAdd(tarr1, ShipOrderObj(Player()));",
              "        }",
              "",
              "        for(i = 1; i <= ShipCntWeapon(Player()); i = i + 1)",
              "        {",
              "            dword cur_target = WeaponTarget(ShipWeapon(Player(), i));",
              "",
              "            //Если ещё не добавляли в массив данную цель",
              "            if(ArrayDim(tarr1) > 1)",
              "            {",
              "                int chk = 0;",
              "                for(j = 1; j < ArrayDim(tarr1); j = j + 1)",
              "                {",
              "                    if(cur_target == tarr1[j])",
              "                    {",
              "                        chk = 1;",
              "                        break;",
              "                    }",
              "                }",
              "                if(chk) continue;",
              "            }",
              "",
              "            if(ObjectType(cur_target) == 4 || ObjectType(cur_target) == 5)",
              "            {",
              "                //Если игрок не нападает на своего же наёмника",
              "                if(ShipType(cur_target) != 'PlayerMerc') ArrayAdd(tarr1, cur_target);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  332,
          "#":  335,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    if(phrases_path != '') InjectAnswer('PlayerStrikeAttack', Format(CT(phrases_path + '.PlayerOrderAttackOn'), '<TargetShip'+'>', Name(tarr1[i]) + '<Object=' + tarr1[i] + ',23,17,0>'), tarr1[i]);",
              "    else InjectAnswer('PlayerStrikeAttack', Format(CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerOrderAttackOn'), '<TargetShip'+'>', Name(tarr1[i]) + '<Object=' + tarr1[i] + ',23,17,0>'), tarr1[i]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  338,
          "#":  339,
          "Total.Lines":  21,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ищем подходящие для атаки наёмника корабли в системе",
              "for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "{",
              "    tdwd1 = StarShips(cur_star, i);",
              "",
              "    if(tdwd1 == Player()) continue;",
              "    if(!ShipInNormalSpace(tdwd1)) continue;",
              "    //Оставляем в списке только корабли",
              "    if(ObjectType(tdwd1) != 5) continue;",
              "    //Пропускаем других наёмников из организации игрока",
              "    if(ShipType(tdwd1) == 'PlayerMerc') continue;",
              "    //Пропускаем корабли, охраняемые наёмниками игрока",
              "    if(~ShipFindCustomShipInfoByType(tdwd1, 'ShuMercsHQ_GuardedShip')) continue;",
              "    //Пропускаем доминаторских боссов",
              "    //if(ShipTypeN(tdwd1) == t_Kling && !ShipSubType(tdwd1)) continue;",
              "",
              "    InjectAnswer('PlayerStrikeAttack', Name(tdwd1) + '<Object=' + tdwd1 + ',23,17,0>', tdwd1);",
              "}",
              "",
              "DAnswer('restart~' + CT('FormGameSet2.Common.HelpCancel')); //\"Назад\"",
              "DAnswer('fastexit~' + CT('Talk.Exit')); //\"Конец связи\""          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  340,
          "#":  341,
          "Total.Lines":  71,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd3 = GAnswerData;",
              "",
              "RelationToRanger(tdwd3, Player(), 0);",
              "SetData(Id(tdwd3), 1, cur_ship);",
              "ChangeState('StrikeAttackState', cur_ship);",
              "",
              "//Если в ударной группе ещё остались наёмники, не атакующие данную цель",
              "int check = 0;",
              "if(GroupCount(PlayerMercsStrike) > 1)",
              "{",
              "    for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "    {",
              "        cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "        if(!ShipInNormalSpace(cur_ship)) continue;",
              "        if(ShipStar(cur_ship) != ShipStar(Player())) continue;",
              "        if(StateIs(cur_ship, 'StrikeAttackState') && GetData(1, cur_ship) == Id(tdwd3)) continue;",
              "",
              "        check = 1;",
              "        break;",
              "    }",
              "",
              "    //А также крейсер, если он находится в составе ударной группы",
              "    if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "    {",
              "        cur_ship = GroupToShip(CruisersDefenders);",
              "        if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "        {",
              "            if(ShipInNormalSpace(cur_ship))",
              "            {",
              "                if(ShipStar(cur_ship) == ShipStar(Player()))",
              "                {",
              "                    if(!StateIs(cur_ship, 'StrikeAttackState') || GetData(1, cur_ship) != Id(tdwd3)) check = 1;",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "if(check)",
              "{",
              "    tint1 = 1;",
              "",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.IsItGroupOrderStrike');",
              "        tstr2 = '</color>' + CT(phrases_path + '.PlayerYesItsForGroupStrike');",
              "        tstr3 = '</color>' + CT(phrases_path + '.PlayerNoItsPersonalStrike');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.IsItGroupOrderStrike');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerYesItsForGroupStrike');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerNoItsPersonalStrike');",
              "    }",
              "}",
              "else",
              "{",
              "    tint1 = 0;",
              "",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.AttackOne');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.AttackOne');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  344,
          "#":  345,
          "Total.Lines":  42,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(phrases_path != '')",
              "{",
              "    tstr1 = '</color>' + CT(phrases_path + '.OrderToReturn');",
              "    tstr2 = '</color>' + CT('Talk.Exit');",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.OrderToReturn');",
              "    tstr2 = '</color>' + CT('Talk.Exit');",
              "}",
              "",
              "//Переводим всех наёмников ударной группы в стейт возвращения в штаб",
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "    if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_MercTalksBlock'))",
              "    {",
              "        NoTalkToShip(cur_ship, 0);",
              "        ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_MercTalksBlock');",
              "    }",
              "",
              "    ChangeState('ReturningStrikeState', cur_ship);",
              "}",
              "",
              "//А также крейсер, если он находится в составе ударной группы",
              "if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "{",
              "    cur_ship = GroupToShip(CruisersDefenders);",
              "    if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "    {",
              "        if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_MercTalksBlock'))",
              "        {",
              "            NoTalkToShip(cur_ship, 0);",
              "            ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_MercTalksBlock');",
              "        }",
              "",
              "        //У крейсера стейт возвращения на базу будет другим",
              "        //ChangeState('ReturningBaseState', cur_ship);",
              "        //Или нет, хз",
              "        ChangeState('ReturningStrikeState', cur_ship);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  348,
          "#":  350,
          "Total.Lines":  28,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Отправляем всех наёмников ударной группы на атаку указанной игроком цели",
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "    if(!ShipInNormalSpace(cur_ship)) continue;",
              "    if(ShipStar(cur_ship) != ShipStar(Player())) continue;",
              "",
              "    SetData(Id(tdwd3), 1, cur_ship);",
              "    ChangeState('StrikeAttackState', cur_ship);",
              "}",
              "",
              "//А также крейсер, если он находится в составе ударной группы",
              "if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "{",
              "    cur_ship = GroupToShip(CruisersDefenders);",
              "    if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "    {",
              "        if(ShipInNormalSpace(cur_ship))",
              "        {",
              "            if(ShipStar(cur_ship) == ShipStar(Player()))",
              "            {",
              "                SetData(Id(tdwd3), 1, cur_ship);",
              "                ChangeState('StrikeAttackState', cur_ship);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  353,
          "#":  354,
          "Total.Lines":  78,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(HQ)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "",
              "//Это нужно, чтобы тупорылые боты не требовали с цели деньги за отстать",
              "if(ShipFindCustomShipInfoByType(CurShip, 'ShuMercsHQ_MercTalksBlock') == -1)",
              "{",
              "    ShipAddCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "}",
              "OrderLock(CurShip, 1);",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "dword target = IdToShip(GetData(1));",
              "//Если атакуемая цель ещё жива",
              "if(target)",
              "{",
              "    //Если цель ещё не покинула систему",
              "    if(ShipStar(target) == cur_star && !ShipInHyperSpace(target, 1))",
              "    {",
              "        ShipSetBad(CurShip, target);",
              "        OrderFollowShip(CurShip, target, 1);",
              "    }",
              "    else",
              "    {",
              "        //Если время нахождения ударной группы в системе ещё не вышло, либо игрок ещё находится в той же системе",
              "        if(GetData(2) > CurTurn() || ShipStar(Player()) == cur_star) ChangeState('StrikeAtEasyState');",
              "        //Иначе отправляем их обратно в штаб",
              "        else",
              "        {",
              "            ShipDeleteCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "            NoTalkToShip(CurShip, 0);",
              "            ChangeState('ReturningStrikeState');",
              "        }",
              "        exit;",
              "    }",
              "}",
              "else",
              "{",
              "    SetData(0, 1);",
              "",
              "    //Если время нахождения ударной группы в системе ещё не вышло, либо игрок всё ещё находится в той же системе",
              "    if(GetData(2) > CurTurn() || ShipStar(Player()) == cur_star) ChangeState('StrikeAtEasyState');",
              "    //Иначе отправляем их обратно в штаб",
              "    else",
              "    {",
              "        ShipDeleteCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "        NoTalkToShip(CurShip, 0);",
              "        ChangeState('ReturningStrikeState');",
              "    }",
              "    exit;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  337,
          "#":  357,
          "Total.Lines":  38,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(phrases_path != '')",
              "{",
              "    if(tint2) tstr1 = '</color>' + CT(phrases_path + '.AtEasy');",
              "    else tstr1 = '</color>' + CT(phrases_path + '.AtEasyNoTargets');",
              "    tstr2 = '</color>' + CT('Talk.Exit');",
              "}",
              "else",
              "{",
              "    if(tint2) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.AtEasy');",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.AtEasyNoTargets');",
              "    tstr2 = '</color>' + CT('Talk.Exit');",
              "}",
              "",
              "//Переводим всех наёмников ударной группы в стейт базовой логики",
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "    if(ShipInHyperSpace(cur_ship)) continue;",
              "    if(ShipStar(cur_ship) != ShipStar(Player())) continue;",
              "",
              "    ChangeState('StrikeAtEasyState', cur_ship);",
              "}",
              "",
              "//А также крейсер, если он находится в составе ударной группы",
              "if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "{",
              "    cur_ship = GroupToShip(CruisersDefenders);",
              "    if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "    {",
              "        if(!ShipInHyperSpace(cur_ship))",
              "        {",
              "            if(ShipStar(cur_ship) == ShipStar(Player()))",
              "            {",
              "                ChangeState('StrikeAtEasyState', cur_ship);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  358,
          "#":  359,
          "Total.Lines":  85,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(HQ)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "",
              "    exit;",
              "}",
              "dword HQstar = GalaxyStar(PlayerHQMainArray['Main', 'HQStar']);",
              "",
              "OrderLock(CurShip, 1);",
              "//Меняем овнера на всякий случай, чтобы при захвате системы со штабом,",
              "//овнер наёмников оставался не враждебным системе",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "if(ShipInNormalSpace(CurShip))",
              "{",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword ship = ShipGetBad(CurShip);",
              "    if(ship)",
              "    {",
              "        if(ShipType(ship) == 'PlayerMerc')",
              "        {",
              "            int no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            ship = ShipIsPartner(CurShip);",
              "            if(ship) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(ship, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            ship = ShipIsPartner(CurShip);",
              "            if(ship) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "    }",
              "",
              "    //Если наёмник ещё не вернулся в систему со штабом, то отправляем его туда",
              "    if(cur_star != HQstar)",
              "    {",
              "        OrderJump(CurShip, HQstar);",
              "        exit;",
              "    }",
              "    //Наёмник добрался до системы со штабом",
              "    else",
              "    {",
              "        //На всякий случай, чтобы не слинял сразу же по прилёту. Пидорас!",
              "        ChangeState('LandingBaseState');",
              "        exit;",
              "    }",
              "}",
              "else",
              "{",
              "    ShipRefuel(CurShip);",
              "    HullHP(CurShip, ItemSize(ShipItems(CurShip, 0)));",
              "    OrderTakeOff(CurShip);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  363,
          "#":  364,
          "Total.Lines":  321,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestTarget:",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//    13 - отключение любой логики корабля-цели",
              "",
              "//    17 - маркер ожидания(крутимся в скриптовом месте QuestPlace)",
              "//    18 - маркер ожидания с перепросчётами (крутимся в скриптовом месте одновременно изменяя его координат QuestPlace)",
              "",
              "//    66 - маркер самоликвидации",
              "//    33 - маркер захвата стейтом контроля над кораблём",
              "//    20 - маркер на принудительную активацию форсажа",
              "//    22 - маркер на телепорт в определённые координаты:",
              "//      Data1 - координата X",
              "//      Data2 - координата Y",
              "//      Data3 - битовый вектор (12 бит: ID системы, 20 бит - кол-во дней нахождения в ЧД)",
              "//    -1 - Отключение обсчёта собственной логики корабля",
              "",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//  Используется так:",
              "//    Для планет: умножаем id на 2",
              "//    Для станций/кораблей(если используем маркер ожидания): умножаем id на 2 + 1",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "",
              "//Маркер полного отключения любой логики корабля-цели",
              "if(GetData(0) == 13)",
              "{",
              "    OrderLock(CurShip, 1);",
              "    for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "    {",
              "        dword gun = ShipWeapon(CurShip, i);",
              "        WeaponTarget(gun, 0);",
              "    }",
              "",
              "    OrderNone(CurShip);",
              "    exit;",
              "}",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если цели выставлен маркер на самоликвидацию",
              "    if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "    else",
              "    {",
              "        if(GetData(1))",
              "        {",
              "            //Если прилетели в указанную систему",
              "            object = GalaxyStar(GetData(1) - 1);",
              "            if(cur_star == object)",
              "            {",
              "                //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "                //и переводим его в свободный контроль от стейта",
              "                if(GetData(0) == 34)",
              "                {",
              "                    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                    SetData(33, 0);",
              "                    OrderLock(CurShip, 0);",
              "                }",
              "                SetData(0, 1);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Кидаем игроку вызов от корабля-цели если для этого выставлен соответствующий маркер",
              "if(QuestTargetDialogCall > CurTurn())",
              "{",
              "    if(cur_star == ShipStar(Player()))",
              "    {",
              "        if(ShipInNormalSpace(Player()))",
              "        {",
              "            if(ShipInNormalSpace(CurShip))",
              "            {",
              "                if(Dist(Player(), CurShip) <= ShipRadarRange(Player()))",
              "                {",
              "                    QuestTargetDialogCall = -1;",
              "                    Dialog(CurShip);",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "//ShipFreeFlight(CurShip, 1);",
              "",
              "//Маркер на принудительную активацию форсажа",
              "if(GetData(0) == 20)",
              "{",
              "    OrderForsage(CurShip, 1);",
              "}",
              "",
              "//Маркер на телепорт в указанные координаты:",
              "//  Data1 - координата X",
              "//  Data2 - координата Y",
              "//  Data3 - битовый вектор (12 бит: ID системы, 20 бит - кол-во дней нахождения в гипере)",
              "if(GetData(0) == 22)",
              "{",
              "    OrderTeleport(CurShip, GalaxyStar((GetData(3) >> 20) - 1), int(GetData(1)), int(GetData(2)), 5, GetData(3) & 1048575);",
              "    SetData(113, 0);",
              "    exit;",
              "}",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 1, CurShip);",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0, CurShip) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0, CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2, CurShip))",
              "{",
              "    if(!(GetData(2, CurShip) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2, CurShip) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2, CurShip);",
              "            //Если цели выставлен маркер на самоликвидацию",
              "            if(GetData(0, CurShip) == 66) ShipDestroy(CurShip, 1);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            else if(GetData(0, CurShip) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0, CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2, CurShip) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2, CurShip);",
              "                //Если цели выставлен маркер на самоликвидацию",
              "                if(GetData(0, CurShip) == 66) ShipDestroy(CurShip, 1);",
              "                //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "                else if(GetData(0, CurShip) == 32)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    SetData(33, 0, CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2, CurShip);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            if(GetData(0, CurShip) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0, CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3, CurShip))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3, CurShip));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                OrderFollowShip(CurShip, object, 0);",
              "",
              "                //Второй тип поведения, корабль будет совершать посадку вслед за ведущим кораблём",
              "                if(GetData(0, CurShip) == 1)",
              "                {",
              "                    if(!ShipInNormalSpace(object))",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(sit) OrderLanding(CurShip, sit);",
              "                        else OrderLanding(CurShip, GetShipRuins(object));",
              "                    }",
              "                    else",
              "                    {",
              "                        OrderTakeOff(CurShip);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если ведущий улетел в другую систему - догоняем",
              "        else",
              "        {",
              "            if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "            else OrderJump(CurShip, ShipStar(object));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 3, CurShip);",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0, CurShip) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0, CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0, CurShip) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0, CurShip);",
              "            exit;",
              "        }",
              "        else",
              "        {",
              "            float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "            OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  365,
          "#":  366,
          "Total.Lines":  519,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestMercs (в этом стейте наёмники не будут автоматически атаковать QuestTarget):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//        3 - маркер автоматического возвращения в штаб после завершения текущего заданного действия (например, после прибытия на указанную в переменных ниже планету и т.д.)",
              "//        4 - маркер автоматического перевода наёмника в другую скриптовую группу, указанную в инфошке ChangeShipScriptGroupInfo после завершения текущего заданного действия",
              "",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    if(GetData(1))",
              "    {",
              "        //Если прилетели в указанную систему",
              "        object = GalaxyStar(GetData(1) - 1);",
              "        if(cur_star == object)",
              "        {",
              "            //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "            //и переводим его в свободный контроль от стейта",
              "            if(GetData(0) == 34)",
              "            {",
              "                ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                SetData(33, 0);",
              "                OrderLock(CurShip, 0);",
              "            }",
              "            else if(GetData(0) >= 97 && GetData(0) <= 99)",
              "            {",
              "                ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                SetData(0, 1);",
              "                SetData(0, 2);",
              "                SetData(0, 3);",
              "                OrderLock(CurShip, 1);",
              "",
              "                if(GetData(0) == 97)",
              "                {",
              "                    SetData(40, 0);",
              "                    ChangeState('QuestMercsCapDomState');",
              "                }",
              "                else if(GetData(0) == 98)",
              "                {",
              "                    SetData(40, 0);",
              "                    ChangeState('QuestMercsCapPirState');",
              "                }",
              "                else",
              "                {",
              "                    SetData(40, 0);",
              "                    ChangeState('QuestMercsCapCoalState');",
              "                }",
              "                exit;",
              "            }",
              "",
              "            SetData(0, 1);",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword target = ShipGetBad(CurShip);",
              "    if(target)",
              "    {",
              "        if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "        {",
              "            TruceBetweenShips(CurShip, target);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            TruceBetweenShips(CurShip, target);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(ShipInScript(target, 0))",
              "        {",
              "            if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "            {",
              "                TruceBetweenShips(CurShip, target);",
              "                //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        //Чтобы не пытались грабить охраняемую цель, суки",
              "        //ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "//ShipFreeFlight(CurShip, 1);",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        int no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "    else if(ShipInScript(target, 0))",
              "    {",
              "        if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "            target = 0;",
              "        }",
              "    }",
              "}",
              "",
              "//Если цель всё ещё не сброшена, то добавляем её в список рандомных нападающих уёбков (всегда пираты)",
              "if(target)",
              "{",
              "    if(!ShipInScript(target, 0))",
              "    {",
              "        ShipJoin(RandomAttackers, target);",
              "        //Через 10 дней этот корабль автоматически удалится из группы",
              "        SetData(CurTurn() + 10, 0, target);",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Маркер перемещения в опеределённую точку",
              "//  Data1 - координата X",
              "//  Data2 - координата Y",
              "if(GetData(0) == 16)",
              "{",
              "    OrderMove(CurShip, int(GetData(1)), int(GetData(2)));",
              "    exit;",
              "}",
              "",
              "//Маркер на прыжок корабля в чд и длительное нахождение в ней(но можно сделать и обычный прыжок в ЧД)",
              "if(GetData(0) == 18)",
              "{",
              "    OrderJumpHole(CurShip, IdToHole(GetData(1)), 100);",
              "    ShipOrderData1(CurShip, GetData(2));",
              "    //Отключаем любую логику на следующий ход(чтоб на следующий ход корабль как бы пропускал ходы пока терн не выставит нужный маркер)",
              "    SetData(-1, 0);",
              "    SetData(0, 1);",
              "    SetData(0, 2);",
              "    SetData(-3, 3);",
              "    exit;",
              "}",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else SetData(0, 1);",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2))",
              "{",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //При данном маркере после совершения посадки на планету наёмник автоматически направится в штаб",
              "            if(GetData(0) == 3)",
              "            {",
              "                SetData(0, 0);",
              "                SetData(0, 1);",
              "                SetData(0, 2);",
              "                SetData(-3, 3);",
              "                ChangeState('ReturningStrikeState');",
              "                exit;",
              "            }",
              "            //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "            else if(GetData(0) == 4)",
              "            {",
              "                ChangeShipScriptGroupFromInfo(CurShip);",
              "                ShipFreeFlight(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2);",
              "                //При данном маркере после совершения посадки на станцию наёмник автоматически направится в штаб",
              "                if(GetData(0) == 3)",
              "                {",
              "                    SetData(0, 0);",
              "                    SetData(0, 1);",
              "                    SetData(0, 2);",
              "                    SetData(-3, 3);",
              "                    ChangeState('ReturningStrikeState');",
              "                    exit;",
              "                }",
              "                //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "                else if(GetData(0) == 4)",
              "                {",
              "                    ChangeShipScriptGroupFromInfo(CurShip);",
              "                    ShipFreeFlight(CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //При данном маркере после уничтожения станции наёмник автоматически направится в штаб",
              "            if(GetData(0) == 3)",
              "            {",
              "                SetData(0, 0);",
              "                SetData(0, 1);",
              "                SetData(0, 2);",
              "                SetData(-3, 3);",
              "                ChangeState('ReturningStrikeState');",
              "                exit;",
              "            }",
              "            //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "            else if(GetData(0) == 4)",
              "            {",
              "                ChangeShipScriptGroupFromInfo(CurShip);",
              "                ShipFreeFlight(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Летим к кораблю",
              "if(GetData(3))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                //Защитные протоколы поведения (наёмники охраняют свою цель от других кораблей)",
              "                if(GetData(0) <= 2)",
              "                {",
              "                    //И сами совершают за ней посадки на планеты и станции (но только если GetData(0) != 2)",
              "                    if(!ShipInNormalSpace(object) && GetData(0) != 2)",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(!sit) sit = GetShipRuins(object);",
              "",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            if(GetShipPlanet(CurShip) != sit && GetShipRuins(CurShip) != sit) OrderTakeOff(CurShip);",
              "                        }",
              "                        else OrderLanding(CurShip, sit);",
              "                    }",
              "                    else",
              "                    {",
              "                        //Взлетаем вслед за целью",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            if(ShipOrder(object) == 5) OrderTakeOff(CurShip); //Если цель собирается взлетать",
              "                            else if(ShipInNormalSpace(object)) OrderTakeOff(CurShip); //Либо уже взлетела",
              "                            exit;",
              "                        }",
              "",
              "                        if(ShipTurnBeforeEndOrder(object) <= 1)",
              "                        {",
              "                            int target_order = ShipOrder(object);",
              "                            if(target_order == 2 && GetData(0) != 2)",
              "                            {",
              "                                OrderLanding(CurShip, ShipOrderObj(object));",
              "                                exit;",
              "                            }",
              "                            else if(target_order == 3)",
              "                            {",
              "                                OrderJump(CurShip, ShipOrderObj(object));",
              "                                exit;",
              "                            }",
              "                            else if(target_order == 4)",
              "                            {",
              "                                OrderJumpHole(CurShip, ShipOrderObj(object));",
              "                                exit;",
              "                            }",
              "                        }",
              "",
              "                        OrderFollowShip(CurShip, object, 0);",
              "",
              "                        //Ищем в системе любые враждебные цели корабли, выбираем ближайший, и атакуем",
              "                        int closest_dist = 500000;",
              "                        target = 0;",
              "                        for(int i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "                        {",
              "                            dword ship = StarShips(cur_star, i);",
              "",
              "                            if(ShipInCurScript(ship))",
              "                            {",
              "                                //Добавление случайных атакующих в группу было сделано исключительно в целях оптимизации,",
              "                                //но объективно оно здесь ни к чему... может позже уберу",
              "                                if(ShipGroup(ship) == RandomAttackers) continue;",
              "                            }",
              "",
              "                            if(IsPlayer(ship)) continue; //Но не игрока (если вдруг игрок долбоёб, и напал на охраняемый по своему же заданию корабль)",
              "                            if(ShipInHyperSpace(ship, 1)) continue;",
              "                            if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "                            if(RelationToShip(ship, object) < 10)",
              "                            {",
              "                                if(!ShipInScript(ship, 0))",
              "                                {",
              "                                    ShipJoin(RandomAttackers, ship);",
              "                                    //Через 10 дней этот корабль автоматически удалится из группы",
              "                                    SetData(CurTurn() + 10, 0, ship);",
              "                                }",
              "",
              "                                int dist = Dist(CurShip, ship);",
              "                                if(dist < closest_dist)",
              "                                {",
              "                                    //Если ближайший корабль не засел на планете/станции,",
              "                                    //либо если других враждебных кораблей в системе не осталось",
              "                                    if(ShipInNormalSpace(ship) || !target)",
              "                                    {",
              "                                        closest_dist = dist;",
              "                                        target = ship;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        //Если нашли подходящую цель, то выставляем её в качестве основного врага для наёмника",
              "                        if(target)",
              "                        {",
              "                            ShipSetBad(CurShip, target);",
              "                            ShipFreeFlight(CurShip, 1);",
              "",
              "                            //Это здесь нужно, чтобы также добавлять в группу нападающих всяких левых мудаков (пираты)",
              "                            if(!ShipInScript(target, 0))",
              "                            {",
              "                                ShipJoin(RandomAttackers, target);",
              "                                //Через 10 дней этот корабль автоматически удалится из группы",
              "                                SetData(CurTurn() + 10, 0, target);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                //Приказ на уничтожение цели (следуем за ней до упора)",
              "                else if(GetData(0) == 3 || GetData(0) == 4)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else",
              "                    {",
              "                        OrderFollowShip(CurShip, object, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если цель улетела от наёмника в другую систему - догоняем",
              "        else",
              "        {",
              "            if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "            else OrderJump(CurShip, ShipStar(object));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(GetData(0) < 3) SetData(0, 3);",
              "        //При данном маркере в случае уничтожения цели наёмник автоматически направится в штаб",
              "        else if(GetData(0) == 3)",
              "        {",
              "            SetData(0, 0);",
              "            SetData(0, 1);",
              "            SetData(0, 2);",
              "            SetData(-3, 3);",
              "            ChangeState('ReturningStrikeState');",
              "            exit;",
              "        }",
              "        //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "        else if(GetData(0) == 4)",
              "        {",
              "            ChangeShipScriptGroupFromInfo(CurShip);",
              "            ShipFreeFlight(CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "        OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  369,
          "#":  370,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//В эту группу попадают всякие случайные мудаки (пираты), рандомно нападающие на наёмников игрока (пираты),",
              "//даже несмотря на то, что на тех стоят все мыслимые и немыслимые запреты от рандомных атак (пираты, сука!)",
              "//Data0 - таймер до автоматического вывода данного корабля из группы",
              "if(GetData(0))",
              "{",
              "    if(GetData(0) <= CurTurn()) ShipOut(CurShip);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  373,
          "#":  371,
          "Total.Lines":  232,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Private.Protect.1 в процессе",
              "//Если убили цель задания, либо уничтожен штаб игрока, задание провалено",
              "cur_ship = GroupToShip(QuestTarget);",
              "if(!cur_ship || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие наёмники возвращаются в штаб",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestMercs, i);",
              "        SetData(0, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(0, 2, tdwd1);",
              "        SetData(-3, 3, tdwd1);",
              "        ChangeState('ReturningStrikeState', tdwd1);",
              "    }",
              "    //Если цель выжила, то вскоре самоуничтожиться",
              "    if(cur_ship)",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        SetData(66, 0, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "    }",
              "    else",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "    //Завершаем квест и получаем пиздюлей",
              "    EndQuestHQ(ActiveQuestHQ, 0);",
              "}",
              "else",
              "{",
              "    //Если отношение охраняемой цели к игроку упало ниже 100%, исправляем это",
              "    //(естественно, только если игрок сам не начал вдруг мочить цель)",
              "    if(!Hit(cur_ship, 0))",
              "    {",
              "        if(RelationToRanger(cur_ship, Player()) < 100)",
              "        {",
              "            RelationToRanger(cur_ship, Player(), 100);",
              "        }",
              "    }",
              "",
              "    //Первый этап квеста, наёмники собираются в системе с охраняемым кораблём",
              "    //Сам дипломат пока сидит на стартовой планете",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если наёмники в полном составе прибыли в стартовую систему",
              "        if(GroupIn(QuestMercs, GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)))",
              "        {",
              "            //Если наёмники уже приземлились на планету с дипломатом, то отправляем их прикрывать его",
              "            if(GroupIn(QuestMercs, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])))",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ShipRefuel(tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(Id(cur_ship), 3, tdwd1);",
              "                    //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за дипломатом",
              "                    SetData(100, 0, tdwd1);",
              "                    OrderTakeOff(tdwd1);",
              "                }",
              "                //Сам же дипломат тем временем отправляется в пиратскую систему",
              "                //Ручной приказ здесь, чтобы он не закупал себе рандомные товары перед взлётом",
              "                SetData(100, 0, cur_ship);",
              "                OrderTakeOff(cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "",
              "                //Множим Id на два для обозначения маркера планеты",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10] * 2, 2, cur_ship);",
              "",
              "                //Переходим на второй этап квеста, следование (с защитой) за дипломатом",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwo'), '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10])), '<Star' + '>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "                QuestTargetDialogCall = CurTurn() + 3; //Дипломат сам вызовет игрока после взлёта",
              "            }",
              "            //Отправляем их на планету с дипломатом",
              "            else",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 1, tdwd1);",
              "                    //Множим Id на два для обозначения маркера планеты",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "                }",
              "            }",
              "        }",
              "        //Если на данном этапе все наёмники по каким-то причинам уничтожены, то квест провален",
              "        else if(!GroupCount(QuestMercs))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTime');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "            ShipDestroy(GroupToShip(QuestTarget), 1);",
              "",
              "            //Завершаем квест и получаем пиздюлей",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "    }",
              "    //Второй этап квеста, наёмники следуют за дипломатом, попутно его защищая,",
              "    //а сам дипломат отправляется на пиратскую планету в пиратскую систему",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Дипломат прибыл на нужную планету",
              "        if(GroupIn(QuestTarget, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10])))",
              "        {",
              "            //Дипломат временно задержится на планете для проведения переговоров",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 2])",
              "            {",
              "                //Отсидел, теперь возвращаем его обратно в стартовую систему на стартовую планету",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn())",
              "                {",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "                    //Множим Id на два для обозначения маркера планеты",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 2] = 0;",
              "",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageThree'), '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                    if(FilmFlags(0))",
              "                    {",
              "                        if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                        {",
              "                            tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetTakeOffEnd'), '<Consul' + '>', Name(cur_ship), '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '255,240,100');",
              "                            CustomEther('Ether2', 0, '', tstr1, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10]));",
              "                        }",
              "                    }",
              "",
              "                    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                        if(!ShipInNormalSpace(tdwd1) && !ShipInHyperSpace(tdwd1))",
              "                        {",
              "                            ShipRefuel(tdwd1);",
              "                            //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за дипломатом",
              "                            SetData(100, 0, tdwd1);",
              "                            OrderTakeOff(tdwd1);",
              "                        }",
              "                    }",
              "",
              "                    //Третий этап квеста (он же последний)",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "                }",
              "            }",
              "            //На 3 дня",
              "            else",
              "            {",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwoWait'), '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10])), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                if(FilmFlags(0))",
              "                {",
              "                    if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                    {",
              "                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetLanding'), '<Consul' + '>', Name(cur_ship), '<Wait' + '>', 3, '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10])), '255,240,100');",
              "                        CustomEther('Ether2', 0, '', tstr1, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]));",
              "                    }",
              "                }",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + 3;",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста (последний)",
              "    //Дипломат отправляется на свою родную планету (где в итоге и сдохнет)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Дипломат вернулся на родную планету",
              "        if(GroupIn(QuestTarget, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])))",
              "        {",
              "            //Все уцелевшие наёмники возвращаются в штаб",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(-3, 3, tdwd1);",
              "                ChangeState('ReturningStrikeState', tdwd1);",
              "            }",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "            CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Завершаем жизненный путь дипломата",
              "            ShipDestroy(GroupToShip(QuestTarget), 1);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "            //Завершаем квест и получаем награду",
              "            EndQuestHQ(ActiveQuestHQ, 1);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  374,
          "#":  372,
          "Total.Lines":  418,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Private.Protect.2 в процессе",
              "//Если убили цель задания, либо если раньше времени передохли все встречающие пираты, либо если потерян груз,",
              "//либо если уничтожен штаб игрока - задание провалено",
              "cur_ship = GroupToShip(QuestTarget);",
              "if( !cur_ship ||",
              "    (!GroupToShip(QuestSupport) || !ItemExist(QuestItem)) && ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3 ||",
              "    !GroupToShip(PlayerHQ)",
              "  )",
              "{",
              "    //Все уцелевшие наёмники возвращаются в штаб",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestMercs, i);",
              "        SetData(0, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(0, 2, tdwd1);",
              "        SetData(-3, 3, tdwd1);",
              "        ChangeState('ReturningStrikeState', tdwd1);",
              "    }",
              "    //Все уцелевшие пираты улетают восвояси и дохнут",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestSupport, i);",
              "        SetData(66, 0, tdwd1);",
              "        if(!ShipInNormalSpace(tdwd1)) ShipDestroy(tdwd1, 1);",
              "        else SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10], 1, tdwd1);",
              "    }",
              "",
              "    //Если цель выжила, то вскоре самоуничтожиться",
              "    if(cur_ship)",
              "    {",
              "        //Если был уничтожен груз",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "        {",
              "            if(!ItemExist(QuestItem))",
              "            {",
              "                tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByCargo');",
              "                CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "            }",
              "            //Если были уничтожены все пираты",
              "            else if(!GroupToShip(QuestSupport))",
              "            {",
              "                tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedBySupport');",
              "                CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "            }",
              "        }",
              "        //Если был уничтожен штаб",
              "        else if(!GroupToShip(PlayerHQ))",
              "        {",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "        }",
              "",
              "        SetData(66, 0, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "    }",
              "    else",
              "    {",
              "        //Если был уничтожен контрабандист",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    //Все уцелевшие военные выводятся из скрипта",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "        //Если контрабандист ещё жив, то травим его военными (до вылета из их системы)",
              "        if(cur_ship)",
              "        {",
              "            //Маркер не преследовать цель, если та покинула систему, автоматически выводит корабли из скрипта при потере цели",
              "            SetData(6, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(Id(cur_ship), 3, tdwd1);",
              "        }",
              "        else",
              "        {",
              "            OrderLock(tdwd1, 0);",
              "            ShipOut(tdwd1);",
              "        }",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "    //Завершаем квест и получаем пиздюлей",
              "    EndQuestHQ(ActiveQuestHQ, 0);",
              "}",
              "else",
              "{",
              "    //Если отношение охраняемой цели к игроку упало ниже 100%, исправляем это",
              "    //(естественно, только если игрок сам не начал вдруг мочить цель)",
              "    if(!Hit(cur_ship, 0))",
              "    {",
              "        if(RelationToRanger(cur_ship, Player()) < 100)",
              "        {",
              "            RelationToRanger(cur_ship, Player(), 100);",
              "        }",
              "    }",
              "",
              "    //Первый этап квеста, наёмники собираются в системе с охраняемым кораблём",
              "    //Сам контрабандист пока сидит на стартовой планете",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если наёмники в полном составе прибыли в стартовую систему",
              "        if(GroupIn(QuestMercs, GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)))",
              "        {",
              "            //Если наёмники уже приземлились на планету с контрабандистом, то отправляем их прикрывать его",
              "            if(GroupIn(QuestMercs, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])))",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ShipRefuel(tdwd1);",
              "                    SetData(0, 0, tdwd1);",
              "                    SetData(0, 1, tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(Id(cur_ship), 3, tdwd1);",
              "                    //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за контрабандистом",
              "                    SetData(100, 0, tdwd1);",
              "                    OrderTakeOff(tdwd1);",
              "                }",
              "                //Сам же контрабандист тем временем отправляется в коалиционную систему",
              "                //Ручной приказ здесь, чтобы он не закупал себе рандомные товары перед взлётом",
              "                SetData(100, 0, cur_ship);",
              "                OrderTakeOff(cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "",
              "                //Переходим на второй этап квеста, следование (с защитой) за контрабандистом",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwo'), '<Star' + '>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "                QuestTargetDialogCall = CurTurn() + 3; //Контрабандист сам вызовет игрока после взлёта",
              "            }",
              "            //Отправляем их на планету с контрабандистом",
              "            else",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 1, tdwd1);",
              "                    //Множим Id на два для обозначения маркера планеты",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "                }",
              "            }",
              "        }",
              "        //Если на данном этапе все наёмники по каким-то причинам уничтожены, то квест провален",
              "        else if(!GroupCount(QuestMercs))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTime');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Все уцелевшие пираты тупо дохнут",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "                ShipDestroy(tdwd1, 1);",
              "            }",
              "",
              "            //Все уцелевшие военные выводятся из скрипта",
              "            for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestAttackers, i);",
              "                OrderLock(tdwd1, 0);",
              "                ShipOut(tdwd1);",
              "            }",
              "",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "            ShipDestroy(GroupToShip(QuestTarget), 1);",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "            //Завершаем квест и получаем пиздюлей",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "    }",
              "    //Второй этап задания, наёмники следуют за контрабандистом, попутно его защищая,",
              "    //а сам контрабандист отправляется в коалиционную систему на встречу с пиратами для передачи контрабанды",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Контрабандист прибыл в коалиционную систему",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "        if(GroupIn(QuestTarget, cur_star) && ShipInNormalSpace(GroupToShip(QuestTarget)))",
              "        {",
              "            tdwd2 = GroupToShip(QuestSupport);",
              "            //Если пираты ещё не были созданы (в группе лишь \"филлерный\" транк на Меркурии)",
              "            if(ShipTypeN(tdwd2) == t_Tranclucator)",
              "            {",
              "                //Убираем транка из группы",
              "                ShipDestroy(tdwd2, 1);",
              "                ShipOut(tdwd2);",
              "                //Создаём трёх пиратов на Роджерии",
              "                //Отправляем пиратов ему навстречу, предварительно выкинув их из гипера",
              "                cur_item = GetItemFromShip(cur_ship, ScriptItemToItem(QuestItem));",
              "                for(i = 1; i <= 3; i = i + 1)",
              "                {",
              "                    //Хотел тут юзать BuyPirate, но хуй там, Роджерия пиратов больше не рандомизирует",
              "                    tdwd1 = BuyWarrior(PlanetPirateClan(), 300);",
              "                    SetName(tdwd1, CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.PirateName' + i));",
              "                    ShipSubType(tdwd1, 0);",
              "                    ShipOwner(tdwd1, ShipPilotRace(tdwd1));",
              "                    //Вешаем пиратам бонусы, гарантирующие наличие слотов форсажа и захвата",
              "                    ShipSpecialBonuses(tdwd1, bonSlotHook, 1);",
              "                    ShipSpecialBonuses(tdwd1, bonSlotForsage, 1);",
              "                    //А это чтобы скрыть от игрока их систему отбытия",
              "                    ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) - 10000);",
              "                    for(k = 1; k <= 4; k = k + 1) ShipRefit(tdwd1);",
              "                    ShipJoin(QuestSupport, tdwd1);",
              "                    NoTargetToShip(tdwd1, 3);",
              "",
              "                    //Убеждаемся, что у всех пиратов имеется захват",
              "                    if(!ShipEqInSlot(tdwd1, t_CargoHook))",
              "                    {",
              "                        tdwd3 = CreateEquipment(t_CargoHook, RndObject(25, 40, tdwd1), GTL, ItemOwner(ShipItems(tdwd1, 0)));",
              "                        AddItemToShip(tdwd1, tdwd3);",
              "                        ItemIsInUse(tdwd3, tdwd1, 1);",
              "                    }",
              "                    //И что у захвата пиратов хватает мощности для захвата контрабанды такого размера",
              "                    if(ShipHookPower(tdwd1) < ItemSize(cur_item)) ShipSpecialBonuses(tdwd1, bonHook, ItemSize(cur_item) - ShipHookPower(tdwd1));",
              "                    ShipSpecialBonuses(tdwd1, bonHookRadius, 100);",
              "                    //Также убеждаемся, что у любого пирата в трюме хватит места для подбора контрабанды",
              "                    AddItemToShip(tdwd1, cur_item);",
              "                    //Устраняем возможный перевес",
              "                    ShipImproveItems(tdwd1, 0);",
              "                    GetItemFromShip(tdwd1, cur_item);",
              "",
              "                    //\"Лидер\" пиратов летит к контрабандисту, а остальные следуют за ним",
              "                    if(!i) SetData(Id(cur_ship), 3, tdwd1);",
              "                    else SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "",
              "                    //Отправляем пиратов в гипер",
              "                    MakeShipEnterStar(tdwd1, cur_star, GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 10] - 1), 1);",
              "                }",
              "",
              "                //Возвращаем груз контрабандисту",
              "                AddItemToShip(cur_ship, cur_item);",
              "                //А контрабандиста отправляем навстречу пиратам",
              "                SetData(Id(GroupToShip(QuestSupport)), 3, cur_ship);",
              "            }",
              "            else",
              "            {",
              "                tint3 = Dist(cur_ship, tdwd2);",
              "                //Если контрабандист и пираты уже достаточно сблизились",
              "                if(tint3 <= 210)",
              "                {",
              "                    //Обновляем уведомление задания (осуществляется сделка)",
              "                    //Данное уведомление будет обновляться на протяжении нескольких ходов, несмотря на то, что текст в нём меняться не будет (но типа и пофиг)",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwoWait'), '<Star'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                    //Если предмет ещё не дропнут",
              "                    if(ItemIn(QuestItem, cur_ship))",
              "                    {",
              "                        tint1 = CoordX(cur_ship);",
              "                        tint2 = CoordY(cur_ship);",
              "                        DropItemInSystem(cur_star, GetItemFromShip(cur_ship, ScriptItemToItem(QuestItem)), tint1, tint2, round(0.5 * (tint1 + CoordX(tdwd2))), round(0.5 * (tint2 + CoordY(tdwd2))));",
              "                        //До момента подбора груза отключаем автоматическую логику кораблей",
              "                        //Ставим пропуск сразу двух обработок стейта, т.к. при смене стейта код пирата сработает повторно",
              "                        SetData(100, 0, cur_ship);",
              "                        SetData(200, 0, tdwd2);",
              "                        if(!StateIs(tdwd2, 'QuestSupportTakeState')) ChangeState('QuestSupportTakeState', tdwd2);",
              "",
              "                        //Контрабандист обращается к пиратам по вопросу сделки",
              "                        if(FilmFlags(0))",
              "                        {",
              "                            if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()) || Dist(Player(), tdwd2) <= ShipRadarRange(Player()))",
              "                            {",
              "                                tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetBeforeSale'), '<Smuggler'+'>', Name(cur_ship), '<Pirate'+'>', Name(tdwd2), '255,240,100');",
              "                                CustomEther('Ether', 0, '', tstr1, cur_ship, tdwd2);",
              "                            }",
              "                        }",
              "                    }",
              "                    //Если же дропнут, то подбираем его \"лидером\" пиратов и триггерим военных",
              "                    else if(ItemIn(QuestItem, cur_star))",
              "                    {",
              "                        //Отправляем всех военных преследовать контрабандиста",
              "                        for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestAttackers, i);",
              "                            SetData(6, 0, tdwd1); //Маркер не преследовать цель, если та покинула систему",
              "                            SetData(Id(cur_ship), 3, tdwd1);",
              "                        }",
              "",
              "                        //До момента подбора груза отключаем автоматическую логику кораблей",
              "                        //Ставим пропуск сразу двух обработок стейта, т.к. при смене стейта код пирата сработает повторно",
              "                        SetData(100, 0, cur_ship);",
              "                        SetData(200, 0, tdwd2);",
              "                        if(!StateIs(tdwd2, 'QuestSupportTakeState')) ChangeState('QuestSupportTakeState', tdwd2);",
              "                    }",
              "                    //После чего переключаем этап квеста",
              "                    else if(ItemIn(QuestItem, tdwd2))",
              "                    {",
              "                        if(!StateIs(tdwd2, 'QuestSupportState')) ChangeState('QuestSupportState', tdwd2);",
              "                        //Отправляем всех пиратов восвояси",
              "                        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestSupport, i);",
              "                            SetData(66, 0, tdwd1); //Ставим пиратам маркер на самоликвидацию",
              "                            SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10], 1, tdwd1);",
              "                        }",
              "",
              "                        //Отправляем контрабандиста на родную планету (если доберётся, то победа)",
              "                        SetData(0, 0, cur_ship);",
              "                        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "                        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "                        SetData(0, 3, cur_ship);",
              "",
              "                        //Переключаем этап квеста, контрабандист отправляется домой",
              "                        //Обновляем уведомление задания",
              "                        tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                        tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageThree'), '<Star'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '255,240,100');",
              "                        CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                        if(FilmFlags(0))",
              "                        {",
              "                            //Военный обращается к пиратам с угрозой",
              "                            tdwd1 = GroupToShip(QuestAttackers);",
              "                            if(Dist(Player(), tdwd1) <= ShipRadarRange(Player()) || Dist(Player(), tdwd2) <= ShipRadarRange(Player()))",
              "                            {",
              "                                tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.WarriorsAttack'), '<Warrior'+'>', Name(tdwd1), '<Pirate'+'>', Name(tdwd2), '255,240,100');",
              "                                CustomEther('Ether', 0, '', tstr1, tdwd1, tdwd2);",
              "                            }",
              "                            //Контрабандист просит наёмников о помощи",
              "                            if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                            {",
              "                                tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetAfterSale'), '<Smuggler'+'>', Name(cur_ship), '255,240,100');",
              "                                CustomEther('Ether2', 0, '', tstr1, tdwd1, tdwd2);",
              "                            }",
              "                        }",
              "",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "                    }",
              "                }",
              "                //Аккуратно сближаем корабли для передачи груза",
              "                else",
              "                {",
              "                    CalcApproachCoordinates(cur_ship, tdwd2, 200);",
              "                    //Задаём точку движения для контрабандиста",
              "                    OrderMove(cur_ship, tarr1[0], tarr1[1]);",
              "                    SetData(100, 0, cur_ship);",
              "                    //Задаём точку движения для \"лидера\" пиратов",
              "                    OrderMove(tdwd2, tarr1[2], tarr1[3]);",
              "                    SetData(100, 0, tdwd2);",
              "",
              "                    //Остальные пираты как бы следуют за \"лидером\"",
              "                    for(i = 1; i < GroupCount(QuestSupport); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestSupport, i);",
              "                        SetData(Id(tdwd2), 3, tdwd1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста (последний)",
              "    //Контрабандист отправляется на свою родную планету (где в итоге и сдохнет)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Контрабандист вернулся на родную планету",
              "        if(GroupIn(QuestTarget, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])))",
              "        {",
              "            //Все уцелевшие наёмники возвращаются в штаб",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(-3, 3, tdwd1);",
              "                ChangeState('ReturningStrikeState', tdwd1);",
              "            }",
              "            //Все уцелевшие военные выводятся из скрипта (на всякий случай)",
              "            for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestAttackers, i);",
              "                OrderLock(tdwd1, 0);",
              "                ShipOut(tdwd1);",
              "            }",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Planet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "            CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Завершаем жизненный путь контрабандиста",
              "            ShipDestroy(GroupToShip(QuestTarget), 1);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "            //Завершаем квест и получаем награду",
              "            EndQuestHQ(ActiveQuestHQ, 1);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  375,
          "#":  377,
          "Total.Lines":  145,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Private.Destroy.1 в процессе",
              "//Если уничтожили цель задания, либо истекло время на его выполнение",
              "cur_ship = GroupToShip(QuestTarget);",
              "if(!cur_ship || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие пираты-дружбаны отправляются умирац",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "        if(~ShipFindCustomShipInfoByType(tdwd1, 'ShuMercsHQ_QuestTargetAttackMark'))",
              "        {",
              "            ShipDeleteCustomShipInfo(tdwd1, 'ShuMercsHQ_QuestTargetAttackMark');",
              "        }",
              "",
              "        SetData(66, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1); //Умножаем Id на два для указателя посадки на планету, а не станцию",
              "        SetData(0, 3, tdwd1);",
              "    }",
              "",
              "    check = 0;",
              "    //Успех",
              "    if(!cur_ship)",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        //Пират-цель выводится из скрипта",
              "        ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) + 10000);",
              "        if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark'))",
              "        {",
              "            ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark');",
              "        }",
              "        OrderLock(cur_ship, 0);",
              "        ShipOut(cur_ship);",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetName' + '>', Name(cur_ship), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "    //Первый и последний этап квеста, наёмники охотятся за целью",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Также постоянно чиним пирату двигатель, а то не сможет юзать форсаж",
              "        cur_item = ShipEqInSlot(cur_ship, t_Engine);",
              "        if(ItemDurability(cur_item) < 50) ItemDurability(cur_item, 50);",
              "",
              "        //Если игрок или его наёмники уже напали на пирата",
              "        if(ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark') == -1)",
              "        {",
              "            //Пират сразу же драпает в систему с братанами, если он пока ещё не там",
              "            cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "            if(!GroupIn(QuestTarget, cur_star))",
              "            {",
              "                //Также на это время врубаем ему форсаж",
              "                SetData(20, 0, cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "            }",
              "            else",
              "            {",
              "                if(ShipInNormalSpace(cur_ship))",
              "                {",
              "                    if(GroupToShip(QuestAttackers))",
              "                    {",
              "                        //В системе с братанами пират-цель встречается с братанами, а затем вновь получает свободную логику",
              "                        if(Dist(cur_ship, GroupToShip(QuestAttackers)) <= 300)",
              "                        {",
              "                            SetData(33, 0, cur_ship);",
              "",
              "                            //Пират-цель угрожает игроку (и наёмникам), если тот последовал за ним",
              "                            if(!ActiveQuestsHQArray[ActiveQuestHQ, 10])",
              "                            {",
              "                                if(FilmFlags(0))",
              "                                {",
              "                                    if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                                    {",
              "                                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetNearPirates'), '<Pirate' + '>', Name(cur_ship), '255,240,100');",
              "                                        CustomEther('Ether2', 0, '', tstr1, cur_ship);",
              "",
              "                                        //Запоминаем, что данная угроза пирата уже высвечивалась игроку",
              "                                        ActiveQuestsHQArray[ActiveQuestHQ, 10] = 1;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "                        //Но чуть что, тут же несётся обратно к братанам на форсаже",
              "                        else",
              "                        {",
              "                            SetData(20, 0, cur_ship);",
              "                            //А сами братаны отправляются прикрывать своего дурного братишку",
              "                            for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "                            {",
              "                                tdwd1 = GroupShip(QuestAttackers, i);",
              "                                SetData(0, 0, tdwd1);",
              "                                SetData(Id(cur_ship), 3, tdwd1);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  376,
          "#":  378,
          "Total.Lines":  139,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Private.Destroy.2 в процессе",
              "//Если уничтожили цель задания, либо истекло время на его выполнение",
              "cur_ship = GroupToShip(QuestTarget);",
              "if(!cur_ship || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие военные выводятся из скрипта",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "        if(~ShipFindCustomShipInfoByType(tdwd1, 'ShuMercsHQ_QuestTargetAttackMark'))",
              "        {",
              "            ShipDeleteCustomShipInfo(tdwd1, 'ShuMercsHQ_QuestTargetAttackMark');",
              "        }",
              "        OrderLock(tdwd1, 0);",
              "        ShipOut(tdwd1);",
              "    }",
              "",
              "    check = 0;",
              "    //Успех",
              "    if(!cur_ship)",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        //Военный-цель выводится из скрипта",
              "        if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark'))",
              "        {",
              "            ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark');",
              "        }",
              "        OrderLock(cur_ship, 0);",
              "        ShipOut(cur_ship);",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    if(~ActiveQuestsHQArray[ActiveQuestHQ, 8]) NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "    if(~ActiveQuestsHQArray[ActiveQuestHQ, 9]) NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 9] - 1), 0);",
              "    if(~ActiveQuestsHQArray[ActiveQuestHQ, 10]) NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 10] - 1), 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetName'+'>', Name(cur_ship), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "    //Первый и последний этап квеста, наёмники охотятся за целью",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если игрок или его наёмники ещё не напали на группу военных",
              "        //А также если цель не надамажили какие-то рандомы",
              "        if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark') && HullDamage(cur_ship) < 70)",
              "        {",
              "            //Если время на патруль в данной системе для группы квестовых военных подошло к концу",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 11] <= CurTurn())",
              "            {",
              "                //Определяем, в какую систему для цикла патруля военные смогут прыгнуть дальше,",
              "                //и отправляем их туда",
              "                tdwd1 = Id(ShipStar(cur_ship));",
              "                if(tdwd1 == ActiveQuestsHQArray[ActiveQuestHQ, 7]) num = 1;",
              "                else if(tdwd1 == ActiveQuestsHQArray[ActiveQuestHQ, 8]) num = 2;",
              "                else if(tdwd1 == ActiveQuestsHQArray[ActiveQuestHQ, 9]) num = 3;",
              "                else if(tdwd1 == ActiveQuestsHQArray[ActiveQuestHQ, 10]) num = 0;",
              "",
              "                if(~ActiveQuestsHQArray[ActiveQuestHQ, 7 + num]) num = 7 + num;",
              "                else num = 7;",
              "",
              "                //Маркер автоматического перевода корабля в тип поведения 33 по завершении его текущего приказа",
              "                OrderLock(cur_ship, 1);",
              "                SetData(32, 0, cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, num], 1, cur_ship);",
              "                for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestAttackers, i);",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, num], 1, tdwd1);",
              "                }",
              "",
              "                //Также обновляем таймер патруля с учётом времени,",
              "                //которое предположительно будет затрачено патрулём на прыжок",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11] = CurTurn() + 21;",
              "            }",
              "        }",
              "        //Иначе же просто активируем свободную базовую логику цели, и пусть сами отдуваются",
              "        else",
              "        {",
              "            //Триггерим всю планету цели против наёмников игрока",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                RelationToRanger(GetShipHomePlanet(cur_ship), tdwd1, 0);",
              "            }",
              "            //На всякий случай сбрасываем маркер возможного прыжка у военных из группы сопровождения цели",
              "            for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestAttackers, i);",
              "                SetData(0, 1, tdwd1);",
              "            }",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 11] = 500000;",
              "            OrderLock(cur_ship, 0);",
              "            SetData(33, 0, cur_ship);",
              "            ChangeState('QuestTargetState', cur_ship);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  380,
          "#":  381,
          "Total.Lines":  282,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestAttackers (в этом стейте корабль будет пытаться убить QuestTarget):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если выставлен маркер на самоликвидацию",
              "    if(GetData(0) == 66)",
              "    {",
              "        OrderNone(CurShip);",
              "        ShipDestroy(CurShip, 1);",
              "    }",
              "    else",
              "    {",
              "        if(GetData(1))",
              "        {",
              "            //Если прилетели в указанную систему",
              "            object = GalaxyStar(GetData(1) - 1);",
              "            if(cur_star == object)",
              "            {",
              "                //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "                //и переводим его в свободный от стейта контроль",
              "                if(GetData(0) == 34)",
              "                {",
              "                    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                    SetData(33, 0);",
              "                    OrderLock(CurShip, 0);",
              "                }",
              "                SetData(0, 1);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "//ShipFreeFlight(CurShip, 1);",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 1);",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2))",
              "{",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //Если нападающему выставлен маркер на самоликвидацию",
              "            if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            else if(GetData(0) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0);",
              "                exit;",
              "            }",
              "            //При данном маркере после совершения посадки на планету атакующий автоматически выйдет из скрипта",
              "            else if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2);",
              "                //Если нападающему выставлен маркер на самоликвидацию",
              "                if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "                //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "                else if(GetData(0) == 32)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    SetData(33, 0);",
              "                    exit;",
              "                }",
              "                //При данном маркере после совершения посадки на станцию атакующий автоматически выйдет из скрипта",
              "                else if(GetData(0) == 3)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    ShipOut(CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            if(GetData(0) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0);",
              "                exit;",
              "            }",
              "            //При данном маркере после уничтожения станции атакующий автоматически выйдет из скрипта",
              "            else if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                //Приказ на уничтожение цели (следуем за ней до упора)",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderFollowShip(CurShip, object, 1);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            //Если цель улетела от нападающего в другую систему - догоняем",
              "            if(GetData(0) != 6 || GetData(0) == 7)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, ShipStar(object));",
              "            }",
              "            //Но при маркере поведения 6 - отпускаем цель",
              "            else",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 3);",
              "        //Если стоит маркер на автоматический выход из скрипта при потере цели",
              "        if(GetData(0) == 6 || GetData(0) == 7)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            ShipOut(CurShip);",
              "            exit;",
              "        }",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        else if(GetData(0) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0);",
              "            exit;",
              "        }",
              "        else",
              "        {",
              "            float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "            OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  383,
          "#":  384,
          "Total.Lines":  385,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestSupport:",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если выставлен маркер на самоликвидацию",
              "    if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "    else",
              "    {",
              "        if(GetData(1))",
              "        {",
              "            //Если прилетели в указанную систему",
              "            object = GalaxyStar(GetData(1) - 1);",
              "            if(cur_star == object)",
              "            {",
              "                //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "                //и переводим его в свободный от стейта контроль",
              "                if(GetData(0) == 34)",
              "                {",
              "                    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                    SetData(33, 0);",
              "                    OrderLock(CurShip, 0);",
              "                }",
              "                SetData(0, 1);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Кидаем игроку вызов от первого в списке исполнения кода саппорта если для этого выставлен соответствующий маркер",
              "if(QuestSupportDialogCall > CurTurn())",
              "{",
              "    if(cur_star == ShipStar(Player()))",
              "    {",
              "        if(ShipInNormalSpace(Player()))",
              "        {",
              "            if(ShipInNormalSpace(CurShip))",
              "            {",
              "                if(CurShip == GroupToShip(QuestSupport)) //Чтобы на связь с игроком выходил только первый (как правило, ведущий) корабль в группе",
              "                {",
              "                    if(Dist(Player(), CurShip) <= ShipRadarRange(Player()))",
              "                    {",
              "                        QuestSupportDialogCall = -1;",
              "                        Dialog(CurShip);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Игрок напал на своих помощников, так что переводим их во враждебный стейт",
              "int check = GetData(0);",
              "if(check >= 10000)",
              "{",
              "    SetData(GetData(0) - 10000, 0);",
              "    int dwd0 = GetData(0);",
              "    int dwd1 = GetData(1);",
              "    int dwd2 = GetData(2);",
              "    int dwd3 = GetData(3);",
              "    ShipOut(CurShip);",
              "    ShipJoin(QuestAttackers, CurShip, '', dwd0, dwd1, dwd2, dwd3);",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "//ShipFreeFlight(CurShip, 1);",
              "",
              "//Маркер на принудительную активацию форсажа",
              "if(GetData(0) == 20)",
              "{",
              "    OrderForsage(CurShip, 1);",
              "}",
              "",
              "//Сбрасываем агрессию в отношении наёмников игрока и охраняемых ими кораблей",
              "dword target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        int no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "}",
              "//Если цель всё ещё не сброшена, то добавляем её в список рандомных нападающих уёбков (всегда пираты)",
              "if(target)",
              "{",
              "    if(!ShipInScript(target, 0))",
              "    {",
              "        ShipJoin(RandomAttackers, target);",
              "        //Через 10 дней этот корабль автоматически удалится из группы",
              "        SetData(CurTurn() + 10, 0, target);",
              "    }",
              "}",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else SetData(0, 1);",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2))",
              "{",
              "    //Посадка на планету",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //Если помогающему выставлен маркер на самоликвидацию",
              "            if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "            //При данном маркере после совершения посадки на планету помогающий автоматически выйдет из скрипта",
              "            else if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    //Посадка на станцию",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2);",
              "                //Если помогающему выставлен маркер на самоликвидацию",
              "                if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "                //При данном маркере после совершения посадки на станцию помогающий автоматически выйдет из скрипта",
              "                else if(GetData(0) == 3)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    ShipOut(CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //При данном маркере после уничтожения станции помогающий автоматически выйдет из скрипта",
              "            if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                //Защитные протоколы поведения (помогающие охраняют свою цель от других кораблей)",
              "                if(GetData(0) <= 1)",
              "                {",
              "                    //И сами совершают за ней посадки на планеты и станции",
              "                    if(!ShipInNormalSpace(object))",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(!sit) sit = GetShipRuins(object);",
              "",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            if(GetShipPlanet(CurShip) != sit && GetShipRuins(CurShip) != sit) OrderTakeOff(CurShip);",
              "                        }",
              "                        else OrderLanding(CurShip, sit);",
              "                    }",
              "                    else",
              "                    {",
              "                        //Взлетаем вслед за целью",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            OrderTakeOff(CurShip);",
              "                            exit;",
              "                        }",
              "",
              "                        OrderFollowShip(CurShip, object, 0);",
              "",
              "                        //Ищем в системе любые враждебные цели корабли, выбираем ближайший, и атакуем",
              "                        int closest_dist = 500000;",
              "                        target = 0;",
              "                        for(int i = 0; i < StarShips(cur_star); i = i + 1)",
              "                        {",
              "                            dword ship = StarShips(cur_star, i);",
              "",
              "                            if(ShipInCurScript(ship))",
              "                            {",
              "                                //Добавление случайных атакующих в группу было сделано исключительно в целях оптимизации,",
              "                                //но объективно оно здесь ни к чему... может позже уберу",
              "                                if(ShipGroup(ship) == RandomAttackers) continue;",
              "                            }",
              "",
              "                            if(IsPlayer(ship)) continue; //Но не игрока (если вдруг игрок долбоёб, и напал на охраняемый по своему же заданию корабль)",
              "                            if(ShipInHyperSpace(ship, 1)) continue;",
              "                            if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "                            if(RelationToShip(ship, object) < 10)",
              "                            {",
              "                                if(!ShipInScript(ship, 0))",
              "                                {",
              "                                    ShipJoin(RandomAttackers, ship);",
              "                                    //Через 10 дней этот корабль автоматически удалится из группы",
              "                                    SetData(CurTurn() + 10, 0, ship);",
              "                                }",
              "",
              "                                int dist = Dist(CurShip, ship);",
              "                                if(dist < closest_dist)",
              "                                {",
              "                                    //Если ближайший корабль не засел на планете/станции,",
              "                                    //либо если других враждебных кораблей в системе не осталось",
              "                                    if(ShipInNormalSpace(ship) || !target)",
              "                                    {",
              "                                        closest_dist = dist;",
              "                                        target = ship;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        //Если нашли подходящую цель, то выставляем её в качестве основного врага для помогающего",
              "                        if(target)",
              "                        {",
              "                            ShipSetBad(CurShip, target);",
              "                            ShipFreeFlight(CurShip, 1);",
              "",
              "                            //Это здесь нужно, чтобы также добавлять в группу нападающих всяких левых мудаков (пираты)",
              "                            if(!ShipInScript(target, 0))",
              "                            {",
              "                                ShipJoin(RandomAttackers, target);",
              "                                //Через 10 дней этот корабль автоматически удалится из группы",
              "                                SetData(CurTurn() + 10, 0, target);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                //Приказ на уничтожение цели (следуем за ней до упора)",
              "                else if(GetData(0) <= 3)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else",
              "                    {",
              "                        OrderFollowShip(CurShip, object, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если цель улетела от наёмника в другую систему - догоняем",
              "        else",
              "        {",
              "            if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "            else OrderJump(CurShip, ShipStar(object));",
              "        }",
              "    }",
              "    else SetData(0, 3);",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Метка специально для станций, чтоб кругалями не летали",
              "    if(GetData(0) == 12) exit;",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "        OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  388,
          "#":  389,
          "Total.Lines":  383,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestSupport:",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если выставлен маркер на самоликвидацию",
              "    if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "    else",
              "    {",
              "        if(GetData(1))",
              "        {",
              "            //Если прилетели в указанную систему",
              "            object = GalaxyStar(GetData(1) - 1);",
              "            if(cur_star == object)",
              "            {",
              "                //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "                //и переводим его в свободный от стейта контроль",
              "                if(GetData(0) == 34)",
              "                {",
              "                    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                    SetData(33, 0);",
              "                    OrderLock(CurShip, 0);",
              "                }",
              "                SetData(0, 1);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Кидаем игроку вызов от первого в списке исполнения кода саппорта если для этого выставлен соответствующий маркер",
              "if(QuestSupportDialogCall > CurTurn())",
              "{",
              "    if(cur_star == ShipStar(Player()))",
              "    {",
              "        if(ShipInNormalSpace(Player()))",
              "        {",
              "            if(ShipInNormalSpace(CurShip))",
              "            {",
              "                if(CurShip == GroupToShip(QuestSupport)) //Чтобы на связь с игроком выходил только первый (как правило, ведущий) корабль в группе",
              "                {",
              "                    if(Dist(Player(), CurShip) <= ShipRadarRange(Player()))",
              "                    {",
              "                        QuestSupportDialogCall = -1;",
              "                        Dialog(CurShip);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Игрок напал на своих помощников, так что переводим их во враждебный стейт",
              "int check = GetData(0);",
              "if(check >= 10000)",
              "{",
              "    SetData(GetData(0) - 10000, 0);",
              "    int dwd0 = GetData(0);",
              "    int dwd1 = GetData(1);",
              "    int dwd2 = GetData(2);",
              "    int dwd3 = GetData(3);",
              "    ShipOut(CurShip);",
              "    ShipJoin(QuestAttackers, CurShip, '', dwd0, dwd1, dwd2, dwd3);",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Маркер на принудительную активацию форсажа",
              "if(GetData(0) == 20)",
              "{",
              "    OrderForsage(CurShip, 1);",
              "}",
              "",
              "//Сбрасываем агрессию в отношении наёмников игрока и охраняемых ими кораблей",
              "dword target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        int no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "}",
              "//Если цель всё ещё не сброшена, то добавляем её в список рандомных нападающих уёбков (всегда пираты)",
              "if(target)",
              "{",
              "    if(!ShipInScript(target, 0))",
              "    {",
              "        ShipJoin(RandomAttackers, target);",
              "        //Через 10 дней этот корабль автоматически удалится из группы",
              "        SetData(CurTurn() + 10, 0, target);",
              "    }",
              "}",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else SetData(0, 1);",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2))",
              "{",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //Если помогающему выставлен маркер на самоликвидацию",
              "            if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "            //При данном маркере после совершения посадки на планету помогающий автоматически выйдет из скрипта",
              "            else if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2);",
              "                //Если помогающему выставлен маркер на самоликвидацию",
              "                if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "                //При данном маркере после совершения посадки на станцию помогающий автоматически выйдет из скрипта",
              "                else if(GetData(0) == 3)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    ShipOut(CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //При данном маркере после уничтожения станции помогающий автоматически выйдет из скрипта",
              "            if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                //Защитные протоколы поведения (помогающие охраняют свою цель от других кораблей)",
              "                if(GetData(0) <= 1)",
              "                {",
              "                    //И сами совершают за ней посадки на планеты и станции",
              "                    if(!ShipInNormalSpace(object))",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(!sit) sit = GetShipRuins(object);",
              "",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            if(GetShipPlanet(CurShip) != sit && GetShipRuins(CurShip) != sit) OrderTakeOff(CurShip);",
              "                        }",
              "                        else OrderLanding(CurShip, sit);",
              "                    }",
              "                    else",
              "                    {",
              "                        //Взлетаем вслед за целью",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            OrderTakeOff(CurShip);",
              "                            exit;",
              "                        }",
              "",
              "                        OrderFollowShip(CurShip, object, 0);",
              "",
              "                        //Ищем в системе любые враждебные цели корабли, выбираем ближайший, и атакуем",
              "                        int closest_dist = 500000;",
              "                        target = 0;",
              "                        for(int i = 0; i < StarShips(cur_star); i = i + 1)",
              "                        {",
              "                            dword ship = StarShips(cur_star, i);",
              "",
              "                            if(ShipInCurScript(ship))",
              "                            {",
              "                                //Добавление случайных атакующих в группу было сделано исключительно в целях оптимизации,",
              "                                //но объективно оно здесь ни к чему... может позже уберу",
              "                                if(ShipGroup(ship) == RandomAttackers) continue;",
              "                            }",
              "",
              "                            if(IsPlayer(ship)) continue; //Но не игрока (если вдруг игрок долбоёб, и напал на охраняемый по своему же заданию корабль)",
              "                            if(ShipInHyperSpace(ship, 1)) continue;",
              "                            if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "                            if(RelationToShip(ship, object) < 10)",
              "                            {",
              "                                if(!ShipInScript(ship, 0))",
              "                                {",
              "                                    ShipJoin(RandomAttackers, ship);",
              "                                    //Через 10 дней этот корабль автоматически удалится из группы",
              "                                    SetData(CurTurn() + 10, 0, ship);",
              "                                }",
              "",
              "                                int dist = Dist(CurShip, ship);",
              "                                if(dist < closest_dist)",
              "                                {",
              "                                    //Если ближайший корабль не засел на планете/станции,",
              "                                    //либо если других враждебных кораблей в системе не осталось",
              "                                    if(ShipInNormalSpace(ship) || !target)",
              "                                    {",
              "                                        closest_dist = dist;",
              "                                        target = ship;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        //Если нашли подходящую цель, то выставляем её в качестве основного врага для помогающего",
              "                        if(target)",
              "                        {",
              "                            ShipSetBad(CurShip, target);",
              "                            ShipFreeFlight(CurShip, 1);",
              "",
              "                            //Это здесь нужно, чтобы также добавлять в группу нападающих всяких левых мудаков (пираты)",
              "                            if(!ShipInScript(target, 0))",
              "                            {",
              "                                ShipJoin(RandomAttackers, target);",
              "                                //Через 10 дней этот корабль автоматически удалится из группы",
              "                                SetData(CurTurn() + 10, 0, target);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                //Приказ на уничтожение цели (следуем за ней до упора)",
              "                else if(GetData(0) <= 3)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else",
              "                    {",
              "                        OrderFollowShip(CurShip, object, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если цель улетела от наёмника в другую систему - догоняем",
              "        else",
              "        {",
              "            if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "            else OrderJump(CurShip, ShipStar(object));",
              "        }",
              "    }",
              "    else SetData(0, 3);",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Метка специально для станций, чтоб кругалями не летали",
              "    if(GetData(0) == 12) exit;",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "        OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  390,
          "#":  391,
          "Total.Lines":  661,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок заговорил с кораблём, являющимся целью задания",
              "SkipGreeting();",
              "",
              "//Если позже число одновременно активных квестов будет расширяться,",
              "//то необходимо будет добавить сюда учёт номера квеста в массиве, т.к.",
              "//ActiveQuestHQ затирается сразу же по завершении квеста, что сломает обращение к ActiveQuestsHQArray",
              "//для квестовых кораблей, не успевших сдохнуть сразу после задания",
              "//(могут ещё возвращаться на планету или в гипер)",
              "int ship_group = ShipGroup(cur_ship);",
              "str employer_type = GetParFromString(ActiveQuestsHQArray[1, 3], '.', 3, 0);",
              "str quest_type = GetParFromString(ActiveQuestsHQArray[1, 3], '.', 4, 0);",
              "int quest_num = GetParFromString(ActiveQuestsHQArray[1, 3], '.', 5, 0);",
              "",
              "//Игрок говорит с кораблём из частного квеста",
              "if(employer_type == 'Private')",
              "{",
              "    if(quest_type == 'Destroy')",
              "    {",
              "        if(quest_num == 1 || quest_num == 2)",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                //Если игрок или его наёмники ещё не напали на цель или её группу сопровождения",
              "                if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark'))",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreetingNormal');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "                //Если уже напали",
              "                else",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreetingFoe');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                if(quest_num == 1)",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreetingFoe');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "                else if(quest_num == 2)",
              "                {",
              "                    //Если игрок или его наёмники ещё не напали на цель или её группу сопровождения",
              "                    if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark'))",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreetingNormal');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    //Если уже напали",
              "                    else",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreetingFoe');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'Protect')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                if(QuestTargetDialogCall == -1) //Если цель задания сама вызывает игрока (при первом знакомстве)",
              "                {",
              "                    tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetTakeOffStart'), '<Consul'+'>', Name(cur_ship), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10])));",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                    QuestTargetDialogCall = 0;",
              "                }",
              "                else",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreeting');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "        else if(quest_num == 2)",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                if(QuestTargetDialogCall == -1) //Если цель задания сама вызывает игрока (при первом знакомстве)",
              "                {",
              "                    tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetTakeOffStart'), '<Smuggler'+'>', Name(cur_ship), '<Star'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)));",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                    QuestTargetDialogCall = 0;",
              "                }",
              "                else",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreeting');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "        else if(quest_num == 3) //Квест на сопровождение лайнера",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                //Лайнер посещает планеты",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "                {",
              "                    if(QuestTargetDialogCall == -1) //Если цель задания сама вызывает игрока (при первом знакомстве)",
              "                    {",
              "                        tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetTakeOffStart'), '<Liner'+'>', Name(cur_ship), '<FirstStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<SecondStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)));",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                        QuestTargetDialogCall = 0;",
              "                    }",
              "                    else",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreeting');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "                //Лайнер возвращается обратно на стартовую планету",
              "                else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "                {",
              "                    //Если на лайнер по пути нападали",
              "                    if(!ActiveQuestsHQArray[ActiveQuestHQ, 12])",
              "                    {",
              "                        tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[1, 3] + '.TargetReturning'), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])));",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        if(!Hit(cur_ship, 0)) //На цель совершил нападение сам игрок или его подельники",
              "                        {",
              "                            tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[1, 3] + '.TargetWasAttacked'), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])));",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        else",
              "                        {",
              "                            tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[1, 3] + '.TargetWasAttackedByPlayer'), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])));",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "        else if(quest_num == 4) //Четвертый квест с пиратом",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                if(Hit(cur_ship, 0)) //На цель совершил нападение сам игрок или его подельники то в любом случае текст ответа у пирата будет один и тот-же",
              "                {",
              "                    if(BuildOwnBase_Condition == 6) tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetTakeOffWasAttackedByPlayerTziptzilot');",
              "                    else tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetTakeOffWasAttackedByPlayer');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "                else",
              "                {",
              "                    if(QuestTargetDialogCall == -1) //Если цель задания сама вызывает игрока",
              "                    {",
              "                        if(BuildOwnBase_Condition == 6) tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetTakeOffStartTziptzilot');",
              "                        else tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetTakeOffStart');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                        QuestTargetDialogCall = -2;",
              "                    }",
              "                    else",
              "                    {",
              "                        //Если статус квеста 1 или 2 то мы просто делаем стандартное приветствие",
              "                        if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreeting');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        //Если статус квеста 3 то мы делаем разные варианты реплик в зависимости от типа атакующих кораблей",
              "                        else",
              "                        {",
              "                            if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 1)",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreetingIfDomikAttacked');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                            else if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 2)",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreetingIfWarriorsAttacked');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                            else if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 3)",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreetingIfPiratesAttacked');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                            else",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreetingIfNotAttacked');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                if(quest_num == 4)",
              "                {",
              "                    //Проверяем тип атакующих кораблей",
              "                    if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 1)",
              "                    {",
              "                        //Если у игрока есть интерком",
              "                        if(HaveProgramm(5))",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingDomikIntercom' + ShipSubrace(cur_ship));",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        else",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingDomik' + RndObject(1, 5, cur_ship));",
              "                            tstr2 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingDomicAnswer');",
              "                        }",
              "                    }",
              "                    else if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 2)",
              "                    {",
              "                        tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingWarrior'), '<TargetName'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 0]);",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 3)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingPirate');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Игрок говорит с кораблём из коалиционного квеста",
              "else if(employer_type == 'Coalition')",
              "{",
              "    if(quest_type == 'AttackDominators')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestSupport)",
              "            {",
              "                if(quest_num == 1)",
              "                {",
              "                    if(QuestSupportDialogCall == -1) //Если саппорт сам вызывает игрока (в данном случае при первом знакомстве)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnMeeting');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                        QuestSupportDialogCall = 0;",
              "                    }",
              "                    else",
              "                    {",
              "                        if(ShipGetBad(cur_ship))",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreetingWhileBattle');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        else",
              "                        {",
              "                            cur_star = GalaxyStar(ActiveQuestsHQArray[1, 8] - 1);",
              "                            //Если квест по захвату ещё в процессе",
              "                            if(StarOwner(cur_star) != 2)",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                            //Если система была успешно захвачена",
              "                            else",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreetingAfterWin');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'AttackPirateClan')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestSupport)",
              "            {",
              "                if(quest_num == 1)",
              "                {",
              "                    if(QuestSupportDialogCall == -1) //Если саппорт сам вызывает игрока (в данном случае при первом знакомстве)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnMeeting');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                        QuestSupportDialogCall = 0;",
              "                    }",
              "                    else",
              "                    {",
              "                        if(ShipGetBad(cur_ship))",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreetingWhileBattle');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        else",
              "                        {",
              "                            cur_star = GalaxyStar(ActiveQuestsHQArray[1, 8] - 1);",
              "                            //Если квест по захвату ещё в процессе",
              "                            if(StarOwner(cur_star) != 2)",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                            //Если система была успешно захвачена",
              "                            else",
              "                            {",
              "                                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreetingAfterWin');",
              "                                tstr2 = '</color>' + CT('Talk.Exit');",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'AttackKlissan')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                if(quest_num == 1)",
              "                {",
              "                    //Определяем номер персональной реплики транка по его имени (лучше и проще ничего не придумал)",
              "                    for(int i = 1; i <= 3; i = i + 1)",
              "                    {",
              "                        if(Name(cur_ship) == ActiveQuestsHQArray[ActiveQuestHQ, 10 + i]) break;",
              "                    }",
              "",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TrancGreeting' + i);",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                if(quest_num == 1)",
              "                {",
              "                    if(QuestSupportDialogCall == -1) //Если саппорт сам вызывает игрока (в данном случае при первом знакомстве)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnMeeting');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                        QuestSupportDialogCall = 0;",
              "                    }",
              "                    else",
              "                    {",
              "                        if(ActiveQuestsHQArray[ActiveQuestHQ, 3] <= 2)",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreeting');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        else",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportDuringBattle');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'DefendFromPirateClan')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Игрок говорит с кораблём из пиратского квеста",
              "else if(employer_type == 'PirateClan')",
              "{",
              "    if(quest_type == 'AttackDominators')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestSupport)",
              "            {",
              "                if(QuestSupportDialogCall == -1) //Если саппорт сам вызывает игрока (в данном случае при первом знакомстве)",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnMeeting');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                    QuestSupportDialogCall = 0;",
              "                }",
              "                else",
              "                {",
              "                    if(ShipGetBad(cur_ship))",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreetingWhileBattle');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "                        //Если квест по захвату ещё в процессе",
              "                        if(StarOwner(cur_star) != 2)",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreeting');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        //Если система была успешно захвачена",
              "                        else",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreetingAfterWin');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'AttackCoalition')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestSupport)",
              "            {",
              "                if(QuestSupportDialogCall == -1) //Если саппорт сам вызывает игрока (в данном случае при первом знакомстве)",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnMeeting');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "                    QuestSupportDialogCall = 0;",
              "                }",
              "                else",
              "                {",
              "                    if(ShipGetBad(cur_ship))",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreetingWhileBattle');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "                        //Если квест по захвату ещё в процессе",
              "                        if(StarOwner(cur_star) != 2)",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreeting');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                        //Если система была успешно захвачена",
              "                        else",
              "                        {",
              "                            tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportGreetingAfterWin');",
              "                            tstr2 = '</color>' + CT('Talk.Exit');",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'Destroy')",
              "    {",
              "        if(quest_num == 1)",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreetingNormal');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "                else",
              "                {",
              "                    tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.TargetGreetingFoe'), '<TargetPlanet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[1, 9])));",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                if(ActiveQuestHQ) //Квест в процессе выполнения",
              "                {",
              "                    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingNormal');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else if(ActiveQuestsHQArray[1, 1] == 3)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingFoe');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersGreetingEnd');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "                else //Квест уже завершился",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreetingEnd');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "        }",
              "    }",
              "    else if(quest_type == 'Protect')",
              "    {",
              "        if(quest_num == 1) //Задание на похищение и сопровождение к доминиону коалиционного линкора",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                if(ActiveQuestsHQArray[1, 1] <= 3)",
              "                {",
              "                    //Если линкор настроен к игроку враждебно",
              "                    if(ShipGetBad(cur_ship) == Player() || RelationToRanger(GetShipHomePlanet(cur_ship), Player()) < 10)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreetingFoe');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreetingNormal');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "                //Далее реплика приветствия линкора будет зависеть от статуса квеста",
              "                else",
              "                {",
              "                    if(ActiveQuestsHQArray[1, 1] == 4 && GetData(0, cur_ship) != 13)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreetingFoe');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else if(ActiveQuestsHQArray[1, 1] == 4)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreeting5');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        tstr1 = '</color>' + Format(CT(ActiveQuestsHQArray[1, 3] + '.TargetGreeting' + ActiveQuestsHQArray[1, 1]), '<BeginPlanet' + '>', Name(IdToPlanet(ActiveQuestsHQArray[1, 9])));",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                if(ActiveQuestsHQArray[1, 1])",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "                else",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreetingAfterFailed');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                }",
              "            }",
              "            else if(ship_group == QuestAttackers)",
              "            {",
              "                tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.AttackersGreeting');",
              "                tstr2 = '</color>' + CT('Talk.Exit');",
              "            }",
              "        }",
              "        else if(quest_num == 2)",
              "        {",
              "            if(ship_group == QuestTarget)",
              "            {",
              "                //Доминион связывается с игроком",
              "                if(QuestTargetDialogCall == -1)",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.TargetGreeting');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                    QuestTargetDialogCall = -2;",
              "                }",
              "            }",
              "            else if(ship_group == QuestSupport)",
              "            {",
              "                if(QuestSupportDialogCall == -1) //Если сапорт задания сам вызывает игрока",
              "                {",
              "                    tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportTakeOffStart');",
              "                    tstr2 = '</color>' + CT('Talk.Exit');",
              "                    QuestSupportDialogCall = -2;",
              "                }",
              "                else",
              "                {",
              "                    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreeting');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                    else",
              "                    {",
              "                        tstr1 = '</color>' + CT(ActiveQuestsHQArray[1, 3] + '.SupportGreetingAfterHoleOpening');",
              "                        tstr2 = '</color>' + CT('Talk.Exit');",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  394,
          "#":  395,
          "Total.Lines":  344,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestAttackers (в этом стейте корабль будет защищать QuestTarget):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "",
              "dword object;",
              "dword target;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если выставлен маркер на самоликвидацию",
              "    if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "    else",
              "    {",
              "        if(GetData(1))",
              "        {",
              "            //Если прилетели в указанную систему",
              "            object = GalaxyStar(GetData(1) - 1);",
              "            if(cur_star == object)",
              "            {",
              "                //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "                //и переводим его в свободный от стейта контроль",
              "                if(GetData(0) == 34)",
              "                {",
              "                    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                    SetData(33, 0);",
              "                    OrderLock(CurShip, 0);",
              "                }",
              "                SetData(0, 1);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 1);",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2))",
              "{",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //Если нападающему выставлен маркер на самоликвидацию",
              "            if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            else if(GetData(0) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0);",
              "                exit;",
              "            }",
              "            //При данном маркере после совершения посадки на планету атакующий автоматически выйдет из скрипта",
              "            else if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2);",
              "                //Если нападающему выставлен маркер на самоликвидацию",
              "                if(GetData(0) == 66) ShipDestroy(CurShip, 1);",
              "                //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "                else if(GetData(0) == 32)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    SetData(33, 0);",
              "                    exit;",
              "                }",
              "                //При данном маркере после совершения посадки на станцию атакующий автоматически выйдет из скрипта",
              "                else if(GetData(0) == 3)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    ShipOut(CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            if(GetData(0) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0);",
              "                exit;",
              "            }",
              "            //При данном маркере после уничтожения станции атакующий автоматически выйдет из скрипта",
              "            else if(GetData(0) == 3)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                //Защитные протоколы поведения (атакующие охраняют свою цель от других кораблей)",
              "                if(GetData(0) <= 1)",
              "                {",
              "                    //И сами совершают за ней посадки на планеты и станции",
              "                    if(!ShipInNormalSpace(object))",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(!sit) sit = GetShipRuins(object);",
              "",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            if(GetShipPlanet(CurShip) != sit && GetShipRuins(CurShip) != sit) OrderTakeOff(CurShip);",
              "                        }",
              "                        else OrderLanding(CurShip, sit);",
              "                    }",
              "                    else",
              "                    {",
              "                        //Взлетаем вслед за целью",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            OrderTakeOff(CurShip);",
              "                            exit;",
              "                        }",
              "",
              "                        OrderFollowShip(CurShip, object, 0);",
              "",
              "                        //Ищем в системе любые враждебные цели корабли, выбираем ближайший, и атакуем",
              "                        int closest_dist = 500000;",
              "                        target = 0;",
              "                        for(int i = 0; i < StarShips(cur_star); i = i + 1)",
              "                        {",
              "                            dword ship = StarShips(cur_star, i);",
              "",
              "                            if(ShipInHyperSpace(ship, 1)) continue;",
              "                            if(ObjectType(ship) != 5) continue;",
              "                            if(ShipGetBad(ship) == object)",
              "                            {",
              "                                int dist = Dist(CurShip, ship);",
              "                                if(dist < closest_dist)",
              "                                {",
              "                                    //Если ближайший корабль не засел на планете/станции,",
              "                                    //либо если других враждебных кораблей в системе не осталось",
              "                                    if(ShipInNormalSpace(ship) || !target)",
              "                                    {",
              "                                        closest_dist = dist;",
              "                                        target = ship;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        //Если нашли подходящую цель, то выставляем её в качестве основного врага для атакующего",
              "                        if(target)",
              "                        {",
              "                            ShipSetBad(CurShip, target);",
              "                            ShipFreeFlight(CurShip, 1);",
              "                        }",
              "                    }",
              "                }",
              "                //Приказ на уничтожение цели (следуем за ней до упора)",
              "                else if(GetData(0) <= 6)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else",
              "                    {",
              "                        OrderFollowShip(CurShip, object, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            //Если цель улетела от нападающего в другую систему - догоняем",
              "            if(GetData(0) != 6 || GetData(0) == 7)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, ShipStar(object));",
              "            }",
              "            //Но при маркере поведения 6 - отпускаем цель",
              "            else",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                ShipOut(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 3);",
              "        //Если стоит маркер на автоматический выход из скрипта при потере цели",
              "        if(GetData(0) == 6 || GetData(0) == 7)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            ShipOut(CurShip);",
              "            exit;",
              "        }",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        else if(GetData(0) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0);",
              "            exit;",
              "        }",
              "        else",
              "        {",
              "            float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "            OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  396,
          "#":  397,
          "Total.Lines":  322,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestTarget:",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//    13 - отключение любой логики корабля-цели",
              "",
              "//    17 - маркер ожидания(крутимся в скриптовом месте QuestPlace)",
              "//    18 - маркер ожидания с перепросчётами (крутимся в скриптовом месте одновременно изменяя его координат QuestPlace)",
              "",
              "//    66 - маркер самоликвидации",
              "//    33 - маркер захвата стейтом контроля над кораблём",
              "//    20 - маркер на принудительную активацию форсажа",
              "//    22 - маркер на телепорт в определённые координаты:",
              "//      Data1 - координата X",
              "//      Data2 - координата Y",
              "//      Data3 - битовый вектор (12 бит: ID системы, 20 бит - кол-во дней нахождения в ЧД)",
              "//    -1 - Отключение обсчёта собственной логики корабля",
              "",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//  Используется так:",
              "//    Для планет: умножаем id на 2",
              "//    Для станций/кораблей(если используем маркер ожидания): умножаем id на 2 + 1",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "",
              "//Маркер полного отключения любой логики корабля-цели",
              "if(GetData(0, CurShip) == 13)",
              "{",
              "    OrderLock(CurShip, 1);",
              "    for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "    {",
              "        dword gun = ShipWeapon(CurShip, i);",
              "        WeaponTarget(gun, 0);",
              "    }",
              "",
              "    OrderNone(CurShip);",
              "    exit;",
              "}",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если цели выставлен маркер на самоликвидацию",
              "    if(GetData(0, CurShip) == 66) ShipDestroy(CurShip, 1);",
              "    else",
              "    {",
              "        if(GetData(1, CurShip))",
              "        {",
              "            //Если прилетели в указанную систему",
              "            object = GalaxyStar(GetData(1, CurShip) - 1);",
              "            if(cur_star == object)",
              "            {",
              "                //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "                //и переводим его в свободный контроль от стейта",
              "                if(GetData(0, CurShip) == 34)",
              "                {",
              "                    ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                    SetData(33, 0, CurShip);",
              "                    OrderLock(CurShip, 0);",
              "                }",
              "",
              "                SetData(0, 1, CurShip);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Кидаем игроку вызов от корабля-цели если для этого выставлен соответствующий маркер",
              "if(QuestTargetDialogCall > CurTurn())",
              "{",
              "    if(cur_star == ShipStar(Player()))",
              "    {",
              "        if(ShipInNormalSpace(Player()))",
              "        {",
              "            if(ShipInNormalSpace(CurShip))",
              "            {",
              "                if(Dist(Player(), CurShip) <= ShipRadarRange(Player()))",
              "                {",
              "                    QuestTargetDialogCall = -1;",
              "                    Dialog(CurShip);",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0, CurShip) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0, CurShip) >= 100)",
              "    {",
              "        SetData(GetData(0, CurShip) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "",
              "//Маркер на принудительную активацию форсажа",
              "if(GetData(0, CurShip) == 20)",
              "{",
              "    OrderForsage(CurShip, 1);",
              "}",
              "",
              "//Маркер на телепорт в указанные координаты:",
              "//  Data1 - координата X",
              "//  Data2 - координата Y",
              "//  Data3 - битовый вектор (12 бит: ID системы, 20 бит - кол-во дней нахождения в гипере)",
              "if(GetData(0) == 22)",
              "{",
              "    OrderTeleport(CurShip, GalaxyStar((GetData(3) >> 20) - 1), int(GetData(1)), int(GetData(2)), 5, GetData(3) & 1048575);",
              "    SetData(113, 0);",
              "    exit;",
              "}",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1, CurShip))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1, CurShip) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 1, CurShip);",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0, CurShip) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0, CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2, CurShip))",
              "{",
              "    if(!(GetData(2, CurShip) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2, CurShip) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2, CurShip);",
              "            //Если цели выставлен маркер на самоликвидацию",
              "            if(GetData(0, CurShip) == 66) ShipDestroy(CurShip, 1);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            else if(GetData(0, CurShip) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0, CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2, CurShip) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2, CurShip);",
              "                //Если цели выставлен маркер на самоликвидацию",
              "                if(GetData(0, CurShip) == 66) ShipDestroy(CurShip, 1);",
              "                //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "                else if(GetData(0, CurShip) == 32)",
              "                {",
              "                    OrderLock(CurShip, 0);",
              "                    SetData(33, 0, CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2, CurShip);",
              "            //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "            if(GetData(0, CurShip) == 32)",
              "            {",
              "                OrderLock(CurShip, 0);",
              "                SetData(33, 0, CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3, CurShip))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3, CurShip));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                OrderFollowShip(CurShip, object, 0);",
              "",
              "                //Второй тип поведения, корабль будет совершать посадку вслед за ведущим кораблём",
              "                if(GetData(0, CurShip) == 1)",
              "                {",
              "                    if(!ShipInNormalSpace(object))",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(sit) OrderLanding(CurShip, sit);",
              "                        else OrderLanding(CurShip, GetShipRuins(object));",
              "                    }",
              "                    else",
              "                    {",
              "                        OrderTakeOff(CurShip);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если ведущий улетел в другую систему - догоняем",
              "        else",
              "        {",
              "            if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "            else OrderJump(CurShip, ShipStar(object));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 3, CurShip);",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0, CurShip) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0, CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //Если стоит маркер на автоматический перевод корабля в режим контроля стейтом",
              "        if(GetData(0, CurShip) == 32)",
              "        {",
              "            OrderLock(CurShip, 0);",
              "            SetData(33, 0, CurShip);",
              "            exit;",
              "        }",
              "        else",
              "        {",
              "            float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "            OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  398,
          "#":  399,
          "Total.Lines":  511,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestMercs (в этом стейте наёмники будут автоматически атаковать QuestTarget):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//        3 - маркер автоматического возвращения в штаб после завершения текущего заданного действия (например, после прибытия на указанную в переменных ниже планету и т.д.)",
              "//        4 - маркер автоматического перевода наёмника в другую скриптовую группу, указанную в инфошке ChangeShipScriptGroupInfo после завершения текущего заданного действия",
              "",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0), либо маркер движения в определённое скриптовое место (если значение < 0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    if(GetData(1))",
              "    {",
              "        //Если прилетели в указанную систему",
              "        object = GalaxyStar(GetData(1) - 1);",
              "        if(cur_star == object)",
              "        {",
              "            //Блочим возможность совершать прыжки, чтобы корабль не смог вылететь из системы",
              "            //и переводим его в свободный контроль от стейта",
              "            if(GetData(0) == 34)",
              "            {",
              "                ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                SetData(33, 0);",
              "                OrderLock(CurShip, 0);",
              "            }",
              "            else if(GetData(0) >= 97 && GetData(0) <= 99)",
              "            {",
              "                ShipSpecialBonuses(CurShip, bonFuel, ShipSpecialBonuses(CurShip, bonFuel) - 10000);",
              "                SetData(0, 1);",
              "                SetData(0, 2);",
              "                SetData(0, 3);",
              "                OrderLock(CurShip, 1);",
              "",
              "                if(GetData(0) == 97)",
              "                {",
              "                    SetData(40, 0);",
              "                    ChangeState('QuestMercsCapDomState');",
              "                }",
              "                else if(GetData(0) == 98)",
              "                {",
              "                    SetData(40, 0);",
              "                    ChangeState('QuestMercsCapPirState');",
              "                }",
              "                else",
              "                {",
              "                    SetData(40, 0);",
              "                    ChangeState('QuestMercsCapCoalState');",
              "                }",
              "                exit;",
              "            }",
              "            SetData(0, 1);",
              "        }",
              "    }",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword target = ShipGetBad(CurShip);",
              "    if(target)",
              "    {",
              "        if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "        {",
              "            int no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(ShipInScript(target, 0))",
              "        {",
              "            if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "            {",
              "                no_tar = NoTargetToShip(target);",
              "                //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "                NoTargetToShip(target, 4);",
              "                TruceBetweenShips(CurShip, target);",
              "                NoTargetToShip(target, no_tar);",
              "                //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        //Есть мнение, что от этого одни проблемы",
              "        //ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "//ShipFreeFlight(CurShip, 1);",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "        target = 0;",
              "    }",
              "    else if(ShipInScript(target, 0))",
              "    {",
              "        if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "        {",
              "            TruceBetweenShips(CurShip, target);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "            target = 0;",
              "        }",
              "    }",
              "}",
              "",
              "//Если цель всё ещё не сброшена, то добавляем её в список рандомных нападающих уёбков (всегда пираты)",
              "if(target)",
              "{",
              "    if(!ShipInScript(target, 0))",
              "    {",
              "        ShipJoin(RandomAttackers, target);",
              "        //Через 10 дней этот корабль автоматически удалится из группы",
              "        SetData(CurTurn() + 10, 0, target);",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Маркер перемещения в опеределённую точку",
              "//  Data1 - координата X",
              "//  Data2 - координата Y",
              "if(GetData(0) == 16)",
              "{",
              "    OrderMove(CurShip, int(GetData(1)), int(GetData(2)));",
              "    exit;",
              "}",
              "",
              "//Маркер на прыжок корабля в чд и длительное нахождение в ней(но можно сделать и обычный прыжок в ЧД)",
              "if(GetData(0) == 18)",
              "{",
              "    OrderJumpHole(CurShip, IdToHole(GetData(1)), 100);",
              "    ShipOrderData1(CurShip, GetData(2));",
              "    //Отключаем любую логику на следующий ход(чтоб на следующий ход корабль как бы пропускал ходы пока терн не выставит нужный маркер)",
              "    SetData(-1, 0);",
              "    SetData(0, 1);",
              "    SetData(0, 2);",
              "    SetData(-3, 3);",
              "    exit;",
              "}",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else SetData(0, 1);",
              "}",
              "//Садимся на планету/станцию",
              "else if(GetData(2))",
              "{",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //При данном маркере после совершения посадки на планету наёмник автоматически направится в штаб",
              "            if(GetData(0) == 3)",
              "            {",
              "                SetData(0, 0);",
              "                SetData(0, 1);",
              "                SetData(0, 2);",
              "                SetData(-3, 3);",
              "                ChangeState('ReturningStrikeState');",
              "                exit;",
              "            }",
              "            //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "            else if(GetData(0) == 4)",
              "            {",
              "                ChangeShipScriptGroupFromInfo(CurShip);",
              "                ShipFreeFlight(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                SetData(0, 2);",
              "                //При данном маркере после совершения посадки на станцию наёмник автоматически направится в штаб",
              "                if(GetData(0) == 3)",
              "                {",
              "                    SetData(0, 0);",
              "                    SetData(0, 1);",
              "                    SetData(0, 2);",
              "                    SetData(-3, 3);",
              "                    ChangeState('ReturningStrikeState');",
              "                    exit;",
              "                }",
              "                //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "                else if(GetData(0) == 4)",
              "                {",
              "                    ChangeShipScriptGroupFromInfo(CurShip);",
              "                    ShipFreeFlight(CurShip);",
              "                    exit;",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            SetData(0, 2);",
              "            //При данном маркере после уничтожения станции наёмник автоматически направится в штаб",
              "            if(GetData(0) == 3)",
              "            {",
              "                SetData(0, 0);",
              "                SetData(0, 1);",
              "                SetData(0, 2);",
              "                SetData(-3, 3);",
              "                ChangeState('ReturningStrikeState');",
              "                exit;",
              "            }",
              "            //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "            else if(GetData(0) == 4)",
              "            {",
              "                ChangeShipScriptGroupFromInfo(CurShip);",
              "                ShipFreeFlight(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "//Летим к кораблю",
              "else if(GetData(3))",
              "{",
              "    int move_mark = GetData(3);",
              "    //Приказ двигаться в скриптовое место",
              "    if(move_mark < 0)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else if(move_mark == -1) OrderMove(CurShip, QuestPlace);",
              "        else if(move_mark == -2) OrderMove(CurShip, AroundStar);",
              "        else if(move_mark == -3) OrderMove(CurShip, AroundQuestTarget);",
              "        else /*if(move_mark == -4)*/ OrderMove(CurShip, AroundQuestSupport);",
              "        exit;",
              "    }",
              "",
              "    object = IdToShip(GetData(3));",
              "    if(object)",
              "    {",
              "        if(cur_star == ShipStar(object))",
              "        {",
              "            if(!ShipInHyperSpace(object))",
              "            {",
              "                //Защитные протоколы поведения (наёмники охраняют свою цель от других кораблей)",
              "                if(GetData(0) <= 2)",
              "                {",
              "                    //И сами совершают за ней посадки на планеты и станции (но только если GetData(0) != 2)",
              "                    if(!ShipInNormalSpace(object) && GetData(0) != 2)",
              "                    {",
              "                        dword sit = GetShipPlanet(object);",
              "                        if(!sit) sit = GetShipRuins(object);",
              "",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            if(GetShipPlanet(CurShip) != sit && GetShipRuins(CurShip) != sit) OrderTakeOff(CurShip);",
              "                        }",
              "                        else OrderLanding(CurShip, sit);",
              "                    }",
              "                    else",
              "                    {",
              "                        //Взлетаем вслед за целью",
              "                        if(!ShipInNormalSpace(CurShip))",
              "                        {",
              "                            OrderTakeOff(CurShip);",
              "                            exit;",
              "                        }",
              "",
              "                        if(ShipTurnBeforeEndOrder(object) <= 1)",
              "                        {",
              "                            int target_order = ShipOrder(object);",
              "                            if(target_order == 3)",
              "                            {",
              "                                OrderJump(CurShip, ShipOrderObj(object));",
              "                                exit;",
              "                            }",
              "                            else if(target_order == 4)",
              "                            {",
              "                                OrderJumpHole(CurShip, ShipOrderObj(object));",
              "                                exit;",
              "                            }",
              "                        }",
              "",
              "                        OrderFollowShip(CurShip, object, 0);",
              "",
              "                        //Ищем в системе любые враждебные цели корабли, выбираем ближайший, и атакуем",
              "                        int closest_dist = 500000;",
              "                        target = 0;",
              "                        for(int i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "                        {",
              "                            dword ship = StarShips(cur_star, i);",
              "",
              "                            if(ShipInCurScript(ship))",
              "                            {",
              "                                //Добавление случайных атакующих в группу было сделано исключительно в целях оптимизации,",
              "                                //но объективно оно здесь ни к чему... может позже уберу",
              "                                if(ShipGroup(ship) == RandomAttackers) continue;",
              "                            }",
              "",
              "                            if(IsPlayer(ship)) continue; //Но не игрока (если вдруг игрок долбоёб, и напал на охраняемый по своему же заданию корабль)",
              "                            if(ShipInHyperSpace(ship, 1)) continue;",
              "                            if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "                            if(RelationToShip(ship, object) < 10)",
              "                            {",
              "                                if(!ShipInScript(ship, 0))",
              "                                {",
              "                                    ShipJoin(RandomAttackers, ship);",
              "                                    //Через 10 дней этот корабль автоматически удалится из группы",
              "                                    SetData(CurTurn() + 10, 0, ship);",
              "                                }",
              "",
              "                                int dist = Dist(CurShip, ship);",
              "                                if(dist < closest_dist)",
              "                                {",
              "                                    //Если ближайший корабль не засел на планете/станции,",
              "                                    //либо если других враждебных кораблей в системе не осталось",
              "                                    if(ShipInNormalSpace(ship) || !target)",
              "                                    {",
              "                                        closest_dist = dist;",
              "                                        target = ship;",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "",
              "                        //Если нашли подходящую цель, то выставляем её в качестве основного врага для наёмника",
              "                        if(target)",
              "                        {",
              "                            ShipSetBad(CurShip, target);",
              "                            ShipFreeFlight(CurShip, 1);",
              "",
              "                            //Это здесь нужно, чтобы также добавлять в группу нападающих всяких левых мудаков (пираты)",
              "                            if(!ShipInScript(target, 0))",
              "                            {",
              "                                ShipJoin(RandomAttackers, target);",
              "                                //Через 10 дней этот корабль автоматически удалится из группы",
              "                                SetData(CurTurn() + 10, 0, target);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                //Приказ на уничтожение цели (следуем за ней до упора)",
              "                else if(GetData(0) == 3 || GetData(0) == 4)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else",
              "                    {",
              "                        OrderFollowShip(CurShip, object, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        //Если цель улетела от наёмника в другую систему - догоняем",
              "        else",
              "        {",
              "            if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "            else OrderJump(CurShip, ShipStar(object));",
              "        }",
              "    }",
              "    else",
              "    {",
              "        if(GetData(0) < 3) SetData(0, 3);",
              "        //При данном маркере в случае уничтожения цели наёмник автоматически направится в штаб",
              "        else if(GetData(0) == 3)",
              "        {",
              "            SetData(0, 0);",
              "            SetData(0, 1);",
              "            SetData(0, 2);",
              "            SetData(-3, 3);",
              "            ChangeState('ReturningStrikeState');",
              "            exit;",
              "        }",
              "        //Автоматически переводим наёмника в другую скриптовую группу, указанную в ChangeShipScriptGroupInfo",
              "        else if(GetData(0) == 4)",
              "        {",
              "            ChangeShipScriptGroupFromInfo(CurShip);",
              "            ShipFreeFlight(CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "        OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  378,
          "#":  401,
          "Total.Lines":  283,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Private.Destroy.2",
              "function PrivateDestroyQuestTwoConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int max_range = CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.2.TargetStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только Коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > max_range) continue;",
              "",
              "        //Выбираем систему, после чего начинаем перебор всех планет и ищем подходящую с сидящими на ней военными",
              "        int check = 0;",
              "        for(int k = 0; k < StarPlanets(cur_star); k = k + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(cur_star, k);",
              "",
              "            for(int m = 0; m < PlanetWarriors(cur_planet); m = m + 1)",
              "            {",
              "                dword warrior = PlanetWarriors(cur_planet, m);",
              "",
              "                if(ShipInScript(warrior, 0)) continue;",
              "                if(ShipInGameEvent(warrior)) continue;",
              "                if(ShipSubType(warrior)) continue; //Пропускаем всякие флагманы",
              "                if(GetShipPlanet(warrior) != cur_planet) continue; //Пропускаем военных не на планете",
              "",
              "                check = 1;",
              "                break;",
              "            }",
              "",
              "            if(check) break;",
              "        }",
              "        if(!check) continue;",
              "        else",
              "        {",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = cur_star;",
              "                tarr2[0, 1] = warrior;",
              "                tarr2[0, 2] = cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = cur_star;",
              "                tarr2[available_options, 1] = warrior;",
              "                tarr2[available_options, 2] = cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать систему с хотя бы одним военным, сидящим в данный момент на планете",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Военный-цель",
              "        tarr1[next_num, 0] = tarr2[available_options, 1];",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 2], max_range / 2, max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.2.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.2.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Private.Destroy.2';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 8, 1000, 0);",
              "        tarr1[next_num, 5] = cost;",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 0;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Первая система с военными (стартовая)",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Вторая возможная система для патрулирования (если 0, значит, столько свободных систем в секторе не нашлось)",
              "        //-1, чтобы случайно не совпало с номером Тарона",
              "        tarr1[next_num, 8] = -1;",
              "        //Третья возможная система для патрулирования (если 0, значит, столько свободных систем в секторе не нашлось)",
              "        tarr1[next_num, 9] = -1;",
              "        //Четвёртая возможная система для патрулирования (если 0, значит, столько свободных систем в секторе не нашлось)",
              "        tarr1[next_num, 10] = -1;",
              "        //Таймер времени патрулирования одной конкретной системы (по его истечении военные направляются в следующую систему сектора)",
              "        tarr1[next_num, 11] = 0;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetName'+'>', ShipName(tarr1[next_num, 0]),",
              "                                     '<TargetNameFull'+'>', Name(tarr1[next_num, 0]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Private.Destroy.2",
              "function PrivateDestroyQuestTwoPrepare(int q_num)",
              "{",
              "    //Первый этап квеста (он же единственный)",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "    dword target_ship = ActiveQuestsHQArray[q_num, 0];",
              "",
              "    //Укрепляем военного и спавним ему пару напарников в помощь (если на планете военных кораблей больше нету)",
              "    ShipMoney(target_ship, ShipMoney(target_ship) * 3);",
              "    for(int i = 1; i <= 3; i = i + 1) ShipRefit(target_ship);",
              "    ShipImproveItems(target_ship, 5);",
              "    ShipRefuel(target_ship);",
              "    HullHP(target_ship, ItemSize(ShipItems(target_ship, 0)));",
              "    NoTargetToShip(target_ship, 3);",
              "    ShipJoin(QuestTarget, target_ship, 1);",
              "    //С какого-то хуя этот мудак имеет тенденцию игнорить первый приказ на взлёт",
              "    //Поэтому вынуждаем его обратить на приказ максимально возможное внимание, сука!",
              "    SetData(232, 0, target_ship);",
              "    ChangeState('QuestTargetMoveState', target_ship);",
              "    //Отправляем цель в патруль по его текущей системе",
              "    OrderTakeOff(target_ship);",
              "    //Выставляем таймер стартового патруля (небольшой)",
              "    ActiveQuestsHQArray[q_num, 11] = CurTurn() + 7;",
              "",
              "    //-1 вычитаем в счёт военного-цели",
              "    int add_warriors = -1 + CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.2.TotalWarriorsCount');",
              "    str string = Id(target_ship);",
              "    dword cur_planet = GetShipPlanet(target_ship);",
              "    for(i = 0; i < PlanetWarriors(cur_planet); i = i + 1)",
              "    {",
              "        dword ship = PlanetWarriors(cur_planet, i);",
              "",
              "        if(ship == target_ship) continue;",
              "        if(ShipInScript(ship, 0)) continue;",
              "        if(ShipInGameEvent(ship)) continue;",
              "        if(ShipSubType(ship)) continue; //Пропускаем всякие флагманы",
              "        if(GetShipPlanet(ship) != cur_planet) continue; //Пропускаем военных не на планете",
              "",
              "        //Также укрепляем все подходящие корабли и записываем их в скрипт сопровождения",
              "        ShipMoney(ship, ShipMoney(ship) * 2);",
              "        ShipRefit(ship);",
              "        ShipImproveItems(ship, 2);",
              "        ShipRefuel(ship);",
              "        HullHP(ship, ItemSize(ShipItems(ship, 0)));",
              "        ShipJoin(QuestAttackers, ship, 1);",
              "        ChangeState('QuestAttackersProtectState', ship);",
              "        //Военные из данной группы будут прикрывать цель задания",
              "        SetData(Id(target_ship), 3, ship);",
              "        SetData(100, 0, ship);",
              "        OrderTakeOff(ship);",
              "",
              "        string = string + ',' + Id(ship);",
              "        add_warriors = add_warriors - 1;",
              "        //Если набрали достаточное число военных в отряд сопровождения",
              "        if(!add_warriors) break;",
              "    }",
              "    //Если же военных для отряда на планете не хватило, доспавниваем их на ней отдельно",
              "    for(i = 1; i <= add_warriors; i = i + 1)",
              "    {",
              "        ship = BuyWarrior(cur_planet, 200);",
              "        for(int j = 1; j <= 2; j = j + 1) ShipRefit(ship);",
              "        ShipImproveItems(ship, 3);",
              "        ShipJoin(QuestAttackers, ship, 1);",
              "        ChangeState('QuestAttackersProtectState', ship);",
              "        //Военные из данной группы будут прикрывать цель задания",
              "        SetData(Id(target_ship), 3, ship);",
              "        SetData(100, 0, ship);",
              "        OrderTakeOff(ship);",
              "",
              "        string = string + ',' + Id(ship);",
              "    }",
              "",
              "    //Вешаем всем военным из группы (включая цель) специальную инфошку для маркировки и вывода уведомления при получении любым кораблём группы урона от игрока, либо от квестовых наёмников игрока",
              "    //Три запятые, чтобы тэги цвета не поломали парсинг на расшифровке",
              "    str text = 'Ether2,,,0,,,' + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.TargetOnAttack'), '<Warrior'+'>', Name(target_ship), '255,240,100');",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_QuestTargetAttackMark', 'NoShow', 0, Id(cur_planet), 0, string, text);",
              "    for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestAttackers, i);",
              "        ShipAddCustomShipInfo(ship, 'ShuMercsHQ_QuestTargetAttackMark', 'NoShow', 0, Id(cur_planet), 0, string, text);",
              "    }",
              "",
              "    //Блочим все квестовые системы от нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    //Ищем в секторе подходящие системы для возможного патрулирования",
              "    dword con = StarToCon(ActiveQuestsHQArray[q_num, 7]);",
              "    for(i = 0; i < ConStars(con); i = i + 1)",
              "    {",
              "        ship = ConStar(con, i);",
              "",
              "        if(ship == ActiveQuestsHQArray[q_num, 7]) continue;",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "",
              "        //Запоминаем все подходящие для патруля системы в свободные ячейки массива",
              "        if(ActiveQuestsHQArray[q_num, 8] == -1)",
              "        {",
              "            NoComeKlingToStar(ship, 1);",
              "            ActiveQuestsHQArray[q_num, 8] = ship;",
              "        }",
              "        else if(ActiveQuestsHQArray[q_num, 9] == -1)",
              "        {",
              "            NoComeKlingToStar(ship, 1);",
              "            ActiveQuestsHQArray[q_num, 9] = ship;",
              "        }",
              "        else if(ActiveQuestsHQArray[q_num, 10] == -1)",
              "        {",
              "            NoComeKlingToStar(ship, 1);",
              "            ActiveQuestsHQArray[q_num, 10] = ship;",
              "        }",
              "        else break;",
              "    }",
              "",
              "    //Определяем, сколько наёмников игрока отправится на задание",
              "    //(половина из резерва, но не менее одного)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] == 1) i = 1;",
              "    else i = PlayerHQMainArray['Mercs', 'CurrentAtReady'] / 2;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - i;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "",
              "    //Выдаём всем наёмникам задачу лететь на перехват военных",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "",
              "        ShipOwner(ship, PirateClan);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "",
              "        SetData(3, 0, ship); //Маркер на уничтожение цели с последующим автоматическим возвратом в штаб",
              "        SetData(Id(target_ship), 3, ship);",
              "    }",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName'+'>', Name(target_ship), '255,240,100');",
              "    string = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    string = string + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    string = string + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '255,240,100');",
              "    string = string + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    string = string + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], string, target_ship);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    if(~ActiveQuestsHQArray[q_num, 8]) ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "    if(~ActiveQuestsHQArray[q_num, 9]) ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "    if(~ActiveQuestsHQArray[q_num, 10]) ActiveQuestsHQArray[q_num, 10] = Id(ActiveQuestsHQArray[q_num, 10]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  371,
          "#":  402,
          "Total.Lines":  205,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Private.Protect.1",
              "function PrivateProtectQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.1.FirstStarMaxRange');",
              "    int second_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 2);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "",
              "        //Выбираем коалиционную систему, после чего начинаем перебор ближайших пиратских систем",
              "        dword coalition_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 2) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(cur_range > second_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = coalition_star;",
              "                tarr2[0, 1] = cur_star;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(2);",
              "                tarr2[available_options, 0] = coalition_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Имя будущего дипломата",
              "        tarr1[next_num, 0] = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.1.TargetName' + Rnd(1, 3, sqr(seed + 77)));",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста",
              "        tarr1[next_num, 2] = 0;",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Private.Protect.1';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 8, 1000, 0);",
              "        tarr1[next_num, 5] = cost;",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 0;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Система Коалиции",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Система пиратов",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "",
              "        //Планета для спавна цели в коалиционной системе",
              "        //Начинаем перебор коалиционных планет (стартовая планета дипломата)",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr2[available_options, 0]); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(tarr2[available_options, 0], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 67))];",
              "",
              "        //Планета для переговоров цели в пиратской системе",
              "        //Начинаем перебор пиратских планет (планета для переговоров)",
              "        ArrayClear(t_array);",
              "        for(i = 0; i < StarPlanets(tarr2[available_options, 1]); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(tarr2[available_options, 1], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 10] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 57))];",
              "",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 11] = 0;",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetName'+'>', tarr1[next_num, 0],",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<DestinationPlanet'+'>', Name(tarr1[next_num, 10]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Private.Protect.1",
              "function PrivateProtectQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "    dword target_name = ActiveQuestsHQArray[q_num, 0];",
              "",
              "    //Блочим системы от нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Определяем, сколько наёмников игрока отправится на задание",
              "    //(половина из резерва, но не менее одного)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] == 1) i = 1;",
              "    else i = PlayerHQMainArray['Mercs', 'CurrentAtReady'] / 2;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - i;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Transport, i);",
              "",
              "    //Спавним дипломата на выбранной планете (пока что он просто сидит и ждёт)",
              "    dword target_ship = BuyTransport(ActiveQuestsHQArray[q_num, 9], 2, 200);",
              "    SetName(target_ship, ActiveQuestsHQArray[q_num, 0]);",
              "    for(i = 1; i <= 3; i = i + 1) ShipRefit(target_ship);",
              "    ShipJoin(QuestTarget, target_ship);",
              "    SetData(-1, 0, target_ship);",
              "    //Накидываем дипломату хреновый движок и повышаем резисты",
              "    dword engine = ShipEqInSlot(target_ship, t_Engine);",
              "    if(ItemLevel(engine) > 4)",
              "    {",
              "        ItemCost(engine, round(PortionInDiapason(ItemLevel(engine), 5, 8, 0.875, 0.500) * ItemCost(engine)));",
              "        ItemLevel(engine, 4);",
              "    }",
              "    NoDropItem(engine, 1);",
              "    ShipImproveItems(target_ship, RndObject(1, 3, target_ship));",
              "    ItemExtraSpecialsAddByType(ShipEqInSlot(target_ship, t_Hull), FindBonusByNameInCfg('ShuMercsHQ_QuestTargetDebuff'), 10);",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_GuardedShip', 'NoShow');",
              "    //Также вешаем на дипломата \"магнит для грабителей\"",
              "    NoTargetToShip(target_ship, 6);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName'+'>', Name(target_ship), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteStageOne'), '<Star'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text, target_ship);",
              "",
              "    //Выдаём всем наёмникам задачу лететь в систему с дипломатом",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 7]), 1, ship);",
              "    }",
              "",
              "    //Заносим в массив Id квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "    //А также планет",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "    ActiveQuestsHQArray[q_num, 10] = Id(ActiveQuestsHQArray[q_num, 10]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  405,
          "#":  404,
          "Total.Lines":  161,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Основной массив активных квестов (пока только одного квеста, по факту)",
              "//ActiveQuestsHQArray[0, 0] - сюда будет записываться зерно для рандомизации квестов штаба (чтобы они не менялись в подборе уж слишком часто)",
              "free(ActiveQuestsHQArray);",
              "ActiveQuestsHQArray = newarray(2, 16);",
              "for(i = 0; i < 16; i = i + 1) ActiveQuestsHQArray[0, i] = 0; //Инициализация типов",
              "",
              "//Стартовое объявление типов элементов массива LockedQuestsHQArray",
              "LockedQuestsHQArray[0] = '';",
              "LockedQuestsHQArray[1] = '';",
              "LockedQuestsHQArray[2] = '';",
              "LockedQuestsHQArray[3] = '';",
              "LockedQuestsHQArray[4] = '';",
              "LockedQuestsHQArray[5] = '';",
              "",
              "function QuestTargetActCode() //t_OnStep_11",
              "{",
              "    dword cur_ship = ScriptItemActShip();",
              "",
              "    if(ScriptItemActionType(t_OnStep))",
              "    {",
              "        if(!ShipInNormalSpace(cur_ship) || ShipIsTakeoff(cur_ship))",
              "        {",
              "            //Заебали, суки, закупать говна!",
              "            for(int i = t_Food; i <= t_Narcotics; i = i + 1) GoodsAdd(cur_ship, i, -GoodsCount(cur_ship, i));",
              "        }",
              "    }",
              "}",
              "",
              "//Функция выдачи награды и окончательного завершения \"штабного\" квеста",
              "function EndQuestHQ(int quest_num, int status)",
              "{",
              "    //LockedQuestsHQArray[0] - блокировка типов квестов от частников",
              "    //LockedQuestsHQArray[1] - блокировка конкретного квеста от частников",
              "    //LockedQuestsHQArray[2] - блокировка типов квестов от Коалиции",
              "    //LockedQuestsHQArray[3] - блокировка конкретного квеста от Коалиции",
              "    //LockedQuestsHQArray[4] - блокировка типов квестов от пиратского клана",
              "    //LockedQuestsHQArray[5] - блокировка конкретного квеста от пиратского клана",
              "",
              "    //status == 0 - квест был провален",
              "    //status == 1 - квест был выполнен",
              "    //status == 2 - квест был скипнут игроком при выборе из диалога в штабе",
              "",
              "    //ActiveQuestsHQArray[quest_num, 5] - награда за квест в кредитах",
              "    //ActiveQuestsHQArray[quest_num, 6] - награда за квест в очках репутации у фракции",
              "",
              "    dword HQ = GroupToShip(PlayerHQ);",
              "",
              "    //Квест был провален",
              "    if(!status)",
              "    {",
              "        //Записываем в массив последний проваленный квест от частников",
              "        if(~findsubstr(ActiveQuestsHQArray[quest_num, 3], '.Private.'))",
              "        {",
              "            //LockedQuestsHQArray[0] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[1] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            if(HQ) PlayerHQMainArray['Quests', 'PrivateQuestAppear'] = CurTurn() + RndObject(60, 120, HQ);",
              "            PlayerHQMainArray['Quests', 'PrivateQuestsFailed'] = PlayerHQMainArray['Quests', 'PrivateQuestsFailed'] + 1;",
              "        }",
              "        //Записываем в массив последний проваленный квест от Коалиции",
              "        else if(~findsubstr(ActiveQuestsHQArray[quest_num, 3], '.Coalition.'))",
              "        {",
              "            LockedQuestsHQArray[2] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[3] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Main', 'CoalitionReputation'] = max(PlayerHQMainArray['Main', 'CoalitionReputation'] - 100, 0);",
              "            PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 500, 275, 92);",
              "            PlayerHQMainArray['Quests', 'CoalitionQuestsFailed'] = PlayerHQMainArray['Quests', 'CoalitionQuestsFailed'] + 1;",
              "        }",
              "        //Записываем в массив последний проваленный квест от пиратов",
              "        else if(~findsubstr(ActiveQuestsHQArray[quest_num, 3], '.PirateClan.'))",
              "        {",
              "            LockedQuestsHQArray[4] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[5] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Main', 'PirateClanReputation'] = max(PlayerHQMainArray['Main', 'PirateClanReputation'] - 100, 0);",
              "            PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 500, 275, 92);",
              "            PlayerHQMainArray['Quests', 'PirateClanQuestsFailed'] = PlayerHQMainArray['Quests', 'PirateClanQuestsFailed'] + 1;",
              "        }",
              "",
              "        //Сниженная награда за квест в кредитах",
              "        int tint = ActiveQuestsHQArray[quest_num, 5] / 2;",
              "        PlayerHQMainArray['Finance', 'CurrentBalance'] = min(PlayerHQMainArray['Finance', 'CurrentBalance'] + tint, 1000000000);",
              "        //Для отчёта доходности лимит на 1 млрд не ставим, т.к. незачем",
              "        PlayerHQMainArray['Finance', 'StatsInQuests'] = PlayerHQMainArray['Finance', 'StatsInQuests'] + tint;",
              "    }",
              "    //Квест был выполнен",
              "    else if(status == 1)",
              "    {",
              "        //Записываем в массив последний выполненный квест от частников",
              "        if(~findsubstr(ActiveQuestsHQArray[quest_num, 3], '.Private.'))",
              "        {",
              "            //LockedQuestsHQArray[0] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[1] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Quests', 'PrivateQuestAppear'] = CurTurn() + RndObject(30, 60, HQ);",
              "            PlayerHQMainArray['Quests', 'PrivateQuestsCompleted'] = PlayerHQMainArray['Quests', 'PrivateQuestsCompleted'] + 1;",
              "        }",
              "        //Записываем в массив последний выполненный квест от Коалиции",
              "        else if(~findsubstr(ActiveQuestsHQArray[quest_num, 3], '.Coalition.'))",
              "        {",
              "            LockedQuestsHQArray[2] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[3] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Main', 'CoalitionReputation'] = min(PlayerHQMainArray['Main', 'CoalitionReputation'] + 50, 1000);",
              "            PlayerHQMainArray['Main', 'PirateClanReputation'] = max(PlayerHQMainArray['Main', 'PirateClanReputation'] - 25, 0);",
              "            PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 500, 275, 92);",
              "            PlayerHQMainArray['Quests', 'CoalitionQuestsCompleted'] = PlayerHQMainArray['Quests', 'CoalitionQuestsCompleted'] + 1;",
              "        }",
              "        //Записываем в массив последний выполненный квест от пиратов",
              "        else if(~findsubstr(ActiveQuestsHQArray[quest_num, 3], '.PirateClan.'))",
              "        {",
              "            LockedQuestsHQArray[4] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[5] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Main', 'PirateClanReputation'] = min(PlayerHQMainArray['Main', 'PirateClanReputation'] + 50, 1000);",
              "            PlayerHQMainArray['Main', 'CoalitionReputation'] = max(PlayerHQMainArray['Main', 'CoalitionReputation'] - 25, 0);",
              "            PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = CurTurn() + PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 500, 275, 92);",
              "            PlayerHQMainArray['Quests', 'PirateClanQuestsCompleted'] = PlayerHQMainArray['Quests', 'PirateClanQuestsCompleted'] + 1;",
              "        }",
              "",
              "        //Награда за квест в кредитах",
              "        tint = ActiveQuestsHQArray[quest_num, 5];",
              "        PlayerHQMainArray['Finance', 'CurrentBalance'] = min(PlayerHQMainArray['Finance', 'CurrentBalance'] + tint, 1000000000);",
              "        //Для отчёта доходности лимит на 1 млрд не ставим, т.к. незачем",
              "        PlayerHQMainArray['Finance', 'StatsInQuests'] = PlayerHQMainArray['Finance', 'StatsInQuests'] + tint;",
              "    }",
              "    //Квест был скипнут в диалоге",
              "    else",
              "    {",
              "        //Записываем в массив последний скипнутый квест от частников (скипаются всегда только из диалога)",
              "        if(!GAnswerData)",
              "        {",
              "            //LockedQuestsHQArray[0] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[1] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Quests', 'PrivateQuestAppear'] = CurTurn() + RndObject(15, 30, HQ);",
              "        }",
              "        //Записываем в массив последний скипнутый квест от Коалиции (скипаются всегда только из диалога)",
              "        else if(GAnswerData == 1)",
              "        {",
              "            LockedQuestsHQArray[2] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[3] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Main', 'CoalitionReputation'] = max(PlayerHQMainArray['Main', 'CoalitionReputation'] - 25, 0);",
              "            PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] = CurTurn() + 92;//PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 500, 275, 92);",
              "        }",
              "        //Записываем в массив последний скипнутый квест от пиратов (скипаются всегда только из диалога)",
              "        else",
              "        {",
              "            LockedQuestsHQArray[4] = GetParFromString(ActiveQuestsHQArray[quest_num, 3], '.', 4, 0);",
              "            LockedQuestsHQArray[5] = ActiveQuestsHQArray[quest_num, 3];",
              "",
              "            PlayerHQMainArray['Main', 'PirateClanReputation'] = max(PlayerHQMainArray['Main', 'PirateClanReputation'] - 25, 0);",
              "            PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] = CurTurn() + 92;//PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 500, 275, 92);",
              "        }",
              "    }",
              "",
              "    TempQuestHQSeed = 0; //Для обновления зерна рандома всяких имён и прочей мелочи в квестах",
              "    ActiveQuestHQ = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  406,
          "#":  407,
          "Total.Lines":  40,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = (PlayerHQMainArray['Quests', 'PrivateQuestAppear'] <= CurTurn());",
              "tdwd2 = (PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] <= CurTurn());",
              "tdwd3 = (PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] <= CurTurn());",
              "",
              "if( ActiveQuestHQ ||",
              "    GroupCount(QuestMercs) ||",
              "    PlayerHQMainArray['Quests', 'MercsRestingAfterQuest'] > CurTurn() ||",
              "    (!tdwd1 && !tdwd2 && !tdwd3) ||",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] < PlayerHQMainArray['Mercs', 'MaxAtReady'] / 2",
              "  )",
              "{",
              "    //Контракт в процессе выполнения",
              "    if(ActiveQuestHQ) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingInProcess');",
              "    //Наёмники возвращаются с выполнения контракта",
              "    else if(GroupCount(QuestMercs)) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingMercsReturning');",
              "    //Вернувшиеся наёмники отдыхают после контракта",
              "    else if(PlayerHQMainArray['Quests', 'MercsRestingAfterQuest'] > CurTurn()) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingMercsResting');",
              "    //Ни один из типов заданий в данный момент недоступен",
              "    else if(!tdwd1 && !tdwd2 && !tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingNoContracts');",
              "    //В резерве недостаточно наёмников для выполнения контракта",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingLowShips');",
              "",
              "    //\"Вырубаем\" возможную доступность всех квестов для добавления блоков на инжекты (происходит ниже)",
              "    tdwd1 = 0;",
              "    tdwd2 = 0;",
              "    tdwd3 = 0;",
              "}",
              "//Выбор варианта доступности определённого набора контрактов",
              "else if(tdwd1 && !tdwd2 && !tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingPrivate');",
              "else if(!tdwd1 && tdwd2 && !tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingCoalition');",
              "else if(!tdwd1 && !tdwd2 && tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingPirateClan');",
              "else if(tdwd1 && tdwd2 && !tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingPrivateCoalition');",
              "else if(tdwd1 && !tdwd2 && tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingPrivatePirateClan');",
              "else if(!tdwd1 && tdwd2 && tdwd3) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingCoalitionPirateClan');",
              "else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.GreetingPrivateCoalitionPirateClan');",
              "",
              "tstr1 = tstr1 + \"<br>\" + \"<br>\" + Format(CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.Reputation'),",
              "'<CoalitionReputation' + '>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%',",
              "'<PiratesReputation' + '>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%'",
              ");"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  427,
          "#":  409,
          "Total.Lines":  211,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Подбираем возможные задания от частников",
              "free(tarr1);",
              "tarr1 = newarray(1, 16);",
              "",
              "//Сперва проверяем, что во всех скриптовых группах больше не осталось кораблей с прошлого квеста",
              "//(иначе может быть хреново)",
              "tint1 = 0;",
              "if(GroupCount(QuestTarget)) tint1 = tint1 + -1;",
              "else if(GroupCount(QuestMercs)) tint1 = tint1 + -2;",
              "else if(GroupCount(QuestSupport)) tint1 = tint1 + -3;",
              "else if(GroupCount(QuestAttackers)) tint1 = tint1 + -4;",
              "else tint1 = 1;",
              "//NewsAdd(tint1); //Для отладки",
              "",
              "//LockedQuestsHQArray[0] - блокировка типов квестов от частников",
              "//LockedQuestsHQArray[1] - блокировка конкретных квестов от частников",
              "//LockedQuestsHQArray[2] - блокировка типов квестов от Коалиции",
              "//LockedQuestsHQArray[3] - блокировка конкретных квестов от Коалиции",
              "//LockedQuestsHQArray[4] - блокировка типов квестов от пиратского клана",
              "//LockedQuestsHQArray[5] - блокировка конкретных квестов от пиратского клана",
              "",
              "if(tint1 == 1)",
              "{",
              "    //Игрок выбрал подбор частного квеста",
              "    if(!GAnswerData)",
              "    {",
              "        if(LockedQuestsHQArray[0] != 'Destroy')",
              "        {",
              "            if(PirateWin() != 3 && PirateWin() != 4) //Пиратские концовки, в которых пиратов побеждают",
              "            {",
              "                if(LockedQuestsHQArray[1] != 'Quest.ShuMercs.QuestsHQ.Private.Destroy.1') PrivateDestroyQuestOneConditions();",
              "            }",
              "            if(!CoalitionDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[1] != 'Quest.ShuMercs.QuestsHQ.Private.Destroy.2') PrivateDestroyQuestTwoConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[0] != 'Protect')",
              "        {",
              "            if(PirateWin() != 3 && PirateWin() != 4) //Пиратские концовки, в которых пиратов побеждают",
              "            {",
              "                if(LockedQuestsHQArray[1] != 'Quest.ShuMercs.QuestsHQ.Private.Protect.1') PrivateProtectQuestOneConditions();",
              "            }",
              "            if(!CoalitionDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[1] != 'Quest.ShuMercs.QuestsHQ.Private.Protect.2') PrivateProtectQuestTwoConditions();",
              "                if(LockedQuestsHQArray[1] != 'Quest.ShuMercs.QuestsHQ.Private.Protect.3') PrivateProtectQuestThreeConditions();",
              "                if(LockedQuestsHQArray[1] != 'Quest.ShuMercs.QuestsHQ.Private.Protect.4') PrivateProtectQuestFourConditions();",
              "            }",
              "        }",
              "    }",
              "    //Игрок выбрал подбор коалиционного квеста",
              "    else if(GAnswerData == 1)",
              "    {",
              "        if(LockedQuestsHQArray[2] != 'AttackDominators')",
              "        {",
              "            if(!DomiksDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.AttackDominators.1') CoalitionAttackDominatorsQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[2] != 'AttackPirateClan')",
              "        {",
              "            if(PirateWin() != 3 && PirateWin() != 4) //Пиратские концовки, в которых пиратов побеждают",
              "            {",
              "                if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.AttackPirateClan.1') CoalitionAttackPirateClanQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[2] != 'AttackKlissan')",
              "        {",
              "            if(CurrentMods('ShusRangers\\ShuKlissan'))",
              "            {",
              "                if(CurrentMods('Expansion\\ExpArts'))",
              "                {",
              "                    if(KlissanInvasion['PlotEnding'] == 'NotFinished' && !KlissanInvasion['KlissanControl.WasReceived']) //Если клисане ещё не побеждены и не находятся под контролем игрока",
              "                    {",
              "                        if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.AttackKlissan.1') CoalitionAttackKlissanQuestOneConditions();",
              "                    }",
              "                }",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[2] != 'DefendFromDominators')",
              "        {",
              "            if(!DomiksDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.DefendFromDominators.1') CoalitionDefendFromDominatorsQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[2] != 'DefendFromPirateClan')",
              "        {",
              "            if(PirateWin() != 3 && PirateWin() != 4) //Пиратские концовки, в которых пиратов побеждают",
              "            {",
              "                if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.DefendFromPirateClan.1') CoalitionDefendFromPirateClanQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        //Этих квестов пока нет",
              "        if(0)//LockedQuestsHQArray[2] != 'Destroy')",
              "        {",
              "            if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.Destroy.1') CoalitionDestroyQuestOneConditions();",
              "        }",
              "",
              "        if(0)//LockedQuestsHQArray[2] != 'Protect')",
              "        {",
              "            if(PirateWin() != 3 && PirateWin() != 4) //Пиратские концовки, в которых пиратов побеждают",
              "            {",
              "                if(LockedQuestsHQArray[3] != 'Quest.ShuMercs.QuestsHQ.Coalition.Protect.1') CoalitionProtectQuestOneConditions();",
              "            }",
              "        }",
              "    }",
              "    //Игрок выбрал подбор пиратского квеста",
              "    else",
              "    {",
              "        if(LockedQuestsHQArray[4] != 'AttackDominators')",
              "        {",
              "            if(!DomiksDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.AttackDominators.1') PirateClanAttackDominatorsQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[4] != 'AttackCoalition')",
              "        {",
              "            if(!CoalitionDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.AttackCoalition.1') PirateClanAttackCoalitionQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        //Этих квестов пока нет",
              "        if(0)//LockedQuestsHQArray[4] != 'DefendFromDominators')",
              "        {",
              "            if(!DomiksDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.DefendFromDominators.1') PirateClanDefendFromDominatorsQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(0)//LockedQuestsHQArray[4] != 'DefendFromCoalition')",
              "        {",
              "            if(!CoalitionDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.DefendFromCoalition.1') PirateClanDefendFromCoalitionQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[4] != 'Destroy')",
              "        {",
              "            if(!CoalitionDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.Destroy.1') PirateClanDestroyQuestOneConditions();",
              "            }",
              "        }",
              "",
              "        if(LockedQuestsHQArray[4] != 'Protect')",
              "        {",
              "            if(!CoalitionDefeated())",
              "            {",
              "                //Для работы ЭМП торпед требуется код и графика ЭМП бомб из ExpArts",
              "                if(CurrentMods('Expansion\\ExpArts'))",
              "                {",
              "                    if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.Protect.1') PirateClanProtectQuestOneConditions();",
              "                }",
              "            }",
              "",
              "            if(!DomiksDefeated())",
              "            {",
              "                if(LockedQuestsHQArray[5] != 'Quest.ShuMercs.QuestsHQ.PirateClan.Protect.2') PirateClanProtectQuestTwoConditions();",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Если нашлось хоть одно подходящее задание",
              "if(ArrayDim(tarr1) > 1)",
              "{",
              "    //Выбираем случайный из подобранных квестов (зерно рандома запоминается на ~10 дней, после чего обновляется)",
              "    if(ActiveQuestsHQArray[0, 0] <= CurTurn())",
              "    {",
              "        tint2 = sqr(CurTurn() + 10);",
              "        ActiveQuestsHQArray[0, 0] = tint2;",
              "    }",
              "    else",
              "    {",
              "        tint2 = ActiveQuestsHQArray[0, 0];",
              "    }",
              "",
              "    rand = Rnd(1, ArrayDim(tarr1) - 1, sqr(tint2));",
              "    cost = 100;",
              "",
              "    //Интро задания к этому моменту уже сформировано",
              "    tstr1 = '</color>' + tarr1[rand, 15];",
              "    tstr2 = '</color>' + CT(tarr1[rand, 3] + '.QuestAcceptedPlayer');",
              "    tstr3 = '</color>' + CT(tarr1[rand, 3] + '.QuestDeclinedPlayer');",
              "    tstr4 = '</color>' + CT(tarr1[rand, 3] + '.QuestNeedToThinkPlayer');",
              "",
              "    //Сразу заполняем эту строчку для последующего возможного вызова функции EndQuestHQ",
              "    ActiveQuestsHQArray[1, 3] = tarr1[rand, 3];",
              "    tint1 = 1;",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.QuestIsUnavailable');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.PlayerIsUpset');",
              "    tint1 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  372,
          "#":  410,
          "Total.Lines":  338,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Private.Protect.2",
              "function PrivateProtectQuestTwoConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.2.FirstStarMaxRange');",
              "    int second_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.2.SecondStarMaxRange');",
              "    //Минимальное необходимое число военных в системе",
              "    int min_warriors = GetParFromString(CT('Quest.ShuMercs.QuestsHQ.Private.Protect.2.MinWarriorsCount'), ',', 0, 1);",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 2);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        if(StarOwner(cur_star) != 2) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "",
              "        //Выбираем пиратскую систему, после чего начинаем перебор ближайших коалиционных систем",
              "        //Ищем систему, в которой находится не менее 5 нескриптовых военных (из них допустимо доспавнить +2)",
              "        dword pirate_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(pirate_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "            if(StarOwner(cur_star)) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            cur_range = round(sqrt(Dist2Star(cur_star, pirate_star)));",
              "            if(cur_range > second_range) continue;",
              "",
              "            int check = 0;",
              "            for(int k = 0; k < StarPlanets(cur_star); k = k + 1)",
              "            {",
              "                dword cur_planet = StarPlanets(cur_star, k);",
              "                //Системы с пеленгскими планетами для доставки контрабанды не подходят",
              "                if(PlanetRace(cur_planet) == Peleng)",
              "                {",
              "                    check = -100;",
              "                    break;",
              "                }",
              "",
              "                for(int m = 0; m < PlanetWarriors(cur_planet); m = m + 1)",
              "                {",
              "                    dword warrior = PlanetWarriors(cur_planet, m);",
              "",
              "                    if(ShipInScript(warrior, 0)) continue;",
              "                    if(ShipInGameEvent(warrior)) continue;",
              "                    if(ShipSubType(warrior)) continue; //Пропускаем всякие флагманы",
              "                    if(ShipStar(warrior) != cur_star) continue;",
              "                    //Крутим счётчик военных в системе",
              "                    check = check + 1;",
              "                }",
              "            }",
              "            if(check < min_warriors) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = pirate_star;",
              "                tarr2[0, 1] = cur_star;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(2);",
              "                tarr2[available_options, 0] = pirate_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Имя будущего контрабандиста",
              "        tarr1[next_num, 0] = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.2.TargetName' + Rnd(1, 3, sqr(seed + 77)));",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер квеста",
              "        tarr1[next_num, 2] = 0;",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Private.Protect.2';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 8, 1000, 0);",
              "        tarr1[next_num, 5] = cost;",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 0;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Система пиратов (стартовая)",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Система Коалиции (целевая)",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для спавна цели в пиратской системе",
              "        //Начинаем перебор планет (стартовая планета контрабандиста)",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            dword target_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(target_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, target_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 55))];",
              "",
              "        //Система, из которой прилетят, и в которую улетят пираты",
              "        tarr1[next_num, 10] = -1;",
              "        //Число военных в выбранной коалиционной системе",
              "        tarr1[next_num, 11] = min_warriors;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetName'+'>', tarr1[next_num, 0],",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<DestinationStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Private.Protect.2",
              "function PrivateProtectQuestTwoPrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    //Блочим квестовые системы от нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Определяем, сколько наёмников игрока отправится на задание",
              "    //(половина из резерва, но не менее одного)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] == 1) i = 1;",
              "    else i = PlayerHQMainArray['Mercs', 'CurrentAtReady'] / 2;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - i;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Transport, i);",
              "    //Все они должны иметь пиратского овнера во избежание лишней рандомной агрессии",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "",
              "        ShipOwner(ship, PirateClan);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "    }",
              "",
              "    //Спавним контрабандиста на выбранной планете (пока он просто сидит и ждёт)",
              "    dword target_ship = BuyTransport(ActiveQuestsHQArray[q_num, 9], 0, 200);",
              "    SetName(target_ship, ActiveQuestsHQArray[q_num, 0]);",
              "    for(i = 1; i <= 3; i = i + 1) ShipRefit(target_ship);",
              "    //Прокачиваем торговлю и обаяние",
              "    ShipSkill(target_ship, 'Trader', RndObject(3, 6, target_ship));",
              "    ShipSkill(target_ship, 'Charm', RndObject(3, 6, target_ship));",
              "    ShipOwner(target_ship, PirateClan);",
              "",
              "    if(IsScriptActive('Mod_ShuSmugglers'))",
              "    {",
              "        int race = ShipPilotRace(target_ship);",
              "        ShipType(target_ship, 'Smuggler');",
              "        //Применяем к корпусу особый акрин и выставляем соответствующий внешний вид",
              "        if(!race) race = FindBonusByNameInCfg('ShuSmugglers_SmugglerMaloc');",
              "        else if(race == 1) race = FindBonusByNameInCfg('ShuSmugglers_SmugglerPeleng');",
              "        else if(race == 2) race = FindBonusByNameInCfg('ShuSmugglers_SmugglerPeople');",
              "        else if(race == 3) race = FindBonusByNameInCfg('ShuSmugglers_SmugglerFei');",
              "        else race = FindBonusByNameInCfg('ShuSmugglers_SmugglerGaal');",
              "        SpecialToEquipment(race, ShipEqInSlot(target_ship, t_Hull));",
              "        Chameleon(target_ship);",
              "    }",
              "",
              "    ShipJoin(QuestTarget, target_ship);",
              "    SetData(-1, 0, target_ship);",
              "    //Накидываем контрабандисту хреновый движок и повышаем резисты",
              "    dword engine = ShipEqInSlot(target_ship, t_Engine);",
              "    if(ItemLevel(engine) > 3)",
              "    {",
              "        ItemCost(engine, round(PortionInDiapason(ItemLevel(engine), 4, 8, 0.875, 0.375) * ItemCost(engine)));",
              "        ItemLevel(engine, 3);",
              "    }",
              "    NoDropItem(engine, 1);",
              "",
              "    ShipImproveItems(target_ship, RndObject(1, 3, target_ship));",
              "    ItemExtraSpecialsAddByType(ShipEqInSlot(target_ship, t_Hull), FindBonusByNameInCfg('ShuMercsHQ_QuestTargetDebuff'), 15);",
              "    //Очищаем трюм контрабандиста от всех прочих возможных товаров, а то выглядит нелепо",
              "    for(i = t_Food; i <= t_Narcotics; i = i + 1) GoodsAdd(target_ship, i, -GoodsCount(target_ship, i));",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_GuardedShip', 'NoShow');",
              "    //Также вешаем на контрабандиста \"магнит для грабителей\"",
              "    NoTargetToShip(target_ship, 6);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName' + '>', Name(target_ship), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteStageOne'), '<Star'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text, target_ship);",
              "",
              "    //Выдаём всем наёмникам задачу лететь в систему с контрабандистом",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        tdwd2 = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 7]), 1, tdwd2);",
              "    }",
              "",
              "    //Начинаем перебор коалиционных планет, и заносим всех военных в скрипт (чтоб не слиняли)",
              "    race = -1;",
              "    int warriors_cnt = 10000;",
              "    dword warriors_planet = 0;",
              "    int check = 0;",
              "    for(i = 0; i < StarPlanets(ActiveQuestsHQArray[q_num, 8]); i = i + 1)",
              "    {",
              "        cur_planet = StarPlanets(ActiveQuestsHQArray[q_num, 8], i);",
              "",
              "        //Запоминаем расу планеты для последующего спавна контрабанды",
              "        if(race == -1) race = PlanetRace(cur_planet);",
              "",
              "        for(int j = 0; j < PlanetWarriors(cur_planet); j = j + 1)",
              "        {",
              "            dword warrior = PlanetWarriors(cur_planet, j);",
              "            if(ShipInScript(warrior, 0)) continue;",
              "            if(ShipInGameEvent(warrior)) continue;",
              "            if(ShipSubType(warrior)) continue; //Пропускаем всякие флагманы",
              "            if(ShipStar(warrior) != ActiveQuestsHQArray[q_num, 8]) continue;",
              "            //Крутим счётчик военных в системе",
              "            ShipJoin(QuestAttackers, warrior);",
              "            SetData(Id(cur_planet) * 2, 2, warrior);",
              "            check = check + 1;",
              "",
              "            //Попутно ищем планету с наименьшим числом военных",
              "            if(PlanetWarriors(cur_planet) < warriors_cnt)",
              "            {",
              "                warriors_cnt = PlanetWarriors(cur_planet);",
              "                warriors_planet = cur_planet;",
              "            }",
              "        }",
              "    }",
              "    //Доспавниваем несколько военных (если нужно) на планету, где их меньше всего",
              "    int tint = ActiveQuestsHQArray[q_num, 11];",
              "    //Число военных для доспавна",
              "    warriors_cnt = GetParFromString(CT('Quest.ShuMercs.QuestsHQ.Private.Protect.2.MinWarriorsCount'), ',', 1, 1);",
              "    tint = tint + warriors_cnt;",
              "    if(check < tint)",
              "    {",
              "        for(j = 1; j < (tint - check); j = j + 1)",
              "        {",
              "            warrior = BuyWarrior(warriors_planet, 250);",
              "            for(i = 1; i <= 2; i = i + 1) ShipRefit(warrior);",
              "            ShipJoin(QuestAttackers, warrior);",
              "        }",
              "    }",
              "",
              "    //Создаём контрабандный груз (физически товары в трюм корабля положить невозможно, поэтому вообще похую!)",
              "    //Создаём юзлес, замаскированный под товар, сука! (по другому товар в трюм не положить)",
              "    if(race == Maloc) tint = t_Luxury;",
              "    else tint = RndObject(t_Arms, t_Narcotics, target_ship);",
              "    int size = RndObject(125, 200, target_ship);",
              "    dword quest_item = CreateQuestItem('ShuMercsHQ_GoodsImitation' + tint, PirateClan);",
              "    ItemSize(quest_item, size);",
              "    ItemCost(quest_item, size * GoodsSellPrice(ActiveQuestsHQArray[q_num, 9], tint));",
              "    NoDropItem(quest_item, 1);",
              "    LinkItemToScript(quest_item, QuestItem);",
              "",
              "    //Кладём контрабанду в трюм контрабандиста и устраняем возможный перевес",
              "    AddItemToShip(target_ship, quest_item);",
              "    //Устраняем возможный перевес",
              "    ShipImproveItems(target_ship, 0);",
              "",
              "    //Создаём \"филлерного\" транка для группы пиратов,",
              "    //чтобы не стриггерилось условие смерти всех пиратов раньше времени",
              "    //Да, костыль ещё тот, но что делать?",
              "    ship = BuyTranclucator(StarPlanets(GalaxyStar(People), 2));",
              "    TransferShip(ship, StarPlanets(GalaxyStar(People), 0));",
              "    ShipOwner(ship, None);",
              "    ShipJoin(QuestSupport, ship);",
              "    SetData(-1, 0, ship);",
              "",
              "    //Ищем подходящую систему для появления из неё пиратов",
              "    i = 2;",
              "    dword pirates_star = StarNearbyStars(ActiveQuestsHQArray[q_num, 8], 1);",
              "    while(pirates_star == ActiveQuestsHQArray[q_num, 7])",
              "    {",
              "        pirates_star = StarNearbyStars(ActiveQuestsHQArray[q_num, 8], i);",
              "        i = i + 1;",
              "    }",
              "    ActiveQuestsHQArray[q_num, 10] = Id(pirates_star);",
              "",
              "    //Заносим в массив Id квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "    //А также планеты",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  405,
          "#":  411,
          "Total.Lines":  35,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(ShipIsTakeoff(Player())) exit;",
              "if(ShipOrder(Player()) == 4) //Если тёрнкод вызван влётом игрока в ЧД",
              "{",
              "    if(ShipInHyperSpace(Player()))",
              "    {",
              "        if(CurrentForm() == 'StarMap')",
              "        {",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 3] == 'Quest.ShuMercs.QuestsHQ.PirateClan.Protect.2')",
              "            {",
              "                //Если код влёта в ЧД по данному квесту уже отработал",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 14]) exit;",
              "            }",
              "        }",
              "    }",
              "}",
              "if(LastTurnHandled == CurTurn()) exit;",
              "LastTurnHandled = CurTurn();",
              "",
              "num = ActiveQuestsHQArray[ActiveQuestHQ, 3];",
              "if(~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Private.'))",
              "{",
              "    check = 1;",
              "}",
              "else if(~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Coalition.'))",
              "{",
              "    check = 2;",
              "}",
              "else if(~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.PirateClan.'))",
              "{",
              "    check = 3;",
              "}",
              "else if(~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Special.'))",
              "{",
              "    check = 4;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  417,
          "#":  422,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок отказался от частного квеста",
              "tstr1 = '</color>' + CT(tarr1[rand, 3] + '.QuestDeclined');",
              "EndQuestHQ(1, 2);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  416,
          "#":  425,
          "Total.Lines":  90,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT(tarr1[rand, 3] + '.QuestAccepted');",
              "ActiveQuestHQ = 1;",
              "",
              "//Заполняем массив активного квеста (из ранее подобранного массива)",
              "//(используем copy, чтобы переносился также и тип переменной)",
              "for(i = 0; i <= 15; i = i + 1) copy(ActiveQuestsHQArray[ActiveQuestHQ, i], tarr1[rand, i]);",
              "",
              "free(tarr1);",
              "tarr1 = newarray(1);",
              "",
              "//Запускаем функцию подготовительного этапа для конкретного квеста",
              "tstr2 = ActiveQuestsHQArray[ActiveQuestHQ, 3];",
              "//Частные квесты",
              "//Игрок согласился на частный квест",
              "if(!GAnswerData)",
              "{",
              "    if(~findsubstr(tstr2, '.Destroy.'))",
              "    {",
              "        if(1 == tstr2) PrivateDestroyQuestOnePrepare(ActiveQuestHQ);",
              "        else if(2 == tstr2) PrivateDestroyQuestTwoPrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.Protect.'))",
              "    {",
              "        if(1 == tstr2) PrivateProtectQuestOnePrepare(ActiveQuestHQ);",
              "        else if(2 == tstr2) PrivateProtectQuestTwoPrepare(ActiveQuestHQ);",
              "        else if(3 == tstr2) PrivateProtectQuestThreePrepare(ActiveQuestHQ);",
              "        else if(4 == tstr2) PrivateProtectQuestFourPrepare(ActiveQuestHQ);",
              "    }",
              "}",
              "//Игрок согласился на коалиционный квест",
              "else if(GAnswerData == 1)",
              "{",
              "    if(~findsubstr(tstr2, '.AttackDominators.'))",
              "    {",
              "        if(1 == tstr2) CoalitionAttackDominatorsQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.AttackPirateClan.'))",
              "    {",
              "        if(1 == tstr2) CoalitionAttackPirateClanQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.AttackKlissan.'))",
              "    {",
              "        if(1 == tstr2) CoalitionAttackKlissanQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.DefendFromDominators.'))",
              "    {",
              "        if(1 == tstr2) CoalitionDefendFromDominatorsQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.DefendFromPirateClan.'))",
              "    {",
              "        if(1 == tstr2) CoalitionDefendFromPirateClanQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.Destroy.'))",
              "    {",
              "        if(1 == tstr2) CoalitionDestroyQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.Protect.'))",
              "    {",
              "        if(1 == tstr2) CoalitionProtectQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "}",
              "//Игрок согласился на пиратский квест",
              "else",
              "{",
              "    if(~findsubstr(tstr2, '.AttackDominators.'))",
              "    {",
              "        if(1 == tstr2) PirateClanAttackDominatorsQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.AttackCoalition.'))",
              "    {",
              "        if(1 == tstr2) PirateClanAttackCoalitionQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.DefendFromDominators.'))",
              "    {",
              "        if(1 == tstr2) PirateClanDefendFromDominatorsQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.DefendFromCoalition.'))",
              "    {",
              "        if(1 == tstr2) PirateClanDefendFromCoalitionQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.Destroy.'))",
              "    {",
              "        if(1 == tstr2) PirateClanDestroyQuestOnePrepare(ActiveQuestHQ);",
              "    }",
              "    else if(~findsubstr(tstr2, '.Protect.'))",
              "    {",
              "        if(1 == tstr2) PirateClanProtectQuestOnePrepare(ActiveQuestHQ);",
              "        else if(2 == tstr2) PirateClanProtectQuestTwoPrepare(ActiveQuestHQ);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  408,
          "#":  426,
          "Total.Lines":  16,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.PlayerAskPrivateQuest');",
              "if(!tdwd1) AddDialogBlock(tstr2, 1);",
              "InjectAnswer('PlayerHQQuestChoose', tstr2, 0);",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.PlayerAskCoalitionQuest');",
              "//Если в данный момент Коалиция разбита",
              "if(!tdwd2 || CoalitionDefeated()) AddDialogBlock(tstr2, 1);",
              "InjectAnswer('PlayerHQQuestChoose', tstr2, 1);",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.PlayerAskPirateClanQuest');",
              "//Пиратские концовки, в которых пиратов побеждают",
              "if(!tdwd3 || PirateWin() == 3 || PirateWin() == 4) AddDialogBlock(tstr2, 1);",
              "InjectAnswer('PlayerHQQuestChoose', tstr2, 2);",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.PlayerOut');",
              "DAnswer('restart~' + tstr2);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  377,
          "#":  428,
          "Total.Lines":  247,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Private.Destroy.1",
              "function PrivateDestroyQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_max_range = CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.1.FirstStarMaxRange');",
              "    int second_max_range = CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 4);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только Коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int first_cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(first_cur_range > first_max_range) continue;",
              "",
              "        dword target = 0;",
              "        for(int k = 0; k < StarShips(cur_star); k = k + 1)",
              "        {",
              "            dword ship = StarShips(cur_star, k);",
              "",
              "            if(ShipInScript(ship, 0)) continue;",
              "            if(ShipTypeN(ship) != t_Pirate) continue;",
              "            if(ShipOwner(ship) == PirateClan) continue; //Пират обязательно должен быть вольным и не клановым",
              "            if(ShipSubType(ship)) continue;",
              "            if(ShipInPrison(ship)) continue;",
              "            target = ship;",
              "            break;",
              "        }",
              "",
              "        if(!target) continue;",
              "",
              "        //Выбираем коалиционную систему, после чего начинаем перебор ближайших пиратских систем",
              "        dword coalition_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 2) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            int second_cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(second_cur_range > second_max_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = target;",
              "                tarr2[0, 1] = coalition_star;",
              "                tarr2[0, 2] = cur_star;",
              "                tarr2[0, 3] = first_cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(4);",
              "                tarr2[available_options, 0] = target;",
              "                tarr2[available_options, 1] = coalition_star;",
              "                tarr2[available_options, 2] = cur_star;",
              "                tarr2[available_options, 3] = first_cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пират-цель",
              "        tarr1[next_num, 0] = tarr2[available_options, 0];",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 3], first_max_range / 2, first_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.Private.Destroy.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Private.Destroy.1';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 8, 1000, 0);",
              "        tarr1[next_num, 5] = cost;",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 0;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Первая система с пиратом-целью",
              "        tarr1[next_num, 7] = tarr2[available_options, 1];",
              "        //Вторая система с клановыми дружбанами пирата-цели",
              "        tarr1[next_num, 8] = tarr2[available_options, 2];",
              "        //Родная планета пиратов-дружбанов (выбирается позже)",
              "        tarr1[next_num, 9] = 0;",
              "        //Маркер отпущенной пиратом угрозы (сразу после встречи с братками он запугивает игрока)",
              "        //Чтобы угроза не выскакивала по нескольку раз",
              "        tarr1[next_num, 10] = 0;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 11] = 0;",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetName'+'>', ShipName(tarr1[next_num, 0]),",
              "                                     '<TargetNameFull'+'>', Name(tarr1[next_num, 0]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Private.Destroy.1",
              "function PrivateDestroyQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста (он же единственный)",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "    dword target_ship = ActiveQuestsHQArray[q_num, 0];",
              "    //Вешаем на пирата запрет самовольного покидания системы и с гарантией открываем слот форсажа",
              "    ShipSpecialBonuses(target_ship, bonFuel, ShipSpecialBonuses(target_ship, bonFuel) - 10000);",
              "    ShipSpecialBonuses(target_ship, bonSlotForsage, 50);",
              "    //А также производим ему срочный \"фасадный\" ремонт",
              "    dword hull = ShipItems(target_ship, 0);",
              "    ItemSize(hull, round(1.3 * ItemSize(hull)));",
              "    HullHP(target_ship, ItemSize(hull));",
              "    //Чиним пирату двигатель и экипируем его обливионным коннектором, если такого у него ещё нет",
              "    ItemDurability(ShipEqInSlot(target_ship, t_Engine), 100);",
              "    if(GetEquipmentStats(hull, 2) < 2) ShipSpecialBonuses(target_ship, bonSlotArt, 2 - GetEquipmentStats(hull, 2));",
              "    if(!ArtefactTypeInUse(target_ship, t_ArtForsage))",
              "    {",
              "        dword art = CreateArt(t_ArtForsage, None);",
              "        AddItemToShip(target_ship, art);",
              "        ItemIsInUse(art, target_ship, 1);",
              "        NoDropItem(art, 1);",
              "    }",
              "    if(!ArtefactTypeInUse(target_ship, t_ArtEnergyDef))",
              "    {",
              "        art = CreateArt(t_ArtEnergyDef, None);",
              "        AddItemToShip(target_ship, art);",
              "        ItemIsInUse(art, target_ship, 1);",
              "        NoDropItem(art, 1);",
              "    }",
              "    //Устраняем возможный перевес",
              "    ShipImproveItems(target_ship, 0);",
              "    NoTargetToShip(target_ship, 3);",
              "    ShipJoin(QuestTarget, target_ship);",
              "    //Пират-цель пока занимается своими делами в той системе, в которой его поймал скрипт",
              "    SetData(33, 0, target_ship);",
              "",
              "    //Спавним дружбанов пирата-цели, но сперва подыскиваем им подходящую планетку",
              "    unknown t_array = newarray(1);",
              "    for(i = 0; i < StarPlanets(ActiveQuestsHQArray[q_num, 8]); i = i + 1)",
              "    {",
              "        dword cur_planet = StarPlanets(ActiveQuestsHQArray[q_num, 8], i);",
              "        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "        ArrayAdd(t_array, cur_planet);",
              "    }",
              "    //Выбираем случайную планету из доступных обитаемых",
              "    ActiveQuestsHQArray[q_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(GetQuestSeed() + 27))];",
              "",
              "    //-1 вычитаем в счёт пирата-цели",
              "    int add_pirates = -1 + CT(ActiveQuestsHQArray[q_num, 3] + '.TotalPiratesCount');",
              "    for(i = 1; i <= add_pirates; i = i + 1)",
              "    {",
              "        dword ship = BuyWarrior(PlanetPirateClan(), 300); //В целях рандомизации спавним их на Роджерии",
              "        for(int j = 1; j <= 3; j = j + 1) ShipRefit(ship);",
              "        ShipImproveItems(ship, 5);",
              "        ShipJoin(QuestAttackers, ship, 1);",
              "        ChangeState('QuestAttackersProtectState', ship);",
              "        //Пираты из данной группы будут прикрывать цель задания",
              "        SetData(-1, 0, ship); //Но пока что они просто сидят и ждут своего братишку",
              "        TransferShip(ship, ActiveQuestsHQArray[q_num, 9]);",
              "    }",
              "",
              "    //Вешаем пирату-цели специальную инфошку для маркировки и вывода уведомления при получении пиратом урона от игрока, либо от квестовых наёмников игрока",
              "    //Три запятые, чтобы тэги цвета не поломали парсинг на расшифровке",
              "    str text = 'Ether2,,,0,,,' + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.TargetOnAttack'), '<Pirate'+'>', Name(target_ship), '255,240,100');",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_QuestTargetAttackMark', 'NoShow', 0, 0, 0, Id(target_ship), text, '20,' + Id(ActiveQuestsHQArray[q_num, 8]) + ',0,' + Id(GroupToShip(QuestAttackers)));",
              "",
              "    //Блочим все квестовые системы от нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(половина из резерва, но не менее одного)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] == 1) i = 1;",
              "    else i = PlayerHQMainArray['Mercs', 'CurrentAtReady'] / 2;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - i;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "",
              "    //Выдаём всем наёмникам задачу лететь на перехват пирата",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(3, 0, ship); //Маркер на уничтожение цели с последующим автоматическим возвратом в штаб",
              "        SetData(Id(target_ship), 3, ship);",
              "    }",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName'+'>', Name(target_ship), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text, target_ship);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "    //А также планету",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  443,
          "#":  434,
          "Total.Lines":  231,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Coalition.AttackDominators.1 в процессе",
              "//Если захватили систему, либо истекло время",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "if(!StarOwner(cur_star) || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие пираты выводятся из скрипта",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "        OrderLock(tdwd1, 0);",
              "        ShipOut(tdwd1);",
              "    }",
              "",
              "    check = 0;",
              "    //Успех",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        //Ищем планету, на которой происходит церемония награждения",
              "        for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            break;",
              "        }",
              "        cur_planet = Id(cur_planet) * 2;",
              "",
              "        //Все уцелевшие наёмники летят за наградой, после чего возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "",
              "            //После влёта и вплоть до захвата системы наёмники находятся в стейте QuestMercsCapDomState",
              "            ChangeState('QuestMercsKillState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные летят за наградой, после чего выводятся из скрипта",
              "        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar' + '>', Name(cur_star), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные выводятся из скрипта",
              "        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            OrderLock(tdwd1, 0);",
              "            ShipOut(tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    //На всякий случай дублируем",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(cur_star, 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[ActiveQuestHQ, 1]), '<BeginPlanet'+'>', Name(cur_planet), '<BeginStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к коалиционной планете сбора",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо успешно добрались и совершили посадку на планету, военные отправляются в атаку",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_planet))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ наёмникам напрямую, чтобы не тормозили взлетать вместе с военными",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ военным напрямую, чтобы не тормозили взлетать",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "",
              "            QuestSupportDialogCall = CurTurn() + 3; //Военные сами вызовут игрока после взлёта",
              "            //Переходим на второй этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, военные вместе с наёмниками (или без оных) отправляются в целевую систему",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(!ActiveQuestsHQArray[ActiveQuestHQ, 11]) //Участвующие военные и наёмники ещё не прыгнули в атакуемую систему, сперва они должны собраться в точке прыжка",
              "        {",
              "            cur_ship = GroupToShip(QuestSupport);",
              "            if(!cur_ship) cur_ship = GroupToShip(QuestMercs);",
              "            if(!cur_ship)",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3; //Если всех участников каким-то образом перебили",
              "            }",
              "",
              "            if(cur_ship)",
              "            {",
              "                if(ShipInNormalSpace(cur_ship))",
              "                {",
              "                    if(ShipOrder(cur_ship) == 3)",
              "                    {",
              "                        QuestPlaceX = ShipOrder(cur_ship, 'X');",
              "                        QuestPlaceY = ShipOrder(cur_ship, 'Y');",
              "",
              "                        //Направляем наёмников и военных в зону ожидания",
              "                        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestMercs, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "                        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestSupport, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 11] = 1;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else //if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 1)",
              "        {",
              "            //Все в сборе, можно идти в акаку",
              "            if(",
              "                (!GroupCount(QuestMercs) || GroupIn(QuestMercs, QuestPlace)) &&",
              "                (!GroupCount(QuestSupport) || GroupIn(QuestSupport, QuestPlace))",
              "              )",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "",
              "                if(GroupCount(QuestMercs) || GroupCount(QuestSupport))",
              "                {",
              "                    //Все в акаку!",
              "                    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs, i);",
              "                        SetData(197, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestSupport, i);",
              "                        SetData(134, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Военные с наёмниками бьются в атакуемой системе до последнего",
              "    //else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3) {}",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  437,
          "#":  439,
          "Total.Lines":  263,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание PirateClan.AttackCoalition.1 в процессе",
              "//Если захватили систему, либо истекло время",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "if(StarOwner(cur_star) == 2 || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие военные (лол, такое возможно?) выводятся из скрипта",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "        OrderLock(tdwd1, 0);",
              "        ShipOut(tdwd1);",
              "    }",
              "",
              "    check = 0;",
              "    //Успех",
              "    if(StarOwner(cur_star) == 2)",
              "    {",
              "        //Ищем планету, на которой происходит церемония награждения",
              "        for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            break;",
              "        }",
              "        cur_planet = Id(cur_planet) * 2;",
              "",
              "        //Все уцелевшие наёмники летят за наградой, после чего возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            //И снова нейтралы",
              "            ShipStanding(tdwd1, 5);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "",
              "            //После влёта и вплоть до захвата системы наёмники находятся в стейте QuestMercsCapCoalState",
              "            ChangeState('QuestMercsKillState', tdwd1);",
              "        }",
              "        //Все уцелевшие пираты летят за наградой, после чего выводятся из скрипта",
              "        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar' + '>', Name(cur_star), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        //Возвращаем и повышаем прошлое отношение пиратов к игроку",
              "        RelationToRanger(PlanetPirateClan(), Player(), ActiveQuestsHQArray[ActiveQuestHQ, 10] + 25);",
              "",
              "        //Изменяем текст стандартной галановости о захвате коалиционной системы пиратами",
              "        for(i = PlanetNews() - 1; i > PlanetNews() - 7; i = i - 1)",
              "        {",
              "            if(PlanetNewsDate(i))",
              "            {",
              "                if(PlanetNewsType(i) == 32)",
              "                {",
              "                    if(~findsubstr(PlanetNewsText(i), '>' + Name(cur_star) + '<'))",
              "                    {",
              "                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.GalaxyNewsAfterWin'), '<TargetStar' + '>', Name(cur_star), '<PlayerOrgName' + '>', PlayerHQMainArray['Main', 'OrganisationName']);",
              "                        PlanetNewsText(i, tstr1);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            //И снова нейтралы",
              "            ShipStanding(tdwd1, 5);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Все уцелевшие пираты выводятся из скрипта",
              "        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            OrderLock(tdwd1, 0);",
              "            ShipOut(tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        //Возвращаем и понижаем прошлое отношение пиратов к игроку",
              "        RelationToRanger(PlanetPirateClan(), Player(), ActiveQuestsHQArray[ActiveQuestHQ, 10] - 25);",
              "        if(RelationToRanger(PlanetPirateClan(), Player()) < 10) RelationToRanger(PlanetPirateClan(), Player(), 10);",
              "    }",
              "",
              "    //На всякий случай дублируем",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(cur_star, 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[ActiveQuestHQ, 1]), '<BeginPlanet'+'>', Name(cur_planet), '<BeginStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к пиратской планете сбора",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо успешно добрались и совершили посадку на планету, пираты отправляются в атаку",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_planet))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                //Выставляем наёмникам про-пиратский Standing (с рождения он у них нейтральный)",
              "                ShipStanding(tdwd1, 8);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ наёмникам напрямую, чтобы не тормозили взлетать вместе с военными",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ пиратам напрямую, чтобы не тормозили взлетать",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "",
              "            QuestSupportDialogCall = CurTurn() + 3; //Пираты сами вызовут игрока после взлёта",
              "            //Переходим на второй этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, пираты вместе с наёмниками (или без оных) отправляются в целевую систему",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(!ActiveQuestsHQArray[ActiveQuestHQ, 11]) //Участвующие военные и наёмники ещё не прыгнули в атакуемую систему, сперва они должны собраться в точке прыжка",
              "        {",
              "            cur_ship = GroupToShip(QuestSupport);",
              "            if(!cur_ship) cur_ship = GroupToShip(QuestMercs);",
              "            if(!cur_ship)",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3; //Если всех участников каким-то образом перебили",
              "            }",
              "",
              "            if(cur_ship)",
              "            {",
              "                if(ShipInNormalSpace(cur_ship))",
              "                {",
              "                    if(ShipOrder(cur_ship) == 3)",
              "                    {",
              "                        QuestPlaceX = ShipOrder(cur_ship, 'X');",
              "                        QuestPlaceY = ShipOrder(cur_ship, 'Y');",
              "",
              "                        //Направляем наёмников и военных в зону ожидания",
              "                        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestMercs, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "                        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestSupport, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 11] = 1;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else //if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 1)",
              "        {",
              "            //Все в сборе, можно идти в акаку",
              "            if(",
              "                (!GroupCount(QuestMercs) || GroupIn(QuestMercs, QuestPlace)) &&",
              "                (!GroupCount(QuestSupport) || GroupIn(QuestSupport, QuestPlace))",
              "              )",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "",
              "                if(GroupCount(QuestMercs) || GroupCount(QuestSupport))",
              "                {",
              "                    //Все в акаку!",
              "                    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs, i);",
              "                        SetData(199, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestSupport, i);",
              "                        SetData(134, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Пираты с наёмниками бьются в атакуемой системе до последнего",
              "    //else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3) {}",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  438,
          "#":  440,
          "Total.Lines":  249,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание PirateClan.AttackDominators.1 в процессе",
              "//Если захватили систему, либо истекло время",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "if(StarOwner(cur_star) == 2 || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    check = 0;",
              "    //Успех",
              "    if(StarOwner(cur_star) == 2)",
              "    {",
              "        //Ищем планету, на которой происходит церемония награждения",
              "        for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            break;",
              "        }",
              "        cur_planet = Id(cur_planet) * 2;",
              "",
              "        //Все уцелевшие наёмники летят за наградой, после чего возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "",
              "            //После влёта и вплоть до захвата системы наёмники находятся в стейте QuestMercsCapDomState",
              "            ChangeState('QuestMercsKillState', tdwd1);",
              "        }",
              "        //Все уцелевшие пираты летят за наградой, после чего выводятся из скрипта",
              "        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar' + '>', Name(cur_star), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        //Возвращаем и повышаем прошлое отношение пиратов к игроку",
              "        RelationToRanger(PlanetPirateClan(), Player(), ActiveQuestsHQArray[ActiveQuestHQ, 11] + 25);",
              "",
              "        //Изменяем текст стандартной галановости о захвате доминаторской системы пиратами",
              "        for(i = PlanetNews() - 1; i > PlanetNews() - 7; i = i - 1)",
              "        {",
              "            if(PlanetNewsDate(i))",
              "            {",
              "                if(PlanetNewsType(i) == 31)",
              "                {",
              "                    if(~findsubstr(PlanetNewsText(i), '>' + Name(cur_star) + '<'))",
              "                    {",
              "                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.GalaxyNewsAfterWin'), '<TargetStar' + '>', Name(cur_star), '<PlayerOrgName' + '>', PlayerHQMainArray['Main', 'OrganisationName']);",
              "                        PlanetNewsText(i, tstr1);",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Все уцелевшие пираты выводятся из скрипта",
              "        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            OrderLock(tdwd1, 0);",
              "            ShipOut(tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        //Возвращаем и понижаем прошлое отношение пиратов к игроку",
              "        RelationToRanger(PlanetPirateClan(), Player(), ActiveQuestsHQArray[ActiveQuestHQ, 11] - 25);",
              "        if(RelationToRanger(PlanetPirateClan(), Player()) < 10) RelationToRanger(PlanetPirateClan(), Player(), 10);",
              "    }",
              "",
              "    //На всякий случай дублируем",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(cur_star, 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[ActiveQuestHQ, 1]), '<BeginPlanet'+'>', Name(cur_planet), '<BeginStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к пиратской планете сбора",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо успешно добрались и совершили посадку на планету, пираты отправляются в атаку",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_planet))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                //Выставляем наёмникам про-пиратский Standing (с рождения он у них нейтральный)",
              "                ShipStanding(tdwd1, 8);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ наёмникам напрямую, чтобы не тормозили взлетать вместе с военными",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ пиратам напрямую, чтобы не тормозили взлетать",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "",
              "            QuestSupportDialogCall = CurTurn() + 3; //Пираты сами вызовут игрока после взлёта",
              "            //Переходим на второй этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, пираты вместе с наёмниками (или без оных) отправляются в целевую систему",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(!ActiveQuestsHQArray[ActiveQuestHQ, 12]) //Участвующие военные и наёмники ещё не прыгнули в атакуемую систему, сперва они должны собраться в точке прыжка",
              "        {",
              "            cur_ship = GroupToShip(QuestSupport);",
              "            if(!cur_ship) cur_ship = GroupToShip(QuestMercs);",
              "            if(!cur_ship)",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3; //Если всех участников каким-то образом перебили",
              "            }",
              "",
              "            if(cur_ship)",
              "            {",
              "                if(ShipInNormalSpace(cur_ship))",
              "                {",
              "                    if(ShipOrder(cur_ship) == 3)",
              "                    {",
              "                        QuestPlaceX = ShipOrder(cur_ship, 'X');",
              "                        QuestPlaceY = ShipOrder(cur_ship, 'Y');",
              "",
              "                        //Направляем наёмников и военных в зону ожидания",
              "                        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestMercs, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "                        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestSupport, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 12] = 1;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else //if(ActiveQuestsHQArray[ActiveQuestHQ, 12] == 1)",
              "        {",
              "            //Все в сборе, можно идти в акаку",
              "            if(",
              "                (!GroupCount(QuestMercs) || GroupIn(QuestMercs, QuestPlace)) &&",
              "                (!GroupCount(QuestSupport) || GroupIn(QuestSupport, QuestPlace))",
              "              )",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "",
              "                if(GroupCount(QuestMercs) || GroupCount(QuestSupport))",
              "                {",
              "                    //Все в акаку!",
              "                    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs, i);",
              "                        SetData(197, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestSupport, i);",
              "                        SetData(134, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Пираты с наёмниками бьются в атакуемой системе до последнего",
              "    //else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3) {}",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  439,
          "#":  441,
          "Total.Lines":  357,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания PirateClan.AttackCoalition.1",
              "function PirateClanAttackCoalitionQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_max_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackCoalition.1.FirstStarMaxRange');",
              "    int second_max_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackCoalition.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        //В качестве стартовой подойдёт только пиратская система",
              "        if(StarOwner(cur_star) != 2) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int first_cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(first_cur_range > first_max_range) continue;",
              "",
              "        //Выбираем пиратскую систему, после чего начинаем перебор ближайших коалиционных систем",
              "        dword coalition_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "            if(StarOwner(cur_star)) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "            //Пропускаем системы, защищённые от захвата",
              "            if(NoComeKlingToStar(cur_star)) continue;",
              "            if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "",
              "            int second_cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(second_cur_range > second_max_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = coalition_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = first_cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = coalition_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = first_cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пока что пусто",
              "        tarr1[next_num, 0] = 0;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 2], first_max_range / 2, first_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackCoalition.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackCoalition.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.PirateClan.AttackCoalition.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 19, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у пиратского клана",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id",
              "        //Первая система для сбора всех кораблей перед атакой",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Атакуемая система",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Случайно выбираем планету для начала сбора сил атакующих",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr2[available_options, 0]); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(tarr2[available_options, 0], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 13))];",
              "        //Запоминаем отношение пиратов к игроку перед началом операции (в ходе операции будет временно выставлено отличное)",
              "        tarr1[next_num, 10] = RelationToRanger(PlanetPirateClan(), Player());",
              "        tarr1[next_num, 11] = 0; //Маркер о том, была ли уже выставлена зона ожидания всех участвующих кораблей перед одновременным прыжком в атакуемую систему",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "        str split_line;",
              "        if(GetGameOptions('FontDialog') == '0') split_line = '</color>-----------------------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '1') split_line = '</color>------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '2') split_line = '</color>-------------------------------------------';",
              "        else split_line = '</color>--------------------------------------';",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5],",
              "                                     '<SplitLine'+'>', split_line);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста PirateClan.AttackCoalition.1",
              "function PirateClanAttackCoalitionQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "",
              "        //Также все они должны иметь пиратского овнера во избежание лишней рандомной агрессии",
              "        ShipOwner(ship, PirateClan);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "",
              "        //Вручную корректируем характер наёмника для данной миссии",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "",
              "        //Заранее понижаем отношение всех коалиционных планет и станций в атакуемой наёмниками системе до нуля",
              "        for(int j = 0; j < StarPlanets(target_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(target_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 0);",
              "        }",
              "        for(j = 0; j < StarRuins(target_star); j = j + 1)",
              "        {",
              "            dword cur_ruin = StarRuins(target_star, j);",
              "            if(ShipStanding(cur_ruin) != 2 && ShipStanding(cur_ruin) != 3) continue;",
              "",
              "            RelationToRanger(cur_ruin, ship, 0);",
              "        }",
              "    }",
              "",
              "    //Начинаем перебор коалиционных планет, и заносим всех военных в скрипт (чтоб не слиняли)",
              "    int warriors_count = 0;",
              "    int cap_ships_count = 0;",
              "    for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "    {",
              "        cur_planet = StarPlanets(target_star, i);",
              "        if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "        for(j = 0; j < PlanetWarriors(cur_planet); j = j + 1)",
              "        {",
              "            dword warrior = PlanetWarriors(cur_planet, j);",
              "            if(ShipInScript(warrior, 0))",
              "            {",
              "                //Флагманы могут быть уже в скрипте (например, дредноуты)",
              "                if(ShipSubType(warrior)) cap_ships_count = cap_ships_count + 1;",
              "                continue;",
              "            }",
              "            if(ShipInGameEvent(warrior)) continue;",
              "            if(ShipStar(warrior) != target_star) continue;",
              "            //Крутим счётчик военных в системе",
              "            //Флагманы записываем отдельно",
              "            if(ShipSubType(warrior)) cap_ships_count = cap_ships_count + 1;",
              "            else warriors_count = warriors_count + 1;",
              "",
              "            //ShipJoin(QuestAttackers, warrior);",
              "            //SetData(33, 0, warrior);",
              "        }",
              "    }",
              "    int stations_count = 0;",
              "    for(i = 0; i < StarRuins(target_star); i = i + 1)",
              "    {",
              "        cur_ruin = StarRuins(target_star, i);",
              "        if(ShipStanding(cur_ruin) != 2 && ShipStanding(cur_ruin) != 3) continue;",
              "",
              "        stations_count = stations_count + 1;",
              "    }",
              "",
              "    //Минимальное стартовое число пиратов, которые присоединяться к наёмникам в атаке",
              "    int add_pirates = CT(ActiveQuestsHQArray[q_num, 3] + '.MinPiratesCount');",
              "    //Сила военных за каждый флагман в системе и за каждую станцию в системе",
              "    if(!CurrentMods('Evolution\\EvoArmada'))",
              "    {",
              "        int warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 0, 1);",
              "        int warriors_per_stan = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerStation'), ',', 0, 1);",
              "    }",
              "    else",
              "    {",
              "        warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 1, 1);",
              "        warriors_per_stan = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerStation'), ',', 1, 1);",
              "    }",
              "",
              "    //Определяем общую силу группировки военных в системе без учёта станций",
              "    //(сумма числа простых военных плюс флагманов и станций, которые по силе оцениваются сразу за нескольких простых военных)",
              "    warriors_count = warriors_count + (warriors_per_cap * cap_ships_count);",
              "    warriors_count = warriors_count + (warriors_per_stan * stations_count);",
              "    //Число военных для доспавна, если в системе их не хватило до минимального \"оборонного\" количества",
              "    warriors_count = warriors_count - CT(ActiveQuestsHQArray[q_num, 3] + '.MinWarriorsCount');",
              "",
              "    //Здесь считаем, сколько пиратов нам нужно добавить к стартовой группировке атакующих",
              "    //(если военных и флагманов в атакуемой системе оказалось сверх меры)",
              "    if(warriors_count > 0)",
              "    {",
              "        add_pirates = add_pirates + warriors_count;",
              "    }",
              "",
              "    //Доспавниваем военных поровну на все обитаемые планеты атакуемой системы",
              "    //(только если их в атакуемой системе оказалось меньше, чем нужно)",
              "    while(warriors_count < 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(target_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(warriors_count < 0)",
              "            {",
              "                warrior = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(warrior);",
              "                ShipImproveItems(warrior, RndObject(0, 2, cur_planet));",
              "                //ShipJoin(QuestAttackers, warrior);",
              "                //SetData(33, 0, warrior);",
              "",
              "                warriors_count = warriors_count + 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Начинаем перебор всех пиратов в стартовой системе и заносим их в скрипт (чтоб не слиняли)",
              "    str id_line = '';",
              "    for(i = 0; i < StarShips(begin_star); i = i + 1)",
              "    {",
              "        warrior = StarShips(begin_star, i);",
              "        if(ShipInScript(warrior, 0)) continue;",
              "        if(ShipInGameEvent(warrior)) continue;",
              "        if(ShipOwner(warrior) != PirateClan) continue;",
              "",
              "        ShipJoin(QuestSupport, warrior);",
              "        //Собираем всех нападающих пиратов на одной планете",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "        if(id_line == '') id_line = Id(warrior);",
              "        else id_line = id_line + ',' + Id(warrior);",
              "        add_pirates = add_pirates - 1;",
              "",
              "        //Если уже собрали достаточно пиратов для атакующей волны",
              "        if(!add_pirates) break;",
              "    }",
              "    //Доспавниваем пиратов поровну на все обитаемые планеты стартовой системы",
              "    //(только если не хватило уже имеющихся в стартовой системе)",
              "    if(add_pirates > 20) add_pirates = 20;",
              "    while(add_pirates)",
              "    {",
              "        for(i = 0; i < StarPlanets(begin_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(begin_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(add_pirates)",
              "            {",
              "                warrior = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(warrior);",
              "                ShipImproveItems(warrior, RndObject(0, 3, cur_planet));",
              "",
              "                ShipJoin(QuestSupport, warrior);",
              "                //Собираем всех нападающих пиратов на одной планете",
              "                SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "                if(id_line == '') id_line = Id(warrior);",
              "                else id_line = id_line + ',' + Id(warrior);",
              "                add_pirates = add_pirates - 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Вешаем всем пиратам инфошку агра на игрока в случае, если тот захочет на них напасть",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        warrior = GroupShip(QuestSupport, i);",
              "        ShipAddCustomShipInfo(warrior, 'ShuMercsHQ_QuestShipsOutOnPlayerAttack', 'NoShow', 0, 0, 0, id_line, 'Ether2,,,0,,,' + CT(ActiveQuestsHQArray[q_num, 3] + '.SupportOnPlayerAttack'));",
              "    }",
              "",
              "    //На время квеста обеспечиваем игроку полную лояльность (ХА-ХА-ХА! \"ЛОЯЛЬНОСТЬ\" ЭТИХ МУДАКОВ, АГА, КАК ЖЕ!) со стороны пиратов",
              "    RelationToRanger(PlanetPirateClan(), Player(), 100);",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в целевую систему",
              "    //(также временно блочит смену подданства в целевой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'PirateClan');",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[q_num, 1]), '<BeginPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '<BeginStar'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также планету сбора",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  444,
          "#":  442,
          "Total.Lines":  228,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Coalition.AttackPirateClan.1 в процессе",
              "//Если захватили систему, либо истекло время",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "if(!StarOwner(cur_star) || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    check = 0;",
              "    //Успех",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        //Ищем планету, на которой происходит церемония награждения",
              "        for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            break;",
              "        }",
              "        cur_planet = Id(cur_planet) * 2;",
              "",
              "        //Все уцелевшие наёмники летят за наградой, после чего возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            //И снова нейтралы",
              "            ShipStanding(tdwd1, 5);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "",
              "            //После влёта и вплоть до захвата системы наёмники находятся в стейте QuestMercsCapPirState",
              "            ChangeState('QuestMercsKillState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные летят за наградой, после чего выводятся из скрипта",
              "        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(3, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet, 2, tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar' + '>', Name(cur_star), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            //И снова нейтралы",
              "            ShipStanding(tdwd1, 5);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные выводятся из скрипта",
              "        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            OrderLock(tdwd1, 0);",
              "            ShipOut(tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    //На всякий случай дублируем",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(cur_star, 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[ActiveQuestHQ, 1]), '<BeginPlanet'+'>', Name(cur_planet), '<BeginStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к коалиционной планете сбора",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо успешно добрались и совершили посадку на планету, военные отправляются в атаку",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_planet))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ наёмникам напрямую, чтобы не тормозили взлетать вместе с военными",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ военным напрямую, чтобы не тормозили взлетать",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "",
              "            QuestSupportDialogCall = CurTurn() + 3; //Военные сами вызовут игрока после взлёта",
              "            //Переходим на второй этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, военные вместе с наёмниками (или без оных) отправляются в целевую систему",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(!ActiveQuestsHQArray[ActiveQuestHQ, 11]) //Участвующие военные и наёмники ещё не прыгнули в атакуемую систему, сперва они должны собраться в точке прыжка",
              "        {",
              "            cur_ship = GroupToShip(QuestSupport);",
              "            if(!cur_ship) cur_ship = GroupToShip(QuestMercs);",
              "            if(!cur_ship)",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3; //Если всех участников каким-то образом перебили",
              "            }",
              "",
              "            if(cur_ship)",
              "            {",
              "                if(ShipInNormalSpace(cur_ship))",
              "                {",
              "                    if(ShipOrder(cur_ship) == 3)",
              "                    {",
              "                        QuestPlaceX = ShipOrder(cur_ship, 'X');",
              "                        QuestPlaceY = ShipOrder(cur_ship, 'Y');",
              "",
              "                        //Направляем наёмников и военных в зону ожидания",
              "                        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestMercs, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "                        for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestSupport, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 11] = 1;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else //if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 1)",
              "        {",
              "            //Все в сборе, можно идти в акаку",
              "            if(",
              "                (!GroupCount(QuestMercs) || GroupIn(QuestMercs, QuestPlace)) &&",
              "                (!GroupCount(QuestSupport) || GroupIn(QuestSupport, QuestPlace))",
              "              )",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "",
              "                if(GroupCount(QuestMercs) || GroupCount(QuestSupport))",
              "                {",
              "                    //Все в акаку!",
              "                    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs, i);",
              "                        SetData(198, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestSupport, i);",
              "                        SetData(134, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Военные с наёмниками бьются в атакуемой системе до последнего",
              "    //else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3) {}",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  445,
          "#":  447,
          "Total.Lines":  236,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestMercs (для захвата и обороны коалиционных систем с полностью ручным выбором всех целей):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword target = ShipGetBad(CurShip);",
              "    if(target)",
              "    {",
              "        if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "        {",
              "            int no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(ShipInScript(target, 0))",
              "        {",
              "            if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "            {",
              "                no_tar = NoTargetToShip(target);",
              "                //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "                NoTargetToShip(target, 4);",
              "                TruceBetweenShips(CurShip, target);",
              "                NoTargetToShip(target, no_tar);",
              "                //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Вынуждаем корабль лететь на ремонт при слишком больших повреждениях",
              "if(GetData(0) == 40)",
              "{",
              "    //Только если текущая система пиратская",
              "    if(StarOwner(cur_star) == 2)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip))",
              "        {",
              "            if(HullDamage(CurShip) < 8)",
              "            {",
              "                OrderTakeOff(CurShip);",
              "                exit;",
              "            }",
              "            else",
              "            {",
              "                ShipFreeFlight(CurShip);",
              "                OrderNone(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "        else if(HullDamage(CurShip) > 77)",
              "        {",
              "            OrderLanding(CurShip, NearCivilPlanet(CurShip));",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(ShipInScript(target, 0))",
              "    {",
              "        if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "        {",
              "            TruceBetweenShips(CurShip, target);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Ищем в системе любые враждебные пиратам корабли и станции, выбираем ближайший, и атакуем",
              "int closest_dist = 500000;",
              "target = 0;",
              "for(i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "{",
              "    dword ship = StarShips(cur_star, i);",
              "",
              "    if(IsPlayer(ship)) continue; //Но не игрока",
              "    if(ShipInHyperSpace(ship, 1)) continue;",
              "    //Сразу пропускаем все про-клановые и нейтральные корабли и станции",
              "    int stand = ShipStanding(ship);",
              "    if(stand != 0 && stand != 2 && stand != 3 && stand != 9) continue;",
              "",
              "    int obj_type = ObjectType(ship);",
              "    int dist = Dist(CurShip, ship);",
              "    if(dist < closest_dist)",
              "    {",
              "        //Приоритеты:",
              "        //1 - военные и флагманы",
              "        //2 - прочие корабли",
              "        //3 - станции",
              "        //4 - любые корабли на планетах и нейтральных станциях",
              "        if(ShipInNormalSpace(ship) && ShipTypeN(ship) == t_Warrior && obj_type != 5)",
              "        {",
              "            closest_dist = dist;",
              "            target = ship;",
              "        }",
              "        else if(!target)",
              "        {",
              "            if(ShipInNormalSpace(ship) && obj_type != 5)",
              "            {",
              "                closest_dist = dist;",
              "                target = ship;",
              "            }",
              "            else if(!target)",
              "            {",
              "                if(obj_type == 5)",
              "                {",
              "                    closest_dist = dist;",
              "                    target = ship;",
              "                }",
              "                else if(!target)",
              "                {",
              "                    closest_dist = dist;",
              "                    target = ship;",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "//Если нашли подходящую цель, то выставляем её в качестве основного врага для наёмника",
              "if(target)",
              "{",
              "    ShipSetBad(CurShip, target);",
              "    if(ShipInNormalSpace(target)) OrderFollowShip(CurShip, target, 1);",
              "    else OrderFollowShip(CurShip, target, 0);",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //float angle = 0.01 * RndObject(0, 200, CurShip);",
              "        //int radius = RndObject(500, 1100, CurShip);",
              "        //float flt = round(sin(angle * pi) * radius);",
              "        //int coord_x = flt;",
              "        //flt = round(cos(angle * pi) * radius);",
              "        //int coord_y = flt;",
              "        //OrderMove(CurShip, coord_x, coord_y);",
              "        OrderMove(CurShip, AroundStar);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  446,
          "#":  448,
          "Total.Lines":  237,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestMercs (для захвата и обороны пиратских систем с полностью ручным выбором всех целей):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword target = ShipGetBad(CurShip);",
              "    if(target)",
              "    {",
              "        if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "        {",
              "            int no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(ShipInScript(target, 0))",
              "        {",
              "            if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "            {",
              "                no_tar = NoTargetToShip(target);",
              "                //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "                NoTargetToShip(target, 4);",
              "                TruceBetweenShips(CurShip, target);",
              "                NoTargetToShip(target, no_tar);",
              "                //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Вынуждаем корабль лететь на ремонт при слишком больших повреждениях",
              "if(GetData(0) == 40)",
              "{",
              "    //Только если текущая система под контролем Коалиции",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        if(!ShipInNormalSpace(CurShip))",
              "        {",
              "            if(HullDamage(CurShip) < 8)",
              "            {",
              "                OrderTakeOff(CurShip);",
              "                exit;",
              "            }",
              "            else",
              "            {",
              "                ShipFreeFlight(CurShip);",
              "                OrderNone(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "        else if(HullDamage(CurShip) > 77)",
              "        {",
              "            OrderLanding(CurShip, NearCivilPlanet(CurShip));",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(ShipInScript(target, 0))",
              "    {",
              "        if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "        {",
              "            TruceBetweenShips(CurShip, target);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Ищем в системе любые враждебные пиратам корабли и станции, выбираем ближайший, и атакуем",
              "int closest_dist = 500000;",
              "target = 0;",
              "for(i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "{",
              "    dword ship = StarShips(cur_star, i);",
              "",
              "    if(IsPlayer(ship)) continue; //Но не игрока",
              "    if(ShipInHyperSpace(ship, 1)) continue;",
              "    //Сразу пропускаем все про-коалиционные и нейтральные корабли и станции",
              "    int stand = ShipStanding(ship);",
              "    if(stand >= 1 && stand <= 6) continue;",
              "",
              "    int obj_type = ObjectType(ship);",
              "    int dist = Dist(CurShip, ship);",
              "    if(dist < closest_dist)",
              "    {",
              "        //Приоритеты:",
              "        //1 - всевозможные пираты",
              "        //2 - прочие рейнджеры",
              "        //3 - станции",
              "        //4 - любые корабли на планетах и нейтральных станциях",
              "        if(ShipInNormalSpace(ship) && ShipTypeN(ship) == t_Pirate && obj_type != 5)",
              "        {",
              "            closest_dist = dist;",
              "            target = ship;",
              "        }",
              "        else if(!target)",
              "        {",
              "            if(ShipInNormalSpace(ship) && obj_type != 5)",
              "            {",
              "                closest_dist = dist;",
              "                target = ship;",
              "            }",
              "            else if(!target)",
              "            {",
              "                if(obj_type == 5)",
              "                {",
              "                    closest_dist = dist;",
              "                    target = ship;",
              "                }",
              "                else if(!target)",
              "                {",
              "                    closest_dist = dist;",
              "                    target = ship;",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Если нашли подходящую цель, то выставляем её в качестве основного врага для наёмника",
              "if(target)",
              "{",
              "    ShipSetBad(CurShip, target);",
              "    if(ShipInNormalSpace(target)) OrderFollowShip(CurShip, target, 1);",
              "    else OrderFollowShip(CurShip, target, 0);",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //float angle = 0.01 * RndObject(0, 200, CurShip);",
              "        //int radius = RndObject(500, 1100, CurShip);",
              "        //float flt = round(sin(angle * pi) * radius);",
              "        //int coord_x = flt;",
              "        //flt = round(cos(angle * pi) * radius);",
              "        //int coord_y = flt;",
              "        //OrderMove(CurShip, coord_x, coord_y);",
              "        OrderMove(CurShip, AroundStar);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  442,
          "#":  449,
          "Total.Lines":  366,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.AttackPirateClan.1",
              "function CoalitionAttackPirateClanQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackPirateClan.1.FirstStarMaxRange');",
              "    int second_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackPirateClan.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int first_cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(first_cur_range > first_max_range) continue;",
              "",
              "        //Выбираем коалиционную систему, после чего начинаем перебор ближайших пиратских систем",
              "        dword coalition_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 2) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "            //Пропускаем системы, защищённые от захвата",
              "            if(NoComeKlingToStar(cur_star)) continue;",
              "            if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "",
              "            int second_cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(second_cur_range > second_max_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = coalition_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = first_cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = coalition_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = first_cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пока что пусто",
              "        tarr1[next_num, 0] = 0;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 2], first_max_range / 2, first_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackPirateClan.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackPirateClan.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Coalition.AttackPirateClan.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 15, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у Совета Коалиции",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Первая система для сбора всех кораблей перед атакой",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Атакуемая система",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для старта сбора сил атакующих",
              "        //Случайно выбираем планету для начала сбора сил атакующих",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 42))];",
              "        //Также выбираем случайную планету из целевой системы для подстановки в интро квеста",
              "        ArrayClear(t_array);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 8]); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(tarr1[next_num, 8], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 10] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 52))];",
              "        tarr1[next_num, 11] = 0; //Маркер о том, была ли уже выставлена зона ожидания всех участвующих кораблей перед одновременным прыжком в атакуемую систему",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "        str split_line;",
              "        if(GetGameOptions('FontDialog') == '0') split_line = '</color>-----------------------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '1') split_line = '</color>------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '2') split_line = '</color>-------------------------------------------';",
              "        else split_line = '</color>--------------------------------------';",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 10]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5],",
              "                                     '<SplitLine'+'>', split_line);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Coalition.AttackPirateClan.1",
              "function CoalitionAttackPirateClanQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "",
              "        //Заранее задаём им коалиционного овнера, чтобы не возникало проблем с военными",
              "        ShipOwner(ship, ShipPilotRace(Player()));",
              "",
              "        //Также понижаем отношение всех станций в атакуемой наёмниками системе",
              "        for(int j = 0; j < StarRuins(target_star); j = j + 1)",
              "        {",
              "            dword cur_ruin = StarRuins(target_star, j);",
              "            if(ShipStanding(cur_ruin) != 7 && ShipStanding(cur_ruin) != 8) continue;",
              "",
              "            RelationToRanger(cur_ruin, ship, 0);",
              "        }",
              "        //Но в то же время повышаем отношение всех коалиционных планет в стартовой системе",
              "        for(j = 0; j < StarPlanets(begin_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(begin_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 100);",
              "        }",
              "    }",
              "    //И к игроку тоже заодно",
              "    for(j = 0; j < StarPlanets(begin_star); j = j + 1)",
              "    {",
              "        cur_planet = StarPlanets(begin_star, j);",
              "        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "        if(RelationToRanger(cur_planet, Player()) < 60) RelationToRanger(cur_planet, Player(), 60);",
              "    }",
              "",
              "    //Начинаем перебор пиратской системы и заносим всех пиратов в скрипт (чтоб не слиняли)",
              "    int pirates_count = 0;",
              "    int cap_ships_count = 0;",
              "    for(i = 0; i < StarShips(target_star); i = i + 1)",
              "    {",
              "        dword pirate = StarShips(target_star, i);",
              "        if(ShipInScript(pirate, 0))",
              "        {",
              "            //Пиратские флагманы всегда имеют группу (мод EvoArmada)",
              "            str text = ShipType(pirate);",
              "            if(text == 'PirateFrigate' || text == 'PirateGalleon') cap_ships_count = cap_ships_count + 1;",
              "            continue;",
              "        }",
              "        if(ShipInGameEvent(pirate)) continue;",
              "        //Крутим пиратов военных в системе",
              "        else pirates_count = pirates_count + 1;",
              "",
              "        //ShipJoin(QuestAttackers, pirate);",
              "        //SetData(33, 0, pirate);",
              "    }",
              "    int stations_count = 0;",
              "    for(i = 0; i < StarRuins(target_star); i = i + 1)",
              "    {",
              "        cur_ruin = StarRuins(target_star, i);",
              "        if(ShipStanding(cur_ruin) != 7 && ShipStanding(cur_ruin) != 8) continue;",
              "",
              "        stations_count = stations_count + 1;",
              "    }",
              "",
              "    //Минимальное стартовое число военных, которые присоединяться к наёмникам в атаке",
              "    int add_warriors = CT(ActiveQuestsHQArray[q_num, 3] + '.MinWarriorsCount');",
              "    //Сила пиратов за каждый флагман в системе и за каждую станцию в системе",
              "    if(!CurrentMods('Evolution\\EvoArmada'))",
              "    {",
              "        int warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 0, 1);",
              "        int pirates_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.PiratesPerCapitalShip'), ',', 0, 1);",
              "        int pirates_per_stan = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.PiratesPerStation'), ',', 0, 1);",
              "    }",
              "    else",
              "    {",
              "        warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 1, 1);",
              "        pirates_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.PiratesPerCapitalShip'), ',', 1, 1);",
              "        pirates_per_stan = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.PiratesPerStation'), ',', 1, 1);",
              "    }",
              "",
              "    //Определяем общую силу группировки пиратов в системе без учёта станций",
              "    //(сумма числа простых пиратов плюс флагманов и станций, которые по силе оцениваются сразу за нескольких простых пиратов)",
              "    pirates_count = pirates_count + (pirates_per_cap * cap_ships_count);",
              "    pirates_count = pirates_count + (pirates_per_stan * stations_count);",
              "    //Число пиратов для доспавна, если в системе их не хватило до минимального \"оборонного\" количества",
              "    pirates_count = pirates_count - CT(ActiveQuestsHQArray[q_num, 3] + '.MinPiratesCount');",
              "",
              "    //Здесь считаем, сколько военных нам нужно добавить к стартовой группировке атакующих",
              "    //(если пиратов и флагманов в атакуемой системе оказалось сверх меры)",
              "    if(pirates_count > 0)",
              "    {",
              "        add_warriors = add_warriors + pirates_count;",
              "    }",
              "",
              "    //Доспавниваем пиратов поровну на все обитаемые планеты атакуемой системы",
              "    //(только если их в атакуемой системе оказалось меньше, чем нужно)",
              "    while(pirates_count < 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(target_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(pirates_count < 0)",
              "            {",
              "                pirate = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(pirate);",
              "                ShipImproveItems(pirate, RndObject(0, 2, cur_planet));",
              "                //ShipJoin(QuestAttackers, pirate);",
              "                //SetData(33, 0, pirate);",
              "",
              "                pirates_count = pirates_count + 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Начинаем перебор всех военных в стартовой системе и заносим их в скрипт (чтоб не слиняли)",
              "    str id_line = '';",
              "    for(i = 0; i < StarShips(begin_star); i = i + 1)",
              "    {",
              "        dword warrior = StarShips(begin_star, i);",
              "        if(ShipInScript(warrior, 0)) continue;",
              "        if(ShipInGameEvent(warrior)) continue;",
              "        if(ShipOwner(warrior) != PirateClan) continue;",
              "",
              "        ShipJoin(QuestSupport, warrior);",
              "        //Собираем всех нападающих военных на одной планете",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "        if(id_line == '') id_line = Id(warrior);",
              "        else id_line = id_line + ',' + Id(warrior);",
              "        //Случайно угодившие в волну атаки флагманы будут считаться \"дороже\"",
              "        if(!ShipSubType(warrior)) add_warriors = add_warriors - 1;",
              "        else add_warriors = add_warriors - warriors_per_cap;",
              "",
              "        //Если уже собрали достаточно военных для атакующей волны",
              "        if(add_warriors <= 0) break;",
              "    }",
              "    //Доспавниваем военных поровну на все обитаемые планеты стартовой системы",
              "    //(только если не хватило уже имеющихся в стартовой системе)",
              "    if(add_warriors > 15) add_warriors = 15;",
              "    while(add_warriors > 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(begin_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(begin_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(add_warriors > 0)",
              "            {",
              "                warrior = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(warrior);",
              "                ShipImproveItems(warrior, RndObject(0, 3, cur_planet));",
              "",
              "                ShipJoin(QuestSupport, warrior);",
              "                //Собираем всех нападающих военных на одной планете",
              "                SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "                if(id_line == '') id_line = Id(warrior);",
              "                else id_line = id_line + ',' + Id(warrior);",
              "                add_warriors = add_warriors - 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Вешаем всем военным инфошку агра на игрока в случае, если тот захочет на них напасть",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        warrior = GroupShip(QuestSupport, i);",
              "        ShipAddCustomShipInfo(warrior, 'ShuMercsHQ_QuestShipsOutOnPlayerAttack', 'NoShow', 0, 0, 0, id_line, 'Ether2,,,0,,,' + CT(ActiveQuestsHQArray[q_num, 3] + '.SupportOnPlayerAttack'));",
              "    }",
              "",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в целевую систему",
              "    //(также временно блочит смену подданства в целевой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'Coalition');",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[q_num, 1]), '<BeginPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '<BeginStar'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также планеты",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "    ActiveQuestsHQArray[q_num, 10] = Id(ActiveQuestsHQArray[q_num, 10]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  440,
          "#":  450,
          "Total.Lines":  338,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания PirateClan.AttackDominators.1",
              "function PirateClanAttackDominatorsQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_max_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackDominators.1.FirstStarMaxRange');",
              "    int second_max_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackDominators.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        //В качестве стартовой подойдёт только пиратская система",
              "        if(StarOwner(cur_star) != 2) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int first_cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(first_cur_range > first_max_range) continue;",
              "",
              "        //Выбираем пиратскую систему, после чего начинаем перебор ближайших доминаторских систем",
              "        dword coalition_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 1) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "            //Пропускаем системы, защищённые от захвата",
              "            if(NoComeKlingToStar(cur_star)) continue;",
              "            if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "",
              "            //Пропускаем системы с доминаторскими боссами",
              "            if(Blazer())",
              "            {",
              "                if(ShipStar(Blazer()) == cur_star) continue;",
              "            }",
              "            if(Keller())",
              "            {",
              "                if(ShipStar(Keller()) == cur_star) continue;",
              "            }",
              "            if(Terron())",
              "            {",
              "                if(ShipStar(Terron()) == cur_star) continue;",
              "            }",
              "",
              "            int second_cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(second_cur_range > second_max_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = coalition_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = first_cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = coalition_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = first_cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пока что пусто",
              "        tarr1[next_num, 0] = 0;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 2], first_max_range / 2, first_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackDominators.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.PirateClan.AttackDominators.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.PirateClan.AttackDominators.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 19, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у пиратского клана",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id",
              "        //Первая система для сбора всех кораблей перед атакой",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Атакуемая система",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Случайно выбираем планету для начала сбора сил атакующих",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr2[available_options, 0]); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(tarr2[available_options, 0], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 15))];",
              "        //Также выбираем случайную незаселённую планету из целевой системы для подстановки в интро квеста",
              "        ArrayClear(t_array);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 8]); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(tarr1[next_num, 8], i);",
              "            if(PlanetOwner(cur_planet) != 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        tarr1[next_num, 10] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 17))];",
              "        //Запоминаем отношение пиратов к игроку перед началом операции (в ходе операции будет временно выставлено отличное)",
              "        tarr1[next_num, 11] = RelationToRanger(PlanetPirateClan(), Player());",
              "        tarr1[next_num, 12] = 0; //Маркер о том, была ли уже выставлена зона ожидания всех участвующих кораблей перед одновременным прыжком в атакуемую систему",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "",
              "        //Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "        str split_line;",
              "        if(GetGameOptions('FontDialog') == '0') split_line = '</color>-----------------------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '1') split_line = '</color>------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '2') split_line = '</color>-------------------------------------------';",
              "        else split_line = '</color>--------------------------------------';",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 10]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5],",
              "                                     '<SplitLine'+'>', split_line);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста PirateClan.AttackDominators.1",
              "function PirateClanAttackDominatorsQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "",
              "        //Также все они должны иметь пиратского овнера во избежание лишней рандомной агрессии",
              "        ShipOwner(ship, PirateClan);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "",
              "        //Вручную корректируем характер наёмника для данной миссии",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "    }",
              "",
              "    //Минимальное стартовое число пиратов, которые присоединяться к наёмникам в атаке",
              "    int add_pirates = CT(ActiveQuestsHQArray[q_num, 3] + '.MinPiratesCount');",
              "    //Общая сила доминаторов в системе в зависимости от их подтипов",
              "    unknown t_array = newarray(8);",
              "    if(!CurrentMods('Evolution\\EvoArmada'))",
              "    {",
              "        str text = CT(ActiveQuestsHQArray[q_num, 3] + '.PiratesPerDomiks');",
              "        for(i = 1; i <= 7; i = i + 1) t_array[i] = 0 + GetParFromString(text, ',', i, 1);",
              "    }",
              "    else",
              "    {",
              "        text = CT(ActiveQuestsHQArray[q_num, 3] + '.PiratesPerDomiksEvoArmada');",
              "        for(i = 1; i <= 7; i = i + 1) t_array[i] = 0 + GetParFromString(text, ',', i, 1);",
              "    }",
              "",
              "    //Считаем доминаторские корабли в атакуемой системе (с учётом силы по подтипам)",
              "    int domiks_count = 0;",
              "    for(i = 0; i < StarShips(target_star); i = i + 1)",
              "    {",
              "        ship = StarShips(target_star, i);",
              "        if(ShipTypeN(ship) != t_Kling) continue;",
              "        if(ShipCustomFaction(ship) != '') continue;",
              "",
              "        domiks_count = domiks_count + t_array[ShipSubType(ship)];",
              "",
              "        //ShipJoin(QuestAttackers, ship);",
              "        //SetData(33, 0, ship);",
              "    }",
              "",
              "    //Число доминаторов для доспавна, если в системе их не хватило до минимального \"оборонного\" количества",
              "    domiks_count = domiks_count - CT(ActiveQuestsHQArray[q_num, 3] + '.MinDomiksCount');",
              "",
              "    //Здесь считаем, сколько пиратов нам нужно добавить к стартовой группировке атакующих",
              "    //(если доминаторов в атакуемой системе оказалось сверх меры)",
              "    if(domiks_count > 0)",
              "    {",
              "        add_pirates = add_pirates + domiks_count;",
              "    }",
              "",
              "    //Доспавниваем доминаторов поровну на все обитаемые планеты атакуемой системы",
              "    //(только если их в атакуемой системе оказалось меньше, чем нужно)",
              "    while(domiks_count < 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(target_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(domiks_count < 0)",
              "            {",
              "                ship = BuyDomikExtremal(cur_planet);",
              "                ShipImproveItems(ship, RndObject(0, 2, cur_planet));",
              "                //ShipJoin(QuestAttackers, ship);",
              "                //SetData(33, 0, ship);",
              "",
              "                domiks_count = domiks_count + t_array[ShipSubType(ship)];",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Начинаем перебор всех пиратов в стартовой системе и заносим их в скрипт (чтоб не слиняли)",
              "    str id_line = '';",
              "    for(i = 0; i < StarShips(begin_star); i = i + 1)",
              "    {",
              "        ship = StarShips(begin_star, i);",
              "        if(ShipInScript(ship, 0)) continue;",
              "        if(ShipInGameEvent(ship)) continue;",
              "        if(ShipOwner(ship) != PirateClan) continue;",
              "",
              "        ShipJoin(QuestSupport, ship);",
              "        //Собираем всех нападающих пиратов на одной планете",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "        if(id_line == '') id_line = Id(ship);",
              "        else id_line = id_line + ',' + Id(ship);",
              "        add_pirates = add_pirates - 1;",
              "",
              "        //Если уже собрали достаточно пиратов для атакующей волны",
              "        if(!add_pirates) break;",
              "    }",
              "    //Доспавниваем пиратов поровну на все обитаемые планеты стартовой системы",
              "    //(только если не хватило уже имеющихся в стартовой системе)",
              "    if(add_pirates > 20) add_pirates = 20;",
              "    while(add_pirates)",
              "    {",
              "        for(i = 0; i < StarPlanets(begin_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(begin_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(add_pirates)",
              "            {",
              "                ship = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(ship);",
              "                ShipImproveItems(ship, RndObject(0, 3, cur_planet));",
              "",
              "                ShipJoin(QuestSupport, ship);",
              "                //Собираем всех нападающих пиратов на одной планете",
              "                SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "                if(id_line == '') id_line = Id(ship);",
              "                else id_line = id_line + ',' + Id(ship);",
              "                add_pirates = add_pirates - 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Вешаем всем пиратам инфошку агра на игрока в случае, если тот захочет на них напасть",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestSupport, i);",
              "        ShipAddCustomShipInfo(ship, 'ShuMercsHQ_QuestShipsOutOnPlayerAttack', 'NoShow', 0, 0, 0, id_line, 'Ether2,,,0,,,' + CT(ActiveQuestsHQArray[q_num, 3] + '.SupportOnPlayerAttack'));",
              "    }",
              "",
              "    //На время квеста обеспечиваем игроку полную лояльность (ХА-ХА-ХА! \"ЛОЯЛЬНОСТЬ\" ЭТИХ МУДАКОВ, АГА, КАК ЖЕ!) со стороны пиратов",
              "    RelationToRanger(PlanetPirateClan(), Player(), 100);",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в целевую систему",
              "    //(также временно блочит смену подданства в целевой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'PirateClan');",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[q_num, 1]), '<BeginPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '<BeginStar'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также планеты",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "    ActiveQuestsHQArray[q_num, 10] = Id(ActiveQuestsHQArray[q_num, 10]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  434,
          "#":  451,
          "Total.Lines":  345,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.AttackDominators.1",
              "function CoalitionAttackDominatorsQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackDominators.1.FirstStarMaxRange');",
              "    int second_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackDominators.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int first_cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(first_cur_range > first_max_range) continue;",
              "",
              "        //Выбираем коалиционную систему, после чего начинаем перебор ближайших доминаторских систем",
              "        dword coalition_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 1) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "            //Пропускаем системы, защищённые от захвата",
              "            if(NoComeKlingToStar(cur_star)) continue;",
              "            if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "",
              "            //Пропускаем системы с доминаторскими боссами",
              "            if(Blazer())",
              "            {",
              "                if(ShipStar(Blazer()) == cur_star) continue;",
              "            }",
              "            if(Keller())",
              "            {",
              "                if(ShipStar(Keller()) == cur_star) continue;",
              "            }",
              "            if(Terron())",
              "            {",
              "                if(ShipStar(Terron()) == cur_star) continue;",
              "            }",
              "",
              "            int second_cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(second_cur_range > second_max_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = coalition_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = first_cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = coalition_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = first_cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пока что пусто",
              "        tarr1[next_num, 0] = 0;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 2], first_max_range / 2, first_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackDominators.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackDominators.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Coalition.AttackDominators.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 15, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у Совета Коалиции",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Первая система для сбора всех кораблей перед атакой",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Атакуемая система",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для старта сбора сил атакующих",
              "        //Случайно выбираем планету для начала сбора сил атакующих",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 67))];",
              "        tarr1[next_num, 10] = 0; //Пустой слот",
              "        tarr1[next_num, 11] = 0; //Маркер о том, была ли уже выставлена зона ожидания всех участвующих кораблей перед одновременным прыжком в атакуемую систему",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "",
              "        //Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "        str split_line;",
              "        if(GetGameOptions('FontDialog') == '0') split_line = '</color>-----------------------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '1') split_line = '</color>------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '2') split_line = '</color>-------------------------------------------';",
              "        else split_line = '</color>--------------------------------------';",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5],",
              "                                     '<SplitLine'+'>', split_line);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Coalition.AttackDominators.1",
              "function CoalitionAttackDominatorsQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "",
              "        //Заранее задаём им коалиционного овнера, чтобы не возникало проблем с военными",
              "        ShipOwner(ship, ShipPilotRace(Player()));",
              "",
              "        //А также повышаем к ним отношение всех коалиционных планет в стартовой системе",
              "        for(int j = 0; j < StarPlanets(begin_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(begin_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 100);",
              "        }",
              "    }",
              "    //И к игроку тоже заодно",
              "    for(j = 0; j < StarPlanets(begin_star); j = j + 1)",
              "    {",
              "        cur_planet = StarPlanets(begin_star, j);",
              "        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "        if(RelationToRanger(cur_planet, Player()) < 60) RelationToRanger(cur_planet, Player(), 60);",
              "    }",
              "",
              "    //Минимальное стартовое число военных, которые присоединяться к наёмникам в атаке",
              "    int add_warriors = CT(ActiveQuestsHQArray[q_num, 3] + '.MinWarriorsCount');",
              "    //Общая сила доминаторов в системе в зависимости от их подтипов",
              "    unknown t_array = newarray(8);",
              "    if(!CurrentMods('Evolution\\EvoArmada'))",
              "    {",
              "        int warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 0, 1);",
              "        str text = CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerDomiks');",
              "        for(i = 1; i <= 7; i = i + 1) t_array[i] = int(GetParFromString(text, ',', i, 1));",
              "    }",
              "    else",
              "    {",
              "        warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 1, 1);",
              "        text = CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerDomiksEvoArmada');",
              "        for(i = 1; i <= 7; i = i + 1) t_array[i] = int(GetParFromString(text, ',', i, 1));",
              "    }",
              "",
              "    //Считаем доминаторские корабли в атакуемой системе (с учётом силы по подтипам)",
              "    int domiks_count = 0;",
              "    for(i = 0; i < StarShips(target_star); i = i + 1)",
              "    {",
              "        ship = StarShips(target_star, i);",
              "        if(ShipTypeN(ship) != t_Kling) continue;",
              "        if(ShipCustomFaction(ship) != '') continue;",
              "",
              "        domiks_count = domiks_count + t_array[ShipSubType(ship)];",
              "",
              "        //ShipJoin(QuestAttackers, ship);",
              "        //SetData(33, 0, ship);",
              "    }",
              "",
              "    //Число доминаторов для доспавна, если в системе их не хватило до минимального \"оборонного\" количества",
              "    domiks_count = domiks_count - CT(ActiveQuestsHQArray[q_num, 3] + '.MinDomiksCount');",
              "",
              "    //Здесь считаем, сколько военных нам нужно добавить к стартовой группировке атакующих",
              "    //(если доминаторов в атакуемой системе оказалось сверх меры)",
              "    if(domiks_count > 0)",
              "    {",
              "        add_warriors = add_warriors + domiks_count;",
              "    }",
              "",
              "    //Доспавниваем доминаторов поровну на все обитаемые планеты атакуемой системы",
              "    //(только если их в атакуемой системе оказалось меньше, чем нужно)",
              "    while(domiks_count < 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(target_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(domiks_count < 0)",
              "            {",
              "                ship = BuyDomikExtremal(cur_planet);",
              "                //Выдаёт шмот с коалиционным овнером",
              "                //for(j = 1; j <= 2; j = j + 1) ShipRefit(ship);",
              "                ShipImproveItems(ship, RndObject(0, 2, cur_planet));",
              "                //ShipJoin(QuestAttackers, ship);",
              "                //SetData(33, 0, ship);",
              "",
              "                domiks_count = domiks_count + t_array[ShipSubType(ship)];",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Начинаем перебор всех военных в стартовой системе и заносим их в скрипт (чтоб не слиняли)",
              "    str id_line = '';",
              "    for(i = 0; i < StarShips(begin_star); i = i + 1)",
              "    {",
              "        dword warrior = StarShips(begin_star, i);",
              "        if(ShipInScript(warrior, 0)) continue;",
              "        if(ShipInGameEvent(warrior)) continue;",
              "        if(ShipOwner(warrior) != PirateClan) continue;",
              "",
              "        ShipJoin(QuestSupport, warrior);",
              "        //Собираем всех нападающих военных на одной планете",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "        if(id_line == '') id_line = Id(warrior);",
              "        else id_line = id_line + ',' + Id(warrior);",
              "        //Случайно угодившие в волну атаки флагманы будут считаться \"дороже\"",
              "        if(!ShipSubType(warrior)) add_warriors = add_warriors - 1;",
              "        else add_warriors = add_warriors - warriors_per_cap;",
              "",
              "        //Если уже собрали достаточно военных для атакующей волны",
              "        if(add_warriors <= 0) break;",
              "    }",
              "",
              "    //Доспавниваем военных поровну на все обитаемые планеты стартовой системы",
              "    //(только если не хватило уже имеющихся в стартовой системе)",
              "    if(add_warriors > 15) add_warriors = 15;",
              "    while(add_warriors > 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(begin_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(begin_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(add_warriors > 0)",
              "            {",
              "                warrior = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(warrior);",
              "                ShipImproveItems(warrior, RndObject(0, 3, cur_planet));",
              "",
              "                ShipJoin(QuestSupport, warrior);",
              "                //Собираем всех нападающих военных на одной планете",
              "                SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "                if(id_line == '') id_line = Id(warrior);",
              "                else id_line = id_line + ',' + Id(warrior);",
              "                add_warriors = add_warriors - 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Вешаем всем военным инфошку агра на игрока в случае, если тот захочет на них напасть",
              "    text = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.SupportOnPlayerAttack'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '255,240,100');",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        warrior = GroupShip(QuestSupport, i);",
              "        ShipAddCustomShipInfo(warrior, 'ShuMercsHQ_QuestShipsOutOnPlayerAttack', 'NoShow', 0, 0, 0, id_line, 'Ether2,,,0,,,' + text);",
              "    }",
              "",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в целевую систему",
              "    //(также временно блочит смену подданства в целевой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'Coalition');",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[q_num, 1]), '<BeginPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '<BeginStar'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также планету сбора",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  418,
          "#":  452,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQQuestsDialog.AnythingElse');",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  453,
          "#":  454,
          "Total.Lines":  221,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данные цели в группе QuestMercs (для захвата доминаторских/фракционных систем с полностью ручным выбором всех целей):",
              "//Data0 == тип поведения корабля (различается для каждого типа цели)",
              "//Чем выше приказ, тем он приоритетнее (прыжок, приоритетнее посадки, а посадка приоритетнее следования за кораблём)",
              "//Таким образом, можно заранее выстраивать последовательный набор линии поведения (\"маршрутных точек\")",
              "//Data1 == целевая система для полёта цели (может меняться по ходу квеста), если 0, то цель никуда не летит",
              "//Data2 == целевая планета/станция для посадки цели (может меняться по ходу квеста), если 0, то цель никуда не садится",
              "//Data3 == целевой корабль (может меняться по ходу квеста), что именно делать с кораблём, определяет поведение (Data0)",
              "//      == маркер -3 - означает возврат наёмников обратно в штаб",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "    exit;",
              "}",
              "dword HQStar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока он находится в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    exit;",
              "}",
              "",
              "//Позволяем стейту захватить полный контроль над кораблём (маркер поведения 33)",
              "if(GetData(0) == 33)",
              "{",
              "    OrderLock(CurShip, 0);",
              "",
              "    //Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "    dword target = ShipGetBad(CurShip);",
              "    if(target)",
              "    {",
              "        if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "        {",
              "            int no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "        {",
              "            no_tar = NoTargetToShip(target);",
              "            //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "            NoTargetToShip(target, 4);",
              "            TruceBetweenShips(CurShip, target);",
              "            NoTargetToShip(target, no_tar);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "        else if(ShipInScript(target, 0))",
              "        {",
              "            if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "            {",
              "                no_tar = NoTargetToShip(target);",
              "                //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "                NoTargetToShip(target, 4);",
              "                TruceBetweenShips(CurShip, target);",
              "                NoTargetToShip(target, no_tar);",
              "                //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "                target = ShipIsPartner(CurShip);",
              "                if(target) ShipSetPartner(CurShip, 0, 0);",
              "            }",
              "        }",
              "    }",
              "    exit;",
              "}",
              "else OrderLock(CurShip, 1);",
              "",
              "//Вынуждаем корабль лететь на ремонт при слишком больших повреждениях",
              "if(GetData(0) == 40)",
              "{",
              "    //Только если система уже освобождена (хз как и почему, но эта проверка даёт сбои)",
              "    if(!StarOwner(cur_star) || StarOwner(cur_star) == 2)",
              "    {",
              "        if(!ShipInNormalSpace(CurShip))",
              "        {",
              "            if(HullDamage(CurShip) < 8)",
              "            {",
              "                OrderTakeOff(CurShip);",
              "                exit;",
              "            }",
              "            else",
              "            {",
              "                ShipFreeFlight(CurShip);",
              "                OrderNone(CurShip);",
              "                exit;",
              "            }",
              "        }",
              "        else if(HullDamage(CurShip) > 77)",
              "        {",
              "            OrderLanding(CurShip, NearCivilPlanet(CurShip));",
              "            exit;",
              "        }",
              "    }",
              "}",
              "",
              "//Если тернкод не отключил обсчёт собственной логики корабля (-1)",
              "if(~int(GetData(0)))",
              "{",
              "    //Тип поведения, при котором терн сам выставляет приказ кораблям,",
              "    //стейт как бы временно \"пропускает ход\"",
              "    if(GetData(0) >= 100)",
              "    {",
              "        SetData(GetData(0) - 100, 0);",
              "        exit;",
              "    }",
              "    else",
              "    {",
              "        ShipFreeFlight(CurShip);",
              "        OrderNone(CurShip);",
              "    }",
              "}",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        TruceBetweenShips(CurShip, target);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(ShipInScript(target, 0))",
              "    {",
              "        if(ShipInCurScript(target) && ShipGroup(target) == QuestSupport)",
              "        {",
              "            TruceBetweenShips(CurShip, target);",
              "            //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "            target = ShipIsPartner(CurShip);",
              "            if(target) ShipSetPartner(CurShip, 0, 0);",
              "        }",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(int i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Ищем в системе любых доминаторов, выбираем ближайшего, и атакуем",
              "int closest_dist = 500000;",
              "target = 0;",
              "for(i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "{",
              "    dword ship = StarShips(cur_star, i);",
              "",
              "    if(IsPlayer(ship)) continue; //Но не игрока",
              "    if(ShipInHyperSpace(ship, 1)) continue;",
              "    //Сразу пропускаем все не доминаторские и не кастомно-фракционные корабли",
              "    int stand = ShipStanding(ship);",
              "    if(stand != 0 && stand != 9) continue;",
              "",
              "    int dist = Dist(CurShip, ship);",
              "    if(dist < closest_dist)",
              "    {",
              "        //Приоритеты:",
              "        //1 - любые доминаторы",
              "        //2 - любые доминаторы на планетах",
              "        if(ShipInNormalSpace(ship))",
              "        {",
              "            closest_dist = dist;",
              "            target = ship;",
              "        }",
              "        else if(!target)",
              "        {",
              "            if(!ShipInNormalSpace(ship))",
              "            {",
              "                closest_dist = dist;",
              "                target = ship;",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Если нашли подходящую цель, то выставляем её в качестве основного врага для наёмника",
              "if(target)",
              "{",
              "    ShipSetBad(CurShip, target);",
              "    if(ShipInNormalSpace(target)) OrderFollowShip(CurShip, target, 1);",
              "    else OrderFollowShip(CurShip, target, 0);",
              "}",
              "",
              "//Если корабль находится в режиме ожидания и пока не получает прямых приказов (крутимся на месте)",
              "if(!ShipOrder(CurShip))",
              "{",
              "    //Не менять структуру проверки! Нужно именно так, чтобы корабли не пропускали её после выхода из гипера",
              "    if(!GetShipPlanet(CurShip) && !GetShipRuins(CurShip))",
              "    {",
              "        //float angle = 0.01 * RndObject(0, 200, CurShip);",
              "        //int radius = RndObject(500, 1100, CurShip);",
              "        //float flt = round(sin(angle * pi) * radius);",
              "        //int coord_x = flt;",
              "        //flt = round(cos(angle * pi) * radius);",
              "        //int coord_y = flt;",
              "        //OrderMove(CurShip, coord_x, coord_y);",
              "        OrderMove(CurShip, AroundStar);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  457,
          "#":  459,
          "Total.Lines":  132,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Coalition.DefendFromDominators.1 в процессе",
              "//Если систему захватили, либо время обороны подошло к концу",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "if(StarOwner(cur_star) || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    check = 0;",
              "    //Успех",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar' + '>', Name(cur_star), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed'), '<TargetStar' + '>', Name(cur_star), '255,240,100');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 13] - 1), 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar' + '>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess'), '<TargetStar' + '>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к обороняемой системе",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо же успешно добрались до системы - начинаем атаку доминаторов",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_star))",
              "        {",
              "            //Спавним и направляем в систему первую волну доминаторов",
              "            tdwd2 = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 13] - 1);",
              "            cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 14]);",
              "            cnt = RndObject(GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 0, 0), GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 1, 0), cur_star);",
              "            for(i = 1; i <= cnt; i = i + 1)",
              "            {",
              "                tdwd1 = BuyDomikExtremal(cur_planet);",
              "                //Впизду, блять! Разбираться ещё потом с левой малокской оборудкой у домиков",
              "                //for(j = 1; j <= 3; j = j + 1) ShipRefit(tdwd1);",
              "                ShipImproveItems(tdwd1, RndObject(0, 3, tdwd1));",
              "",
              "                MakeShipEnterStar(tdwd1, cur_star, tdwd2, 1);",
              "            }",
              "",
              "            //Заводим таймер до попытки спавна следующей волны",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 10] = CurTurn() + RndObject(2, 3, cur_star);",
              "",
              "            //Переходим на второй этап квеста",
              "            NoComeKlingToStar(cur_star, 0);",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, в обороняемую систему периодически прилетают новые волны доминаторов",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 10] <= CurTurn())",
              "        {",
              "            //Если число доминаторов в обороняемой системе ещё не упёрлось в лимит",
              "            if(GroupCount(QuestAttackers) < ActiveQuestsHQArray[ActiveQuestHQ, 9])",
              "            {",
              "                //Спавним и направляем в систему очередную волну доминаторов",
              "                tdwd2 = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 13] - 1);",
              "                cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 14]);",
              "                cnt = RndObject(GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 0, 0), GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 1, 0), cur_star);",
              "                for(i = 1; i <= cnt; i = i + 1)",
              "                {",
              "                    tdwd1 = BuyDomikExtremal(cur_planet);",
              "                    //Впизду, блять! Разбираться ещё потом с левой малокской оборудкой у домиков",
              "                    //for(j = 1; j <= 3; j = j + 1) ShipRefit(tdwd1);",
              "                    ShipImproveItems(tdwd1, RndObject(0, 3, tdwd1));",
              "",
              "                    MakeShipEnterStar(tdwd1, cur_star, tdwd2, 1);",
              "                }",
              "",
              "                //Заводим таймер до попытки спавна следующей волны",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 10] = CurTurn() + RndObject(GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 11], ',', 0, 0), GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 11], ',', 1, 0), cur_star);",
              "            }",
              "            else",
              "            {",
              "                //Просто слегка обновляем таймер",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 10] = CurTurn() + RndObject(2, 3, cur_star);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  458,
          "#":  460,
          "Total.Lines":  201,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Coalition.DefendFromPirateClan.1 в процессе",
              "//Если систему захватили, либо время обороны подошло к концу",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "if(StarOwner(cur_star) || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие пираты возвращаются в Тортугац и отмирают по дороге",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "        if(ShipInHyperSpace(tdwd1))",
              "        {",
              "            OrderNone(tdwd1);",
              "            ShipDestroy(tdwd1, 1);",
              "        }",
              "        else",
              "        {",
              "            SetData(66, 0);",
              "            SetData(71, 1); //Id Тортугаца",
              "        }",
              "    }",
              "",
              "    check = 0;",
              "    //Успех",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            //И снова нейтралы",
              "            ShipStanding(tdwd1, 5);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar'+'>', Name(cur_star), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            //И снова нейтралы",
              "            ShipStanding(tdwd1, 5);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar' + '>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к обороняемой системе",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо же успешно добрались до системы - начинаем атаку пиратов",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_star))",
              "        {",
              "            //Делаем всех наёмников однозначно враждебными целями для пиратов (и мешающими захватить систему)",
              "            cur_planet = PlanetPirateClan();",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                //Выставляем наёмникам про-коалиционный Standing (с рождения он у них нейтральный)",
              "                ShipStanding(tdwd1, 2);",
              "",
              "                RelationToRanger(cur_planet, tdwd1, 0);",
              "                //Типа как будто каждый из них уже завалил по три клановых пирата",
              "                ShipKillFactionInCurSystem(tdwd1, 2, 3);",
              "            }",
              "",
              "            //Спавним и направляем в систему первую волну пиратов",
              "            cnt = RndObject(GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 0, 0), GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 1, 0), cur_star);",
              "            for(i = 1; i <= cnt; i = i + 1)",
              "            {",
              "                tdwd1 = BuyWarrior(cur_planet, 300);",
              "                for(j = 1; j <= 3; j = j + 1) ShipRefit(tdwd1);",
              "                ShipImproveItems(tdwd1, RndObject(0, 3, tdwd1));",
              "                if(i == 1) ActiveQuestsHQArray[ActiveQuestHQ, 13] = Id(tdwd1);",
              "",
              "                //Прыгают из Тортугаца",
              "                MakeShipEnterStar(tdwd1, cur_star, GalaxyStar(70), 1);",
              "",
              "                ShipJoin(QuestAttackers, tdwd1);",
              "                SetData(34, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "            }",
              "",
              "            //Заводим таймер до попытки спавна следующей волны",
              "            //и таймер до вывода сообщение от вылетевших из гипера пиратов",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 10] = CurTurn() + RndObject(2, 3, cur_star);",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 12] = CurTurn() + 1;",
              "",
              "            //Переходим на второй этап квеста",
              "            NoComeKlingToStar(cur_star, 0);",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, в обороняемую систему периодически прилетают новые волны пиратов",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 10] <= CurTurn())",
              "        {",
              "            //Если число пиратов в обороняемой системе ещё не упёрлось в лимит",
              "            if(GroupCount(QuestAttackers) < ActiveQuestsHQArray[ActiveQuestHQ, 9])",
              "            {",
              "                //Спавним и направляем в систему очередную волну пиратов",
              "                cur_planet = PlanetPirateClan();",
              "                cnt = RndObject(GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 0, 0), GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 8], ',', 1, 0), cur_star);",
              "                for(i = 1; i <= cnt; i = i + 1)",
              "                {",
              "                    tdwd1 = BuyWarrior(cur_planet, 300);",
              "                    for(j = 1; j <= 3; j = j + 1) ShipRefit(tdwd1);",
              "                    ShipImproveItems(tdwd1, RndObject(0, 3, tdwd1));",
              "                    if(i == 1) ActiveQuestsHQArray[ActiveQuestHQ, 13] = Id(tdwd1);",
              "",
              "                    //Прыгают из Тортугаца",
              "                    MakeShipEnterStar(tdwd1, cur_star, GalaxyStar(70), 1);",
              "",
              "                    ShipJoin(QuestAttackers, tdwd1);",
              "                    SetData(34, 0, tdwd1);",
              "                    SetData(Id(cur_star), 1, tdwd1);",
              "                }",
              "",
              "                //Заводим таймер до попытки спавна следующей волны",
              "                //и таймер до вывода сообщение от вылетевших из гипера пиратов",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 10] = CurTurn() + RndObject(GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 11], ',', 0, 0), GetParFromString(ActiveQuestsHQArray[ActiveQuestHQ, 11], ',', 1, 0), cur_star);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 12] = CurTurn() + 1;",
              "            }",
              "            else",
              "            {",
              "                //Просто слегка обновляем таймер",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 10] = CurTurn() + RndObject(2, 3, cur_star);",
              "            }",
              "        }",
              "",
              "        //Выводим случайное уведомление от выходящих из гипера пиратов",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 12])",
              "        {",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 12] <= CurTurn())",
              "            {",
              "                cur_ship = IdToShip(ActiveQuestsHQArray[ActiveQuestHQ, 13]);",
              "                if(cur_ship)",
              "                {",
              "                    if(FilmFlags(0))",
              "                    {",
              "                        if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                        {",
              "                            tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersOnEnter' + RndObject(1, 5, cur_ship)), '<Pirate'+'>', Name(cur_ship));",
              "                            CustomEther('Ether2', 10, '', tstr1, cur_ship);",
              "                        }",
              "                    }",
              "                }",
              "",
              "                //После вывода уведомления сбрасываем таймер",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 12] = 0;",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  459,
          "#":  461,
          "Total.Lines":  230,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.DefendFromDominators.1",
              "function CoalitionDefendFromDominatorsQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int target_star_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromDominators.1.TargetStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "        //Пропускаем системы, защищённые от захвата",
              "        if(NoComeKlingToStar(cur_star)) continue;",
              "        if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > target_star_max_range) continue;",
              "",
              "        //Выбираем систему, после чего начинаем перебор всех планет и считаем военных (должно быть не больше определённого количества)",
              "        int check = CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromDominators.1.MaxWarriorsCount');",
              "        for(int j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(cur_star, j);",
              "",
              "            for(int k = 0; k < PlanetWarriors(cur_planet); k = k + 1)",
              "            {",
              "                dword warrior = PlanetWarriors(cur_planet, k);",
              "                if(ShipStar(warrior) != cur_star) continue; //Пропускаем военных, отсутствующих в системе",
              "",
              "                check = check - 1;",
              "                if(!check) break;",
              "            }",
              "",
              "            if(!check) break;",
              "        }",
              "        if(!check) continue;",
              "",
              "        //Под конец ищем любую ближайшую доминаторскую систему, подходящую для имитации атаки",
              "        dword dom_star = 0;",
              "        for(j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            dom_star = StarNearbyStars(cur_star, j);",
              "",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 1) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            if(MS_Terron_ToStar) //Если Террона отправили преобразовывать звезду, то терроноидов не трогаем, а то улетят в Гралгар",
              "            {",
              "                if(StarSeries(cur_star) == 2) continue;",
              "            }",
              "",
              "            break;",
              "        }",
              "        if(!dom_star) continue;",
              "",
              "        //Первый элемент заполняем как обычно",
              "        if(!available_options)",
              "        {",
              "            tarr2[0, 0] = cur_star;",
              "            tarr2[0, 1] = cur_range;",
              "            tarr2[0, 2] = dom_star;",
              "",
              "            available_options = 1;",
              "        }",
              "        //А последующие сперва объявляем",
              "        else",
              "        {",
              "            ArrayAdd(tarr2, dummy);",
              "            tarr2[available_options] = newarray(3);",
              "            tarr2[available_options, 0] = cur_star;",
              "            tarr2[available_options, 1] = cur_range;",
              "            tarr2[available_options, 2] = dom_star;",
              "",
              "            available_options = available_options + 1;",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать подходящую систему",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пока что пусто",
              "        tarr1[next_num, 0] = 0;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 1], target_star_max_range / 2, target_star_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromDominators.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromDominators.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Coalition.DefendFromDominators.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 15, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у Совета Коалиции",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id",
              "        //Коалиционная система для обороны",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Число доминаторов в каждой прибывающей волне вида: \"2,3\"",
              "        tarr1[next_num, 8] = '' + trim(CT(tarr1[next_num, 3] + '.DomiksPerWave'));",
              "        //Предельное число доминаторов в системе, по достижении числа которых, волны временно прекращают \"наплыв\"",
              "        tarr1[next_num, 9] = 0 + CT(tarr1[next_num, 3] + '.MaxDomiksAtOnce');",
              "        //Пассивный таймер до шанса появления новой группы доминаторов",
              "        tarr1[next_num, 10] = 0;",
              "        //Разброс задержки до шанса появления следующей волны вида: \"4,8\"",
              "        tarr1[next_num, 11] = '' + trim(CT(tarr1[next_num, 3] + '.WavesFrequency'));",
              "        //Также выбираем случайную планету из целевой системы для подстановки в интро квеста",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 12] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 42))];",
              "        //Доминаторская система, из которой якобы будет происходить атака",
              "        tarr1[next_num, 13] = tarr2[available_options, 2];",
              "        //Планета, на которой будет происходить доспавн нападающих доминаторов",
              "        ArrayClear(t_array);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 13]); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(tarr1[next_num, 13], i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых (пускай и захваченных доминаторами)",
              "        tarr1[next_num, 14] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 52))];",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetSector'+'>', Name(StarToCon(tarr1[next_num, 7])),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 12]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Coalition.DefendFromDominators.1",
              "function CoalitionDefendFromDominatorsQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword target_star = ActiveQuestsHQArray[q_num, 7];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь в обороняемую систему",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(197, 0, ship);",
              "        SetData(Id(target_star), 1, ship);",
              "",
              "        //Заранее задаём им коалиционного овнера, чтобы не возникало проблем с военными",
              "        ShipOwner(ship, ShipPilotRace(Player()));",
              "",
              "        //А также повышаем к ним отношение всех коалиционных планет в обороняемой системе",
              "        for(int j = 0; j < StarPlanets(target_star); j = j + 1)",
              "        {",
              "            cur_planet = StarPlanets(target_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 100);",
              "        }",
              "    }",
              "    //И к игроку тоже заодно",
              "    for(j = 0; j < StarPlanets(target_star); j = j + 1)",
              "    {",
              "        cur_planet = StarPlanets(target_star, j);",
              "        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "        if(RelationToRanger(cur_planet, Player()) < 60) RelationToRanger(cur_planet, Player(), 60);",
              "    }",
              "",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в обороняемую систему",
              "    //(также временно блочит смену подданства в обороняемой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'Coalition');",
              "",
              "    //Временно (прям очень) блочим обороняемую систему от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    //И систему домиков тоже заодно, а то будет тупо выглядеть, если захватят",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 13], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(target_star);",
              "    ActiveQuestsHQArray[q_num, 13] = Id(ActiveQuestsHQArray[q_num, 13]);",
              "    //А также обе подобранных планеты",
              "    ActiveQuestsHQArray[q_num, 12] = Id(ActiveQuestsHQArray[q_num, 12]);",
              "    ActiveQuestsHQArray[q_num, 14] = Id(ActiveQuestsHQArray[q_num, 14]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  460,
          "#":  462,
          "Total.Lines":  186,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.DefendFromPirateClan.1",
              "function CoalitionDefendFromPirateClanQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int target_star_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromPirateClan.1.TargetStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "        //Пропускаем системы, защищённые от захвата",
              "        if(NoComeKlingToStar(cur_star)) continue;",
              "        if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > target_star_max_range) continue;",
              "",
              "        //Выбираем систему, после чего начинаем перебор всех планет и считаем военных (должно быть не больше определённого количества)",
              "        int check = CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromPirateClan.1.MaxWarriorsCount');",
              "        for(int j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(cur_star, j);",
              "",
              "            for(int k = 0; k < PlanetWarriors(cur_planet); k = k + 1)",
              "            {",
              "                dword warrior = PlanetWarriors(cur_planet, k);",
              "                if(ShipStar(warrior) != cur_star) continue; //Пропускаем военных, отсутствующих в системе",
              "",
              "                check = check - 1;",
              "                if(!check) break;",
              "            }",
              "",
              "            if(!check) break;",
              "        }",
              "        if(!check) continue;",
              "",
              "        //Первый элемент заполняем как обычно",
              "        if(!available_options)",
              "        {",
              "            tarr2[0, 0] = cur_star;",
              "            tarr2[0, 1] = cur_range;",
              "",
              "            available_options = 1;",
              "        }",
              "        //А последующие сперва объявляем",
              "        else",
              "        {",
              "            ArrayAdd(tarr2, dummy);",
              "            tarr2[available_options] = newarray(3);",
              "            tarr2[available_options, 0] = cur_star;",
              "            tarr2[available_options, 1] = cur_range;",
              "",
              "            available_options = available_options + 1;",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать подходящую систему",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Пока что пусто",
              "        tarr1[next_num, 0] = 0;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 1], target_star_max_range / 2, target_star_max_range, 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromPirateClan.1.MinTime'), 0 + CT('Quest.ShuMercs.QuestsHQ.Coalition.DefendFromPirateClan.1.MaxTime'));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Coalition.DefendFromPirateClan.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 15, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у Совета Коалиции",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id",
              "        //Коалиционная система для обороны",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Разброс числа пиратов в каждой прибывающей волне вида: \"8,12\"",
              "        tarr1[next_num, 8] = '' + trim(CT(tarr1[next_num, 3] + '.PiratesPerWave'));",
              "        //Предельное число пиратов в системе, по достижении числа которых, волны временно прекращают \"наплыв\"",
              "        tarr1[next_num, 9] = 0 + CT(tarr1[next_num, 3] + '.MaxPiratesAtOnce');",
              "        //Пассивный таймер до шанса появления новой группы пиратов",
              "        tarr1[next_num, 10] = 0;",
              "        //Разброс задержки до шанса появления следующей волны вида: \"4,8\"",
              "        tarr1[next_num, 11] = '' + trim(CT(tarr1[next_num, 3] + '.WavesFrequency'));",
              "        //Таймер до вывода случайного сообщения о вылете пиратов из гипера",
              "        tarr1[next_num, 12] = 0;",
              "        //Id пирата, от лица которого будет выведено сообщение при влёте в систему новой группы",
              "        tarr1[next_num, 13] = 0;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetSector' + '>', Name(StarToCon(tarr1[next_num, 7])),",
              "                                     '<TargetStar' + '>', Name(tarr1[next_num, 7]),",
              "                                     '<EndDate' + '>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost' + '>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Coalition.DefendFromPirateClan.1",
              "function CoalitionDefendFromPirateClanQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword target_star = ActiveQuestsHQArray[q_num, 7];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь в обороняемую систему",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        //SetData(34, 0, ship);",
              "        SetData(198, 0, ship);",
              "        SetData(Id(target_star), 1, ship);",
              "",
              "        //Заранее задаём им коалиционного овнера, чтобы не возникало проблем с военными",
              "        ShipOwner(ship, ShipPilotRace(Player()));",
              "",
              "        //А также повышаем к ним отношение всех коалиционных планет в обороняемой системе",
              "        for(int j = 0; j < StarPlanets(target_star); j = j + 1)",
              "        {",
              "            cur_planet = StarPlanets(target_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 100);",
              "        }",
              "    }",
              "    //И к игроку тоже заодно",
              "    for(j = 0; j < StarPlanets(target_star); j = j + 1)",
              "    {",
              "        cur_planet = StarPlanets(target_star, j);",
              "        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "        if(RelationToRanger(cur_planet, Player()) < 60) RelationToRanger(cur_planet, Player(), 60);",
              "    }",
              "",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в обороняемую систему",
              "    //(также временно блочит смену подданства в обороняемой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'Coalition');",
              "",
              "    //Временно (прям очень) блочим обороняемую систему от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id обороняемой системы",
              "    ActiveQuestsHQArray[q_num, 7] = Id(target_star);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  465,
          "#":  467,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  466,
          "#":  468,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  467,
          "#":  469,
          "Total.Lines":  6,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания PirateClan.DefendFromDominators.1",
              "function PirateClanDefendFromDominatorsQuestOneConditions()",
              "{}",
              "//Подготовительный этап квеста PirateClan.DefendFromDominators.1",
              "function PirateClanDefendFromDominatorsQuestOnePrepare(int q_num)",
              "{}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  468,
          "#":  470,
          "Total.Lines":  6,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания PirateClan.DefendFromCoalition.1",
              "function PirateClanDefendFromCoalitionQuestOneConditions()",
              "{}",
              "//Подготовительный этап квеста PirateClan.DefendFromCoalition.1",
              "function PirateClanDefendFromCoalitionQuestOnePrepare(int q_num)",
              "{}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  473,
          "#":  475,
          "Total.Lines":  318,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание PirateClan.Destroy.1 в процессе",
              "//Если уничтожили цель задания, либо она сумела добраться до целевой планеты (либо уничтожили штаб игрока)",
              "cur_ship = GroupToShip(QuestTarget);",
              "cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "if(!GroupToShip(QuestTarget) || GroupIn(QuestTarget, cur_planet) || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие военные отправляются умирац",
              "    for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "        SetData(66, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1); //Умножаем Id на два для указателя посадки на планету, а не станцию",
              "        SetData(0, 3, tdwd1);",
              "    }",
              "",
              "    check = 0;",
              "    //Успех",
              "    if(!cur_ship)",
              "    {",
              "        for(i = GalaxyEvents() - 1; i >= 0; i = i - 1)",
              "        {",
              "            if(GalaxyEventDate(i) < CurTurn()) break;",
              "            tstr1 = GalaxyEventType(i);",
              "            if(tstr1 != 'PlayerKillsShip' && tstr1 != 'PlayerAssistKillsShip') continue;",
              "            if(GalaxyEventsTextData(i, 0) == ActiveQuestsHQArray[ActiveQuestHQ, 0]) check = 1;",
              "        }",
              "",
              "        //Если игрок каким-то образом за один ход \"ваншотнул\" дипломата, лол",
              "        if(check)",
              "        {",
              "            tdwd3 = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "            //Понижаем отношение к наёмникам и игроку на всех планетах в целевой системе",
              "            for(i = StarPlanets(tdwd3) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = StarPlanets(tdwd3, i);",
              "                if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                RelationToRanger(tdwd1, Player(), 0);",
              "",
              "                //Все уцелевшие наёмники возвращаются в штаб",
              "                for(j = 0; j < GroupCount(QuestMercs); j = j + 1)",
              "                {",
              "                    tdwd2 = GroupShip(QuestMercs, j);",
              "                    RelationToRanger(tdwd1, tdwd2, 0);",
              "                }",
              "            }",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные отправляются умирац",
              "        for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestAttackers, i);",
              "",
              "            SetData(66, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1); //Умножаем Id на два для указателя посадки на планету, а не станцию",
              "            SetData(0, 3, tdwd1);",
              "        }",
              "",
              "        //Дипломат-цель просто убивается (т.к. он и так уже сидит на планете)",
              "        ShipDestroy(cur_ship, 1);",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed'), '<TargetPlanet' + '>', Name(cur_planet), '255,240,100');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    //Первый этап квеста, цель раздаёт макрозаймы в стартовой системе",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        while(1)",
              "        {",
              "            cur_star = ShipStar(cur_ship);",
              "            //Если игрок или его наёмники приблизились к дипломату",
              "            if(ShipInNormalSpace(cur_ship))",
              "            {",
              "                if(ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark') == -1)",
              "                {",
              "                    tdwd3 = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "                    //Понижаем отношение к наёмникам и игроку всех планет в целевой системе",
              "                    for(i = 0; i < StarPlanets(tdwd3); i = i + 1)",
              "                    {",
              "                        tdwd1 = StarPlanets(tdwd3, i);",
              "                        if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                        RelationToRanger(tdwd1, Player(), 0);",
              "",
              "                        //Все уцелевшие наёмники возвращаются в штаб",
              "                        for(j = 0; j < GroupCount(QuestMercs); j = j + 1)",
              "                        {",
              "                            tdwd2 = GroupShip(QuestMercs, j);",
              "                            RelationToRanger(tdwd1, tdwd2, 0);",
              "                        }",
              "                    }",
              "",
              "                    SetData(20, 0, cur_ship); //Выводим цель на форсаж",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship); //Отправляем её к целевой планете",
              "                    ShipSpecialBonuses(cur_ship, bonSpeed, -(ShipSpeed(cur_ship) / 3));",
              "",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess3'), '<TargetStar' + '>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '<TargetPlanet' + '>', Name(cur_planet), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "                    break;",
              "                }",
              "            }",
              "",
              "            tdwd2 = GetShipPlanet(cur_ship);",
              "            if(tdwd2)",
              "            {",
              "                //Если таймер на данной планете ещё не заводился, то делаем это",
              "                if(!ActiveQuestsHQArray[ActiveQuestHQ, 2])",
              "                {",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + 3;",
              "                    break;",
              "                }",
              "                else",
              "                {",
              "                    //Если пришло время взлетать с посещённой планеты",
              "                    if(ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn())",
              "                    {",
              "                        //Выкладываем из трюма одну кучу слитков золота (типа предоставил заём)",
              "                        if(ActiveQuestsHQArray[ActiveQuestHQ, 11])",
              "                        {",
              "                            ArrayClear(tarr1);",
              "                            for(i = ShipItems(cur_ship) - 1; i >= 1; i = i - 1)",
              "                            {",
              "                                cur_item = ShipItems(cur_ship, i);",
              "                                if(ItemType(cur_item) != t_UselessItem) continue;",
              "                                if(EquipmentImageName(cur_item) != 'ShuMercsHQ_GoldIngots') continue;",
              "                                ArrayAdd(tarr1, cur_item);",
              "                            }",
              "                            cur_item = tarr1[RndObject(1, ArrayDim(tarr1) - 1, cur_ship)];",
              "                            FreeItem(GetItemFromShip(cur_ship, cur_item));",
              "                            ActiveQuestsHQArray[ActiveQuestHQ, 11] = ActiveQuestsHQArray[ActiveQuestHQ, 11] - 1;",
              "                        }",
              "",
              "                        //Ищем следующую обитаемую планету в списке планет системы",
              "                        check = 0;",
              "                        for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "                        {",
              "                            tdwd1 = StarPlanets(cur_star, i);",
              "                            if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                            if(check)",
              "                            {",
              "                                check = 2;",
              "                                break;",
              "                            }",
              "                            else if(tdwd1 == tdwd2)",
              "                            {",
              "                                check = 1;",
              "                            }",
              "                        }",
              "",
              "                        //Если нашли, то отправляем дипломата на неё",
              "                        if(check == 2)",
              "                        {",
              "                            SetData(Id(tdwd1) * 2, 2, cur_ship);",
              "                            ActiveQuestsHQArray[ActiveQuestHQ, 2] = 0;",
              "",
              "                            //Отдаём прикрывающим военным ручной приказ на взлёт, чтобы не тормозили",
              "                            for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "                            {",
              "                                tdwd1 = GroupShip(QuestAttackers, i);",
              "                                SetData(100, 0, tdwd1);",
              "                                OrderTakeOff(tdwd1);",
              "                            }",
              "                        }",
              "                        //Если нет, то цель начинает спокойно возвращаться на целевую планету",
              "                        else",
              "                        {",
              "                            SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "",
              "                            //Отдаём прикрывающим военным ручной приказ на взлёт, чтобы не тормозили",
              "                            for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "                            {",
              "                                tdwd1 = GroupShip(QuestAttackers, i);",
              "                                SetData(100, 0, tdwd1);",
              "                                OrderTakeOff(tdwd1);",
              "                            }",
              "",
              "                            //Обновляем уведомление задания",
              "                            tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                            tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess2'), '<TargetStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '<TargetPlanet'+'>', Name(cur_planet), '255,240,100');",
              "                            CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "                            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "",
              "            break;",
              "        }",
              "    }",
              "    //Второй этап квеста, цель закончила раздавать займы и теперь возвращается на свою планету",
              "    //(данный этап скорее всего окажется пропущен)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Если игрок или его наёмники приблизились к дипломату",
              "        cur_star = ShipStar(cur_ship);",
              "        if(ShipInNormalSpace(cur_ship))",
              "        {",
              "            if(ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_QuestTargetAttackMark') == -1)",
              "            {",
              "                tdwd3 = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "                //Понижаем отношение к наёмникам и игроку на всех планетах в целевой системе",
              "                for(i = StarPlanets(tdwd3) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    tdwd1 = StarPlanets(tdwd3, i);",
              "                    if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                    RelationToRanger(tdwd1, Player(), 0);",
              "",
              "                    //Все уцелевшие наёмники возвращаются в штаб",
              "                    for(j = 0; j < GroupCount(QuestMercs); j = j + 1)",
              "                    {",
              "                        tdwd2 = GroupShip(QuestMercs, j);",
              "                        RelationToRanger(tdwd1, tdwd2, 0);",
              "                    }",
              "                }",
              "",
              "                SetData(20, 0, cur_ship); //Выводим цель на форсаж",
              "                ShipSpecialBonuses(cur_ship, bonSpeed, -(ShipSpeed(cur_ship) / 3));",
              "",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess3'), '<TargetStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '<TargetPlanet'+'>', Name(cur_planet), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста, цель спугнул игрок или наёмники, она сваливает на свою планету на форсаже",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "        //Также постоянно чиним дипломату двигатель (если игрок его ещё не сломал совсем), а то не сможет юзать форсаж",
              "        if(!GroupIn(QuestTarget, cur_star))",
              "        {",
              "            cur_item = ShipEqInSlot(cur_ship, t_Engine);",
              "            if(ItemDurability(cur_item))",
              "            {",
              "                if(ItemDurability(cur_item) < 57) ItemDurability(cur_item, 57);",
              "            }",
              "        }",
              "        //В целевой системе форсаж дипломату отрубаем",
              "        else",
              "        {",
              "            SetData(0, 0, cur_ship);",
              "            ShipSpecialBonuses(cur_ship, bonSpeed, 0);",
              "        }",
              "",
              "        //Последовательно дропаем золото в зависимости от степени повреждённости корабля",
              "        check = PortionInDiapason(HullDamage(cur_ship), 15, 80, 0, ActiveQuestsHQArray[ActiveQuestHQ, 11]);",
              "        while(check)",
              "        {",
              "            ArrayClear(tarr1);",
              "            for(i = ShipItems(cur_ship) - 1; i >= 1; i = i - 1)",
              "            {",
              "                cur_item = ShipItems(cur_ship, i);",
              "                if(ItemType(cur_item) != t_UselessItem) continue;",
              "                if(EquipmentImageName(cur_item) != 'ShuMercsHQ_GoldIngots') continue;",
              "                ArrayAdd(tarr1, cur_item);",
              "            }",
              "            cur_item = tarr1[RndObject(1, ArrayDim(tarr1) - 1, cur_ship)];",
              "            NoDropItem(cur_item, 0);",
              "            DropItem(cur_ship, cur_item);",
              "            check = check - 1;",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 11] = ActiveQuestsHQArray[ActiveQuestHQ, 11] - 1;",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  474,
          "#":  476,
          "Total.Lines":  740,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание PirateClan.Protect.1 в процессе",
              "//Если уничтожена цель задания, диверсионная группа (раньше времени), либо уничтожен штаб игрока, задание провалено",
              "cur_ship = GroupToShip(QuestTarget);",
              "if(!cur_ship || !GroupCount(QuestSupport) || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие наёмники возвращаются в штаб",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestMercs, i);",
              "        SetData(0, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(0, 2, tdwd1);",
              "        SetData(-3, 3, tdwd1);",
              "        ChangeState('ReturningStrikeState', tdwd1);",
              "    }",
              "    //Вся уцелевшая диверсионная группа отправляется умирац",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestSupport, i);",
              "        SetData(66, 0, tdwd1);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, tdwd1);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "    }",
              "",
              "    //Если цель выжила, то вскоре самоуничтожиться",
              "    if(cur_ship)",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedBySupport');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        SetData(66, 0, cur_ship);",
              "        if(ShipStar(cur_ship) != GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1))",
              "        {",
              "            SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "        }",
              "        else SetData(0, 1, cur_ship);",
              "        SetData(Id(NearCivilPlanet(cur_ship)) * 2, 2, cur_ship);",
              "",
              "        if(~ShipFindCustomShipInfoByType(cur_ship, 'ShuMercsHQ_GuardedShip')) ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_GuardedShip');",
              "    }",
              "    else",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTarget');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "    //Если встречающий линкор доминион к этому моменту уже был заспавнен",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 13])",
              "    {",
              "        //Уничтожаем его",
              "        tdwd1 = IdToShip(ActiveQuestsHQArray[ActiveQuestHQ, 13]);",
              "        if(tdwd1)",
              "        {",
              "            if(ShipInNormalSpace(tdwd1))",
              "            {",
              "                SetData(166, 0, tdwd1);",
              "                //Отправляем его в Тортугац и убиваем по дороге",
              "                OrderTeleport(tdwd1, GalaxyStar(70), CoordX(tdwd1), CoordY(tdwd1));",
              "            }",
              "            else ShipDestroy(tdwd1, 1);",
              "        }",
              "    }",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 1] = 0;",
              "    //Завершаем квест и получаем пиздюлей",
              "    EndQuestHQ(ActiveQuestHQ, 0);",
              "}",
              "else",
              "{",
              "    //Первый этап квеста, наёмники собираются в системе с диверсантами",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если на данном этапе все наёмники по каким-то причинам уничтожены, то квест провален",
              "        if(!GroupCount(QuestMercs))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTime');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "            SetData(66, 0, cur_ship);",
              "            if(ShipStar(cur_ship) != GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1))",
              "            {",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "            }",
              "            else SetData(0, 1, cur_ship);",
              "            SetData(Id(NearCivilPlanet(cur_ship)) * 2, 2, cur_ship);",
              "",
              "            //Вся уцелевшая диверсионная группа отправляется умирац",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "                SetData(66, 0, tdwd1);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, tdwd1);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "            }",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 0;",
              "            //Завершаем квест и получаем пиздюлей",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "        else",
              "        {",
              "            //Если наёмники в полном составе добрались до планеты встречи",
              "            cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "            if(GroupIn(QuestMercs, cur_planet))",
              "            {",
              "                //Отправляем наёмников игрока и диверсионную группу на перехват цели",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ShipRefuel(tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "                    //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за диверсантами",
              "                    SetData(100, 0, tdwd1);",
              "                    OrderTakeOff(tdwd1);",
              "                }",
              "",
              "                ArrayClear(tarr1);",
              "                tdwd1 = GroupToShip(QuestSupport);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, tdwd1);",
              "                tarr1[0] = ShipSpeed(tdwd1);",
              "                //Компаньоны лидера диверсантов также следуют за ним",
              "                for(i = 1; i < GroupCount(QuestSupport); i = i + 1)",
              "                {",
              "                    tdwd2 = GroupShip(QuestSupport, i);",
              "                    SetData(Id(tdwd1), 3, tdwd2);",
              "",
              "                    //Отдаём приказ ведомым диверсантам напрямую, чтобы не тормозили взлетать за лидером",
              "                    SetData(100, 0, tdwd2);",
              "                    OrderTakeOff(tdwd2);",
              "",
              "                    ArrayAdd(tarr1, ShipSpeed(tdwd2));",
              "                }",
              "                //Приблизительно уравниваем скорости всех диверсантов,",
              "                //иначе последующий запуск торпед может пройти хреново",
              "                tint1 = min(tarr1[0], tarr1[1], tarr1[2]);",
              "                for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                {",
              "                    tdwd2 = GroupShip(QuestSupport, i);",
              "                    ShipSpecialBonuses(tdwd2, bonSpeed, tint1 - ShipSpeed(tdwd2));",
              "                }",
              "",
              "                //Переходим на второй этап квеста, группа захвата направляется к линкору",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess2'), '<TargetShip'+'>', Name(cur_ship), '<TargetStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1)), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                tdwd1 = GroupToShip(QuestSupport);",
              "                if(FilmFlags(0))",
              "                {",
              "                    if(Dist(Player(), tdwd1) <= ShipRadarRange(Player()))",
              "                    {",
              "                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnMeeting'), '<Mercenary'+'>', Name(tdwd1), '255,240,100');",
              "                        CustomEther('Ether2', 0, '', tstr1, cur_planet);",
              "                    }",
              "                }",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "            }",
              "        }",
              "    }",
              "    //Второй этап квеста, группа захвата направляется в систему с линкором",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Если головной корабль диверсантов по дороге уничтожили",
              "        tdwd1 = GroupToShip(QuestMercs);",
              "        if(!GetData(3, tdwd1))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "            }",
              "",
              "            tdwd1 = GroupToShip(QuestSupport);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, tdwd1);",
              "            //Компаньоны нового лидера диверсантов также следуют за ним",
              "            for(i = 1; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd2 = GroupShip(QuestSupport, i);",
              "                SetData(Id(tdwd1), 3, tdwd2);",
              "            }",
              "        }",
              "",
              "        //Диверсионная группа прибыла в систему с линкором",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "        if(GroupIn(QuestSupport, cur_star) && (GroupIn(QuestMercs, cur_star) || !GroupCount(QuestMercs)))",
              "        {",
              "            //Все диверсанты должны обязательно залететь в целевую систему перед атакой линкора",
              "            //(иначе растянутся и их перебьют поодиночке)",
              "            if(GroupIn(QuestSupport, AroundQuestSupport))",
              "            {",
              "                //Отправляем диверсантов в налёт на линкор",
              "                //for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                //{",
              "                //    tdwd1 = GroupShip(QuestSupport, i);",
              "                //    SetData(0, 0, tdwd1);",
              "                //    SetData(Id(cur_ship), 3, tdwd1);",
              "                //}",
              "",
              "                tdwd1 = GroupToShip(QuestSupport);",
              "                SetData(Id(cur_ship), 3, tdwd1);",
              "                ShipAddCustomShipInfo(tdwd1, 'ShuMercsHQ_MoveRangeController', 'NoShow', Id(cur_ship), 0, 0, '850');",
              "                //Чтобы диверсанты не приблизились к линкору слишком сильно",
              "                for(i = 1; i < GroupCount(QuestSupport); i = i + 1)",
              "                {",
              "                    tdwd2 = GroupShip(QuestSupport, i);",
              "                    ShipAddCustomShipInfo(tdwd2, 'ShuMercsHQ_MoveRangeController', 'NoShow', Id(cur_ship), 0, 0, '850');",
              "                }",
              "",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess3'), '<TargetShip'+'>', Name(cur_ship), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста, диверсанты направляются к линкору и запускают торпеды",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Если головной корабль диверсантов по дороге уничтожили",
              "        tdwd1 = GroupToShip(QuestMercs);",
              "        if(!GetData(3, tdwd1))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "            }",
              "",
              "            tdwd1 = GroupToShip(QuestSupport);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(Id(cur_ship), 1, tdwd1);",
              "",
              "            //Компаньоны нового лидера диверсантов также следуют за ним",
              "            for(i = 1; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd2 = GroupShip(QuestSupport, i);",
              "                SetData(Id(tdwd1), 3, tdwd2);",
              "            }",
              "        }",
              "",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "",
              "        tdwd1 = GroupToShip(QuestSupport);",
              "        //Если диверсанты уже достаточно сблизились с линкором",
              "        if(ShipFindCustomShipInfoByType(tdwd1, 'ShuMercsHQ_MoveRangeController') == -1)",
              "        {",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "                ShipDeleteCustomShipInfo(tdwd1, 'ShuMercsHQ_MoveRangeController');",
              "            }",
              "",
              "            //Выводим уведомление о запуске ЭМП торпед",
              "            tdwd1 = GroupToShip(QuestSupport);",
              "",
              "            if(FilmFlags(0))",
              "            {",
              "                if(Dist(Player(), tdwd1) <= ShipRadarRange(Player()))",
              "                {",
              "                    tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnEMPLaunch'), '<Mercenary'+'>', Name(tdwd1), '255,240,100');",
              "                    CustomEther('Ether2', 0, '', tstr1, tdwd1);",
              "                }",
              "            }",
              "",
              "            //Выдаём инфошкам торпед маркеры на запуск",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                ShipCustomShipInfoData(tdwd1, 'ShuMercsHQ_EMPTorpedo', 1, Id(cur_ship));",
              "                ShipSpecialBonuses(tdwd1, bonSpeed, 0);",
              "",
              "                //В этом месте диверсанты временно задержаться до подтверждения попадания торпед в линкор",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(0, 3, tdwd1);",
              "            }",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 4;",
              "        }",
              "    }",
              "    //Четвёртый этап квеста, торпеды были запущены, ждём, когда попадут",
              "    //(если все торпеды сбиты по пути, то провал квеста)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 4)",
              "    {",
              "        //Если головной корабль диверсантов по дороге уничтожили",
              "        tdwd1 = GroupToShip(QuestMercs);",
              "        if(!GetData(3, tdwd1))",
              "        {",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "            }",
              "        }",
              "",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "        //Проверяем текущий статус запущенных в линкор торпед",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 12] <= 1)",
              "        {",
              "            if(!ActiveQuestsHQArray[ActiveQuestHQ, 12])",
              "            {",
              "                for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestSupport, i);",
              "                    //Если хоть один диверсант ещё не запустил свою торпеду",
              "                    if(~ShipFindCustomShipInfoByType(tdwd1, 'ShuMercsHQ_EMPTorpedo')) break;",
              "",
              "                    //Ставим маркер, что все торпеды были запущены",
              "                    if(i == GroupCount(QuestSupport) - 1) ActiveQuestsHQArray[ActiveQuestHQ, 12] = 1;",
              "                }",
              "            }",
              "",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 12] == 1)",
              "            {",
              "                if(StarMissiles(cur_star))",
              "                {",
              "                    for(i = 0; i < StarMissiles(cur_star); i = i + 1)",
              "                    {",
              "                        tdwd1 = StarMissiles(cur_star, i);",
              "                        //Или если хоть одна торпеда ещё не достигла линкора",
              "                        if(BonusNumInCfg(EqSpecial(tdwd1)) == 'ShuMercsHQ_EMPTorpedo') break;",
              "                        //Ставим маркер, что хотя бы одна торпеда попала в цель, либо что все они были уничтожены по дороге",
              "                        if(i == StarMissiles(cur_star) - 1)",
              "                        {",
              "                            if(GetData(0, cur_ship) == 13) ActiveQuestsHQArray[ActiveQuestHQ, 12] = 2;",
              "                            else ActiveQuestsHQArray[ActiveQuestHQ, 12] = 3;",
              "                        }",
              "                    }",
              "                }",
              "                else",
              "                {",
              "                    //Проверяем, был ли линкор поражён ЭМП торпедой",
              "                    if(GetData(0, cur_ship) == 13) ActiveQuestsHQArray[ActiveQuestHQ, 12] = 2;",
              "                    else ActiveQuestsHQArray[ActiveQuestHQ, 12] = 3;",
              "                }",
              "            }",
              "        }",
              "        //Если хоть одна торпеда попала в линкор",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 12] == 2)",
              "        {",
              "            //Отдаём диверсантам команду идти на абордаж",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                //Также выставляем диверсантам приказ форсажа",
              "                SetData(20, 0, tdwd1);",
              "                //И маркер посадки на линкор",
              "                SetData(Id(cur_ship) * 2 + 1, 2, tdwd1);",
              "                SetData(0, 3, tdwd1);",
              "            }",
              "            //Отдаём наёмникам игрока команду прикрывать линкор",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                SetData(Id(cur_ship), 3, tdwd1);",
              "                //Переводим наёмников в стейт, в котором они НЕ будут лупить по дредноуту",
              "                ChangeState('QuestMercsState', tdwd1);",
              "            }",
              "",
              "            //Вешаем на дредноут маркерную инфошку, чтобы диверсанты также не лупили по нему из пушек",
              "            ShipAddCustomShipInfo(cur_ship, 'ShuMercsHQ_GuardedShip', 'NoShow');",
              "",
              "            //Переходим на следующий этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 5;",
              "        }",
              "        //Если на данном этапе все торпеды окажутся сбиты, то проваливаем квест",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 12] == 3)",
              "        {",
              "            //Выводим уведомление о потере всех ЭМП торпед",
              "            tdwd1 = GroupToShip(QuestSupport);",
              "",
              "            if(FilmFlags(0))",
              "            {",
              "                if(Dist(Player(), tdwd1) <= ShipRadarRange(Player()))",
              "                {",
              "                    tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnEMPLost'), '<Mercenary'+'>', Name(tdwd1), '<BeginPlanet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '255,240,100');",
              "                    CustomEther('Ether2', 0, '', tstr1, tdwd1);",
              "                }",
              "            }",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByMissiles');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "            SetData(66, 0, cur_ship);",
              "            SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "            SetData(Id(NearCivilPlanet(cur_ship)) * 2, 2, cur_ship);",
              "",
              "            //Все уцелевшие наёмники возвращаются в штаб",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(-3, 3, tdwd1);",
              "                ChangeState('ReturningStrikeState', tdwd1);",
              "            }",
              "",
              "            //Вся уцелевшая диверсионная группа отправляется умирац",
              "            for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "                SetData(66, 0, tdwd1);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, tdwd1);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "            }",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 0;",
              "            //Завершаем квест и получаем пиздюлей",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "    }",
              "    //Пятый этап квеста, диверсанты направляются и совершают посадку на линкор",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 5)",
              "    {",
              "        //Если головной корабль диверсантов по дороге уничтожили (не нужно, т.к. они все уже получили приказ посадки)",
              "        // tdwd1 = GroupToShip(QuestMercs);",
              "        // if(!GetData(3, tdwd1))",
              "        // {",
              "            // for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            // {",
              "                // tdwd1 = GroupShip(QuestMercs, i);",
              "                // SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "            // }",
              "        // }",
              "",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 2])",
              "        {",
              "            //Захват линкора был успешно завершён",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn())",
              "            {",
              "                //Выводим уведомление об успешном захвате линкора",
              "                tdwd1 = GroupToShip(QuestSupport);",
              "",
              "                if(FilmFlags(0))",
              "                {",
              "                    if(Dist(Player(), tdwd1) <= ShipRadarRange(Player()))",
              "                    {",
              "                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnEndCapture'), '<Mercenary' + '>', Name(cur_ship), '<BeginStar' + '>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '255,240,100');",
              "                        CustomEther('Ether2', 0, '', tstr1, cur_ship);",
              "                    }",
              "                }",
              "",
              "                //Меняем \"лояльность\" линкора и отправляем его в пиратскую систему",
              "                //Также не забываем частично восстановить его уничтоженное ЭМП оборудование",
              "                for(i = ShipItems(cur_ship) - 1; i >= 1; i = i - 1)",
              "                {",
              "                    cur_item = ShipItems(cur_ship, i);",
              "                    if(!ItemIsInUse(cur_item)) continue;",
              "                    tint2 = ItemType(cur_item);",
              "                    //Наверняка ломаем ему пушки, а то ещё шмалять начнёт",
              "                    if(tint2 >= t_Weapon1 && tint2 <= t_CustomWeapon)",
              "                    {",
              "                        ItemDurability(cur_item, 0);",
              "                        continue;",
              "                    }",
              "                    //Частично восстанавливаем линкор",
              "                    if(tint2 != t_Engine && tint2 != t_FuelTanks && tint2 != t_Radar) continue;",
              "",
              "                    if(ItemDurability(cur_item) < 53) ItemDurability(cur_item, RndObject(35, 53, cur_ship));",
              "                }",
              "",
              "                ShipPilotRace(cur_ship, Fei);",
              "                ShipFace(cur_ship, ShipFace(GroupToShip(QuestSupport)));",
              "                ShipOwner(cur_ship, PirateClan);",
              "                ShipCustomFaction(cur_ship, 'SubFactionFixedStanding');",
              "                ShipStanding(cur_ship, 8);",
              "                NoTargetToShip(cur_ship, 1);",
              "                //Меняем родную планету линкора на Роджерию, чтобы исправить враждебное отношение к игроку",
              "                ShipStatistic(cur_ship, 10, PlanetPirateClan());",
              "                RelationToRanger(PlanetPirateClan(), Player(), 100);",
              "",
              "                //Спавним на планетах текущей системы ещё четырёх крутых военных, которые должны будут сразу же отправиться в погоню за линкором",
              "                tint1 = 4;",
              "                while(tint1)",
              "                {",
              "                    for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "                    {",
              "                        cur_planet = StarPlanets(cur_star, i);",
              "                        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "                        if(tint1)",
              "                        {",
              "                            tdwd1 = BuyWarrior(cur_planet, 300);",
              "                            for(j = 1; j <= 3; j = j + 1) ShipRefit(tdwd1);",
              "                            ShipImproveItems(tdwd1, RndObject(3, 6, tdwd1));",
              "",
              "                            tint1 = tint1 - 1;",
              "                        }",
              "                        else break;",
              "                    }",
              "                }",
              "",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess5'), '<TargetShip' + '>', Name(cur_ship), '<BeginStar' + '>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                //Отправляем линкор в пиратскую систему",
              "                SetData(0, 0, cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 6;",
              "            }",
              "        }",
              "        else",
              "        {",
              "            if(GroupIn(QuestSupport, cur_ship))",
              "            {",
              "                //Считаем, сколько кораблей диверсантов уцелело, и выставляем таймер захвата в зависимости от их числа",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + PortionInDiapason(GroupCount(QuestSupport), 1, 3, 9, 3);",
              "",
              "                //Выводим уведомление о начале захвата линкора",
              "                tdwd1 = GroupToShip(QuestSupport);",
              "",
              "                if(FilmFlags(0))",
              "                {",
              "                    if(Dist(Player(), tdwd1) <= ShipRadarRange(Player()))",
              "                    {",
              "                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportOnStartCapture'), '<Mercenary' + '>', Name(tdwd1), '255,240,100');",
              "                        CustomEther('Ether2', 0, '', tstr1, cur_ship);",
              "                    }",
              "                }",
              "",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess4'), '<TargetShip' + '>', Name(cur_ship), '<TargetStar' + '>', Name(cur_star), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                //Тем временем, уже наверняка агрим всех оставшихся военных системы на наёмников игрока",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                    for(j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "                    {",
              "                        cur_planet = StarPlanets(cur_star, j);",
              "                        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "                        RelationToRanger(cur_planet, tdwd1, 0);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Шестой этап квеста, линкор долетает до пиратской системы и совершает посадку на доминион",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 6)",
              "    {",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "        cur_ship = GroupToShip(QuestTarget);",
              "        //Линкор добрался до стартовой системы",
              "        if(GroupIn(QuestTarget, cur_star))",
              "        {",
              "            //Спавним доминион в Тортугаце (либо в Нифигаце), если ещё этого не сделали",
              "            if(!ActiveQuestsHQArray[ActiveQuestHQ, 13])",
              "            {",
              "                tdwd2 = GalaxyStar(70);",
              "                if(ShipStar(Player()) != tdwd2) tdwd2 = BuildRuins(tdwd2, t_CB);",
              "                else tdwd2 = BuildRuins(GalaxyStar(71), t_CB);",
              "                OrderLock(tdwd2, 1);",
              "                NoLanding(Player(), 1);",
              "                ShipJoin(QuestSupport, tdwd2);",
              "                SetData(112, 0, tdwd2);",
              "                OrderTeleport(tdwd2, cur_star, CoordX(tdwd2), CoordY(tdwd2));",
              "                ShipOrderData1(tdwd2, ShipOrderData1(cur_ship) + 2);",
              "",
              "                //Сюда будет записан маркер вывода сообщения от доминиона",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 12] = 0;",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 13] = Id(tdwd2);",
              "",
              "                //Отправляем линкор на посадку",
              "                SetData(Id(tdwd2) * 2 + 1, 2, cur_ship);",
              "            }",
              "            else",
              "            {",
              "                tdwd2 = IdToShip(ActiveQuestsHQArray[ActiveQuestHQ, 13]);",
              "                //Если доминион уничтожили, то переключаемся на альтернативный последний этап квеста",
              "                if(!tdwd2)",
              "                {",
              "                    //Обновляем уведомление задания",
              "                    cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess6'), '<TargetShip' + '>', Name(cur_ship), '<BeginPlanet' + '>', Name(cur_planet), '<BeginStar' + '>', Name(cur_star), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                    //Выводим уведомление о смене пункта назначения линкора",
              "                    if(ShipStar(Player()) == cur_star && ShipInNormalSpace(Player()))",
              "                    {",
              "                        if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                        {",
              "                            tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.SupportAfterDominionLost'), '<Mercenary' + '>', Name(cur_ship), '<BeginPlanet' + '>', Name(cur_planet), '255,240,100');",
              "                            CustomEther('Ether2', 0, '', tstr1, cur_ship);",
              "                        }",
              "                    }",
              "",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 1] = 7;",
              "                }",
              "                else",
              "                {",
              "                    if(!ActiveQuestsHQArray[ActiveQuestHQ, 12])",
              "                    {",
              "                        if(ShipInNormalSpace(tdwd2))",
              "                        {",
              "                            if(Dist(tdwd2, cur_ship) <= 750)",
              "                            {",
              "                                //Выводим уведомление о прибытии доминиона",
              "                                if(FilmFlags(0))",
              "                                {",
              "                                    if(Dist(Player(), cur_ship) <= ShipRadarRange(Player()))",
              "                                    {",
              "                                        tstr1 = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.DominionAfterArrival'), '<Dominion' + '>', Name(tdwd2), '<Mercenary' + '>', Name(cur_ship), '255,240,100');",
              "                                        CustomEther('Ether', 0, '', tstr1, tdwd2, cur_ship);",
              "                                    }",
              "                                }",
              "",
              "                                ActiveQuestsHQArray[ActiveQuestHQ, 12] = 1;",
              "                            }",
              "                        }",
              "                    }",
              "",
              "                    //Если линкор совершил успешную посадку на доминион, то победа",
              "                    if(GetShipRuins(cur_ship) == tdwd2)",
              "                    {",
              "                        //Все уцелевшие наёмники возвращаются в штаб",
              "                        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestMercs, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(0, 2, tdwd1);",
              "                            SetData(-3, 3, tdwd1);",
              "                            ChangeState('ReturningStrikeState', tdwd1);",
              "                        }",
              "",
              "                        //Обновляем уведомление задания",
              "                        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "                        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess1'), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "                        NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                        NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "                        //Отправляем доминион вместе с линкором на скорый покой",
              "                        SetData(166, 0, tdwd2);",
              "                        //Отправляем его в Тортугац и убиваем по дороге",
              "                        OrderTeleport(tdwd2, GalaxyStar(70), CoordX(tdwd2), CoordY(tdwd2));",
              "",
              "                        //И сам квест тоже",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 1] = 0;",
              "                        //Завершаем квест и получаем награду",
              "                        EndQuestHQ(ActiveQuestHQ, 1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Этот этап включается только в случае преждевременной гибели доминиона,",
              "    //который должен встречать захваченный линкор",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 7)",
              "    {",
              "        cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "        cur_ship = GroupToShip(QuestTarget);",
              "        //Если линкор добрался до стартовой планеты (откуда взлетали диверсанты), то победа",
              "        if(GroupIn(QuestTarget, cur_planet))",
              "        {",
              "            //Все уцелевшие наёмники возвращаются в штаб",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(-3, 3, tdwd1);",
              "                ChangeState('ReturningStrikeState', tdwd1);",
              "            }",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess2'), '<BeginPlanet' + '>', Name(cur_planet), '<Cost' + '>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "            CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Завершаем боевой путь линкора",
              "            ShipDestroy(cur_ship, 1);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "            //И сам квест тоже",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 0;",
              "            //Завершаем квест и получаем награду",
              "            EndQuestHQ(ActiveQuestHQ, 1);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  475,
          "#":  477,
          "Total.Lines":  321,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания PirateClan.Destroy.1",
              "function PirateClanDestroyQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Destroy.1.FirstStarMaxRange');",
              "    int second_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Destroy.1.SecondStarMaxRange');",
              "    //Минимальное необходимое число военных в системе",
              "    int min_warriors = GetParFromString(CT('Quest.ShuMercs.QuestsHQ.PirateClan.Destroy.1.TargetStarMinWarriorsCount'), ',', 0, 1);",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 4);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        //Проверяем, чтобы в стартовой системе имелось хотя бы не менее 2-х обитаемых планет",
              "        int planet_count = 0;",
              "        for(int j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(cur_star, j);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            planet_count = planet_count + 1;",
              "        }",
              "        if(planet_count < 2) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "",
              "        //Выбираем первую коалиционную систему, после чего начинаем перебор ближайших коалиционных систем",
              "        //Ищем систему, в которой находится не менее определённого числа военных",
              "        dword first_star = cur_star;",
              "        for(j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(first_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "            if(StarOwner(cur_star)) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            cur_range = round(sqrt(Dist2Star(cur_star, first_star)));",
              "            if(cur_range > second_range) continue;",
              "",
              "            //Считаем количество военных в системе",
              "            int warriors_count = 0;",
              "            unknown target_planets_arr = newarray(1);",
              "            for(int k = 0; k < StarPlanets(cur_star); k = k + 1)",
              "            {",
              "                cur_planet = StarPlanets(cur_star, k);",
              "                if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "                //Подходят только планеты с индустриальным типом экономики",
              "                if(PlanetEco(cur_planet) == 2) ArrayAdd(target_planets_arr, cur_planet);",
              "",
              "                for(int m = 0; m < PlanetWarriors(cur_planet); m = m + 1)",
              "                {",
              "                    dword warrior = PlanetWarriors(cur_planet, m);",
              "",
              "                    if(ShipInScript(warrior, 0)) continue;",
              "                    if(ShipInGameEvent(warrior)) continue;",
              "                    if(ShipStar(warrior) != cur_star) continue;",
              "                    //Крутим счётчик военных в системе",
              "                    warriors_count = warriors_count + 1;",
              "                }",
              "            }",
              "            if(warriors_count < min_warriors) continue;",
              "            if(ArrayDim(target_planets_arr) < 2) continue;",
              "            //Выбираем случайную планету с индустриальной экономикой",
              "            int target_planet = target_planets_arr[Rnd(1, ArrayDim(target_planets_arr) - 1, sqr(seed + 13))];",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = first_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = target_planet;",
              "                tarr2[0, 3] = warriors_count;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(4);",
              "                tarr2[available_options, 0] = first_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = target_planet;",
              "                tarr2[available_options, 3] = warriors_count;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Имя будущего дипломата",
              "        tarr1[next_num, 0] = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Destroy.1.TargetName' + PlanetRace(tarr2[available_options, 2]));",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер квеста",
              "        tarr1[next_num, 2] = 0;",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.PirateClan.Destroy.1';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть до апдейта уведомления, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 19, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 50;",
              "        //Система Коалиции (стартовая)",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Система Коалиции (целевая)",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для спавна дипломата в целевой системе (уже после спавна переносим его в стартовую)",
              "        tarr1[next_num, 9] = tarr2[available_options, 2];",
              "        //Начальное число военных в целевой системе (нужно, чтобы не пересчитывать их ещё раз перед доспавном новых)",
              "        tarr1[next_num, 10] = tarr2[available_options, 3];",
              "        //Текущее число кучек с золотыми слитками в трюме дипломата",
              "        tarr1[next_num, 11] = 5;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 12] = 0;",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<TargetName'+'>', tarr1[next_num, 0],",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "//Подготовительный этап квеста PirateClan.Destroy.1",
              "function PirateClanDestroyQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "",
              "        ShipOwner(ship, PirateClan);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "    }",
              "",
              "    //Выбираем первую планету, к которой направится конвой с дипломатом",
              "    //(первая обитаемая планета в системе)",
              "    for(i = 0; i < StarPlanets(begin_star); i = i + 1)",
              "    {",
              "        dword begin_planet = StarPlanets(begin_star, i);",
              "        if(PlanetOwner(begin_planet) == None) continue;",
              "        break;",
              "    }",
              "",
              "    //Считаем точку появления конвоя в начальной системе",
              "    //(должна быть недалеко от первой обитаемой планеты)",
              "    int angle = Angle(begin_star, begin_planet);",
              "    int radius = PlanetOrbitRadius(begin_planet) + Rnd(100, 200, sqr(GetQuestSeed() + 15));",
              "    int coordX = round(sin(angle) * radius);",
              "    int coordY = round(cos(angle) * radius);",
              "",
              "    //Спавним дипломата-цель",
              "    dword target_ship = BuyTransport(ActiveQuestsHQArray[q_num, 9], 2, 400);",
              "    for(int j = 1; j <= 5; j = j + 1) ShipRefit(target_ship);",
              "    //Накидываем дипломату хреновый движок",
              "    dword engine = ShipEqInSlot(target_ship, t_Engine);",
              "    if(ItemLevel(engine) > 2)",
              "    {",
              "        ItemCost(engine, round(PortionInDiapason(ItemLevel(engine), 3, 8, 0.875, 0.250) * ItemCost(engine)));",
              "        ItemLevel(engine, 2);",
              "    }",
              "    NoDropItem(engine, 1);",
              "    ShipImproveItems(target_ship, RndObject(8, 12, target_ship));",
              "    ShipSpecialBonuses(target_ship, bonSlotForsage, 10);",
              "    SetName(target_ship, ActiveQuestsHQArray[q_num, 0]);",
              "    //Добавляем в трюм дипломату стопки \"кредитных\" золотых слитков",
              "    for(j = 1; j <= 5; j = j + 1)",
              "    {",
              "        dword cur_item = CreateQuestItem('ShuMercsHQ_GoldIngots', ShipPilotRace(target_ship));",
              "        UselessItemText(cur_item, CT('UselessItems.ShuMercsHQ_GoldIngots.Description' + j));",
              "        ItemCost(cur_item, round(0.1 * RndObject(17, 25, target_ship) * ItemCost(cur_item)));",
              "        ItemSize(cur_item, min(ItemSize(cur_item), 100));",
              "        NoDropItem(cur_item, 1);",
              "        AddItemToShip(target_ship, cur_item);",
              "    }",
              "    //Устраняем возможный перевес",
              "    ShipImproveItems(target_ship, 0);",
              "",
              "    //Выдаём дипломату приказ посадки на первую обитаемую планету в системе",
              "    ShipJoin(QuestTarget, target_ship, 'QuestTargetMoveState', 0, 0, Id(begin_planet) * 2);",
              "    TransferShip(target_ship, begin_star);",
              "    ShipChangeStar(target_ship, begin_star);",
              "    ShipSetCoords(target_ship, coordX, coordY);",
              "    str id_line = Id(target_ship);",
              "    //MakeShipEnterStar(target_ship, begin_star, target_star, 1);",
              "",
              "    //Выдаём всем наёмникам игрока атаковать дипломата",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "",
              "        SetData(3, 0, ship);",
              "        SetData(Id(target_ship), 3, ship);",
              "    }",
              "",
              "    //Спавним конвой дипломата на целевой планете",
              "    int add_warriors = CT(ActiveQuestsHQArray[q_num, 3] + '.ConvoyWarriorsCount');",
              "    for(i = 1; i <= add_warriors; i = i + 1)",
              "    {",
              "        ship = BuyWarrior(ActiveQuestsHQArray[q_num, 9], 300);",
              "        for(j = 1; j <= 3; j = j + 1) ShipRefit(ship);",
              "        ShipImproveItems(ship, RndObject(4, 7, ship));",
              "",
              "        //Приказ следования за дипломатом",
              "        ShipJoin(QuestAttackers, ship, 'QuestAttackersProtectState', 0, 0, 0, Id(target_ship));",
              "        TransferShip(ship, begin_star);",
              "        ShipChangeStar(ship, begin_star);",
              "        ShipSetCoords(ship, coordX + RndObject(-50, 50, ship), coordY + RndObject(-50, 50, ship));",
              "        id_line = id_line + ',' + Id(ship);",
              "        //MakeShipEnterStar(ship, begin_star, target_star, 1);",
              "    }",
              "",
              "    //Определяем, сколько военных необходимо доспавнить в целевую систему",
              "    str text = CT(ActiveQuestsHQArray[q_num, 3] + '.TargetStarMinWarriorsCount');",
              "    add_warriors = 0 + GetParFromString(text, ',', 0, 1) + GetParFromString(text, ',', 1, 1);",
              "    add_warriors = add_warriors - ActiveQuestsHQArray[q_num, 10];",
              "    //Доспавниваем военных поровну на все обитаемые планеты целевой системы",
              "    //(только если их в целевой системе оказалось меньше, чем нужно)",
              "    while(add_warriors > 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(target_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(add_warriors > 0)",
              "            {",
              "                ship = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(ship);",
              "                ShipImproveItems(ship, RndObject(3, 5, ship));",
              "",
              "                add_warriors = add_warriors - 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Вешаем всем военным из конвоя (включая цель) специальную инфошку для маркировки и вывода уведомления при получении любым кораблём группы урона от игрока, либо от квестовых наёмников игрока",
              "    //Три запятые, чтобы тэги цвета не поломали парсинг на расшифровке",
              "    text = 'Ether2,,,0,,,' + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.TargetOnApproach'), '<Diplomat'+'>', Name(target_ship), '<TargetPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '255,240,100');",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_QuestTargetAttackMark', 'NoShow', 0, 0, 0, id_line, text);",
              "    for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestAttackers, i);",
              "        ShipAddCustomShipInfo(ship, 'ShuMercsHQ_QuestTargetAttackMark', 'NoShow', 0, 0, 0, id_line, text);",
              "    }",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetShip'+'>', Name(target_ship), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess1'), '<BeginStar'+'>', Name(begin_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также целевой планеты",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  476,
          "#":  478,
          "Total.Lines":  352,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания PirateClan.Protect.1",
              "function PirateClanProtectQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Protect.1.FirstStarMaxRange');",
              "    int second_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Protect.1.SecondStarMaxRange');",
              "    //Минимальное необходимое число военных в системе",
              "    int min_warriors = GetParFromString(CT('Quest.ShuMercs.QuestsHQ.PirateClan.Protect.1.MinWarriorsCount'), ',', 0, 1);",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        if(StarOwner(cur_star) != 2) continue;",
              "        //В стартовой (она же конечная) системе не должно быть доминиона",
              "        if(StarRuins(cur_star, 'CB')) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "",
              "        //Выбираем пиратскую систему, после чего начинаем перебор ближайших коалиционных систем",
              "        //Ищем систему, в которой находится не менее определённого числа военных",
              "        dword pirate_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(pirate_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "            if(StarOwner(cur_star)) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            cur_range = round(sqrt(Dist2Star(cur_star, pirate_star)));",
              "            if(cur_range > second_range) continue;",
              "",
              "            int warriors_count = 0;",
              "            for(int k = 0; k < StarPlanets(cur_star); k = k + 1)",
              "            {",
              "                dword cur_planet = StarPlanets(cur_star, k);",
              "",
              "                for(int m = 0; m < PlanetWarriors(cur_planet); m = m + 1)",
              "                {",
              "                    dword warrior = PlanetWarriors(cur_planet, m);",
              "",
              "                    if(ShipInScript(warrior, 0)) continue;",
              "                    if(ShipInGameEvent(warrior)) continue;",
              "                    if(ShipStar(warrior) != cur_star) continue;",
              "                    //Крутим счётчик военных в системе",
              "                    warriors_count = warriors_count + 1;",
              "                }",
              "            }",
              "            if(warriors_count < min_warriors) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = pirate_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = warriors_count;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = pirate_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = warriors_count;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Название будущего линкора",
              "        tarr1[next_num, 0] = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Protect.1.TargetName' + Rnd(1, 3, sqr(seed + 77)));",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер квеста",
              "        tarr1[next_num, 2] = 0;",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.PirateClan.Protect.1';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть до апдейта уведомления, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 23, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 50;",
              "        //Система пиратов (стартовая)",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Система Коалиции (целевая)",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для спавна диверсионной группы в пиратской системе",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            dword target_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(target_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, target_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 13))];",
              "        //Начальное число военных в системе (нужно, чтобы не пересчитывать их ещё раз перед доспавном новых)",
              "        tarr1[next_num, 10] = tarr2[available_options, 2];",
              "        //Коалиционная раса дредноута в виде строки для подстановки в интро квеста",
              "        if(!ShipPilotRace(tarr1[next_num, 0])) tarr1[next_num, 11] = CT(tarr1[next_num, 3] + '.Malocs');",
              "        else if(!ShipPilotRace(tarr1[next_num, 0]) == Peleng) tarr1[next_num, 11] = CT(tarr1[next_num, 3] + '.Pelengs');",
              "        else if(!ShipPilotRace(tarr1[next_num, 0]) == People) tarr1[next_num, 11] = CT(tarr1[next_num, 3] + '.Peoples');",
              "        else if(!ShipPilotRace(tarr1[next_num, 0]) == Fei) tarr1[next_num, 11] = CT(tarr1[next_num, 3] + '.Feis');",
              "        else tarr1[next_num, 11] = CT(tarr1[next_num, 3] + '.Gaals');",
              "        //Маркер состояния ЭМП торпед с момента их запуска и до момента их попадания в цель/уничтожения",
              "        tarr1[next_num, 12] = 0;",
              "        //Id доминиона, который прилетит в стартовую за линкором",
              "        tarr1[next_num, 13] = 0;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetShip'+'>', tarr1[next_num, 0],",
              "                                     '<TargetShipRace'+'>', '</color>' + tarr1[next_num, 11],",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "//Подготовительный этап квеста PirateClan.Protect.1",
              "function PirateClanProtectQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "",
              "        ShipOwner(ship, PirateClan);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "    }",
              "",
              "    //Спавним диверсионный отряд на планете сбора",
              "    int planet_race = PlanetRace(ActiveQuestsHQArray[q_num, 9]);",
              "    int planet_owner = PlanetOwner(ActiveQuestsHQArray[q_num, 9]);",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 9], 3);",
              "    PlanetOwner(ActiveQuestsHQArray[q_num, 9], 3);",
              "    str id_line;",
              "    for(i = 1; i <= 3; i = i + 1)",
              "    {",
              "        ship = BuyRanger(ActiveQuestsHQArray[q_num, 9], 300);",
              "        for(int j = 1; j <= 4; j = j + 1) ShipRefit(ship);",
              "        ShipImproveItems(ship, RndObject(4, 7, ship));",
              "        dword hull = ShipItems(ship, 0);",
              "        HullSeries(hull, -1);",
              "        SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_StarCockerelFeiHull'), hull);",
              "        Chameleon(ship);",
              "        NoDropItem(hull, 1);",
              "",
              "        //Накидываем всем трём наёмникам не слишком быстрые движки",
              "        //(а то могут случайно последовательность действий квеста заруинить)",
              "        dword engine = ShipEqInSlot(ship, t_Engine);",
              "        if(ItemLevel(engine) > 5)",
              "        {",
              "            ItemCost(engine, round(PortionInDiapason(ItemLevel(engine), 6, 8, 0.875, 0.625) * ItemCost(engine)));",
              "            ItemLevel(engine, 5);",
              "        }",
              "        NoDropItem(engine, 1);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "",
              "        //Пока просто сидят и ждут",
              "        ShipJoin(QuestSupport, ship);",
              "        if(id_line == '') id_line = Id(ship);",
              "        else id_line = id_line + ',' + Id(ship);",
              "",
              "        SetName(ship, CT(ActiveQuestsHQArray[q_num, 3] + '.Cockerel' + i));",
              "        ShipFace(ship, 'New'); //Сразу инициализируем все портреты",
              "        ShipType(ship, 'StarCockerel');",
              "        ShipCustomFaction(ship, 'SubFactionStarCockerels');",
              "        ShipOwner(ship, PirateClan);",
              "",
              "        //\"Экипируем\" наёмника ЭМП торпедой",
              "        ShipAddCustomShipInfo(ship, 'ShuMercsHQ_EMPTorpedo');",
              "",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "        //Также понижаем отношение к диверсантам всех планет и коалиционных станций в целевой системе",
              "        for(j = 0; j < StarPlanets(target_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(target_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 0);",
              "        }",
              "        for(j = 0; j < StarRuins(target_star); j = j + 1)",
              "        {",
              "            dword cur_ruin = StarRuins(target_star, j);",
              "            if(ShipStanding(cur_ruin) != 7 && ShipStanding(cur_ruin) != 8) continue;",
              "",
              "            RelationToRanger(cur_ruin, ship, 0);",
              "        }",
              "",
              "        //Унижаем наёмникам лидерство, чтобы они не могли нанимать другие корабли",
              "        ShipSkill(ship, 'Leadership', 0);",
              "        ShipSpecialBonuses(ship, bonSkill6, -30);",
              "        //Повышаем всем наёмникам пиратское звание до барона, чтоб, сука, уважали их тупые пираты!",
              "        while(GetShipPirateRank(ship) < 7)",
              "        {",
              "            ShipPirateRankPoints(ship, ShipNextPirateRankPoints(ship));",
              "            RaisePirateRank(ship);",
              "        }",
              "        //Запрещаем другим рейнджерам (и наёмникам) рэкетировать наёмников игрока",
              "        NoTargetToShip(ship, 3);",
              "    }",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 9], planet_race);",
              "    PlanetOwner(ActiveQuestsHQArray[q_num, 9], planet_owner);",
              "",
              "    //Вешаем всем диверсантам инфошку агра на игрока в случае, если тот захочет на них напасть",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestSupport, i);",
              "        ShipAddCustomShipInfo(ship, 'ShuMercsHQ_QuestTargetAttackMark', 'NoShow', 0, Id(PlanetPirateClan()), 0, id_line, 'Ether2,,,0,,,' + CT(ActiveQuestsHQArray[q_num, 3] + '.SupportOnPlayerAttack'), '10066,0,' + (Id(ActiveQuestsHQArray[q_num, 9]) * 2) + ',0,SetToAll');",
              "    }",
              "",
              "    //Определяем, сколько военных необходимо доспавнить в целевую систему",
              "    str text = CT(ActiveQuestsHQArray[q_num, 3] + '.MinWarriorsCount');",
              "    int add_warriors = 0 + GetParFromString(text, ',', 0, 1) + GetParFromString(text, ',', 1, 1);",
              "    add_warriors = add_warriors - ActiveQuestsHQArray[q_num, 10];",
              "    //Доспавниваем военных поровну на все обитаемые планеты целевой системы",
              "    //(только если их в целевой системе оказалось меньше, чем нужно)",
              "    dword target_planet;",
              "    while(1)",
              "    {",
              "        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(target_star, i);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "            //Попутно выбираем случайную планету для спавна флагмана-цели",
              "            if(RndObject(0, 1, cur_planet)) target_planet = cur_planet;",
              "",
              "            if(add_warriors > 0)",
              "            {",
              "                ship = BuyWarrior(cur_planet, 350);",
              "                for(j = 1; j <= 4; j = j + 1) ShipRefit(ship);",
              "                ShipImproveItems(ship, RndObject(4, 8, ship));",
              "",
              "                add_warriors = add_warriors - 1;",
              "            }",
              "            else if(target_planet) break;",
              "        }",
              "",
              "        if(add_warriors <= 0 && target_planet) break;",
              "    }",
              "",
              "    //Теперь спавним флагман-цель",
              "    dword target_ship = BuyBigWarrior(target_planet, 500);",
              "    for(j = 1; j <= 6; j = j + 1) ShipRefit(target_ship);",
              "    ShipImproveItems(target_ship, RndObject(8, 12, target_ship));",
              "    //Повышаем коалиционное и пиратское звания линкора (чтоб солидно было)",
              "    while(ShipRank(target_ship) < 6)",
              "    {",
              "        ShipRankPoints(target_ship, ShipNextRankPoints(target_ship));",
              "        ShipRaiseRank(target_ship);",
              "    }",
              "    while(GetShipPirateRank(target_ship) < 5)",
              "    {",
              "        ShipPirateRankPoints(target_ship, ShipNextPirateRankPoints(target_ship));",
              "        RaisePirateRank(target_ship);",
              "    }",
              "",
              "    SetName(target_ship, ActiveQuestsHQArray[q_num, 0]);",
              "    ShipJoin(QuestTarget, target_ship, 'QuestTargetMoveState', 133);",
              "    OrderTakeOff(target_ship);",
              "",
              "    //Вешаем на линкор инфошку, которая будет обрабатывать попадания ЭМП-торпед",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_EMPTorpedoTargetHit', 'NoShow');",
              "",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в целевую систему",
              "    //(также временно блочит смену подданства в целевой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'PirateClan');",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetShip'+'>', ShipName(target_ship), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess1'), '<BeginPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Заносим в массив Id всех квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также планеты",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  481,
          "#":  483,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  482,
          "#":  484,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  483,
          "#":  485,
          "Total.Lines":  6,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.Destroy.1",
              "function CoalitionDestroyQuestOneConditions()",
              "{}",
              "//Подготовительный этап квеста Coalition.Destroy.1",
              "function CoalitionDestroyQuestOnePrepare(int q_num)",
              "{}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  484,
          "#":  486,
          "Total.Lines":  6,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.Protect.1",
              "function CoalitionProtectQuestOneConditions()",
              "{}",
              "//Подготовительный этап квеста Coalition.Protect.1",
              "function CoalitionProtectQuestOnePrepare(int q_num)",
              "{}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  490,
          "#":  491,
          "Total.Lines":  292,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "//Диалоги в штабе игрока",
              "//Если игрок находится на станции/мостике",
              "cur_ruin = GetShipRuins(Player());",
              "if(cur_ruin)",
              "{",
              "    tstr1 = Format(ShipType(cur_ruin), '_licensed', '', '');",
              "    //Если игрок находится в своём штабе",
              "    if(tstr1 == 'PlayerMercHQ')",
              "    {",
              "        cur_star = ShipStar(cur_ruin);",
              "",
              "        //Если игрок ещё ни разу не посещал свой штаб",
              "        if(!PlayerHQMainArray['Main', 'GreetingDialog'])",
              "        {",
              "            AddDialogBlock(CT('FormRuins.GN.Modern.PlayerAsk'), 2); //Блочим \"Я желаю поучаствовать в развитии вашей базы\"",
              "",
              "            tint1 = 1;",
              "            if(BuildOwnBase_Condition == 6) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.IntroTextTziptzilot' + tint1);",
              "            else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.IntroText' + tint1);",
              "            tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.PlayerNext');",
              "            AddDialogInject('PlayerHQIntroDialog', tstr1, tstr2, 0, 1);",
              "        }",
              "        else",
              "        {",
              "            //Добавляем диалог в случае нахождения станции в гипере (и если игрок в этот момент сидит на ней же)",
              "            if(ShipInHyperSpace(cur_ruin))",
              "            {",
              "                tstr1 = Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.InHyper'),",
              "                                  '<Star'+'>', StarName(ShipOrderObj(cur_ruin)),",
              "                                  '<DaysLeft'+'>', ShipOrderData1(cur_ruin));",
              "                tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerInHyper');",
              "                AddDialogInject('PlayerHQInHyper', tstr1, tstr2, 0, 1);",
              "                exit;",
              "            }",
              "            //Игрок находится в диалоге выбора \"прыгать/не прыгать\" и должен определиться",
              "            if(PlayerHQJumpReady != '')",
              "            {",
              "                AddDialogOverride(PlayerHQJumpReady, 30001);",
              "                exit;",
              "            }",
              "            //Игрок сел на штаб, который прилетел за ним для извлечения из другой системы и штаб ещё не ушёл обратно в гипер",
              "            if(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] != '')",
              "            {",
              "                tint1 = GetParFromString(PlayerHQMainArray['Science', 'PortalGeneratorReturnData'], ',', 1, 0);",
              "                tstr1 = Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.WaitingForExtraction'),",
              "                                  '<Star'+'>', StarName(GalaxyStar(tint1)));",
              "                tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerWaitingForExtraction');",
              "                AddDialogInject('PlayerHQInHyper', tstr1, tstr2, 0, 1);",
              "                exit;",
              "            }",
              "",
              "            //Определяем, какая вступительная реплика будет показана игроку",
              "            if(PlayerHQMainArray['Main', 'GreetingDialog'] == 2)",
              "            {",
              "                if(Keller())",
              "                {",
              "                    if(ShipStar(Keller()) != cur_star || !ShipInNormalSpace(Keller()))",
              "                    {",
              "                        if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= 500000)",
              "                        {",
              "                            tint1 = Rnd(1, 4, sqr(sqr(CurTurn() + 56)));",
              "                            if(tint1 < 4) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJoke' + tint1);",
              "                            else",
              "                            {",
              "                                if(BuildOwnBase_Condition == 6) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJokeRichTziptzilot');",
              "                                else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJokeRich');",
              "                            }",
              "                        }",
              "                        else",
              "                        {",
              "                            tint1 = Rnd(1, 3, sqr(sqr(CurTurn() + 56)));",
              "                            tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJoke' + tint1);",
              "                        }",
              "                    }",
              "                    //Если в систему нагрянул Келлер",
              "                    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJokeKeller');",
              "                }",
              "                else",
              "                {",
              "                    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= 500000)",
              "                    {",
              "                        tint1 = Rnd(1, 4, sqr(sqr(CurTurn() + 56)));",
              "                        if(tint1 < 4) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJoke' + tint1);",
              "                        else",
              "                        {",
              "                            if(BuildOwnBase_Condition == 6) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJokeRichTziptzilot');",
              "                            else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJokeRich');",
              "                        }",
              "                    }",
              "                    else",
              "                    {",
              "                        tint1 = Rnd(1, 3, sqr(sqr(CurTurn() + 56)));",
              "                        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingJoke' + tint1);",
              "                    }",
              "                }",
              "",
              "                if(PlayerHQMainArray['Finance', 'CurrentBalance'] < 10000) tint1 = 1;",
              "                else if(PlayerHQMainArray['Finance', 'CurrentBalance'] < 500000) tint1 = 2;",
              "                else tint1 = 3;",
              "                tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingBalance' + tint1);",
              "            }",
              "            //Если игрок посетил штаб впервые после повторной постройки",
              "            else",
              "            {",
              "                tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.IntroAfterHQDestroyed');",
              "                PlayerHQMainArray['Main', 'GreetingDialog'] = 2;",
              "            }",
              "",
              "            AddDialogBlock(CT('FormRuins.GN.Modern.PlayerAsk'), 2); //Блочим \"Я желаю поучаствовать в развитии вашей базы\"",
              "            AddDialogBlock('HiddenAnswer', 2);",
              "            AddDialogInject('GreetingText', tstr1, 'HiddenAnswer', 120, 1);",
              "",
              "            //Информация о наёмниках",
              "            tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskMercs');",
              "            AddDialogInject('PlayerHQMercsDialog', '', tstr1, 110);",
              "",
              "            //Бюджет",
              "            tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskFinance');",
              "            AddDialogInject('PlayerHQFinanceDialog', '', tstr1, 100);",
              "",
              "            //Крупные контракты (задания)",
              "            tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskQuests');",
              "            tdwd1 = (PlayerHQMainArray['Quests', 'PrivateQuestAppear'] <= CurTurn());",
              "            tdwd2 = (PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] <= CurTurn() && !CoalitionDefeated());",
              "            tdwd3 = (PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] <= CurTurn() && PirateWin() != 3 && PirateWin() != 4);",
              "            if(!ActiveQuestHQ)",
              "            {",
              "                if(tdwd2 && tdwd3) tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingNewCoalAndPirQuest');",
              "                else if(tdwd2) tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingNewCoalQuest');",
              "                else if(tdwd3) tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.GreetingNewPirQuest');",
              "                else tstr2 = '';",
              "            }",
              "            else tstr2 = '';",
              "            AddDialogInject('PlayerHQQuestsDialog', tstr2, tstr1, 90);",
              "",
              "            //Ударная группа",
              "            if(GroupCount(PlayerMercsStrike) && !GroupIn(PlayerMercsStrike, cur_ruin))",
              "            {",
              "                //Если группа ещё не вернулась в штаб",
              "                tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskStrikeGroupOut');",
              "                AddDialogBlock(tstr1, 1);",
              "            }",
              "            else tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskStrikeGroup');",
              "            AddDialogInject('PlayerHQStrikeDialog', '', tstr1, 80);",
              "",
              "            //Научный отдел",
              "            if(PlayerHQMainArray['Science', 'ScientificDepartment'])",
              "            {",
              "                //Добавляем инжект диалога починки из мода ExpRepair",
              "                if(PlayerHQMainArray['Main', 'HQScienceDialog'])",
              "                {",
              "                    if(IsScriptActive('Mod_ExpRepair'))",
              "                    {",
              "                        tstr1 = CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskRepair');",
              "                        AddDialogInject('Mod_ExpRepair:RepairDialog', '', tstr1, 75);",
              "                    }",
              "                    tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskScience');",
              "                }",
              "                else tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskScienceIntro');",
              "                AddDialogInject('PlayerHQScienceDialog', '', tstr1, 70);",
              "",
              "                //Диалоги по квесту на изобретение глюонных пушек",
              "                if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 2)",
              "                {",
              "                    tstr1 = CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.PlayerAskIntro');",
              "                    AddDialogInject('GluonGunsQuestDialog1', CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.MainDialogAddText'), tstr1, 65);",
              "                }",
              "                else if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 3)",
              "                {",
              "                    tstr1 = CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.PlayerAskIntroTwice');",
              "                    AddDialogInject('GluonGunsQuestDialog1', '', tstr1, 60);",
              "                }",
              "                else if(PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 6)",
              "                {",
              "                    if(!PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'])",
              "                    {",
              "                        tstr1 = CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.NewGunsPlayer');",
              "                        AddDialogInject('GluonGunsQuestDialog3', '', tstr1, 55);",
              "                    }",
              "                }",
              "            }",
              "",
              "            //Медблок",
              "            if(PlayerHQMainArray['Medicine', 'MedicalDepartment'])",
              "            {",
              "                if(PlayerHQMainArray['Main', 'HQMedicineDialog'])",
              "                {",
              "                    tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskMedicine');",
              "                }",
              "                else tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskMedicineIntro');",
              "                AddDialogInject('PlayerHQMedicineDialog', '', tstr1, 50);",
              "            }",
              "",
              "            //Оружейный цех",
              "            if(PlayerHQMainArray['Armory', 'ArmoryWorkshop'])",
              "            {",
              "                if(PlayerHQMainArray['Main', 'HQArmoryDialog'])",
              "                {",
              "                    tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskArmory');",
              "                }",
              "                else tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskArmoryIntro');",
              "                AddDialogInject('PlayerHQArmoryDialog', '', tstr1, 40);",
              "            }",
              "",
              "            //Верфь",
              "            if(PlayerHQMainArray['Shipyard', 'ProductionShipyard'])",
              "            {",
              "                if(PlayerHQMainArray['Main', 'HQShipyardDialog']) tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskShipyard');",
              "                else tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskShipyardIntro');",
              "                AddDialogInject('PlayerHQShipyardDialog', '', tstr1, 30);",
              "            }",
              "",
              "            //Портальный генератор",
              "            if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1)",
              "            {",
              "                if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn())",
              "                {",
              "                    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskPortalGenerator');",
              "                }",
              "                else",
              "                {",
              "                    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskPortalGeneratorOnRecharge'),",
              "                                                   '<DaysLeft'+'>', PlayerHQMainArray['Science', 'PortalGeneratorTimer'] - CurTurn(), '');",
              "                    AddDialogBlock(tstr1, 1);",
              "                }",
              "                AddDialogInject('PlayerHQPortalGeneratorDialog', '', tstr1, 20);",
              "",
              "                //Добавляем реплику отмены подготовки к скачку штаба в другую систему",
              "                if(ItemExist(ApprovalDocuments))",
              "                {",
              "                    tstr1 = Name(GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1))));",
              "                    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJumpCancel'), '<Star'+'>', tstr1);",
              "                    AddDialogInject('PlayerHQLongJumpCancel', '', tstr1, 19);",
              "                }",
              "            }",
              "",
              "            //Улучшение станции",
              "            if(PlayerHQMainArray['Main', 'HQImproveDialog'])",
              "            {",
              "                //Инжектим диалог из другого мода (т.к. слишком трудно переносить его целиком сюда)",
              "                tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskHQImprove');",
              "                AddDialogInject('Mod_ExpHullsBases:ruinhull_upgrade_talk', '', tstr1, 10);",
              "                //Инжектим отдельную опцию изменения состава снаряжения станции",
              "                tstr1 = CT('Script.Mod_ShuMercs.PlayerHQImproveDialog.PlayerAskHQRefit');",
              "                AddDialogInject('PlayerHQImproveDialog', '', tstr1, 9, 0, 0);",
              "",
              "                //Выставляем данный маркер отсюда, чтобы после пересоздания штаба он не мог быть обнулён",
              "                RuinsAllowModernization(cur_ruin, 1);",
              "            }",
              "            else",
              "            {",
              "                tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskHQImproveIntro');",
              "                AddDialogInject('PlayerHQImproveDialog', '', tstr1, 10);",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        //Игрок находится в диалоге выбора \"прыгать/не прыгать\" и должен определиться",
              "        if(PlayerHQJumpReady != '')",
              "        {",
              "            AddDialogOverride(PlayerHQJumpReady, 30001);",
              "            exit;",
              "        }",
              "",
              "        tint1 = PlayerBridge();",
              "        //Если игрок находится на главном экране мостика",
              "        if(tint1 && tint1 <= 3)",
              "        {",
              "            //Если штаб игрока уже построен, игрок может связаться с ним с мостика",
              "            if(BuildOwnBase_InProcess == 6)",
              "            {",
              "                if(PlayerHQMainArray['Main', 'GreetingDialog']) //Если игрок уже хотя бы раз посетил свой штаб",
              "                {",
              "                    tdwd1 = GroupToShip(PlayerHQ);",
              "                    if(tdwd1)",
              "                    {",
              "                        //Пока штаб перемещается, связь через мостик с ним недоступна",
              "                        if(!ShipInHyperSpace(tdwd1) && ShipOrder(tdwd1) != 7 && PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] == '')",
              "                        {",
              "                            if(!GroupIn(PlayerGroup, tdwd1))",
              "                            {",
              "                                tstr1 = Format(CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerCallHQ'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName']);",
              "                                AddDialogInject('PlayerHQBridgeDialog', '', tstr1, 0);",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  492,
          "#":  493,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = tint1 + 1;",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.IntroText' + tint1);",
              "if(tint1 >= 6)",
              "{",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.PlayerEnd');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQIntroDialog.IntroOut');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  495,
          "#":  501,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Main', 'GreetingDialog'] = 2;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  502,
          "#":  503,
          "Total.Lines":  23,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ruin = GroupToShip(PlayerHQ);",
              "",
              "//tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.Greeting');",
              "tint3 = GroupCount(PlayerMercsFree) + GroupCount(PlayerMercsDefenders) + GroupCount(QuestMercs);",
              "tint4 = PlayerHQMainArray['Mercs', 'MaxFree'] + PlayerHQMainArray['Mercs', 'MaxStrike'] + PlayerHQMainArray['Mercs', 'CurrentAtReady'] + PlayerHQMainArray['Mercs', 'MaxReserve']; //Максимальный лимит числа наёмников на базе",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.QuantityInfo'),",
              "'<MercsOnFreeEarnings'+'>', GroupCount(PlayerMercsFree),",
              "'<MercsAtReady'+'>', GroupCount(PlayerMercsDefenders) + GroupCount(QuestMercs) + PlayerHQMainArray['Mercs', 'CurrentAtReady'],",
              "'<MercsStrike'+'>', GroupCount(PlayerMercsStrike),",
              "'<MercsMaxStrike'+'>', PlayerHQMainArray['Mercs', 'MaxStrike'],",
              "'<MercsReserve'+'>', PlayerHQMainArray['Mercs', 'CurrentReserve'],",
              "'<MercsTotal'+'>', tint3 + GroupCount(PlayerMercsStrike) + PlayerHQMainArray['Mercs', 'CurrentAtReady'] + PlayerHQMainArray['Mercs', 'CurrentReserve'],",
              "'<MercsMax'+'>', tint4);",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskRecruitment');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskQuantity');",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskChangeMaxFree');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskChangeMaxAtReady');",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskChangeMaxReserve');",
              "tstr7 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerOut');",
              "",
              "tint1 = 1;",
              "tint2 = 0;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  507,
          "#":  511,
          "Total.Lines":  16,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(PlayerHQMainArray['Mercs', 'PlanetsCount'] <= 1) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.DevelopedPlanet');",
              "else tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.DevelopedPlanets');",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.TrainMercsCount' + PlayerHQMainArray['Mercs', 'ReplenishmentCount']);",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.RecruitmentInfo1'),",
              "'<HQStar'+'>', Name(ShipStar(cur_ruin)),",
              "'<DevelopedPlanets'+'>', tstr5,",
              "'<PlanetsCount'+'>', PlayerHQMainArray['Mercs', 'PlanetsCount'],",
              "'<HQLevel'+'>', '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.HQLevel' + PlayerHQMainArray['Main', 'HQLevel']),",
              "'<DaysCount'+'>', PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'],",
              "'<TrainMercsCount'+'>', tstr6);",
              "",
              "if(PlayerHQMainArray['Main', 'HQLevel'] < PlayerHQMainArray['Main', 'HQLevelMax']) tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.RecruitmentInfo2');",
              "",
              "tint1 = 0;",
              "tint2 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  508,
          "#":  512,
          "Total.Lines":  20,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(~tint1)",
              "{",
              "    tint3 = GroupCount(PlayerMercsFree) + GroupCount(PlayerMercsDefenders) + GroupCount(QuestMercs);",
              "    tint4 = PlayerHQMainArray['Mercs', 'MaxFree'] + PlayerHQMainArray['Mercs', 'MaxStrike'] + PlayerHQMainArray['Mercs', 'CurrentAtReady'] + PlayerHQMainArray['Mercs', 'MaxReserve']; //Максимальный лимит числа наёмников на базе",
              "",
              "    if(tint1 == 2) tstr1 = tstr1 + \"<br>\" + \"<br>\";",
              "    else tstr1 = '</color>';",
              "    tstr1 = tstr1 + Format(CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.QuantityInfo'),",
              "    '<MercsOnFreeEarnings' + '>', GroupCount(PlayerMercsFree),",
              "    '<MercsAtReady'+'>', GroupCount(PlayerMercsDefenders) + GroupCount(QuestMercs) + PlayerHQMainArray['Mercs', 'CurrentAtReady'],",
              "    '<MercsStrike'+'>', GroupCount(PlayerMercsStrike),",
              "    '<MercsMaxStrike'+'>', PlayerHQMainArray['Mercs', 'MaxStrike'],",
              "    '<MercsReserve'+'>', PlayerHQMainArray['Mercs', 'CurrentReserve'],",
              "    '<MercsTotal'+'>', tint3 + GroupCount(PlayerMercsStrike) + PlayerHQMainArray['Mercs', 'CurrentAtReady'] + PlayerHQMainArray['Mercs', 'CurrentReserve'],",
              "    '<MercsMax'+'>', tint4);",
              "",
              "    tint1 = 1;",
              "    tint2 = 0;",
              "}",
              "else tint1 = tint3;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  514,
          "#":  515,
          "Total.Lines":  31,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ruin = GroupToShip(PlayerHQ);",
              "",
              "//tstr2 = GameDateTxtByTurn(PlayerHQMainArray['Finance', 'FiscalPeriod'] - CT('Script.Mod_ShuMercs.PlayerMercsParams.FiscalPeriod'));",
              "//tstr2 = DeleteTags(substr(tstr2, 0, count(tstr2) - 5));",
              "//tstr2 = '<color=0,50,200>' + (0 + tstr2) + '</color>' + TrimNumbers(tstr2);",
              "//tstr3 = GameDateTxtByTurn(PlayerHQMainArray['Finance', 'FiscalPeriod']);",
              "//tstr3 = DeleteTags(substr(tstr3, 0, count(tstr3) - 5));",
              "//tstr3 = '<color=0,50,200>' + (0 + tstr3) + '</color>' + TrimNumbers(tstr3);",
              "",
              "if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] != 2) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.Greeting'), '<AddFleetMaintenance'+'>', '', '');",
              "//Если игрок уже купил себе на защиту штаба крейсер, добавляем дополнительные расходы",
              "else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.Greeting'), '<AddFleetMaintenance'+'>', CT('FormInfo.br') + CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.FleetMaintenance'), '');",
              "",
              "tstr1 = Format(tstr1,",
              "               '<OutSalaries'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsOutSalaries']),",
              "               '<OutEquipments'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsOutEquipments']),",
              "               '<FleetMaintenance'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsOutFleetMaintenance']),",
              "               '<OutExpenses'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsOutExpenses']),",
              "               '<MoneyOut'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsOutSalaries'] + PlayerHQMainArray['Finance', 'StatsOutEquipments'] + PlayerHQMainArray['Finance', 'StatsOutFleetMaintenance'] + PlayerHQMainArray['Finance', 'StatsOutExpenses']),",
              "               '<InEarnings'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsInEarnings']),",
              "               '<InQuests'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsInQuests']),",
              "               '<MoneyIn'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'StatsInEarnings'] + PlayerHQMainArray['Finance', 'StatsInQuests']),",
              "               //'<FiscalPeriodStart'+'>', '</color>' + tstr2,",
              "               //'<FiscalPeriodEnd'+'>', tstr3,",
              "               '<CurrentBalance'+'>', AddNumSeparators(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.PlayerAskTopUp');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.PlayerAskWithdraw');",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.PlayerAskInfo');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.PlayerOut');",
              "",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  526,
          "#":  527,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.WithdrawalFeePercent');",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.FinanceInfo'),",
              "                               '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']),",
              "                               '<WithdrawalPercent'+'>', '' + (100 - tint1) + '%',",
              "                               '<WithdrawalFeePercent'+'>', '' + tint1 + '%');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.PlayerOk');",
              "tint1 = 0;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  525,
          "#":  530,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "i = min(ShipMoney(Player()), 1000000000 - PlayerHQMainArray['Finance', 'CurrentBalance']); //Максимальная сумма пополнения (минимальная - 10.000)",
              "tint2 = NumberBox('Bm.ItemsUseless.2Usl_Elus_s', CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.BalanceTopUpSum'), 10000, i, i, 'Bm.FormCount2.2KindCredits');",
              "if(tint2)",
              "{",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] + tint2;",
              "    ShipMoney(Player(), ShipMoney(Player()) - tint2);",
              "    Sound('Sound.Sell');",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.BalanceTopUp'), '<TopUpCount'+'>', tint2, '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "}",
              "else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.Greeting'), '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  524,
          "#":  531,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "i = min(PlayerHQMainArray['Finance', 'CurrentBalance'] - 100000, RoundTo(100.0 / (100 - CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.WithdrawalFeePercent')) * (100000000 - ShipMoney(Player())), 1, 0)); //Максимальная сумма списания",
              "float to_withdraw = NumberBox('Bm.ItemsUseless.2Usl_Elus_s', CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.BalanceWithdrawSum'), 10000, i, i, 'Bm.FormCount2.2KindCredits');",
              "if(to_withdraw)",
              "{",
              "    tint3 = min(RoundTo(to_withdraw * ('0.' + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.WithdrawalFeePercent')), 1, 0), 100000000);",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.BalanceWithdrawWarning'), '<WithdrawCount'+'>', tint3);",
              "",
              "    if(MessageBoxYesNo(tstr1, 8))",
              "    {",
              "        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - to_withdraw;",
              "        ShipMoney(Player(), ShipMoney(Player()) + tint3);",
              "        Sound('Sound.Buy');",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.BalanceWithdraw'), '<WithdrawCount'+'>', tint3, '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "    }",
              "    else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.Greeting'), '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "}",
              "else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQFinanceDialog.Greeting'), '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  534,
          "#":  535,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskFinance');",
              "InjectAnswer('PlayerHQFinanceDialog', tstr1, 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  539,
          "#":  540,
          "Total.Lines":  28,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!PlayerBridge()) tstr1 = CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.GreetingAddText');",
              "else tstr1 = '';",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.Greeting'), '<AddText'+'>', tstr1, '');",
              "",
              "tint1 = GroupCount(PlayerMercsStrike);",
              "if(tint1 < PlayerHQMainArray['Mercs', 'MaxStrike'] && PlayerHQMainArray['Mercs', 'StrikeCandidatesList'] != ',,')",
              "{",
              "    tint2 = 1;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHire');",
              "}",
              "else if(tint1 >= PlayerHQMainArray['Mercs', 'MaxStrike'])",
              "{",
              "    tint2 = 0;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHireMax');",
              "}",
              "else",
              "{",
              "    tint2 = 0;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHireNoMoreCandidates');",
              "}",
              "",
              "if(tint1)",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskRefit');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskFire');",
              "    tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskDisband');",
              "}",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  544,
          "#":  545,
          "Total.Lines":  52,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ruin = GroupToShip(PlayerHQ);",
              "",
              "if(!PlayerHQMainArray['Main', 'HQScienceDialog'])",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.GreetingIntro');",
              "    tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerIntroOut');",
              "",
              "    PlayerHQMainArray['Main', 'HQScienceDialog'] = 1;",
              "    tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.Greeting');",
              "    if(GTL >= 4 && PlayerHQMainArray['Science', 'PortalGenerator'] <= 0)",
              "    {",
              "        if(!PlayerHQMainArray['Science', 'PortalGenerator']) tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGeneratorAddOffer');",
              "        else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -1) tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGeneratorAddOfferAgain');",
              "        else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -2) tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGeneratorAddOfferTwice');",
              "    }",
              "",
              "    //Если ускорение движка доступно",
              "    if(PlayerHQMainArray['Science', 'SpeedUpRefill'] <= CurTurn())",
              "    {",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskSpeedUp');",
              "        tint2 = 1;",
              "    }",
              "    //Если игрок уже производил ускорение в течение двух последних месяцев",
              "    else",
              "    {",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskSpeedUpNotEnough');",
              "        tint2 = 0;",
              "    }",
              "",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskReliabilityImprove');",
              "",
              "    //Добавляем реплику прокачки \"Эксдюралити\" для ударной группы или крейсера",
              "    if(GroupCount(PlayerMercsStrike) || GroupCount(CruisersDefenders)) tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskReliabilityImproveForMerc');",
              "    else tstr4 = '';",
              "",
              "    //Добавляем реплику установки портального генератора",
              "    if(GTL >= 4 && PlayerHQMainArray['Science', 'PortalGenerator'] <= 0)",
              "    {",
              "        if(!PlayerHQMainArray['Science', 'PortalGenerator']) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGenerator');",
              "        else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -1) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGeneratorAgain');",
              "        else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -2) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGeneratorTwice');",
              "    }",
              "    else tstr5 = '';",
              "",
              "    tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerOut');",
              "",
              "    tint1 = 1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  555,
          "#":  561,
          "Total.Lines":  44,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(GetGameOptions('FontDialog') == '0') tstr6 = '-----------------------------------------------------------';",
              "else if(GetGameOptions('FontDialog') == '1') tstr6 = '------------------------------------------';",
              "else if(GetGameOptions('FontDialog') == '2') tstr6 = '-------------------------------------------';",
              "else tstr6 = '--------------------------------------';",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.CandidatesListStart');",
              "//Формируем список кандидатов для найма",
              "tstr4 = '';",
              "",
              "for(i = 0; i <= 2; i = i + 1)",
              "{",
              "    tstr3 = GetParFromString(PlayerHQMainArray['Mercs', 'StrikeCandidatesList'], ',', i, 0);",
              "    //Модификатор стоимости найма",
              "    tflt1 = GetParFromString(tstr3, '*', 1, 0);",
              "    //Строка пути к разделу кандидата",
              "    tstr3 = GetParFromString(tstr3, '*', 0, 0);",
              "",
              "    //Если этот наёмник ещё не был нанят",
              "    if(tstr3 != '')",
              "    {",
              "        //Считаем и запоминаем разовую цену найма текущего кандидата",
              "        cost = int(GetParFromString(tstr3, '.', 0, 0));",
              "        tint4 = round(0.87 * GalaxyMoney(4, 4) * 3);",
              "        cost = round(tflt1 * (tint4 + tint4 * cost));",
              "        tstr4 = tstr4 + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + tstr3 + '.Name') + '.' + cost;",
              "",
              "        //Формируем блок текста о наёмнике для вывода в диалог",
              "        tstr1 = tstr1 + \"<br>\";",
              "        //if(findsubstr(tstr1, tstr6) == -1) tstr1 = tstr1 + tstr6; //Настолько стрёмная проверка на случай, если первый в списке наёмник уже был нанят",
              "        tstr1 = tstr1 + tstr6;",
              "        //if(!i)",
              "        tstr1 = tstr1 + \"<br>\" + Format(CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + tstr3 + '.Description') '<Name'+'>', CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + tstr3 + '.Name'), '<Cost'+'>', cost);",
              "    }",
              "    //else",
              "    //{",
              "    //    if(!i) tstr1 = tstr1 + \"<br>\" + tstr6 + \"<br>\" + (i + 1) + ') ' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.AlreadyHired');",
              "    //    else tstr1 = tstr1 + \"<br>\" + \"<br>\" + (i + 1) + ') ' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.AlreadyHired');",
              "    //}",
              "",
              "    tstr4 = tstr4 + ',';",
              "}",
              "",
              "tstr1 = tstr1 + \"<br>\" + tstr6 + \"<br>\" + Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.CandidatesListEnd'), '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerHireOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  557,
          "#":  562,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.WhoToRefit');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerRefitOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  558,
          "#":  563,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.WhoToFire');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerFireOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  560,
          "#":  564,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.DisbandConfirm');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerDisbandYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerDisbandNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  571,
          "#":  572,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.ChoosedDisbandNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  570,
          "#":  573,
          "Total.Lines":  13,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(i = GroupCount(PlayerMercsStrike) - 1; i >= 0; i = i - 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "    FreePlayerMerc(cur_ship);",
              "    TransferShip(cur_ship, StarPlanets(GalaxyStar(2), 0));",
              "    ShipDestroy(cur_ship, 1);",
              "",
              "    //Sound('Sound.Drop');",
              "}",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.ChoosedDisbandYes');",
              "PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "Sound('Sound.Drop');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -140,
          "Parent":  575,
          "#":  574,
          "Total.Lines":  24,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = GroupCount(PlayerMercsStrike);",
              "if(tint1 < PlayerHQMainArray['Mercs', 'MaxStrike'] && PlayerHQMainArray['Mercs', 'StrikeCandidatesList'] != ',,')",
              "{",
              "    tint2 = 1;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHire');",
              "}",
              "else if(tint1 >= PlayerHQMainArray['Mercs', 'MaxStrike'])",
              "{",
              "    tint2 = 0;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHireMax');",
              "}",
              "else",
              "{",
              "    tint2 = 0;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHireNoMoreCandidates');",
              "}",
              "",
              "if(tint1)",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskRefit'); //В данный момент не используется",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskFire');",
              "    tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskDisband');",
              "}",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  566,
          "#":  576,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Формируем список наёмников на увольнение",
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "    tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class' + substr(GetData(0, cur_ship), 0, 1) + '.' + substr(GetData(0, cur_ship), 1) + '.NameInGenitive');",
              "    InjectAnswer('PlayerHQStrikeFire', Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerToFire'), '<Name'+'>', tstr1), i);//Format(ShipName(cur_ship), PlayerHQMainArray['Main', 'OrganisationName'] + ' ', '', '')), i);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  565,
          "#":  579,
          "Total.Lines":  20,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Формируем список кандидатов для найма",
              "for(i = 0; i <= 2; i = i + 1)",
              "{",
              "    //tstr1 = GetParFromString(GetParFromString(tstr4, ',', i, 0), '.', 0, 0); //Полное имя наёмника",
              "    //Строка пути к разделу кандидата",
              "    tstr1 = GetParFromString(PlayerHQMainArray['Mercs', 'StrikeCandidatesList'], ',', i, 0);",
              "    tstr1 = GetParFromString(tstr1, '*', 0, 0);",
              "    tstr3 = CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + tstr1 + '.NameInGenitive');",
              "    if(tstr1 == '') continue;",
              "",
              "    tstr1 = Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerToHire'), '<Name'+'>', tstr3);",
              "    cost = GetParFromString(GetParFromString(tstr4, ',', i, 0), '.', 1, 0);",
              "    if(PlayerHQMainArray['Finance', 'CurrentBalance'] < cost && ShipMoney(Player()) < cost)",
              "    {",
              "        tstr1 = DeleteTags(tstr1);",
              "        AddDialogBlock(tstr1, 1);",
              "    }",
              "",
              "    InjectAnswer('PlayerHQStrikeHire', tstr1, i);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  580,
          "#":  581,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.Greeting');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  577,
          "#":  583,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ship = GroupShip(PlayerMercsStrike, GAnswerData);",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.FireDone'), '<MercName'+'>', substr(ShipName(cur_ship), count(PlayerHQMainArray['Main', 'OrganisationName']) + 1));",
              "FreePlayerMerc(cur_ship);",
              "TransferShip(cur_ship, StarPlanets(GalaxyStar(2), 0));",
              "ShipDestroy(cur_ship, 1);",
              "",
              "//Если игрок уволил единственного в группе наёмника",
              "if(!GroupCount(PlayerMercsStrike)) PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "Sound('Sound.Drop');",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  578,
          "#":  585,
          "Total.Lines":  78,
          "Code.Type":  "Turn",
          "Code":          
          [
              "while(1)",
              "{",
              "    //Уже готовая строка с именем и стоимостью найма кандидата",
              "    tstr2 = GetParFromString(tstr4, ',', GAnswerData, 0);",
              "    cost = GetParFromString(tstr2, '.', 1, 0);",
              "    if(ShipMoney(Player()) >= cost)",
              "    {",
              "        tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAccountPaymentOffer');",
              "        if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost) tstr1 = tstr1 + ' ' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAccountPaymentOfferAdd');",
              "",
              "        if(MessageBoxYesNo(tstr1))",
              "        {",
              "            ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "        }",
              "        else if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost)",
              "        {",
              "            PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "            PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "        }",
              "        else",
              "        {",
              "            tint1 = 0;",
              "            break;",
              "        }",
              "    }",
              "    else",
              "    {",
              "        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "        PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "    }",
              "    tint1 = 1;",
              "    Sound('Sound.Buy');",
              "",
              "    //Имя нанятого",
              "    tstr3 = GetParFromString(tstr2, '.', 0, 0);",
              "    //Строка пути к разделу кандидата",
              "    tstr1 = GetParFromString(PlayerHQMainArray['Mercs', 'StrikeCandidatesList'], ',', GAnswerData, 0);",
              "    tstr1 = GetParFromString(tstr1, '*', 0, 0);",
              "    //Получаем класс кандидата",
              "    i = GetParFromString(tstr1, '.', 0, 0);",
              "    //Получаем расу кандидата",
              "    j = GetValueFromScript('', CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + tstr1 + '.Race'));",
              "    if(i == 1) i = 110 + j;",
              "    else if(i == 2) i = 120 + j;",
              "    else i = 130 + j;",
              "",
              "    cur_ship = SpawnPlayerMerc(NearCivilPlanet(cur_ruin), cur_ruin, i, 1);",
              "    SetName(cur_ship, PlayerHQMainArray['Main', 'OrganisationName'] + ' ' + GetParFromString(tstr2, '.', 0, 0));",
              "    //SetName(cur_ship, PlayerHQMainArray['Main', 'OrganisationName'] + ' ' + GetParFromString(tstr2, '.', 0, 0));",
              "    //Запоминаем класс и номер данного наёмника в Lang (формат '18', где первая цифра - номер класса, а последующие - номер самого наёмника в списке данного класса)",
              "    SetData(tstr1, 0, cur_ship);",
              "",
              "    tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.' + tstr1 + '.Face');",
              "    if(tstr1 != '') ShipFace(cur_ship, int(tstr1));",
              "",
              "    //Добавляем метку на корпус наёмника (на случай, если в будущем игрок захочет его заменить)",
              "    //(аналогичная строка в комменте есть в общей функции спавна наёмников, но пока что вешать её всем, смысла нет)",
              "    ItemExtraSpecialsAddByType(ShipItems(cur_ship, 0), FindBonusByNameInCfg('ShuMercsHQ_StrikeMercOwnItemMark'));",
              "",
              "    //Заполняем проверочную строку, тем самым \"уникализируя\" подборку наёмников в ударную группу",
              "    //Сперва очищаем край строки (если нужно)",
              "    if(ParsCountFromString(PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'], ',') == 15)",
              "    {",
              "        PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'] = SetParFromString(PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'], ',', 0, '');",
              "        PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'] = substr(PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'], 1);",
              "    }",
              "",
              "    if(PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'] != '') PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'] = PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'] + ',' + tstr3;",
              "    else PlayerHQMainArray['Mercs', 'StrikeCandidatesNamesLine'] = tstr3;",
              "",
              "    PlayerHQMainArray['Mercs', 'StrikeCandidatesList'] = SetParFromString(PlayerHQMainArray['Mercs', 'StrikeCandidatesList'], ',', GAnswerData, '');",
              "    //Если до найма в группе совсем не было наёмников",
              "    if(!PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive']) PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 1;",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.HireDone'), '<MercName'+'>', tstr3);",
              "",
              "    break;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  550,
          "#":  597,
          "Total.Lines":  38,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = ShipEqInSlot(Player(), t_Engine);",
              "tdwd2 = ShipEqInSlot(Player(), t_FuelTanks);",
              "",
              "if(tdwd1 && tdwd2)",
              "{",
              "    //if(ItemInScript(tdwd1) == 1)",
              "    //{",
              "    //    tint3 = EqSpecial(tdwd1);",
              "    //    if(~tint3)",
              "    //    {",
              "    //        if(CT('MicroModuls.' + BonusNumInCfg(tint3) + '.ScriptItemIgnore')) tint3 = 1;",
              "    //        else tint3 = 0;",
              "    //    }",
              "    //    else tint3 = 0;",
              "    //}",
              "    //else tint3 = 1;",
              "",
              "    if(ItemInScript(tdwd1) != 1 && ItemInScript(tdwd2) != 1)",
              "    {",
              "        cost = (ItemCost(tdwd1) + ItemCost(tdwd2)) / 4;",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.SpeedUpCost'),",
              "        '<Cost' + '>', cost,",
              "        '<CurrentBalance' + '>', int(PlayerHQMainArray['Finance', 'CurrentBalance'])",
              "        );",
              "",
              "        tint1 = 1;",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.SpeedUpNotSupported');",
              "        tint1 = 0;",
              "    }",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.SpeedUpNoEquipment');",
              "    tint1 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  598,
          "#":  599,
          "Total.Lines":  20,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Добавляем варианты о подтверждении ускорения, если двигатель и бак игрока оказались совместимы",
              "if(tint1)",
              "{",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerSpeedUpYesOrgBalance');",
              "    if(PlayerHQMainArray['Finance', 'CurrentBalance'] < cost)",
              "    {",
              "        tstr2 = DeleteTags(tstr2);",
              "        AddDialogBlock(tstr2, 1);",
              "    }",
              "    InjectAnswer('PlayerHQScienceSpeedUp', tstr2, 0);",
              "",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerSpeedUpYesOwnMoney');",
              "    if(ShipMoney(Player()) < cost)",
              "    {",
              "        tstr2 = DeleteTags(tstr2);",
              "        AddDialogBlock(tstr2, 1);",
              "    }",
              "    InjectAnswer('PlayerHQScienceSpeedUp', tstr2, 1);",
              "}",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerSpeedUpNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  600,
          "#":  601,
          "Total.Lines":  30,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 = CT('Script.Mod_ShuMercs.PlayerMercsParams.SpeedUpDuration');",
              "//tstr1 = GenerateCodeStringFromBlock('ActCodeBlocksList.ShuMercsHQ_TetroazinePumpingEquipment');",
              "LinkItemToScript(tdwd1);",
              "ScriptItemData(tdwd1, 1, tint3);",
              "ItemOnActCode(tdwd1, GenerateCodeStringFromBlock('ActCodeBlocksList.ShuMercsHQ_TetroazinePumpingEquipment'));",
              "CanSellItem(tdwd1, 1);",
              "//ItemOnActCode(tdwd1, tstr1); //Акткод здесь использовать нельзя, т.к. если предмет лежит на складе, то акткод не работает",
              "LinkItemToScript(tdwd2);",
              "ScriptItemData(tdwd2, 1, tint3);",
              "ItemOnActCode(tdwd2, GenerateCodeStringFromBlock('ActCodeBlocksList.ShuMercsHQ_TetroazinePumpingEquipment'));",
              "CanSellItem(tdwd2, 1);",
              "//ItemOnActCode(tdwd2, tstr1);",
              "",
              "//Заводим таймер до возможности произвести следующее ускорение",
              "PlayerHQMainArray['Science', 'SpeedUpRefill'] = CurTurn() + tint3;",
              "",
              "tint3 = FindBonusByNameInCfg('ShuMercsHQ_TetroazinePumping');",
              "tint4 = CT('Script.Mod_ShuMercs.PlayerMercsParams.SpeedUpBonCount');",
              "ItemExtraSpecialsAddByType(tdwd1, tint3, tint4 / 2);",
              "ItemExtraSpecialsAddByType(tdwd2, tint3, tint4 / 2);",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.SpeedUpDone');",
              "//Списываем оплату",
              "if(!GAnswerData)",
              "{",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "    PlayerHQMainArray['Finance', 'StatsOutExpenses'] = PlayerHQMainArray['Finance', 'StatsOutExpenses'] + cost;",
              "}",
              "else ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -160,
          "Parent":  604,
          "#":  602,
          "Total.Lines":  31,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если ускорение движка доступно",
              "if(PlayerHQMainArray['Science', 'SpeedUpRefill'] <= CurTurn())",
              "{",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskSpeedUp');",
              "    tint2 = 1;",
              "}",
              "//Если игрок уже производил ускорение в течение двух последних месяцев",
              "else",
              "{",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskSpeedUpNotEnough');",
              "    tint2 = 0;",
              "}",
              "",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskReliabilityImprove');",
              "",
              "//Добавляем реплику прокачки \"Эксдюралити\" для ударной группы или крейсера",
              "if(GroupCount(PlayerMercsStrike) || GroupCount(CruisersDefenders)) tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskReliabilityImproveForMerc');",
              "else tstr4 = '';",
              "",
              "//Добавляем реплику установки портального генератора",
              "if(GTL >= 4 && PlayerHQMainArray['Science', 'PortalGenerator'] <= 0)",
              "{",
              "    if(!PlayerHQMainArray['Science', 'PortalGenerator']) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGenerator');",
              "    else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -1) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGeneratorAgain');",
              "    else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -2) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGeneratorTwice');",
              "}",
              "else tstr5 = '';",
              "",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerOut');",
              "",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  603,
          "#":  605,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.Declain');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1113,
          "#":  606,
          "Total.Lines":  76,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveStart');",
              "//Если уровень штаба ещё не максимален, то выводим информацию об ограничениях установки апгрейда",
              "if(PlayerHQMainArray['Main', 'HQLevel'] < 5)",
              "{",
              "    tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveRestrictions');",
              "    tstr1 = tstr1 + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.RestrictionsOnHQLevel' + PlayerHQMainArray['Main', 'HQLevel']);",
              "",
              "    //Задаём сет для фильтрации типов оборудования при переборе",
              "    if(PlayerHQMainArray['Main', 'HQLevel'] < 3) tdwd1 = 1+2; //Двигатели и баки",
              "    else if(PlayerHQMainArray['Main', 'HQLevel'] < 4) tdwd1 = 1+2+4+8; //Двигатели, баки, радары и сканеры",
              "    else tdwd1 = 1+2+4+8+16+32+64; //Всё, кроме оружия",
              "}",
              "else tdwd1 = 1+2+4+8+16+32+64+128+256+512+1024+2048+4096+8192+16384+32768+65536+131072+262144+524288+1048576+2097152+4194304+8388608+16777216+33554432; //Любое оборудование и оружие",
              "",
              "//Составляем список подходящих для апгрейда \"Эксдюралити\" вещей",
              "ArrayClear(tarr1);",
              "//GAnswerData задаётся либо в блоке выше, либо после вызова диалога PlayerHQScienceRelImpChooseShip",
              "for(i = 1; i < ShipItems(GAnswerData); i = i + 1)",
              "{",
              "    cur_item = ShipItems(GAnswerData, i);",
              "",
              "    tint1 = ItemType(cur_item);",
              "    if(tint1 < t_FuelTanks || tint1 > t_CustomWeapon) continue;",
              "",
              "    if(EqCustomFaction(cur_item) == 'Klissan') continue;",
              "",
              "    tint2 = EqSpecial(cur_item);",
              "    if(~tint2)",
              "    {",
              "        tstr2 = BonusNumInCfg(tint2);",
              "        //Пропуск акриновых предметов с пометкой \"не улучшаемый\"",
              "        if(CT('MicroModuls.' + tstr2 + '.BlockImp')) continue;",
              "        //Исключаем скриптовые предметы (нет)",
              "        //if(ItemInScript(cur_item) == 1)",
              "        //{",
              "        //    //Но оставляем в списке предметы с особым параметром в акрине",
              "        //    if(!CT('MicroModuls.' + tstr2 + '.ScriptItemIgnore')) continue;",
              "        //}",
              "    }",
              "    //else if(ItemInScript(cur_item) == 1) continue;",
              "",
              "    if(ItemExtraSpecials(cur_item))",
              "    {",
              "        check = 0;",
              "        for(j = 0; j < ItemExtraSpecials(cur_item); j = j + 1)",
              "        {",
              "            tint2 = ItemExtraSpecials(cur_item, j);",
              "            //Если данный апгрейд на предмете уже установлен",
              "            if(BonusNumInCfg(tint2) == 'ShuMercsHQ_Exdurality')",
              "            {",
              "                check = 1;",
              "                break;",
              "            }",
              "        }",
              "",
              "        if(check) continue;",
              "    }",
              "",
              "    //Проверяем пригодность предмета к улучшению по заранее заданному сету",
              "    tint1 = tint1 - t_FuelTanks;",
              "    if(!(tdwd1 & (1 << tint1))) continue;",
              "",
              "    ArrayAdd(tarr1, cur_item);",
              "}",
              "",
              "//Проверка на случай, если подходящих для улучшения вещей на корабле игрока нет",
              "if(ArrayDim(tarr1) < 2)",
              "{",
              "    tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveNoItems');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerReliabilityImproveNoItems');",
              "}",
              "else",
              "{",
              "    tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveEnd');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerReliabilityImproveNo');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  607,
          "#":  608,
          "Total.Lines":  9,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Составляем список ответов игрока для выбора конкретной вещи для наложения \"Эксдюралити\"",
              "for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    cur_item = tarr1[i];",
              "",
              "    tstr1 = Format(Name(cur_item), '<color=255,167,84>', '<color=255,125,0>', '');",
              "    if(ItemIsInUse(cur_item)) tstr1 = tstr1 + ' ' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ItemIsInUse');",
              "    InjectAnswer('PlayerHQScienceRelImp', tstr1, cur_item);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  610,
          "#":  611,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_item = GAnswerData;",
              "cost = round(1.25 * (ItemCost(cur_item) / 2));",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveCost'),",
              "                               '<EqName'+'>', DeleteTags(ItemFullName(cur_item)),",
              "                               '<Cost'+'>', cost,",
              "                               '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance'])",
              "                           );",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerReliabilityImproveYesOrgBalance');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerReliabilityImproveYesOwnMoney');",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerReliabilityImproveOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -80,
          "Parent":  609,
          "#":  612,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.Greeting');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  614,
          "#":  620,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  615,
          "#":  621,
          "Total.Lines":  22,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Устанавливаем \"Эксдюралити\"",
              "ItemExtraSpecialsAddByType(cur_item, FindBonusByNameInCfg('ShuMercsHQ_Exdurality'));",
              "//Накладываем модификатор стоимости отсюда, т.к. на спецакринах он не работает",
              "ItemCost(cur_item, round(0.01 * CT('MicroModuls.ShuMercsHQ_Exdurality.Cost') * ItemCost(cur_item)));",
              "//Удаляем улучшение \"Набор деталей из фрагилиума\" из мода ExpArts, если оно установлено на данном предмете",
              "tint1 = FindBonusByNameInCfg('ExpArts_FragiliumParts');",
              "if(ItemExtraSpecials(cur_item))",
              "{",
              "    for(i = 0; i < ItemExtraSpecials(cur_item); i = i + 1)",
              "    {",
              "        tint2 = ItemExtraSpecials(cur_item, i);",
              "        //Если нашли на предмете ExpArts_FragiliumParts",
              "        if(tint2 == tint1)",
              "        {",
              "            ItemExtraSpecialsDeleteByType(cur_item, tint1, ItemExtraSpecialsCountByType(cur_item, tint1));",
              "        }",
              "    }",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveDone'), '<EqName'+'>', Name(cur_item));",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  616,
          "#":  622,
          "Total.Lines":  23,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Устанавливаем \"Эксдюралити\"",
              "ItemExtraSpecialsAddByType(cur_item, FindBonusByNameInCfg('ShuMercsHQ_Exdurality'));",
              "//Накладываем модификатор стоимости отсюда, т.к. на спецакринах он не работает",
              "ItemCost(cur_item, round(0.01 * CT('MicroModuls.ShuMercsHQ_Exdurality.Cost') * ItemCost(cur_item)));",
              "//Удаляем улучшение \"Набор деталей из фрагилиума\" из мода ExpArts, если оно установлено на данном предмете",
              "tint1 = FindBonusByNameInCfg('ExpArts_FragiliumParts');",
              "if(ItemExtraSpecials(cur_item))",
              "{",
              "    for(i = 0; i < ItemExtraSpecials(cur_item); i = i + 1)",
              "    {",
              "        tint2 = ItemExtraSpecials(cur_item, i);",
              "        //Если нашли на предмете ExpArts_FragiliumParts",
              "        if(tint2 == tint1)",
              "        {",
              "            ItemExtraSpecialsDeleteByType(cur_item, tint1, ItemExtraSpecialsCountByType(cur_item, tint1));",
              "        }",
              "    }",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveDone'), '<EqName'+'>', Name(cur_item));",
              "PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "PlayerHQMainArray['Finance', 'StatsOutExpenses'] = PlayerHQMainArray['Finance', 'StatsOutExpenses'] + cost;",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  629,
          "#":  630,
          "Total.Lines":  47,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!PlayerHQMainArray['Main', 'HQMedicineDialog'])",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.GreetingIntro');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerIntroOut');",
              "",
              "    PlayerHQMainArray['Main', 'HQMedicineDialog'] = 1;",
              "    tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.Greeting');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerAskMedExamination');",
              "    if(ShipFindCustomShipInfoByType(Player(), 'ShuMercsHQ_ExpirinStimulant') == -1)",
              "    {",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerAskUniqueStimulant');",
              "        tint2 = 1;",
              "    }",
              "    //Нельзя вколоть \"Экспирин\", если он в данный момент уже используется",
              "    else",
              "    {",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerAskUniqueStimulantAlreadyUsed');",
              "        tint2 = 0;",
              "    }",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerOut');",
              "",
              "    //Считаем текущее число стимуляторов в организме игрока",
              "    check = 0;",
              "    for(i = 13; i <= 24; i = i + 1)",
              "    {",
              "        if(ShipHealthFactor(Player(), i))",
              "        {",
              "            check = check + 1;",
              "        }",
              "    }",
              "    //В том числе считаем \"Экспирин\"",
              "    if(~ShipFindCustomShipInfoByType(Player(), 'ShuMercsHQ_ExpirinStimulant'))",
              "    {",
              "        check = check + 1;",
              "    }",
              "",
              "    //Вычисляем шанс, с которым на игрока может быть наложена наркозависимость каждый ход",
              "    check = check - (ShipSpecialBonuses(Player(), bonStimCapacity) - CT('Script.Mod_ShuMercs.PlayerMercsParams.ExpirinStimulantSlots')) - ArtefactTypeInUse(Player(), t_ArtBio);",
              "    check = 0.4 * sqr(max(0, check));",
              "",
              "    tstr6 = ''; //Маркер, что игрок будет запрашивать медосомтр в первый раз, а не после излечения какой-то болезни",
              "    tint1 = 1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  633,
          "#":  634,
          "Total.Lines":  30,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если с момента прошлого приёма \"Экспирина\" ещё не прошло достаточно времени",
              "if(PlayerHQMainArray['Medicine', 'UniqueStimulantLastIntake'] + 365 > CurTurn())",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.UniqueStimulantTooEarly');",
              "    tint1 = 0;",
              "}",
              "//Если игрок уже и так перегружен стимуляторами (на \"Экспирин\" расходуется сразу 2 \"слота\" под стимуляторы)",
              "//(если шанс схватить наркозависимость каждый ход составляет более 4%)",
              "else if(check > 4)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.UniqueStimulantTooMuchStimulants');",
              "    tint1 = 0;",
              "}",
              "//Если никаких противопоказаний нет",
              "else",
              "{",
              "    cost = round(0.45 * GalaxyMoney(4, 4));",
              "    tint3 = CT('Illness.Stimulant.Expirin.ExpBonPercent');",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.UniqueStimulantStats'),",
              "                                   '<Percent'+'>', tint3,",
              "                                   '<Duration'+'>', int(CT('Illness.Stimulant.Expirin.Duration')),",
              "                                   '<Cost'+'>', cost,",
              "                                   '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance'])",
              "                               );",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerUniqueStimulantYesOrgBalance');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerUniqueStimulantYesOwnMoney');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerUniqueStimulantNo');",
              "",
              "    tint1 = 1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  636,
          "#":  635,
          "Total.Lines":  54,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ищем активные болезни у игрока (кроме лучевой болезни и наркомании),",
              "//и если что-нибудь нашли, то добавляем реплику с лечением",
              "check = 0;",
              "tstr2 = '</color>';",
              "for(i = 1; i <= 12; i = i + 1)",
              "{",
              "    if(ShipHealthFactorStatus(Player(), i) > 50 && i != 6)",
              "    {",
              "        //Составляем список обнаруженных болезней",
              "        check = check + 1;",
              "        if(check > 1) tstr2 = tstr2 + \"<br>\";",
              "        tstr2 = tstr2 + check + '. <color=0,50,200>' + CT('Illness.Illness.' + (i - 1) + '.Name') + '</color>';",
              "    }",
              "}",
              "",
              "if(check)",
              "{",
              "    if(GetGameOptions('FontDialog') == '0') tstr5 = '</color>' + '-----------------------------------------------------------';",
              "    else if(GetGameOptions('FontDialog') == '1') tstr5 = '</color>' + '------------------------------------------';",
              "    else if(GetGameOptions('FontDialog') == '2') tstr5 = '</color>' + '-------------------------------------------';",
              "    else /*if(GetGameOptions('FontDialog') == '3')*/ tstr5 = '</color>' + '--------------------------------------';",
              "",
              "    //Маркер, что игрок запросил медосомтр в первый раз (с момента захода в медблок), а не после излечения какой-то болезни",
              "    if(tstr6 == '')",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.MedExaminationTrue'),",
              "        '<SplitLine'+'>', tstr5,",
              "        '<DiseasesList'+'>', tstr2",
              "        );",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatDonePart'),",
              "        '<SplitLine'+'>', tstr5,",
              "        '<DiseasesList'+'>', tstr2,",
              "        '<Disease'+'>', tstr6",
              "        );",
              "        tstr6 = '';",
              "    }",
              "",
              "    tint1 = 1;",
              "}",
              "else",
              "{",
              "    //Маркер, что игрок запросил медосомтр в первый раз (с момента захода в медблок), а не после излечения какой-то болезни",
              "    if(tstr6 == '') tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.MedExaminationFalse');",
              "    else",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatDoneAll'), '<Disease'+'>', tstr6);",
              "        tstr6 = '';",
              "    }",
              "",
              "    tint1 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  646,
          "#":  653,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.UniqueStimulantNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -170,
          "Parent":  654,
          "#":  655,
          "Total.Lines":  15,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerAskMedExamination');",
              "if(ShipFindCustomShipInfoByType(Player(), 'ShuMercsHQ_ExpirinStimulant') == -1)",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerAskUniqueStimulant');",
              "    tint2 = 1;",
              "}",
              "//Нельзя вколоть \"Экспирин\", если он в данный момент уже используется",
              "else",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerAskUniqueStimulantAlreadyUsed');",
              "    tint2 = 0;",
              "}",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerOut');",
              "",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  639,
          "#":  657,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.GreetingOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  645,
          "#":  660,
          "Total.Lines":  29,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str bons_str = '';",
              "CT('Illness.Stimulant.Expirin', tarr1);",
              "for(int i = 0; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    if(GetVariableName(tarr1[i]) == 'AddBonuses')",
              "    {",
              "        for(int j = ArrayDim(tarr1['AddBonuses']) - 1; j >= 0; j = j - 1)",
              "        {",
              "            str bon_str = GetVariableName(tarr1['AddBonuses', j]);",
              "            bons_str = bons_str + bon_str + '=' + tarr1['AddBonuses', j];",
              "            if(j) bons_str = bons_str + ',';",
              "",
              "            int bon = GetValueFromScript('', bon_str);",
              "            ShipSpecialBonuses(Player(), bon, ShipSpecialBonuses(Player(), bon) + tarr1['AddBonuses', j]);",
              "        }",
              "",
              "        break;",
              "    }",
              "}",
              "",
              "int percent = CT('Illness.Stimulant.Expirin.ExpBonPercent');",
              "tstr1 = Format(CT('Illness.Stimulant.Expirin.Text'), '<Percent'+'>', percent, '255,240,100');",
              "ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_ExpirinStimulant', tstr1, CurTurn() + (30 * CT('Illness.Stimulant.Expirin.Duration')), tint2, GetShipExpByType(Player(), 0), bons_str, '0.' + percent, tstr1);",
              "PlayerHQMainArray['Medicine', 'UniqueStimulantLastIntake'] = CurTurn();",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.UniqueStimulantYes');",
              "PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "PlayerHQMainArray['Finance', 'StatsOutExpenses'] = PlayerHQMainArray['Finance', 'StatsOutExpenses'] + cost;",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  651,
          "#":  661,
          "Total.Lines":  28,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str bons_str = '';",
              "CT('Illness.Stimulant.Expirin', tarr1);",
              "for(int i = 0; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    if(GetVariableName(tarr1[i]) == 'AddBonuses')",
              "    {",
              "        for(int j = ArrayDim(tarr1['AddBonuses']) - 1; j >= 0; j = j - 1)",
              "        {",
              "            str bon_str = GetVariableName(tarr1['AddBonuses', j]);",
              "            bons_str = bons_str + bon_str + '=' + tarr1['AddBonuses', j];",
              "            if(j) bons_str = bons_str + ',';",
              "",
              "            int bon = GetValueFromScript('', bon_str);",
              "            ShipSpecialBonuses(Player(), bon, ShipSpecialBonuses(Player(), bon) + tarr1['AddBonuses', j]);",
              "        }",
              "",
              "        break;",
              "    }",
              "}",
              "",
              "int percent = CT('Illness.Stimulant.Expirin.ExpBonPercent');",
              "tstr1 = Format(CT('Illness.Stimulant.Expirin.Text'), '<Percent'+'>', percent, '255,240,100');",
              "ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_ExpirinStimulant', tstr1, CurTurn() + (30 * CT('Illness.Stimulant.Expirin.Duration')), tint2, GetShipExpByType(Player(), 0), bons_str, '0.' + percent, tstr1);",
              "PlayerHQMainArray['Medicine', 'UniqueStimulantLastIntake'] = CurTurn();",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.UniqueStimulantYes');",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  663,
          "#":  664,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Составляем список болезней в ответах с выбором варианта лечения",
              "check = 0;",
              "for(i = 1; i <= 12; i = i + 1)",
              "{",
              "    if(ShipHealthFactorStatus(Player(), i) > 50 && i != 6)",
              "    {",
              "        InjectAnswer('PlayerHQMedicineTreat', Format(CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatDisease'), '<Disease' + '>', CT('Illness.Illness.' + (i - 1) + '.Name')), i);",
              "        check = check + 1;",
              "    }",
              "}",
              "//Добавляем предложение полного излечения сразу всех болезней и вирусов",
              "if(check > 1)",
              "{",
              "    InjectAnswer('PlayerHQMedicineTreat', CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatAll'), -1);",
              "}",
              "",
              "//Реплики для возможности отказа игрока от лечения",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatNo');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.PlayerTreatNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  665,
          "#":  666,
          "Total.Lines":  49,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = GAnswerData;",
              "",
              "//Если игрок решил лечить какую-то конкретную болезнь",
              "if(~tint1)",
              "{",
              "    ShipHealthFactor(Player(), tint1, 0);",
              "    //Имеется шанс, что болезнь не вылечат полностью и вирус останется",
              "    if(RndObject(1, 100, cur_ruin) <= 87 || tint1 <= 3 || (tint1 >= 6 && tint1 <= 8)) ShipHealthFactorStatus(Player(), tint1, 0);",
              "    else ShipHealthFactorStatus(Player(), tint1, RndObject(1, 15, cur_ruin));",
              "    //После лечения повышаем иммунитет игрока",
              "    PlayerImmunity(PlayerImmunity() + 20);",
              "    check = check - 1;",
              "",
              "    //Если после излечения данной болезни, у игрока остались какие-то другие болезни и/или вирусы",
              "    if(check)",
              "    {",
              "        tstr6 = CT('Illness.Illness.' + (tint1 - 1) + '.Name');",
              "        tint1 = 1;",
              "    }",
              "    //Если было излечено уже всё",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatDoneAll');",
              "        tstr6 = '';",
              "    }",
              "}",
              "//Если игрок решил лечить всё",
              "else",
              "{",
              "    for(i = 1; i <= 12; i = i + 1)",
              "    {",
              "        if(ShipHealthFactorStatus(Player(), i) > 50 && i != 6)",
              "        {",
              "            ShipHealthFactor(Player(), i, 0);",
              "            if(RndObject(1, 100, cur_ruin) <= 66 || i <= 3 || (tint1 >= 6 && tint1 <= 8)) ShipHealthFactorStatus(Player(), i, 0);",
              "            //Имеется шанс, что болезнь не вылечат полностью",
              "            else ShipHealthFactorStatus(Player(), i, RndObject(1, 15, cur_ruin));",
              "        }",
              "    }",
              "",
              "    //После лечения повышаем иммунитет игрока (по +20 за каждую излеченную болезнь)",
              "    PlayerImmunity(PlayerImmunity() + 20 * check);",
              "",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMedicineDialog.TreatDoneAll');",
              "    tstr6 = '';",
              "    check = 0;",
              "}",
              "",
              "Sound('Sound.Repair');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  675,
          "#":  676,
          "Total.Lines":  16,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!PlayerHQMainArray['Main', 'HQArmoryDialog'])",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQArmoryDialog.GreetingIntro');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQArmoryDialog.PlayerIntroOut');",
              "",
              "    PlayerHQMainArray['Main', 'HQArmoryDialog'] = 1;",
              "    tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQArmoryDialog.Greeting');",
              "    if(PlayerHQMainArray['Science', 'GluonGunsDeveloped']) tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerHQArmoryDialog.GreetingGluonGuns');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQArmoryDialog.PlayerOut');",
              "",
              "    tint1 = 1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  670,
          "#":  680,
          "Total.Lines":  181,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!PlayerHQMainArray['Main', 'HQShipyardDialog'])",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.GreetingIntro');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerIntroOut');",
              "",
              "    PlayerHQMainArray['Main', 'HQShipyardDialog'] = 1;",
              "    tint1 = -1;",
              "}",
              "else",
              "{",
              "    //Если в данный момент не запущено производство корабля/транклюкатора",
              "    if(PlayerHQMainArray['Shipyard', 'ShipInProduction'] == '')",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.Greeting'),",
              "                                       '<CoalitionReputation'+'>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%',",
              "                                       '<PiratesReputation'+'>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerAskForConstruction');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerOut');",
              "",
              "        //Если репутация у обеих сторон менее 25%, то ничего построить нельзя (пока убрал это ограничение)",
              "        check = max(PlayerHQMainArray['Main', 'CoalitionReputation'], PlayerHQMainArray['Main', 'PirateClanReputation']);",
              "        if(check >= 0) tint1 = 1;",
              "        else tint1 = 0;",
              "    }",
              "    //Если производство корабля/транклюкатора уже в процессе",
              "    else",
              "    {",
              "        tstr1 = CT(PlayerHQMainArray['Shipyard', 'ShipInProduction'] + 'Name');",
              "        if(GetParFromString(PlayerHQMainArray['Shipyard', 'ShipInProduction'], '.', ParsCountFromString(PlayerHQMainArray['Shipyard', 'ShipInProduction'], '.') - 2, 0) == 'Tranclucator') tstr1 = lowercase(tstr1);",
              "",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.GreetingInProcess'),",
              "                                       '<CoalitionReputation'+'>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%',",
              "                                       '<PiratesReputation'+'>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%',",
              "                                       '<ShipName'+'>', tstr1,",
              "                                       '<DaysLeft'+'>', PlayerHQMainArray['Shipyard', 'ShipInProductionTime'] - CurTurn());",
              "        tstr2 = Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerAskForConstructionInProcess'), '<Days'+'>', PlayerHQMainArray['Shipyard', 'ShipInProductionTime'] - CurTurn(), '');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerAskForConstruction');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerOut');",
              "",
              "        tint1 = 0;",
              "    }",
              "}",
              "",
              "if(tint1)",
              "{",
              "    if(GetGameOptions('FontDialog') == '0') tstr5 = '-----------------------------------------------------------';",
              "    else if(GetGameOptions('FontDialog') == '1') tstr5 = '------------------------------------------';",
              "    else if(GetGameOptions('FontDialog') == '2') tstr5 = '-------------------------------------------';",
              "    else tstr5 = '--------------------------------------';",
              "",
              "    tstr4 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.ProjectsList'), '<BreakLine'+'>', tstr5, '<CurrentBalance'+'>', '<color=0,50,200>' + int(PlayerHQMainArray['Finance', 'CurrentBalance']) + '</color>', '');",
              "",
              "    ArrayClear(tarr1);",
              "    ArrayDelete(tarr1, 0);",
              "    str descriptions = '';",
              "",
              "    for(j = 0; j <= 2; j = j + 1)",
              "    {",
              "        if(!j) str add_path = '';",
              "        else if(j == 1) add_path = '.Coalition';",
              "        else add_path = '.PirateClan';",
              "",
              "        int cnt = CT('Script.Mod_ShuMercsHQ.PlayerHQShipyardProjects' + add_path, tarr2);",
              "        if(cnt)",
              "        {",
              "            for(i = 0; i < cnt; i = i + 1)",
              "            {",
              "                str block_path = GetVariableName(tarr2[i]);",
              "                if(block_path == 'Coalition' || block_path == 'PirateClan' || block_path == 'Special') continue;",
              "                block_path = 'Script.Mod_ShuMercsHQ.PlayerHQShipyardProjects' + add_path + '.' + block_path + '.';",
              "",
              "                //Делаем проверку на возможность повторной или очередной постройки кораблей из данного блока",
              "                int next = 1;",
              "                int repeat = CT(block_path + 'LimitedProduction'); //При нулевом или отсутствующем маркере лимита на количество построек нет",
              "                if(repeat)",
              "                {",
              "                    if(~findsubstr(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], block_path))",
              "                    {",
              "                        for(int t = 0; t < ParsCountFromString(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], ','); t = t + 1)",
              "                        {",
              "                            str ships_str = GetParFromString(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], ',', t, 0);",
              "                            if(GetParFromString(ships_str, '/', 0, 0) == block_path)",
              "                            {",
              "                                //Сколько раз за игру был построен данный корабль",
              "                                if(int(GetParFromString(ships_str, '/', 1, 0)) >= repeat) next = 0;",
              "                                break;",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "                if(!next) continue;",
              "",
              "                //Делаем проверку на наличие в списке построенных кораблей тех, что препятствуют возможности постройки данного корабля",
              "                ships_str = CT(block_path + 'ExcludingShips');",
              "                if(ships_str != '')",
              "                {",
              "                    for(t = 0; t < ParsCountFromString(ships_str, ','); t = t + 1)",
              "                    {",
              "                        if(~findsubstr(PlayerHQMainArray['Shipyard', 'ShipsBuilt'], GetParFromString(ships_str, ',', t, 1)))",
              "                        {",
              "                            next = 0;",
              "                            break;",
              "                        }",
              "                    }",
              "                }",
              "                if(!next) continue;",
              "",
              "                unknown t_arr = newarray(1);",
              "                ArrayDelete(t_arr, 0);",
              "                ArrayAdd(t_arr, CT(block_path + 'Name'), 'Name');",
              "                //Начинаем заполнять массив со всей необходимой информацией о каждом проекте из списка",
              "                ArrayAdd(tarr1, t_arr, block_path);",
              "                ArrayAdd(tarr1[block_path], j, 'Owner');",
              "",
              "                if(!j) int rep_to_check = check;",
              "                else if(j == 1) rep_to_check = PlayerHQMainArray['Main', 'CoalitionReputation'];",
              "                else rep_to_check = PlayerHQMainArray['Main', 'PirateClanReputation'];",
              "",
              "                //Проверка наличия необходимой репутации",
              "                str req_rep_str = CT(block_path + 'RequiredReputation');",
              "                ArrayAdd(tarr1[block_path], int(req_rep_str), 'RequiredReputation');",
              "                if(rep_to_check >= req_rep_str) req_rep_str = '' + round(0.1 * req_rep_str) + '%';",
              "                else req_rep_str = '<color=255,0,0>' + round(0.1 * req_rep_str) + '%' + '</color>';",
              "                //Проверка наличия необходимой суммы на счету игрока или организации",
              "                str cost_str = CT(block_path + 'Cost');",
              "                if(int(cost_str) == -1) cost_str = ExecuteCodeFromString(GenerateCodeStringFromBlock(block_path + 'CostCalc'), 'result_cost');",
              "                ArrayAdd(tarr1[block_path], int(cost_str), 'Cost');",
              "                if(ShipMoney(Player()) < cost_str && PlayerHQMainArray['Finance', 'CurrentBalance'] < cost_str) cost_str = '<color=255,0,0>' + cost_str + '</color>';",
              "",
              "                descriptions = descriptions + \"<br>\" + tstr5 + \"<br>\" + Format(CT(block_path + 'Description'),",
              "                                             '<RequiredReputation'+'>', req_rep_str,",
              "                                             '<Cost'+'>', cost_str,",
              "                                             '<ProductionTime'+'>', CT(block_path + 'ProductionTime')",
              "                                             '<OrganisationName'+'>', PlayerHQMainArray['Main', 'OrganisationName']);",
              "                ArrayAdd(tarr1[block_path], int(CT(block_path + 'ProductionTime')), 'ProductionTime');",
              "            }",
              "        }",
              "    }",
              "",
              "    //Добавляем в список особый проект боевого крейсера организации, если штаб уже был прокачан до 6-го уровня",
              "    if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 1)",
              "    {",
              "        block_path = 'Script.Mod_ShuMercsHQ.PlayerHQShipyardProjects.Special.PlayerOrgCruiser.';",
              "        t_arr = newarray(1);",
              "        ArrayDelete(t_arr, 0);",
              "        ArrayAdd(t_arr, CT(block_path + 'Name'), 'Name');",
              "        //Начинаем заполнять массив со всей необходимой информацией о каждом проекте из списка",
              "        ArrayAdd(tarr1, t_arr, block_path);",
              "        ArrayAdd(tarr1[block_path], 0, 'Owner');",
              "        ArrayAdd(tarr1[block_path], 0, 'RequiredReputation');",
              "        int cost = GalaxyMoney(4, 4) * 25;",
              "        ArrayAdd(tarr1[block_path], cost, 'Cost'); //Цену считаем прям здесь же",
              "        ArrayAdd(tarr1[block_path], int(CT(block_path + 'ProductionTime')), 'ProductionTime');",
              "",
              "        descriptions = descriptions + \"<br>\" + tstr5 + \"<br>\" + Format(CT(block_path + 'Description'),",
              "                                     //'<RequiredReputation'+'>', req_rep_str,",
              "                                     '<Cost'+'>', cost,",
              "                                     '<ProductionTime'+'>', CT(block_path + 'ProductionTime')",
              "                                     '<OrganisationName'+'>', PlayerHQMainArray['Main', 'OrganisationName']);",
              "    }",
              "",
              "    tstr4 = Format(tstr4, '<ProjectsList'+'>', descriptions, '');",
              "",
              "    if(!ArrayDim(tarr1))",
              "    {",
              "        ArrayAdd(tarr1, 0); //Если ни одного проекта в списке датника не оказалось (что, в принципе, баг), предотвращаем возможный краш зачищенного до нуля массива",
              "        tint1 = 0;",
              "",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.GreetingNoProjects');",
              "    }",
              "}",
              "",
              "//Дополнительные реплики на случай выбора игроком определённых действий с крейсером",
              "if(tstr1 == 'CruiserSoldCanceled')",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.CruiserSoldCanceled');",
              "}",
              "else if(tstr1 == 'CruiserSolded')",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.CruiserSolded'), '<Cost'+'>', GAnswerData);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  684,
          "#":  685,
          "Total.Lines":  48,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Код, для нормальной работы приказов форсажа, получаемых транком игрока из мода EvoTranc",
              "int info = ShipFindCustomShipInfoByType(CurShip, 'TrancModAddInfo');",
              "if(~info)",
              "{",
              "    //Заставляем транка не вырубать форсаж до тех пор, пока у него не сдохнет двигло или не истечёт срок приказа",
              "    if(ShipCustomShipInfoTextData(CurShip, info, 3) == 'turn') //Проверка, что код должен сработать именно перед концом хода",
              "    {",
              "        //Время действия приказа на форсаж истекло",
              "        if(!ShipCustomShipInfoData(CurShip, info, 3))",
              "        {",
              "            ShipCustomShipInfoData(CurShip, info, 3, 0);",
              "            OrderForsage(CurShip, 0);",
              "            ShipCustomShipInfoTextData(CurShip, info, 3, '');",
              "        }",
              "        //Приказ форсажа должен работать до тех пор, пока его не прикажет отключить сам игрок",
              "        //Либо пока не закончится ресурс двигателя",
              "        else if(ShipCustomShipInfoData(CurShip, info, 3) == -1)",
              "        {",
              "            if(ItemDurability(ShipEqInSlot(CurShip, t_Engine)) > 1)",
              "            {",
              "                OrderForsage(CurShip, 1);",
              "                ShipCustomShipInfoTextData(CurShip, info, 3, '');",
              "            }",
              "            else",
              "            {",
              "                ShipCustomShipInfoData(CurShip, info, 3, 0);",
              "                OrderForsage(CurShip, 0);",
              "                ShipCustomShipInfoTextData(CurShip, info, 3, '');",
              "            }",
              "        }",
              "        //Приказ форсажа был установлен на определённый срок, и этот срок ещё не истёк",
              "        else",
              "        {",
              "            if(ItemDurability(ShipEqInSlot(CurShip, t_Engine)) > 1)",
              "            {",
              "                ShipCustomShipInfoData(CurShip, info, 3, ShipCustomShipInfoData(CurShip, info, 3) - 1);",
              "                OrderForsage(CurShip, 1);",
              "                ShipCustomShipInfoTextData(CurShip, info, 3, '');",
              "            }",
              "            else",
              "            {",
              "                ShipCustomShipInfoData(CurShip, info, 3, 0);",
              "                OrderForsage(CurShip, 0);",
              "                ShipCustomShipInfoTextData(CurShip, info, 3, '');",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  686,
          "#":  687,
          "Total.Lines":  204,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!PlayerHQMainArray['Main', 'HQImproveDialog'])",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQImproveDialog.GreetingIntro');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQImproveDialog.PlayerIntroOut');",
              "",
              "    PlayerHQMainArray['Main', 'HQImproveDialog'] = 1;",
              "    tint1 = 1;",
              "}",
              "else",
              "{",
              "    //Игрок выбрал опцию изменения обвеса штаба",
              "    if(!GAnswerData)",
              "    {",
              "        FormChange('Ship', cur_ruin);",
              "        tint1 = 0;",
              "    }",
              "    //Игрок выбрал опцию увеличения уровня штаба (вызывается из мода ExpHullsBases)",
              "    else",
              "    {",
              "        //Если игрок не отказался платить при вызове подтверждения",
              "        PlayerHQMainArray['Main', 'HQLevel'] = PlayerHQMainArray['Main', 'HQLevel'] + 1;",
              "",
              "        if(PlayerHQMainArray['Main', 'HQLevel'] == 2)",
              "        {",
              "            PlayerHQMainArray['Science', 'ScientificDepartment'] = 1;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxFree'] == PlayerHQMainArray['Mercs', 'MaxFree'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxFree'] = 10;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = 10;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxFree'] = 10;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] == PlayerHQMainArray['Mercs', 'MaxAtReady'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxAtReady'] = 5;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = 5;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxAtReady'] = 5;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] == PlayerHQMainArray['Mercs', 'MaxReserve'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxReserve'] = 15;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = 15;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxReserve'] = 15;",
              "",
              "            ShipType(cur_ruin, 'PlayerMercHQ_licensed');",
              "            if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1) Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel2');",
              "            else Chameleon(cur_ruin, 'Ruins.PlayerMercHQLevel2');",
              "        }",
              "        else if(PlayerHQMainArray['Main', 'HQLevel'] == 3)",
              "        {",
              "            PlayerHQMainArray['Medicine', 'MedicalDepartment'] = 1;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxFree'] == PlayerHQMainArray['Mercs', 'MaxFree'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxFree'] = 12;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = 12;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxFree'] = 12;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] == PlayerHQMainArray['Mercs', 'MaxAtReady'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxAtReady'] = 6;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = 6;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxAtReady'] = 6;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] == PlayerHQMainArray['Mercs', 'MaxReserve'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxReserve'] = 20;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = 20;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxReserve'] = 20;",
              "",
              "            if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1) Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel3');",
              "            else Chameleon(cur_ruin, 'Ruins.PlayerMercHQLevel3');",
              "        }",
              "        else if(PlayerHQMainArray['Main', 'HQLevel'] == 4)",
              "        {",
              "            PlayerHQMainArray['Armory', 'ArmoryWorkshop'] = 1;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxFree'] == PlayerHQMainArray['Mercs', 'MaxFree'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxFree'] = 14;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = 14;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxFree'] = 14;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] == PlayerHQMainArray['Mercs', 'MaxAtReady'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxAtReady'] = 7;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = 7;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxAtReady'] = 7;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] == PlayerHQMainArray['Mercs', 'MaxReserve'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxReserve'] = 25;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = 25;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxReserve'] = 25;",
              "",
              "            //Заводим таймер до вывода предложения о начале квеста на изобретение новых пушек",
              "            if(!PlayerHQMainArray['Science', 'GluonGunsDeveloped'] && ~PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'])",
              "            {",
              "                PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 1;",
              "                PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + RndObject(14, 28, cur_ruin);",
              "            }",
              "",
              "            if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1) Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel4');",
              "            else Chameleon(cur_ruin, 'Ruins.PlayerMercHQLevel4');",
              "        }",
              "        else if(PlayerHQMainArray['Main', 'HQLevel'] == 5)",
              "        {",
              "            PlayerHQMainArray['Shipyard', 'ProductionShipyard'] = 1;",
              "            PlayerHQMainArray['Shipyard', 'CapitalShipDock'] = 1;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxFree'] == PlayerHQMainArray['Mercs', 'MaxFree'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxFree'] = 18;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = 18;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxFree'] = 18;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] == PlayerHQMainArray['Mercs', 'MaxAtReady'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxAtReady'] = 9;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = 9;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxAtReady'] = 9;",
              "",
              "            if(PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] == PlayerHQMainArray['Mercs', 'MaxReserve'])",
              "            {",
              "                PlayerHQMainArray['Mercs', 'MaxReserve'] = 35;",
              "                PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = 35;",
              "            }",
              "            else PlayerHQMainArray['Mercs', 'MaxReserve'] = 35;",
              "",
              "            //Ещё 200 ед. структуры накидываются акрином, что считается дебафом,",
              "            //поскольку особый корпус в среднем должен иметь 1500 ед. структуры",
              "            tdwd1 = CreateHull(0, 1000, GalaxyTechLevel(), People, -1);",
              "            SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_PlayerMercSpecialHull'), tdwd1);",
              "            EqCustomFaction(tdwd1, 'SubFactionPlayerMercsFixedStanding');",
              "            AddItemToStorage(cur_ruin, tdwd1);",
              "",
              "            //Производим замену корпусов для наёмников из ударной группы (только если те сейчас находятся в штабе)",
              "            if(GroupIn(PlayerMercsStrike, cur_ruin))",
              "            {",
              "                for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "                {",
              "                    dword ship = GroupShip(PlayerMercsStrike, i);",
              "                    dword hull = ShipItems(ship, 0);",
              "                    int hull_check = 0;",
              "",
              "                    int counter = ItemExtraSpecials(hull);",
              "                    if(!counter) hull_check = 0;",
              "                    else for(j = 0; j < counter; j = j + 1)",
              "                    {",
              "                        if(BonusNumInCfg(ItemExtraSpecials(hull, j)) == 'ShuMercsHQ_StrikeMercOwnItemMark') break;",
              "                        if(j == counter - 1) hull_check = 0;",
              "                    }",
              "",
              "                    if(hull_check) //Если игрок не менял данному наёмнику корпус лично",
              "                    {",
              "                        NoDropItem(hull, 0);",
              "                        if(BonusNumInCfg(EqSpecial(hull)) != 'ShuMercsHQ_PlayerMercSpecialHull')",
              "                        {",
              "                            SpecialToEquipment(-1, hull); //Снимаем возможные модификаторы стоимости и размера",
              "                            SpecialToEquipment(FindBonusByNameInCfg('ShuMercsHQ_PlayerMercSpecialHull'), hull);",
              "                            EqCustomFaction(hull, 'SubFactionPlayerMercsFixedStanding');",
              "                            Chameleon(ship);",
              "                        }",
              "",
              "                        //Также проводим небольшую реэкипировку",
              "                        ShipRefit(ship);",
              "                        ShipRefit(ship);",
              "                        hull = ShipItems(ship, 0); //В процессе реэкипировки бот мог заменить свой корпус",
              "                        HullSeries(hull, -1);",
              "                        NoDropItem(hull, 1);",
              "                    }",
              "                }",
              "            }",
              "",
              "            if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1) Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel5');",
              "            else Chameleon(cur_ruin, 'Ruins.PlayerMercHQLevel5');",
              "        }",
              "        /*",
              "        else //if(PlayerHQMainArray['Main', 'HQLevel'] == 6)",
              "        {",
              "            if(PlayerHQMainArray['Science', 'PortalGenerator'] == 1) Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel6');",
              "            else Chameleon(cur_ruin, 'Ruins.PlayerMercHQLevel6');",
              "        }",
              "        */",
              "",
              "        GotoGov(0);",
              "        tint1 = 0;",
              "        //Полностью рестартим диалоги",
              "        DAnswer('main');",
              "        //А это здесь на всякий случай, т.к. срабатывание может вести себя непредсказуемо",
              "        exit;",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  691,
          "#":  692,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskMercs');",
              "InjectAnswer('PlayerHQMercsDialog', tstr1, 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  695,
          "#":  696,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Формируем список наёмников на реэкипировку",
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "    tstr1 = CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class' + substr(GetData(0, cur_ship), 0, 1) + '.' + substr(GetData(0, cur_ship), 1) + '.NameInGenitive');",
              "    InjectAnswer('PlayerHQStrikeRefit', Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerToRefit'), '<Name'+'>', tstr1), i);//Format(ShipName(cur_ship), PlayerHQMainArray['Main', 'OrganisationName'] + ' ', '', '')), i);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  697,
          "#":  698,
          "Total.Lines":  15,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ship = GroupShip(PlayerMercsStrike, GAnswerData);",
              "FormChange('Ship', cur_ship);",
              "",
              "//Если игрок довёл наёмника до перегруза (так-то они сами выгружают лишнее после реэкипировки)",
              "ShipCalcParam(cur_ship);",
              "if(ShipFreeSpace(cur_ship) < 0)",
              "{",
              "    //Если для данного наёмника прописаны отдельные уникальные реплики, то выбираем из них - иначе из общих",
              "    phrases_path = 'Script.Mod_ShuMercs.PlayerMercsStrikeGroup.CandidatesList.Class' + substr(GetData(0, cur_ship), 0, 1) + '.' + substr(GetData(0, cur_ship), 1) + '.PersonalPhrases';",
              "    if(BlockExist(phrases_path)) MessageBox(CT(phrases_path + '.IAmOverloadedBoss'), 10);",
              "    else MessageBox(CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.IAmOverloadedBoss'), 10);",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.RefitDone'), '<MercName'+'>', substr(ShipName(cur_ship), count(PlayerHQMainArray['Main', 'OrganisationName']) + 1));",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  702,
          "#":  703,
          "Total.Lines":  8,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskStrikeGroup');",
              "//Если группа ещё не вернулась в штаб",
              "if(GroupCount(PlayerMercsStrike) && !GroupIn(PlayerMercsStrike, GroupToShip(PlayerHQ)))",
              "{",
              "    tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskStrikeGroupOut');",
              "    AddDialogBlock(tstr1, 1);",
              "}",
              "InjectAnswer('PlayerHQStrikeDialog', tstr1, 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  705,
          "#":  704,
          "Total.Lines":  36,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroup');",
              "//Проверяем, доступна ли ударная группа игрока (и существует ли в принципе)",
              "cur_ruin = GroupToShip(PlayerHQ);",
              "tint1 = 0; //Маркер участия крейсера в вылете ударной группы (нужен будет в коде ниже)",
              "check = 1;",
              "if(GroupCount(PlayerMercsStrike))",
              "{",
              "    for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "    {",
              "        cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "        //Если хоть один корабль из состава группы ещё не вернулся в штаб",
              "        if(GetShipRuins(cur_ship) != cur_ruin || StateIs(cur_ship, 'MovingOutState'))",
              "        {",
              "            check = 0;",
              "            tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupOut');",
              "            break;",
              "        }",
              "        //Если наёмник вернулся с вылета, и сейчас выполняет \"заправку и ремонт\"",
              "        else",
              "        {",
              "            //Данные скриптового корабля имеют тип dword, поэтому перед проверкой сперва конвертируем их в int",
              "            if(int(GetData(2, cur_ship)) < 0)",
              "            {",
              "                check = 0;",
              "                tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupRefuel');",
              "                break;",
              "            }",
              "        }",
              "    }",
              "}",
              "else",
              "{",
              "    check = 0;",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerAskGroupNoGroup');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -160,
          "Parent":  322,
          "#":  706,
          "Total.Lines":  25,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = GroupCount(PlayerMercsStrike);",
              "",
              "if(tint1 < PlayerHQMainArray['Mercs', 'MaxStrike'] && PlayerHQMainArray['Mercs', 'StrikeCandidatesList'] != ',,')",
              "{",
              "    tint2 = 1;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHire');",
              "}",
              "else if(tint1 >= PlayerHQMainArray['Mercs', 'MaxStrike'])",
              "{",
              "    tint2 = 0;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHireMax');",
              "}",
              "else",
              "{",
              "    tint2 = 0;",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskHireNoMoreCandidates');",
              "}",
              "",
              "if(tint1)",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskRefit');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskFire');",
              "    tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerAskDisband');",
              "}",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQStrikeDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  708,
          "#":  709,
          "Total.Lines":  34,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str new_limit;",
              "if(!PlayerHQMainArray['Shipyard', 'ProductionShipyard']) new_limit = NumberBox('Bm.Items.2Hull_PlayerMercGaal_s', CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxFree'), 0, PlayerHQMainArray['Mercs', 'MaxFree'], PlayerHQMainArray['Mercs', 'MaxFree'], '', PlayerHQMainArray['Mercs', 'CurrentMaxFree']);",
              "else new_limit = NumberBox('Bm.Items.2Hull_PlayerMercSpecial_s', CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxFree'), 0, PlayerHQMainArray['Mercs', 'MaxFree'], PlayerHQMainArray['Mercs', 'MaxFree'], '', PlayerHQMainArray['Mercs', 'CurrentMaxFree']);",
              "if(new_limit != 'Cancel')",
              "{",
              "    int limit = new_limit;",
              "",
              "    //Отправляем самых \"юных\" из \"гулящих\" наёмников обратно в штаб",
              "    if(GroupCount(PlayerMercsFree) > limit)",
              "    {",
              "        for(int i = GroupCount(PlayerMercsFree) - 1; i >= 0; i = i - 1)",
              "        {",
              "            dword merc = GroupShip(PlayerMercsFree, i);",
              "            SetData(-1, 3, merc); //Маркер о срочном возврате, который не принесёт организации денег",
              "",
              "            if(i == limit) break;",
              "        }",
              "    }",
              "    //else if(GroupCount(PlayerMercsFree) < limit)",
              "    //{",
              "    //}",
              "",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxFree'] = limit;",
              "    if(limit == PlayerHQMainArray['Mercs', 'MaxFree']) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxFreeDoneMax');",
              "    else if(limit) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxFreeDone'), '<NewLimit'+'>', limit);",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxFreeDoneNone');",
              "",
              "    tint1 = 2;",
              "}",
              "else",
              "{",
              "    tint3 = tint1;",
              "    tint1 = -1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -70,
          "Parent":  513,
          "#":  710,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ruin = GroupToShip(PlayerHQ);",
              "",
              "tint3 = GroupCount(PlayerMercsFree) + GroupCount(PlayerMercsDefenders) + GroupCount(QuestMercs);",
              "tint4 = PlayerHQMainArray['Mercs', 'MaxFree'] + PlayerHQMainArray['Mercs', 'MaxStrike'] + PlayerHQMainArray['Mercs', 'CurrentAtReady'] + PlayerHQMainArray['Mercs', 'MaxReserve']; //Максимальный лимит числа наёмников на базе",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskRecruitment');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskQuantity');",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskChangeMaxFree');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskChangeMaxAtReady');",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerAskChangeMaxReserve');",
              "tstr7 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -60,
          "Parent":  452,
          "#":  712,
          "Total.Lines":  15,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = (PlayerHQMainArray['Quests', 'PrivateQuestAppear'] <= CurTurn());",
              "tdwd2 = (PlayerHQMainArray['Quests', 'CoalitionQuestAppear'] <= CurTurn());",
              "tdwd3 = (PlayerHQMainArray['Quests', 'PirateClanQuestAppear'] <= CurTurn());",
              "",
              "if( ActiveQuestHQ ||",
              "    GroupCount(QuestMercs) ||",
              "    PlayerHQMainArray['Quests', 'MercsRestingAfterQuest'] > CurTurn() ||",
              "    (!tdwd1 && !tdwd2 && !tdwd3) ||",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] < PlayerHQMainArray['Mercs', 'MaxAtReady'] / 2 )",
              "{",
              "    //\"Вырубаем\" возможную доступность всех квестов для добавления блоков на инжекты (происходит ниже)",
              "    tdwd1 = 0;",
              "    tdwd2 = 0;",
              "    tdwd3 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  714,
          "#":  715,
          "Total.Lines":  27,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str new_limit;",
              "if(!PlayerHQMainArray['Shipyard', 'ProductionShipyard']) new_limit = NumberBox('Bm.Items.2Hull_PlayerMercMaloc_s', CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxAtReady'), 0, PlayerHQMainArray['Mercs', 'MaxAtReady'], PlayerHQMainArray['Mercs', 'MaxAtReady'], '', PlayerHQMainArray['Mercs', 'CurrentMaxAtReady']);",
              "else new_limit = NumberBox('Bm.Items.2Hull_PlayerMercSpecial_s', CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxAtReady'), 0, PlayerHQMainArray['Mercs', 'MaxAtReady'], PlayerHQMainArray['Mercs', 'MaxAtReady'], '', PlayerHQMainArray['Mercs', 'CurrentMaxAtReady']);",
              "if(new_limit != 'Cancel')",
              "{",
              "    int limit = new_limit;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] = limit;",
              "    if(limit == PlayerHQMainArray['Mercs', 'MaxAtReady']) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxAtReadyDoneMax');",
              "    else if(limit) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxAtReadyDone'), '<NewLimit'+'>', limit);",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxAtReadyDoneNone');",
              "",
              "    int overflow = PlayerHQMainArray['Mercs', 'CurrentMaxAtReady'] - PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    //Если новый лимит наёмников меньше их текущего числа, то сдаём снаряжение лишних на склад и переводим их в резерв",
              "    if(overflow < 0)",
              "    {",
              "        PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] = PlayerHQMainArray['Mercs', 'MercsEquipAtStock'] + abs(overflow);",
              "        PlayerHQMainArray['Mercs', 'CurrentReserve'] = min(PlayerHQMainArray['Mercs', 'CurrentReserve'] + abs(overflow), PlayerHQMainArray['Mercs', 'CurrentMaxReserve']);",
              "    }",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = min(PlayerHQMainArray['Mercs', 'CurrentAtReady'], PlayerHQMainArray['Mercs', 'CurrentMaxAtReady']);",
              "",
              "    tint1 = 2;",
              "}",
              "else",
              "{",
              "    tint3 = tint1;",
              "    tint1 = -1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  720,
          "#":  721,
          "Total.Lines":  18,
          "Code.Type":  "Turn",
          "Code":          
          [
              "str new_limit = NumberBox('Bm.Icons.ReserveMerc', CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxReserve'), 0, PlayerHQMainArray['Mercs', 'MaxReserve'], PlayerHQMainArray['Mercs', 'MaxReserve'], '', PlayerHQMainArray['Mercs', 'CurrentMaxReserve']);",
              "if(new_limit != 'Cancel')",
              "{",
              "    tint3 = new_limit;",
              "    PlayerHQMainArray['Mercs', 'CurrentMaxReserve'] = tint3;",
              "    if(tint3 == PlayerHQMainArray['Mercs', 'MaxReserve']) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxReserveDoneMax');",
              "    else if(tint3) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxReserveDone'), '<NewLimit' + '>', tint3);",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMercsDialog.ChangeMaxReserveDoneNone');",
              "",
              "    PlayerHQMainArray['Mercs', 'CurrentReserve'] = min(PlayerHQMainArray['Mercs', 'CurrentReserve'], PlayerHQMainArray['Mercs', 'CurrentMaxReserve']);",
              "",
              "    tint1 = 2;",
              "}",
              "else",
              "{",
              "    tint3 = tint1;",
              "    tint1 = -1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  724,
          "#":  725,
          "Total.Lines":  6,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ship = IdToShip(PlayerHQMainArray['Quests', 'GluonGunsQuestScienceBaseId']);",
              "tstr1 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestIntro'), '<SB'+'>', ShipName(cur_ship), '<Star'+'>', Name(ShipStar(cur_ship)));",
              "tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestAcceptedPlayer');",
              "tstr3 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNeedToThinkPlayer');",
              "",
              "PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 3;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  730,
          "#":  731,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNeedToThink');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  729,
          "#":  733,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestAccepted'), '<SB'+'>', ShipName(cur_ship), '<Star'+'>', Name(ShipStar(cur_ship)));",
              "",
              "//Добавляем уведомление задания",
              "str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "text = text + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteInProcess1'), '<SB'+'>', ShipName(cur_ship), '<Star'+'>', Name(ShipStar(cur_ship)), '255,240,100');",
              "CustomEther('QuestInProcess_PlayerMercsOrg', 3, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', text, cur_ship);",
              "",
              "//Начинаем первый этап квеста",
              "ShipOwner(cur_ship, People); //Типа профессор всегда человек",
              "PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 4;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  736,
          "#":  738,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBegin1');",
              "tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBeginPlayer2');",
              "tstr3 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBegin2');",
              "tstr4 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBeginPlayer3');",
              "tstr5 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBegin3'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName']);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  737,
          "#":  739,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBeginTwice');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  750,
          "#":  745,
          "Total.Lines":  9,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Расшифровка сета в PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet']:",
              "//1 - диалог уже вызывался ранее, второй раз вступление проиграно не будет;",
              "//2 - игрок провёл неудачную попытку \"убеждения\";",
              "//4 - игрок провёл неудачную попытку \"запугивания\";",
              "",
              "tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBasePersuasionPlayer');",
              "tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseThreatPlayer');",
              "tstr3 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBribePlayer');",
              "tstr4 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseReturnPlayer');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  744,
          "#":  750,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] = PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] + 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  754,
          "#":  761,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "int persuasion = PersuasionCalc(0, cur_ruin, ShipOwner(cur_ruin));",
              "//Если попытка убеждения успешна",
              "if(Rnd(1, 100, sqr(Id(cur_ruin) + 333)) <= persuasion)",
              "{",
              "    tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBasePersuasionSuccess');",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 5;",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + 7;",
              "",
              "    //Обновляем уведомление задания",
              "    tstr2 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr2 = tstr2 + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "    tstr2 = tstr2 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteInProcess2');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', tstr2, cur_ruin);",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBasePersuasionFailed');",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] = PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] + 2;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  756,
          "#":  762,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "int threat = ThreatCalc(0, cur_ruin, ShipOwner(cur_ruin));",
              "//Если попытка запугивания успешна",
              "if(Rnd(1, 100, sqr(Id(cur_ruin) + 666)) <= threat)",
              "{",
              "    tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseThreatSuccess');",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 5;",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + 7;",
              "",
              "    //Обновляем уведомление задания",
              "    tstr2 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr2 = tstr2 + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "    tstr2 = tstr2 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteInProcess2');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', tstr2, cur_ruin);",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseThreatFailed');",
              "    PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] = PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] + 4;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  758,
          "#":  763,
          "Total.Lines":  8,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cost = max(500000, 15 * GalaxyMoney(4, 4));",
              "if((PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 2)) cost = round(1.5 * cost); //Если \"убеждение\" было провалено",
              "if((PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 4)) cost = round(2.0 * cost); //Если \"запугивание\" было провалено",
              "",
              "tstr1 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBribe'), '<Cost'+'>', cost);",
              "tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBribeYesPlayer');",
              "tstr3 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBribeNeedToThinkPlayer');",
              "tstr4 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBribeNeedToThink');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  764,
          "#":  770,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.ScienceBaseBribeYes');",
              "PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = 5;",
              "PlayerHQMainArray['Quests', 'GluonGunsQuestTimer'] = CurTurn() + 7;",
              "",
              "//Обновляем уведомление задания",
              "tstr2 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "tstr2 = tstr2 + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteTitle');",
              "tstr2 = tstr2 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.QuestNoteInProcess2');",
              "CustomEther('QuestInProcess_PlayerMercsOrg', 3, 'Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention', tstr2, cur_ruin);",
              "",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  779,
          "#":  780,
          "Total.Lines":  14,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.NewGunsDone');",
              "tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.NewGunsDonePlayer');",
              "",
              "dword new_gun = CreateGluonGun(cur_ruin, 1, 1);",
              "SetName(new_gun, CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.GluonEmitterPrototype'));",
              "AddItemToStorage(cur_ruin, new_gun);",
              "new_gun = CreateGluonGun(cur_ruin, 2, 1);",
              "SetName(new_gun, CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.GluonTormentorPrototype'));",
              "AddItemToStorage(cur_ruin, new_gun);",
              "new_gun = CreateGluonGun(cur_ruin, 3, 1);",
              "SetName(new_gun, CT('Quest.ShuMercs.QuestsHQ.Special.GluonGunsInvention.GluonTorpedoLauncherPrototype'));",
              "AddItemToStorage(cur_ruin, new_gun);",
              "",
              "PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] = -1; //Квест успешно завершён, повторное прохождение в этой партии не потребуется"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  782,
          "#":  783,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "FormChange('Ship');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  784,
          "#":  786,
          "Total.Lines":  22,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрока собираются посадить/расстрелять за провал запугивания, сбежать не выйдет",
              "if(check <= 4)",
              "{",
              "    if(!(status & 32))",
              "    {",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatFail');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatFailP');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureFail');",
              "        tstr2 = '</color>' + CT(dialog_path + 'PlanetGovCoalThreatNotSureFailP');",
              "    }",
              "}",
              "else",
              "{",
              "    //if(!(status & 32))",
              "    //{",
              "    tstr1 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatFail');",
              "    tstr2 = '</color>' + CT(dialog_path + 'PlanetGovPirThreatDead');",
              "    //}",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  789,
          "#":  790,
          "Total.Lines":  69,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Отправляем данного наёмника следовать за игроком",
              "SetData(0, 1, cur_ship);",
              "ChangeState('StrikeFollowState', cur_ship);",
              "",
              "//Если в ударной группе ещё остались наёмники, не следующие за игроком",
              "int check = 0;",
              "if(GroupCount(PlayerMercsStrike) > 1)",
              "{",
              "    for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "    {",
              "        cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "        if(!ShipInNormalSpace(cur_ship)) continue;",
              "        if(ShipStar(cur_ship) != ShipStar(Player())) continue;",
              "        if(StateIs(cur_ship, 'StrikeFollowState')) continue;",
              "",
              "        check = 1;",
              "        break;",
              "    }",
              "",
              "    //А также крейсер, если он находится в составе ударной группы",
              "    if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "    {",
              "        cur_ship = GroupToShip(CruisersDefenders);",
              "        if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "        {",
              "            if(ShipInNormalSpace(cur_ship))",
              "            {",
              "                if(ShipStar(cur_ship) == ShipStar(Player()))",
              "                {",
              "                    if(!StateIs(cur_ship, 'StrikeFollowState')) check = 1;",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "if(check)",
              "{",
              "    tint1 = 1;",
              "",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.IsItGroupOrderStrike');",
              "        tstr2 = '</color>' + CT(phrases_path + '.PlayerYesItsForGroupStrike');",
              "        tstr3 = '</color>' + CT(phrases_path + '.PlayerNoItsPersonalStrike');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.IsItGroupOrderStrike');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerYesItsForGroupStrike');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.PlayerNoItsPersonalStrike');",
              "    }",
              "}",
              "else",
              "{",
              "    tint1 = 0;",
              "",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.FollowOne');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsStrikeGroup.FollowOne');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  795,
          "#":  796,
          "Total.Lines":  28,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Отправляем всех наёмников ударной группы следовать за игроком",
              "for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "    if(!ShipInNormalSpace(cur_ship)) continue;",
              "    if(ShipStar(cur_ship) != ShipStar(Player())) continue;",
              "",
              "    SetData(0, 1, cur_ship);",
              "    ChangeState('StrikeFollowState', cur_ship);",
              "}",
              "",
              "//А также крейсер, если он находится в составе ударной группы",
              "if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "{",
              "    cur_ship = GroupToShip(CruisersDefenders);",
              "    if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "    {",
              "        if(ShipInNormalSpace(cur_ship))",
              "        {",
              "            if(ShipStar(cur_ship) == ShipStar(Player()))",
              "            {",
              "                SetData(0, 1, cur_ship);",
              "                ChangeState('StrikeFollowState', cur_ship);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  797,
          "#":  798,
          "Total.Lines":  200,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword cur_star = ShipStar(CurShip);",
              "dword HQ = GroupToShip(PlayerHQ);",
              "",
              "//Если штаб был уничтожен, делаем наёмника игрока фрилансером",
              "if(!HQ || Hit(CurShip, 0))",
              "{",
              "    //Наёмник уходит из организации, поскольку на него совершил нападение игрок",
              "    if(HQ)",
              "    {",
              "        if(!GroupCount(PlayerMercsStrike))",
              "        {",
              "            CustomEther('PlayerMercsOrg', 0, '', CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupWasQuit'));",
              "            PlayerHQMainArray['Mercs', 'StrikeGroupIsAlive'] = 0;",
              "        }",
              "    }",
              "",
              "    dword cur_merc = CurShip;",
              "    if(Hit(cur_merc, 0)) Dialog(cur_merc);",
              "    else FreePlayerMerc(cur_merc);",
              "",
              "    exit;",
              "}",
              "",
              "//Это нужно, чтобы тупорылые боты не требовали с цели деньги за отстать",
              "if(ShipFindCustomShipInfoByType(CurShip, 'ShuMercsHQ_MercTalksBlock') == -1)",
              "{",
              "    ShipAddCustomShipInfo(CurShip, 'ShuMercsHQ_MercTalksBlock');",
              "}",
              "",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Не трогаем корабль, пока тот находится в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Сбрасываем агрессию в отношении своих коллег и охраняемых ими кораблей",
              "dword target = ShipGetBad(CurShip);",
              "if(target)",
              "{",
              "    if(ShipType(target) == 'PlayerMerc' || target == Player())",
              "    {",
              "        int no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока поссорился не с теми ребятами",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "    else if(~ShipFindCustomShipInfoByType(target, 'ShuMercsHQ_GuardedShip'))",
              "    {",
              "        no_tar = NoTargetToShip(target);",
              "        //Вся эта херобория помогает избежать ситуации, когда наемник пытается поочередно напасть сразу на две цели рядом, в результате зацикливая логику",
              "        NoTargetToShip(target, 4);",
              "        TruceBetweenShips(CurShip, target);",
              "        NoTargetToShip(target, no_tar);",
              "        //Если наниматель наёмника игрока напал на охраняемый транспорт",
              "        target = ShipIsPartner(CurShip);",
              "        if(target) ShipSetPartner(CurShip, 0, 0);",
              "    }",
              "}",
              "",
              "//Если время вылета ударной группы истекло",
              "if(GetData(2) <= CurTurn())",
              "{",
              "    for(int i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "    {",
              "        cur_ship = GroupShip(PlayerMercsStrike, i);",
              "",
              "        ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_MercTalksBlock');",
              "        NoTalkToShip(cur_ship, 0);",
              "        OrderLock(cur_ship, 1);",
              "        ChangeState('ReturningStrikeState', cur_ship);",
              "    }",
              "",
              "    //А также крейсер, если он находится в составе ударной группы",
              "    if(PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2)",
              "    {",
              "        cur_ship = GroupToShip(CruisersDefenders);",
              "        if(StateIs(cur_ship, 'MovingOutState', 'StrikeAttackState', 'StrikeFollowState', 'StrikeAtEasyState', 'ReturningStrikeState'))",
              "        {",
              "            ShipDeleteCustomShipInfo(cur_ship, 'ShuMercsHQ_MercTalksBlock');",
              "            NoTalkToShip(cur_ship, 0);",
              "            OrderLock(cur_ship, 1);",
              "            //У крейсера стейт возвращения на базу будет другим",
              "            //ChangeState('ReturningBaseState', cur_ship);",
              "            //Или нет, хз",
              "            ChangeState('ReturningStrikeState', cur_ship);",
              "        }",
              "    }",
              "",
              "    if(GroupCount(PlayerMercsStrike)) CustomEther('PlayerMercsOrg', 0, '', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupReturning'), '<Star'+'>', Name(cur_star), '255,240,100'));",
              "    //На случай, если из всей ударной группы уцелел только крейсер",
              "    else CustomEther('PlayerMercsOrg', 0, '', Format(CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.StrikeGroupReturningOnlyCruiser'), '<Star'+'>', Name(cur_star), '255,240,100'));",
              "",
              "    exit;",
              "}",
              "",
              "//Вынуждаем наёмника самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip, 1);",
              "OrderLock(CurShip, 1);",
              "",
              "dword player_star = ShipStar(Player());",
              "if(player_star != cur_star)",
              "{",
              "    OrderJump(CurShip, player_star);",
              "    exit;",
              "}",
              "",
              "//Если ранее наёмник совершил посадку вслед за игроком, то в этом месте он будет получать приказ на взлёт",
              "if(!ShipInNormalSpace(CurShip))",
              "{",
              "    if(ShipInNormalSpace(Player()))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "}",
              "",
              "//Производим \"полевой ремонт\" орудий, чтобы наёмник не мог превратиться в совсем уж \"тыкву\"",
              "for(i = 1; i <= ShipCntWeapon(CurShip); i = i + 1)",
              "{",
              "    dword gun = ShipWeapon(CurShip, i);",
              "    if(ItemDurability(gun) < 15) ItemDurability(CurShip, 15);",
              "}",
              "",
              "//Ищем в системе любые враждебные игроку цели, выбираем ближайшую, и атакуем",
              "int closest_dist = 500000;",
              "target = 0;",
              "for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "{",
              "    dword ship = StarShips(cur_star, i);",
              "",
              "    if(ShipInCurScript(ship))",
              "    {",
              "        if(ShipGroup(ship) == RandomAttackers) continue;",
              "    }",
              "",
              "    if(IsPlayer(ship)) continue; //Но не игрока (если вдруг игрок долбоёб, и напал сам на себя)",
              "    if(ShipInHyperSpace(ship, 1)) continue;",
              "    if(ObjectType(ship) != 4 && ObjectType(ship) != 5) continue;",
              "    if(RelationToShip(ship, Player()) < 10)",
              "    {",
              "        if(!ShipInScript(ship, 0))",
              "        {",
              "            ShipJoin(RandomAttackers, ship);",
              "            //Через 10 дней этот корабль автоматически удалится из группы",
              "            SetData(CurTurn() + 10, 0, ship);",
              "        }",
              "",
              "        int dist = Dist(CurShip, ship);",
              "        if(dist < closest_dist)",
              "        {",
              "            //Если ближайший корабль не засел на планете/станции,",
              "            //либо если других враждебных кораблей в системе не осталось",
              "            if(ShipInNormalSpace(ship) || !target)",
              "            {",
              "                closest_dist = dist;",
              "                target = ship;",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Если нашли подходящую цель, то выставляем её в качестве врага для наёмника,",
              "//по которому тот будет, как бы между делом, постреливать",
              "if(target)",
              "{",
              "    ShipSetBad(CurShip, target);",
              "    //Это здесь нужно, чтобы также добавлять в группу рандомно нападающих всяких левых мудаков (пираты)",
              "    if(!ShipInScript(target, 0))",
              "    {",
              "        ShipJoin(RandomAttackers, target);",
              "        //Через 10 дней этот корабль автоматически удалится из группы",
              "        SetData(CurTurn() + 10, 0, target);",
              "    }",
              "}",
              "",
              "//Прыгаем вслед за игроком в другую систему, если он уже достиг точки прыжка",
              "if(ShipOrder(Player()) == 3)",
              "{",
              "    if(ShipTurnBeforeEndOrder(Player()) == 1)",
              "    {",
              "        OrderJump(CurShip, ShipOrderObj(Player()));",
              "        exit;",
              "    }",
              "}",
              "",
              "if(ShipInNormalSpace(Player()))",
              "{",
              "    OrderFollowShip(CurShip, Player(), 0);",
              "}",
              "else",
              "{",
              "    dword player_planet = GetShipPlanet(Player());",
              "    if(!player_planet) player_planet = GetShipRuins(Player());",
              "",
              "    OrderLanding(CurShip, player_planet);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  802,
          "#":  804,
          "Total.Lines":  58,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ищем всех других наёмников с выставленным приказом атаки в системе",
              "ArrayClear(tarr1);",
              "for(i = 0; i < StarShips(cur_star); i = i + 1)",
              "{",
              "    tdwd2 = StarShips(cur_star, i);",
              "",
              "    if(tdwd2 == cur_ship) continue;",
              "    if(!ShipInNormalSpace(tdwd2)) continue;",
              "    if(ShipType(tdwd2) != 'PlayerMerc') continue;",
              "    if(!StateIs(tdwd2, 'OrderAttackState')) continue;",
              "    if(GetData(1, tdwd2) != GetData(1, cur_ship)) continue; //Атаковать они должны ту же самую цель",
              "",
              "    ArrayAdd(tarr1, tdwd2);",
              "}",
              "",
              "SetData(0, 1, cur_ship); //Обнуляем указатель цели",
              "",
              "OrderLock(cur_ship, 0);",
              "OrderNone(cur_ship);",
              "ShipFreeFlight(cur_ship);",
              "",
              "if(ShipGroup(cur_ship) == PlayerMercsFree)",
              "{",
              "    ChangeState('FreeEarningState', cur_ship);",
              "}",
              "else //if(ShipGroup(cur_ship) == PlayerMercsDefenders || ShipGroup(cur_ship) == PlayerMercsStrike)",
              "{",
              "    ChangeState('DefendingStarState', cur_ship);",
              "}",
              "",
              "if(ArrayDim(tarr1) > 1)",
              "{",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.IsItGroupOrder');",
              "        tstr2 = '</color>' + CT(phrases_path + '.PlayerYesItsForGroup');",
              "        tstr3 = '</color>' + CT(phrases_path + '.PlayerNoItsPersonal');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.IsItGroupOrder');",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerYesItsForGroup');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.PlayerNoItsPersonal');",
              "    }",
              "}",
              "else",
              "{",
              "    if(phrases_path != '')",
              "    {",
              "        tstr1 = '</color>' + CT(phrases_path + '.AtEasyRogerRoger');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerMercsTalks.AtEasyRogerRoger');",
              "        tstr3 = '</color>' + CT('Talk.Exit');",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  807,
          "#":  809,
          "Total.Lines":  20,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Сбрасываем приказы у всех наёмников в системе, атакующих указанную цель",
              "for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    cur_ship = tarr1[i];",
              "",
              "    SetData(0, 1, cur_ship); //Обнуляем указатель цели",
              "",
              "    OrderLock(cur_ship, 0);",
              "    OrderNone(cur_ship);",
              "    ShipFreeFlight(cur_ship);",
              "",
              "    if(ShipGroup(cur_ship) == PlayerMercsFree)",
              "    {",
              "        ChangeState('FreeEarningState', cur_ship);",
              "    }",
              "    else //if(ShipGroup(cur_ship) == PlayerMercsDefenders || ShipGroup(cur_ship) == PlayerMercsStrike)",
              "    {",
              "        ChangeState('DefendingStarState', cur_ship);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  812,
          "#":  813,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!check) //Маркер отказал ли игрок в первый раз, выставляется в 0 из стейткода",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAskAutographFirst');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAutographAgreedFirst');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAutographRefusedFirst');",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAskAutographSecond');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAutographAgreedSecond');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAutographRefusedSecond');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  817,
          "#":  819,
          "Total.Lines":  36,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если игрок согласился сразу",
              "if(!check)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAskAutographFirstDone');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAutographAgreedFirstDone');",
              "}",
              "//Если игрок согласился только на повторную просьбу",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAskAutographSecondDone');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAutographAgreedSecondDone');",
              "}",
              "",
              "//Дропаем планшет и запускаем таймер ожидания у Ципцилота",
              "cur_item = CreateQuestItem('ShuMercsHQ_HoloTablet', Peleng);",
              "ItemSize(cur_item, 1);",
              "LinkItemToScript(cur_item, HoloTablet);",
              "ItemOnActCode(cur_item, GenerateCodeStringFromBlock('UselessItems.ShuMercsHQ_HoloTablet.OnScriptActCode'));",
              "ScriptItemData(cur_item, 1, CurTurn() + 7);",
              "//Выбрасываем планшет в сторону игрока",
              "float angle = pi * (-Angle(cur_ship, Player())) / 180;",
              "int dist_to = min(Dist(cur_ship, Player()) / 2, 200);",
              "int dest_coord_X = round(sin(angle) * dist_to) + CoordX(cur_ship);",
              "int dest_coord_Y = round(cos(angle) * dist_to) + CoordY(cur_ship);",
              "DropItemInSystem(ShipStar(cur_ship), cur_item, CoordX(cur_ship), CoordY(cur_ship), dest_coord_X, dest_coord_Y);",
              "",
              "//Чтобы игрок не дёргал Ципцилота до подбора предмета",
              "NoTalkToShip(cur_ship, 1);",
              "",
              "//Ципцилот ожидает",
              "SetData(0, 0, cur_ship);",
              "SetData(0, 2, cur_ship);",
              "ChangeState('TziptzilotFlyAwayState', cur_ship);",
              "",
              "//AddItemToShip(cur_ship, cur_item);",
              "//DropItem(cur_ship, cur_item);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -80,
          "Parent":  820,
          "#":  822,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок отказал Ципцилоту на первую просьбу",
              "check = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  821,
          "#":  823,
          "Total.Lines":  25,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок отказал Ципцилоту и на вторую просьбу",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAskAutographSecondRefused');",
              "//Конец связи",
              "tstr2 = '</color>' + CT('Talk.Exit');",
              "",
              "//Ципцилот отправляется в дальнюю систему",
              "SetData(3, 0, cur_ship);",
              "SetData(Id(StarPlanets(StarNearbyStars(ShipStar(cur_ship), 65), 0)) * 2, 2, cur_ship);",
              "ChangeState('TziptzilotFlyAwayState', cur_ship);",
              "//Спавним транков-коллекторов и отправляем их типа в погоню за Ципцилотом",
              "for(i = 1; i <= 2; i = i + 1) ExecuteCodeFromString(GenerateCodeStringFromBlock('UselessItems.ShuMercsHQ_HoloTablet.SpawnTrancCollector'), 'tranc_num', i, 'cur_state', 'TrancsFlyAwayState');",
              "for(i = 0; i < 2; i = i + 1)",
              "{",
              "    tdwd1 = GroupShip(TrancsCollectors, i);",
              "    SetData(Id(StarNearbyStars(ShipStar(cur_ship), 65)) - 1, 0, tdwd1);",
              "    SetData(Id(cur_ship), 1, tdwd1);",
              "    SetData(0, 2, tdwd1);",
              "    ShipSetBad(tdwd1, cur_ship);",
              "}",
              "",
              "//Квест провален (нет)",
              "//BuildOwnBase_Condition = -BuildOwnBase_Condition;",
              "//Будет перезапущен спустя некоторое время (2-4 года)",
              "BuildOwnBase_ConditionCooldown = CurTurn() + RndObject(730, 1460, cur_ship);",
              "BuildOwnBase_Condition = 0;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  830,
          "#":  831,
          "Total.Lines":  207,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//BuildOwnBase_Condition == < 0 - игрок тем или иным образом провалил квест, повторить больше не получится (значение равно этапу квеста, на котором он был провален, но со знаком минус)",
              "//BuildOwnBase_Condition ==   0 - квест на получение доступа к строительству штаба ещё не запускался",
              "//BuildOwnBase_Condition ==   1 - квест был запущен, появился Ципцилот и транки, Ципцилоту выдан приказ на взлёт с планеты, на которой сидит игрок",
              "//BuildOwnBase_Condition ==   2 - игрок подобрал планшет, натравливаем на него транков и ждём развязки",
              "//BuildOwnBase_Condition ==   3 - игрок уже поговорил с одним из транков в первый раз",
              "//BuildOwnBase_Condition ==   4 - игрок разрешил конфликт с транками тем или иным путём, с ЦН вылетает Ципцилот (если игрок находится в системе с ЦН) для финального диалога",
              "//BuildOwnBase_Condition ==   5 - по результату диалога с игроком Ципцилот либо нападает (квест сразу провален), либо отправляется в ЦН",
              "//BuildOwnBase_Condition ==   6 - Ципцилот добрался до ЦН после финального диалога, квест успешно завершён",
              "",
              "//Тёрнкод запуска и выполнения задания на получение доступа к строительству штаба",
              "//BuildOwnBase_Condition = 0; //Для отладки",
              "if(!BuildOwnBase_Condition) //Может быть меньше нуля",
              "{",
              "    //Если в первый раз игрок отказал Ципцилоту, то квест будет перезапущен спустя некоторое время (2-4 года)",
              "    if(BuildOwnBase_ConditionCooldown <= CurTurn())",
              "    {",
              "        //Если игрок взлетает",
              "        if(ShipIsTakeoff(Player()))",
              "        {",
              "            //Если не выставлен маркер на гиперпереход в другую систему после взлёта",
              "            if(!ShipDestination(Player()))",
              "            {",
              "                cur_star = ShipStar(Player());",
              "                if(StarOwner(cur_star) != 1 && StarCustomFaction(cur_star) == '')",
              "                {",
              "                    if(!StarBattle(cur_star))",
              "                    {",
              "                        if(!ShipNearbyShips(Player(), -1, 0, 1, '', '')) //Если в системе точно нет доминаторов или других явно враждебных кораблей",
              "                        {",
              "                            //Если центр наёмников ещё существует",
              "                            tint1 = MercOrganisationsData['MercCenterId']; //GetValueFromScript('Mod_ShuMercs', 'MercCenterId');",
              "                            if(tint1)",
              "                            {",
              "                                cur_ruin = IdToShip(tint1);",
              "                                if(cur_ruin)//StarRuins(cur_star, 'MB'))",
              "                                {",
              "                                    tdwd1 = GetShipPlanet(Player());",
              "                                    if(!tdwd1) tdwd1 = GetShipRuins(Player());",
              "                                    //Если игрок не взлетает с ЦН",
              "                                    if(tdwd1 != cur_ruin)",
              "                                    {",
              "                                        //Если планета/станция откуда взлетает игрок, не настроена к нему враждебно",
              "                                        if(RelationToShip(tdwd1, Player()) > 9)",
              "                                        {",
              "                                            //Если игрок попал в список выдающихся рейнджеров",
              "                                            if(",
              "                                                RangerStatus(Player(), 'EminentWarrior') ||",
              "                                                RangerStatus(Player(), 'EminentTrader')  ||",
              "                                                RangerStatus(Player(), 'EminentPirate')  ||",
              "                                                RangerPlaceInRating(Player()) == 1",
              "                                              )",
              "                                            {",
              "                                                if(ShipRadarRange(Player()) >= 650)",
              "                                                {",
              "                                                    if(ShipHookPower(Player()) >= 1)",
              "                                                    {",
              "                                                        MercCenterId = tint1; //ЦН необходим для выполнения квеста",
              "                                                        cur_planet = PlanetPirateClan(); //Для спавна Ципцилота",
              "                                                        tint1 = PlanetRace(cur_planet);",
              "                                                        tint2 = PlanetOwner(cur_planet);",
              "                                                        PlanetRace(cur_planet, Peleng);",
              "                                                        PlanetOwner(cur_planet, Peleng);",
              "",
              "                                                        //Спавним Ципцилота, он взлетает вслед за игроком",
              "                                                        cur_ship = BuyRanger(cur_planet, 1000);",
              "",
              "                                                        SetName(cur_ship, CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.BlasterTziptzilotName'));",
              "                                                        //Данный тип здесь, чтобы скрыть приставку к имени",
              "                                                        ShipType(cur_ship, 'BlasterTziptzilot');",
              "                                                        RangerExcludedFromRating(cur_ship, 1);",
              "                                                        if(ShipPilotRace(Player()) != Peleng || ShipFace(Player()) != 1) ShipFace(cur_ship, 1);",
              "                                                        else ShipFace(cur_ship, 0);",
              "",
              "                                                        //Вручную корректируем характер Ципцилота",
              "                                                        ShipStatus(cur_ship, 0, 50); //Торговец",
              "                                                        ShipStatus(cur_ship, 1, 20); //Пират",
              "                                                        ShipStatus(cur_ship, 2, 30); //Воин",
              "                                                        //\"Внутренний\" неизменный характер для него будет \"Торговец\"",
              "                                                        ShipSubType(cur_ship, 2);",
              "",
              "                                                        //Ципцилот крутой",
              "                                                        ShipSkill(cur_ship, 'Accuracy', 6);",
              "                                                        ShipSkill(cur_ship, 'Mobility', 4);",
              "                                                        ShipSkill(cur_ship, 'Technical', 5);",
              "                                                        ShipSkill(cur_ship, 'Trader', 6);",
              "                                                        ShipSkill(cur_ship, 'Charm', 6);",
              "                                                        ShipSkill(cur_ship, 'Leadership', 5);",
              "",
              "                                                        //Вешаем на него акрин фрилансера и обнуляем серию",
              "                                                        cur_item = ShipItems(cur_ship, 0);",
              "                                                        HullSeries(cur_item, -1);",
              "                                                        ItemSize(cur_item, max(ItemSize(cur_item), 85 * GTL, 230));",
              "                                                        ItemSize(cur_item, ItemSize(cur_item) + RndObject(-10, 10, cur_ship));",
              "                                                        HullHP(cur_item, 'To100');",
              "                                                        SpecialToEquipment(FindBonusByNameInCfg('ShuMercs_FreeMercPelengHull'), cur_item);",
              "                                                        ShipSpecialBonuses(cur_ship, bonSlotForsage, 10);",
              "                                                        NoDropItem(cur_item, 1); //Чтобы не менял его",
              "                                                        Chameleon(cur_ship);",
              "",
              "                                                        for(i = 1; i <= 5; i = i + 1) ShipRefit(cur_ship);",
              "",
              "                                                        cur_item = ShipWeapon(cur_ship, 1);",
              "                                                        if(ItemType(cur_item) == t_Weapon1) //Если тупой рейнджер снова экипировался говёным промлазером",
              "                                                        {",
              "                                                            FreeItem(GetItemFromShip(cur_ship, cur_item));",
              "                                                            //Выдаём ему лезку, ракетомёт или третон",
              "                                                            cur_item = CreateEquipment(GetValueFromScript('', 't_Weapon' + RndObject(3, 5, cur_ship)), RndObject(25, 50, cur_ship), PlanetInventionLevel(cur_planet, 7), tint1);",
              "                                                            AddItemToShip(cur_ship, cur_item);",
              "                                                        }",
              "                                                        cur_item = ShipWeapon(cur_ship, 2);",
              "                                                        if(!cur_item) //Если тупой рейнджер установил себе всего одну пушку",
              "                                                        {",
              "                                                            //Выдаём ему лезку, ракетомёт или третон",
              "                                                            cur_item = CreateEquipment(GetValueFromScript('', 't_Weapon' + RndObject(3, 5, cur_ship)), RndObject(25, 50, cur_ship), PlanetInventionLevel(cur_planet, 7), tint1);",
              "                                                            AddItemToShip(cur_ship, cur_item);",
              "                                                        }",
              "                                                        cur_item = ShipEqInSlot(cur_ship, t_CargoHook);",
              "                                                        if(!cur_item) //Если тупой рейнджер установил себе всего одну пушку",
              "                                                        {",
              "                                                            //Выдаём ему лезку, ракетомёт или третон",
              "                                                            cur_item = CreateEquipment(t_CargoHook, RndObject(25, 50, cur_ship), PlanetInventionLevel(cur_planet, 7), tint1);",
              "                                                            AddItemToShip(cur_ship, cur_item);",
              "                                                            ItemIsInUse(cur_item, 1);",
              "                                                            NoDropItem(cur_item, 1);",
              "                                                        }",
              "",
              "                                                        ShipImproveItems(cur_ship, 7);",
              "",
              "                                                        //Запрещаем другим рейнджерам (и наёмникам) рэкетировать Ципцилота",
              "                                                        NoTargetToShip(cur_ship, 3);",
              "                                                        //Добавляем в дроп ключ от тайника Ципцилота",
              "                                                        cur_item = CreateQuestItem('ShuMercsHQ_TziptzilotsKey', Peleng);",
              "                                                        ItemSize(cur_item, 1);",
              "                                                        LinkItemToScript(cur_item, TziptzilotsKey);",
              "                                                        ShipAddDropItem(cur_ship, cur_item);",
              "                                                        RelationToRanger(cur_ship, Player(), 100);",
              "",
              "                                                        ArrangeItems(cur_ship);",
              "                                                        //Если игрок взлетает со станции",
              "                                                        if(!GetShipRuins(Player())) TransferShip(cur_ship, GetShipPlanet(Player()));",
              "                                                        else TransferShip(cur_ship, GetShipRuins(Player()));",
              "                                                        ShipJoin(BlasterTziptzilot, cur_ship);",
              "",
              "                                                        PlanetRace(cur_planet, tint1);",
              "                                                        PlanetOwner(cur_planet, tint2);",
              "",
              "                                                        //Запускаем квест",
              "                                                        BuildOwnBase_Condition = 1;",
              "                                                    }",
              "                                                }",
              "                                            }",
              "                                        }",
              "                                    }",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "else //if(BuildOwnBase_Condition > 0)",
              "{",
              "    //Первый этап, вместе с игроком с планеты взлетает Ципцилот и просит автограф, ждём, пока игрок его даст, либо заруинит квест",
              "    cur_ship = GroupToShip(BlasterTziptzilot);",
              "    cur_ruin = IdToShip(MercCenterId);",
              "    if(BuildOwnBase_Condition < 6)",
              "    {",
              "        //Если Ципцилот или ЦН Обмен в процессе выполнения квеста были уничтожены, то квест провален",
              "        if(!cur_ship || !cur_ruin)",
              "        {",
              "            //Если Ципцилот ещё жив, отправляем его умирать на ближайшую планету",
              "            if(cur_ship)",
              "            {",
              "                cur_planet = NearCivilPlanet(cur_ship);",
              "                SetData(0, 2, cur_ship);",
              "                SetData(Id(cur_planet) * 2, 2, cur_ship);",
              "                OrderLanding(cur_ship, cur_planet);",
              "            }",
              "",
              "            ReleaseItemFromScript(HoloTablet);",
              "            BuildOwnBase_Condition = -1;",
              "        }",
              "        //Игрок справился с конфликтом, Ципцилот вылетает с ЦН навстречу игроку",
              "        else if(BuildOwnBase_Condition == 4)",
              "        {",
              "            if(!StateIs(cur_ship, 'TziptzilotFollowPlayerState'))",
              "            {",
              "                //ChangeState('TziptzilotFollowPlayerState', cur_ship);",
              "                //Чтобы сразу не исполнялся привязанный к стейту код",
              "                ShipJoinToScript(cur_ship, 'Mod_ShuMercsHQ.BlasterTziptzilot.TziptzilotFollowPlayerState');",
              "            }",
              "        }",
              "        else if((BuildOwnBase_Condition == 2 || BuildOwnBase_Condition == 3) && !GroupCount(TrancsCollectors))",
              "        {",
              "            BuildOwnBase_Condition = 4;",
              "",
              "            if(!StateIs(cur_ship, 'TziptzilotFollowPlayerState'))",
              "            {",
              "                //ChangeState('TziptzilotFollowPlayerState', cur_ship);",
              "                //Чтобы сразу не исполнялся привязанный к стейту код",
              "                ShipJoinToScript(cur_ship, 'Mod_ShuMercsHQ.BlasterTziptzilot.TziptzilotFollowPlayerState');",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  833,
          "#":  834,
          "Total.Lines":  67,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Не трогаем корабль, пока тот в гипере",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "//Если игрок атаковал Ципцилота",
              "if(Hit(CurShip, 0))",
              "{",
              "    if(BuildOwnBase_Condition >= 0)",
              "    {",
              "        BuildOwnBase_Condition = -BuildOwnBase_Condition;",
              "        if(ItemExist(HoloTablet)) ReleaseItemFromScript(HoloTablet);",
              "        ChangeState('TziptzilotAttackOnPlayerState');",
              "        Dialog(CurShip); //После этого вызова CurShip меняется на другой корабль, т.к. сраный дабокод херово работает с многопоточностью",
              "        exit;",
              "    }",
              "}",
              "else RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Ципцилот следует за игроком в начале и перед завершением квеста",
              "if(ShipStar(CurShip) == ShipStar(Player()))",
              "{",
              "    if(ShipInNormalSpace(Player()))",
              "    {",
              "        OrderLock(CurShip, 0);",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else",
              "        {",
              "            //int radar_range = ShipRadarRange(Player());",
              "            //if(radar_range)",
              "            //{",
              "            //    if(Dist(CurShip, Player()) <= radar_range)",
              "            //    {",
              "            //        check = 0;",
              "            //        Dialog(CurShip);",
              "            //    }",
              "            //}",
              "            //Если игрок снял зачем-то снял радар, то диалог всё равно состоится, иначе мы тупо завесим квест",
              "            //else",
              "            if(BuildOwnBase_Condition == 1) int dist = 5000;",
              "            else dist = 300;",
              "            if(Dist(CurShip, Player()) <= dist)",
              "            {",
              "                check = 0;",
              "                Dialog(CurShip);",
              "            }",
              "        }",
              "    }",
              "}",
              "//Ципцилот летит на ЦН (на случай если игрок разберётся с транками ещё до того, как он достигнет центра в стейте TziptzilotFlyAwayState)",
              "else",
              "{",
              "    OrderLock(CurShip, 1);",
              "    dword object = IdToShip(MercCenterId);",
              "    dword object_star = ShipStar(object);",
              "    if(object_star != ShipStar(CurShip))",
              "    {",
              "        if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "        else OrderJump(CurShip, object_star);",
              "    }",
              "    else",
              "    {",
              "        if(!ShipInNormalSpace(CurShip))",
              "        {",
              "            if(GetShipRuins(CurShip) != object) OrderTakeOff(CurShip);",
              "        }",
              "        else OrderLanding(CurShip, object);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  835,
          "#":  836,
          "Total.Lines":  162,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ципцилот возвращается на ЦН Обмен (после того, как кинул игрока, и после завершения квеста)",
              "//Также в этом стейте он будет сидеть, и ожидать возвращения игрока на ЦН",
              "//Data0 - дополнительный маркер поведения:",
              "// == 1 - приказ лететь к ЦН на форсаже, Ципцилот убегает от игрока",
              "// == 2 - приказ долететь до ЦН и исчезнуть, квест был выполнен, либо провален",
              "//Data2 - Id целевой планеты/станции, на которую необходимо совершить посадку",
              "//Data3 - маркер о том, что игрок только что подобрал планшет (выставляется из акткода, обнуляется в диалоге игрока с самим собой)",
              "",
              "//Не трогаем корабль, пока тот в гипере",
              "if(ShipInHyperSpace(CurShip))",
              "{",
              "    //Если выставлен маркер на самоликвидацию",
              "    if(GetData(0) == 3) ShipDestroy(CurShip, 1);",
              "    else exit;",
              "}",
              "",
              "//Временно выставляем этот бонус из акткода, чтобы Ципцилот мог подобрать планшет, в случае игнора со стороны игрока",
              "ShipSpecialBonuses(CurShip, bonHookRadius, -500);",
              "",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "//Если игрок атаковал Ципцилота",
              "if(Hit(CurShip, 0))",
              "{",
              "    if(BuildOwnBase_Condition >= 0)",
              "    {",
              "        BuildOwnBase_Condition = -BuildOwnBase_Condition;",
              "        if(ItemExist(HoloTablet)) ReleaseItemFromScript(HoloTablet);",
              "",
              "        //Если игрок напал на Ципцилота сразу после того, как тот дропнул планшет",
              "        if(BuildOwnBase_Condition == -1)",
              "        {",
              "            //Cпавним транков-коллекторов и отправляем в атаку на Ципцилота",
              "            for(int i = 1; i <= 2; i = i + 1) ExecuteCodeFromString(GenerateCodeStringFromBlock('UselessItems.ShuMercsHQ_HoloTablet.SpawnTrancCollector'), 'tranc_num', i, 'cur_state', 'TrancsFlyAwayState');",
              "            for(i = 0; i < 2; i = i + 1)",
              "            {",
              "                dword tranc = GroupShip(TrancsCollectors, i);",
              "                SetData(Id(StarNearbyStars(ShipStar(CurShip), 65)) - 1, 0, tranc);",
              "                SetData(Id(CurShip), 1, tranc);",
              "                SetData(0, 2, tranc);",
              "                ShipSetBad(tranc, CurShip);",
              "            }",
              "        }",
              "",
              "        ChangeState('TziptzilotAttackOnPlayerState');",
              "        if(!BuildOwnBase_Condition) BuildOwnBase_Condition = -1; //На случай, если игрок отказал Ципцилоту, а затем ещё и напал на него",
              "        Dialog(CurShip); //После этого вызова CurShip меняется на другой корабль, т.к. сраный дабокод херово работает с многопоточностью",
              "        exit;",
              "    }",
              "}",
              "else RelationToRanger(CurShip, Player(), 100);",
              "",
              "//Вынуждаем Ципцилота самостоятельно выполнить наведение пушек (может по астероидам постреляет или ещё по кому)",
              "ShipFreeFlight(CurShip);",
              "OrderLock(CurShip, 1);",
              "",
              "//Садимся на планету/станцию",
              "if(GetData(2))",
              "{",
              "    if(!(GetData(2) % 2))",
              "    {",
              "        dword object = IdToPlanet(GetData(2) / 2);",
              "        if(GetShipPlanet(CurShip) != object)",
              "        {",
              "            dword object_star = PlanetToStar(object);",
              "            if(object_star != cur_star)",
              "            {",
              "                if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                else OrderJump(CurShip, object_star);",
              "            }",
              "            else",
              "            {",
              "                if(!ShipInNormalSpace(CurShip))",
              "                {",
              "                    if(GetShipPlanet(CurShip) != object) OrderTakeOff(CurShip);",
              "                }",
              "                else OrderLanding(CurShip, object);",
              "            }",
              "        }",
              "        //Ципцилот долетел до указанной планеты",
              "        else",
              "        {",
              "            //Если выставлен маркер на самоликвидацию",
              "            if(GetData(0) == 2) ShipDestroy(CurShip, 1);",
              "        }",
              "    }",
              "    else",
              "    {",
              "        object = IdToShip((GetData(2) - 1) / 2);",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip))",
              "                    {",
              "                        if(GetShipRuins(CurShip) != object) OrderTakeOff(CurShip);",
              "                    }",
              "                    else OrderLanding(CurShip, object);",
              "                }",
              "            }",
              "            //Ципцилот долетел до указанной станции",
              "            else",
              "            {",
              "                //Если выставлен маркер на самоликвидацию",
              "                if(GetData(0) == 2)",
              "                {",
              "                    ShipDestroy(CurShip, 1);",
              "                    //Если это конец квеста, то ставим маркер успешного выполнения",
              "                    if(BuildOwnBase_Condition == 5) BuildOwnBase_Condition = 6;",
              "                }",
              "                else OrderNone(CurShip);",
              "            }",
              "        }",
              "        //Если целевую станцию уничтожили, квест провален",
              "        else",
              "        {",
              "            //Ципцилот отправляется на ближайшую планету помирац",
              "            object = NearCivilPlanet(CurShip);",
              "            SetData(0, 2);",
              "            SetData(Id(object) * 2, 2);",
              "            OrderLanding(CurShip, object);",
              "            if(BuildOwnBase_Condition >= 0) BuildOwnBase_Condition = -BuildOwnBase_Condition;",
              "        }",
              "    }",
              "}",
              "//Ципцилот ожидает на месте",
              "else",
              "{",
              "    float angle = pi * (ShipAngle(CurShip) + 90.0) / RndObject(179, 181, CurShip);",
              "    OrderMove(CurShip, cos(angle) * 10.0 + CoordX(CurShip), sin(angle) * 10.0 + CoordY(CurShip));",
              "}",
              "",
              "//Также врубаем форсаж, если нужно",
              "if(GetData(0) == 1 || GetData(0) == 3)",
              "{",
              "    if(ShipInNormalSpace(CurShip))",
              "    {",
              "        dword engine = ShipEqInSlot(CurShip, t_Engine);",
              "        if(ItemDurability(engine) < 33) ItemDurability(engine, 33);",
              "        OrderForsage(CurShip, 1);",
              "    }",
              "    else",
              "    {",
              "        SetData(0, 0);",
              "        OrderForsage(CurShip, 0);",
              "    }",
              "}",
              "",
              "//Игрок подобрал планшет на этом ходу, вызываем адовый костыль",
              "if(GetData(3))//BuildOwnBase_Condition == 2)",
              "{",
              "    Dialog(Player());",
              "    exit;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  838,
          "#":  839,
          "Total.Lines":  30,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если игрок не нападал на Ципцилота",
              "if(!Hit(cur_ship, 0))",
              "{",
              "    if(BuildOwnBase_Condition == 2)",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotVerySorry');",
              "    }",
              "    else //if(BuildOwnBase_Condition < 0)",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAfterQuestDone');",
              "    }",
              "",
              "    //Больше Ципцилот с игроком говорить не желает",
              "    NoTalkToShip(cur_ship, 1);",
              "    //Конец связи",
              "    tstr2 = '</color>' + CT('Talk.Exit');",
              "}",
              "//Если игрок напал на Ципцилота",
              "else",
              "{",
              "    if(abs(BuildOwnBase_Condition) >= 2) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotOnPlayerAggression');",
              "    //Если игрок напал на Ципцилота с самого старта, то есть вообще без повода",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotOnPlayerAggressionAtBegin');",
              "",
              "    //Больше Ципцилот с игроком говорить не желает",
              "    NoTalkToShip(cur_ship, 1);",
              "",
              "    //Конец связи",
              "    tstr2 = '</color>' + CT('Talk.Exit');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  811,
          "#":  842,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//BuildOwnBase_Condition == < 0 - игрок тем или иным образом провалил квест, повторить больше не получится (значение равно этапу квеста, на котором он был провален, но со знаком минус)",
              "//BuildOwnBase_Condition ==   0 - квест на получение доступа к строительству штаба ещё не запускался",
              "//BuildOwnBase_Condition ==   1 - квест был запущен, появился Ципцилот и транки, Ципцилоту выдан приказ на взлёт с планеты, на которой сидит игрок",
              "//BuildOwnBase_Condition ==   2 - игрок подобрал планшет, натравливаем на него транков и ждём развязки",
              "//BuildOwnBase_Condition ==   3 - игрок уже поговорил с одним из транков в первый раз",
              "//BuildOwnBase_Condition ==   4 - игрок разрешил конфликт с транками тем или иным путём, с ЦН вылетает Ципцилот (если игрок находится в системе с ЦН) для финального диалога",
              "//BuildOwnBase_Condition ==   5 - по результату диалога с игроком Ципцилот либо нападает (квест сразу провален), либо отправляется в ЦН",
              "//BuildOwnBase_Condition ==   6 - Ципцилот добрался до ЦН после финального диалога, квест успешно завершён",
              "",
              "cur_ship = GetTalkShip();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  843,
          "#":  844,
          "Total.Lines":  9,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Ципцилот атакует игрока до последнего",
              "//Если игрок покинул систему, то устраняем Ципцилота",
              "OrderLock(CurShip, 1);",
              "if(ShipStar(Player()) != ShipStar(CurShip))",
              "{",
              "    if(!GetShipPlanet(CurShip)) OrderLanding(CurShip, NearCivilPlanet(CurShip));",
              "    else ShipDestroy(CurShip, 1);",
              "}",
              "else OrderFollowShip(CurShip, Player(), 1);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  846,
          "#":  847,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.MercCenterAboutTziptzilotsKey');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerCheckTziptzilotsStorage');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  849,
          "#":  850,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Удаляем ключ",
              "FreeItem(GetItemFromShip(Player(), ScriptItemToItem(TziptzilotsKey)));",
              "//Выдаём игроку памятную статуэтку и деньги",
              "cost = RoundTo(max(100000, 3 * GalaxyMoney(4, 4)), 10000, 0);",
              "cur_item = CreateQuestItem('ShuMercsHQ_TurbinatorFigurine', 1);",
              "ItemSize(cur_item, 1);",
              "ItemCost(cur_item, 1);",
              "AddItemToShip(Player(), cur_item);",
              "ShipMoney(Player(), ShipMoney(Player()) + cost);",
              "Sound('Sound.Sell');",
              "MessageBox(Format(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotsStorageContentMsg'), '<Money'+'>', cost));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  851,
          "#":  852,
          "Total.Lines":  14,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Data0 - номер капчи, которую выдаёт данный транклюкатор",
              "//Data1 - число попыток, оставшихся у игрока для прохождения капчи",
              "//Data2 - ---",
              "//Data3 - сумма долга для выплаты",
              "",
              "cur_ship = GetTalkShip();",
              "cost = GetData(3, cur_ship);",
              "if(BuildOwnBase_Condition > 0)",
              "{",
              "    if(BuildOwnBase_Condition <= 3) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancCollectorGreets'), '<Cost'+'>', cost);",
              "    else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancWhileFlyAway');",
              "}",
              "//Игрок отказался помогать Ципцилоту",
              "else tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancWhileChaseTziptzilot');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  857,
          "#":  858,
          "Total.Lines":  36,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//В этом стейте транки атакуют игрока, следуя за ним по всем системам",
              "//Data0 - номер капчи, которую выдаёт данный транклюкатор",
              "//Data1 - число попыток, оставшихся у игрока для прохождения капчи",
              "//Data2 - маркер о том, был ли уже инициирован первый разговор одного из транков с игроком в космосе",
              "//Data3 - сумма долга для выплаты",
              "",
              "ShipSetBad(CurShip, Player());",
              "if(ShipInHyperSpace(CurShip)) exit;",
              "",
              "if(ShipStar(CurShip) != ShipStar(Player()))",
              "{",
              "    OrderLock(CurShip, 1);",
              "    OrderJump(CurShip, ShipStar(Player()));",
              "}",
              "else",
              "{",
              "    OrderLock(CurShip, 0);",
              "",
              "    //Один из транков в первый раз связывается с игроком",
              "    if(!GetData(2))",
              "    {",
              "        if(ShipInNormalSpace(Player()))",
              "        {",
              "            if(Dist(Player(), CurShip) <= ShipRadarRange(Player()))",
              "            {",
              "                for(int i = 0; i < GroupCount(TrancsCollectors); i = i + 1)",
              "                {",
              "                    dword cur_ship = GroupShip(TrancsCollectors, i);",
              "                    SetData(1, 2, cur_ship);",
              "                }",
              "",
              "                Dialog(CurShip);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  859,
          "#":  860,
          "Total.Lines":  26,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//В этом стейте транки улетают и дохнут в гипере",
              "//Data0 - Id системы, в которую будут прыгать транки",
              "//Data1 - Id цели, за которой необходимо следовать (Ципцилот), пока она существует",
              "//Data2 - макер о необходимости умереть после улёта в гипер",
              "OrderLock(CurShip, 1);",
              "ShipFreeFlight(CurShip); //Чтобы могли попутно стрелять по астероидам и Ципцилоту",
              "if(ShipInNormalSpace(CurShip))",
              "{",
              "    if(!GetData(1)) OrderJump(CurShip, GalaxyStar(GetData(0)));",
              "    else",
              "    {",
              "        dword target = IdToShip(GetData(1));",
              "        if(target) OrderFollowShip(CurShip, target, 1);",
              "        else",
              "        {",
              "            SetData(0, 1);",
              "            OrderJump(CurShip, GalaxyStar(GetData(0)));",
              "        }",
              "    }",
              "}",
              "else",
              "{",
              "    //Чтобы дать им вылететь из \"первого\" гипера при преследовании Ципцилота",
              "    if(GetData(2)) ShipDestroy(CurShip, 1);",
              "    else SetData(1, 2);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  853,
          "#":  862,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок общается с транком-коллектором в первый раз",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerRefusesToPay');",
              "tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAgreedToPay'), '<Cost'+'>', cost);",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerTrancOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  854,
          "#":  863,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerWantsToSendRequest');",
              "tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAgreedToPayAfterTalk'), '<Cost'+'>', cost);",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerTrancOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  867,
          "#":  868,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Транки улетают восвояси, конфликт разрешён тупым платежом",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancReceivesPayment');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAfterPay');",
              "",
              "for(int i = 0; i < GroupCount(TrancsCollectors); i = i + 1)",
              "{",
              "    cur_ship = GroupShip(TrancsCollectors, i);",
              "    ShipSetBad(cur_ship, 0);",
              "    SetData(Id(StarNearbyStars(ShipStar(cur_ship), 60)) - 1, 0, cur_ship);",
              "    SetData(0, 1, cur_ship);",
              "    SetData(0, 2, cur_ship);",
              "    SetData(0, 3, cur_ship);",
              "    ChangeState('TrancsFlyAwayState', cur_ship);",
              "}",
              "",
              "BuildOwnBase_Condition = 4;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  866,
          "#":  869,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancOfferToSendRequest');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerRefusesToPayTrue');",
              "",
              "tint1 = 0;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  878,
          "#":  877,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//В этом месте считается, что игрок уже поговорил с транком в первый раз",
              "BuildOwnBase_Condition = 3;",
              "",
              "//Если игрок ещё не делал неправильных попыток в этом заходе",
              "if(!tint1) tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancAskForCaptchaStart'), '<Count'+'>', GetData(1, cur_ship));",
              "//Если ранее ошибся с ответом",
              "else tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancAskForCaptchaAfterMistake'), '<Count'+'>', GetData(1, cur_ship));",
              "tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancAskForCaptcha' + GetData(0, cur_ship));",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerInsertAnswer');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerRefusesToAnswer');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  883,
          "#":  884,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancOnRefuse');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  50,
          "Parent":  882,
          "#":  887,
          "Total.Lines":  29,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2 = TextBox(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.InsertAnswer'));",
              "",
              "//Игрок дал правильный ответ, транки улетают восвояси, конфликт разрешён смекалкой",
              "if(tint2 == int(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.CaptchaAnswer' + GetData(0, cur_ship))))",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancAnswerIsCorrect');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerOnAnswerIsCorrect');",
              "",
              "    for(int i = 0; i < GroupCount(TrancsCollectors); i = i + 1)",
              "    {",
              "        cur_ship = GroupShip(TrancsCollectors, i);",
              "        ShipSetBad(cur_ship, 0);",
              "        SetData(Id(StarNearbyStars(ShipStar(cur_ship), 60)) - 1, 0, cur_ship);",
              "        SetData(0, 1, cur_ship);",
              "        SetData(0, 2, cur_ship);",
              "        SetData(0, 3, cur_ship);",
              "        ChangeState('TrancsFlyAwayState', cur_ship);",
              "    }",
              "",
              "    BuildOwnBase_Condition = 4;",
              "}",
              "//Игрок дал неправильный ответ, уменьшаем число попыток",
              "else",
              "{",
              "    SetData(GetData(1, cur_ship) - 1, 1, cur_ship);",
              "    tint1 = 1;",
              "",
              "    if(!GetData(1, cur_ship)) tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TrancAnswerNoMoreTries');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  900,
          "#":  901,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAfterConflictDone');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAgreedToForgive');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerRefusesToForgive');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  903,
          "#":  907,
          "Total.Lines":  8,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAfterNonForgive');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAfterNonForgive');",
              "",
              "ChangeState('TziptzilotAttackOnPlayerState', cur_ship);",
              "ShipSetBad(cur_ship, Player());",
              "",
              "//Квест провален",
              "BuildOwnBase_Condition = -BuildOwnBase_Condition;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  906,
          "#":  908,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.TziptzilotAfterForgive');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.PlayerAfterForgive');",
              "",
              "//Дропаем игроку бутылку янвелба",
              "cur_item = CreateQuestItem('ShuMercsHQ_AgedEkupBottle', Fei);",
              "ItemSize(cur_item, 1);",
              "//Выбрасываем бутылку в сторону игрока",
              "float angle = pi * (-Angle(cur_ship, Player())) / 180;",
              "int dist_to = min(Dist(cur_ship, Player()) / 2, 200);",
              "int dest_coord_X = round(sin(angle) * dist_to) + CoordX(cur_ship);",
              "int dest_coord_Y = round(cos(angle) * dist_to) + CoordY(cur_ship);",
              "DropItemInSystem(ShipStar(cur_ship), cur_item, CoordX(cur_ship), CoordY(cur_ship), dest_coord_X, dest_coord_Y);",
              "",
              "OrderForsage(cur_ship, 0);",
              "SetData(2, 0, cur_ship);",
              "SetData(MercCenterId * 2 + 1, 2, cur_ship);",
              "ChangeState('TziptzilotFlyAwayState', cur_ship);",
              "//Квест успешно завершён",
              "BuildOwnBase_Condition = 5;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  290,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  911,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Конец связи",
              "tstr2 = '</color>' + CT('Talk.Exit');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  912,
          "#":  913,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Для корректного вывода MessageBox() в конце хода, используем всю эту чудовищную конструкцию",
              "",
              "cur_ship = GroupToShip(BlasterTziptzilot);",
              "SetData(1, 0, cur_ship);",
              "SetData(MercCenterId * 2 + 1, 2, cur_ship);",
              "SetData(0, 3, cur_ship);",
              "ShipFreeFlight(cur_ship); //Просто вызываем срабатывание логики",
              "OrderForsage(cur_ship, 1); //Из своей логики выше он его, почему-то, включает не сразу",
              "",
              "//if(GetData(3, cur_ship))",
              "InterfaceState('Talk', 'MainPanel', 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  914,
          "#":  915,
          "Total.Lines":  4,
          "Code.Type":  "Turn",
          "Code":          
          [
              "Sound('Sound.Scan');",
              "MessageBox(CT('Script.Mod_ShuMercs.QuestBeforePlayerOrgDialogs.HoloTabletPickedUpMsg'), 10);",
              "ButtonClick('Talk', 'Close');",
              "InterfaceState('Talk', 'MainPanel', -1);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  928,
          "#":  920,
          "Total.Lines":  47,
          "Code.Type":  "Turn",
          "Code":          
          [
              "int cost = tarr1[GAnswerData, 'Cost'];",
              "if(ShipMoney(Player()) >= cost)",
              "{",
              "    tstr1 = CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAccountPaymentOffer');",
              "    if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost) tstr1 = tstr1 + ' ' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAccountPaymentOfferAdd');",
              "",
              "    if(MessageBoxYesNo(tstr1))",
              "    {",
              "        ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "        tint1 = 1;",
              "        Sound('Sound.Buy');",
              "    }",
              "    else if(PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost)",
              "    {",
              "        PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "        PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "        tint1 = 1;",
              "        Sound('Sound.Buy');",
              "    }",
              "    else",
              "    {",
              "        tint1 = 0;",
              "    }",
              "}",
              "else",
              "{",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "    PlayerHQMainArray['Finance', 'StatsOutEquipments'] = PlayerHQMainArray['Finance', 'StatsOutEquipments'] + cost;",
              "    tint1 = 1;",
              "    Sound('Sound.Buy');",
              "}",
              "",
              "//Если оплата была успешно проведена",
              "if(tint1)",
              "{",
              "    PlayerHQMainArray['Shipyard', 'ShipInProduction'] = GetVariableName(tarr1[GAnswerData]);",
              "    PlayerHQMainArray['Shipyard', 'ShipInProductionTime'] = CurTurn() + tarr1[GAnswerData, 'ProductionTime'];",
              "    PlayerHQMainArray['Shipyard', 'ShipInProductionCost'] = tarr1[GAnswerData, 'Cost'];",
              "    tstr1 = tarr1[GAnswerData, 'Name'];",
              "    if(GetParFromString(PlayerHQMainArray['Shipyard', 'ShipInProduction'], '.', ParsCountFromString(PlayerHQMainArray['Shipyard', 'ShipInProduction'], '.') - 2, 0) == 'Tranclucator')",
              "    {",
              "        tstr1 = lowercase(tstr1);",
              "        PlayerHQMainArray['Shipyard', 'NextTrancProductionTime'] = 1 + CT(PlayerHQMainArray['Shipyard', 'ShipInProduction'] + 'DelayInProduction') + PlayerHQMainArray['Shipyard', 'ShipInProductionTime'];",
              "    }",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.ConstructionIsStarted'), '<ShipName'+'>', tstr1, '<Days'+'>', tarr1[GAnswerData, 'ProductionTime']);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  926,
          "#":  927,
          "Total.Lines":  46,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(i = 0; i < ArrayDim(tarr1); i = i + 1)",
              "{",
              "    int is_ok = 1;",
              "",
              "    if(ShipMoney(Player()) < tarr1[i, 'Cost'] && PlayerHQMainArray['Finance', 'CurrentBalance'] < tarr1[i, 'Cost']) is_ok = 0;",
              "    else",
              "    {",
              "        if(!tarr1[i, 'Owner'])",
              "        {",
              "           if(check < tarr1[i, 'RequiredReputation']) is_ok = 0;",
              "        }",
              "        else if(tarr1[i, 'Owner'] == 1)",
              "        {",
              "            if(PlayerHQMainArray['Main', 'CoalitionReputation'] < tarr1[i, 'RequiredReputation']) is_ok = 0;",
              "        }",
              "        else //if(tarr1[i, 'Owner'] == 2)",
              "        {",
              "            if(PlayerHQMainArray['Main', 'PirateClanReputation'] < tarr1[i, 'RequiredReputation']) is_ok = 0;",
              "        }",
              "    }",
              "",
              "    //Если задержка до возможности произвести следующего транка ещё не прошла",
              "    if(GetParFromString(GetVariableName(tarr1[i]), '.', ParsCountFromString(GetVariableName(tarr1[i]), '.') - 2, 0) == 'Tranclucator')",
              "    {",
              "        if(CurTurn() < PlayerHQMainArray['Shipyard', 'NextTrancProductionTime']) is_ok = 0;",
              "    }",
              "",
              "    str name = Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerConstructionStart'), '<ShipName'+'>', tarr1[i, 'Name']);",
              "    if(!is_ok)",
              "    {",
              "        name = DeleteTags(name);",
              "        if(GetParFromString(GetVariableName(tarr1[i]), '.', ParsCountFromString(GetVariableName(tarr1[i]), '.') - 2, 0) == 'Tranclucator')",
              "        {",
              "            if(CurTurn() < PlayerHQMainArray['Shipyard', 'NextTrancProductionTime'])",
              "            {",
              "                name = name + ' ' + Format(CT(GetVariableName(tarr1[i]) + 'DelayInProductionAddText'), '<NextProductionDaysLeft'+'>', PlayerHQMainArray['Shipyard', 'NextTrancProductionTime'] - CurTurn(), '');",
              "            }",
              "        }",
              "",
              "        AddDialogBlock(name, 1);",
              "    }",
              "",
              "    InjectAnswer('PlayerHQShipyardProjectsList', name, i);",
              "}",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerConstructionCancel');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -1970,
          "Pos.y":  250,
          "Parent":  -1,
          "#":  929,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Данная реплика формируется в блоке выше",
              "tstr1 = tstr4;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  930,
          "#":  931,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.AfterCancel'),",
              "                               '<CoalitionReputation'+'>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%',",
              "                               '<PiratesReputation'+'>', '' + (0 + RoundTo(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, 0, 100), 1.0, -1)) + '%');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerAskForConstruction');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerOutAfterCancel');",
              "",
              "//Если репутация у обеих сторон менее 25%, то ничего построить нельзя (пока убрал это ограничение)",
              "tint1 = max(PlayerHQMainArray['Main', 'CoalitionReputation'], PlayerHQMainArray['Main', 'PirateClanReputation']);",
              "if(tint1 >= 0) tint1 = 1;",
              "else tint1 = 0;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  936,
          "#":  937,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn())",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskPortalGenerator');",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQMainDialog.PlayerAskPortalGeneratorOnRecharge'),",
              "                                   '<DaysLeft'+'>', PlayerHQMainArray['Science', 'PortalGeneratorTimer'] - CurTurn(), '');",
              "    AddDialogBlock(tstr1, 1);",
              "}",
              "InjectAnswer('PlayerHQPortalGeneratorDialog', tstr1, 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  938,
          "#":  939,
          "Total.Lines":  20,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_ruin = GroupToShip(PlayerHQ);",
              "cur_star = ShipStar(cur_ruin);",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.Greeting');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskShortJump');",
              "if(!ItemExist(ApprovalDocuments))",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJump');",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn()) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr3 = Name(GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1))));",
              "    tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJumpReady'), '<Star'+'>', tstr3);",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn() && ScriptItemData(ApprovalDocuments, 2)) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskExtraction');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  943,
          "#":  946,
          "Total.Lines":  34,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(ShipInNormalSpace(Player()))",
              "{",
              "    if(ShipStar(Player()) == cur_star)",
              "    {",
              "        //Слишком близко к звезде",
              "        if(Dist(Player(), cur_star) < 600)",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpMyCoords') + ' ' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerCoordsTooClose');",
              "            AddDialogBlock(tstr1, 1);",
              "        }",
              "        //Слишком далеко от звезды",
              "        else if(Dist(Player(), cur_star) > PlanetOrbitRadius(StarPlanets(cur_star, StarPlanets(cur_star) - 1)) + 800)",
              "        {",
              "            tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpMyCoords') + ' ' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerCoordsTooFar');",
              "            AddDialogBlock(tstr1, 1);",
              "        }",
              "        //Нормалёк",
              "        else tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpMyCoords');",
              "",
              "        InjectAnswer('PortalGeneratorShortJump', tstr1, Player());",
              "    }",
              "}",
              "",
              "for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "{",
              "    cur_planet = StarPlanets(cur_star, i);",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpPlanetCoords'),",
              "                                   '<Planet'+'>', Name(cur_planet));",
              "    InjectAnswer('PortalGeneratorShortJump', tstr1, cur_planet);",
              "}",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ShortJumpWhatCoords');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerBack');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  945,
          "#":  947,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = ShipStar(Player());",
              "//Время на скачок",
              "//tint1 = Dist2Star(cur_star, tdwd1) / 10 + 1;",
              "tint1 = PortionInDiapason(round(sqrt(Dist2Star(cur_star, tdwd1))), 1, 125, 1, 3);",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ExtractionConfirm'),",
              "                               '<Star'+'>', Name(tdwd1),",
              "                               '<Days'+'>', tint1,",
              "                               '<Cooldown'+'>', CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionCooldown'));",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerExtractionYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerExtractionNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  957,
          "#":  958,
          "Total.Lines":  17,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.Greeting');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskShortJump');",
              "if(!ItemExist(ApprovalDocuments))",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJump');",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn()) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr3 = Name(GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1))));",
              "    tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJumpReady'), '<Star'+'>', tstr3);",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn() && ScriptItemData(ApprovalDocuments, 2)) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskExtraction');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  959,
          "#":  961,
          "Total.Lines":  24,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = GAnswerData;",
              "if(PlayerHQJumpReady == '')",
              "{",
              "    //Маркер установки оверрайда на диалог до тех пор, пока игрок не выберет \"да\" или \"нет\"",
              "    PlayerHQJumpReady = 'PortalGeneratorShortJump';",
              "    GotoGov(2);",
              "    if(!PlayerBridge()) Sound('Sound.PG_Activation');",
              "}",
              "",
              "//Блокируем кнопку выхода с мостика (т.к. игрок может отдавать приказ с него)",
              "if(GotoGov() && PlayerBridge())",
              "{",
              "    InterfaceState('RuinsTalk', 'ButFormClose', 0);",
              "    InterfaceState('RuinsTalk', 'ButFormCloseImgLock', 1);",
              "    InterfacePos('RuinsTalk', 'ButFormCloseImgLock', UICheckElement('RuinsTalk', 'ButFormClose', 'PosX'), UICheckElement('RuinsTalk', 'ButFormClose', 'PosY'), 1.0);",
              "}",
              "",
              "if(tdwd1 == Player()) tstr1 = CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ShortJumpPlacePlayer');",
              "else tstr1 = Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ShortJumpPlacePlanet'), '<Planet'+'>', Name(tdwd1));",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ShortJumpActivation'),",
              "                               '<Place'+'>', tstr1, '');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  963,
          "#":  967,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ShortJumpGo');",
              "if(!PlayerBridge()) tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpGo');",
              "else tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerShortJumpGoBridge');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  964,
          "#":  968,
          "Total.Lines":  13,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorDeactivationCooldown');",
              "",
              "PlayerHQJumpReady = '';",
              "GotoGov(0);",
              "if(!PlayerBridge()) Sound('Sound.PG_Deactivation');",
              "else",
              "{",
              "    InterfaceState('RuinsTalk', 'ButFormClose', 3);",
              "    InterfaceState('RuinsTalk', 'ButFormCloseImgLock', -1);",
              "}",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ShortJumpDeactivation');",
              "tstr2 = '';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  993,
          "#":  969,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = GAnswerData; //Система, которую выбрал игрок, для оформления документов на передислокацию",
              "//Время на скачок",
              "tint1 = round(sqrt(Dist2Star(cur_star, tdwd1))) / 10 + 1;",
              "",
              "//Текст для вывода в диалог",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpRegistration'),",
              "                               '<Star'+'>', Name(tdwd1),",
              "                               '<JumpTime'+'>', tint1);",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpRegistrationYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpRegistrationNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  972,
          "#":  973,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "while(ShipInHyperSpace(cur_ruin) || PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] != '') ButtonClick('RuinsTalk', 'PM_EndTurn');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  982,
          "#":  977,
          "Total.Lines":  23,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Чистим всё руками, потому что при удалении предмета оно автоматом не чистится",
              "ScriptItemData(ApprovalDocuments, 1, 0);",
              "ScriptItemData(ApprovalDocuments, 2, 0);",
              "ScriptItemData(ApprovalDocuments, 3, 0);",
              "ScriptItemTextData(ApprovalDocuments, 1, '');",
              "ScriptItemTextData(ApprovalDocuments, 2, '');",
              "ScriptItemTextData(ApprovalDocuments, 3, '');",
              "//Удаляем из трюма игрока пакет документов на передислокацию",
              "cur_item = ScriptItemToItem(ApprovalDocuments);",
              "ReleaseItemFromScript(ApprovalDocuments);",
              "FreeItem(GetItemFromShip(Player(), cur_item));",
              "",
              "//Обнуляем список выданных планетарных заданий при завершении задания на передислокацию штаба",
              "GBuildOwnBase_QuestsGiven = '';",
              "",
              "//Удаляем все взятые по данному квесту планетарные задания и очищаем массив",
              "for(i = ArrayDim(BuildOwnBase_QuestsArray) - 1; i > 0; i = i - 1) EtherDelete(BuildOwnBase_QuestsArray[i, 1]);",
              "free(BuildOwnBase_QuestsArray);",
              "BuildOwnBase_QuestsArray = newarray(1, 1);",
              "",
              "EtherDelete('PlayerHQRelocation');",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpCancelConfirmYes');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  988,
          "#":  978,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpCancelConfirm');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpCancelConfirmYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpCancelConfirmNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  983,
          "#":  989,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpCancelConfirmNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  990,
          "#":  992,
          "Total.Lines":  30,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = PlayerHQMainArray['Science', 'PortalGeneratorRange'];",
              "",
              "check = 0;",
              "for(i = 0; i < GalaxyStars(); i = i + 1)",
              "{",
              "    tdwd1 = StarNearbyStars(cur_star, i);",
              "    if(StarNearbyStarsDist(cur_star, i) > PlayerHQMainArray['Science', 'PortalGeneratorRange']) continue;",
              "    if(StarOwner(tdwd1) != 0) continue;",
              "    if(StarCustomFaction(tdwd1) != '') continue;",
              "    if(Id(tdwd1) - 1 == PlayerHQMainArray['Main', 'HQStar']) continue; //Пропускаем текущую штабную систему",
              "    //Пропускаем сектора, карты которых у игрока нет",
              "    if(!SectorVisible(StarToCon(tdwd1))) continue;",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpToStar'),",
              "                                   '<Star'+'>', Name(tdwd1));",
              "    InjectAnswer('PortalGeneratorLongJump', tstr1, tdwd1);",
              "    check = 1;",
              "}",
              "",
              "if(check)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpWhatStar');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerBack');",
              "}",
              "//Если не нашли ни одной подходящей системы для передислокации",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpNoStars');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpNoStars');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -30,
          "Pos.y":  0,
          "Parent":  999,
          "#":  1000,
          "Total.Lines":  40,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_item = CreateQuestItem('ShuMercsHQ_ApprovalDocuments', Peleng);",
              "SetName(cur_item, CT('UselessItems.ShuMercsHQ_ApprovalDocuments.NameRelocation'));",
              "ItemSize(cur_item, 8);",
              "LinkItemToScript(cur_item, ApprovalDocuments);",
              "AddItemToShip(Player(), cur_item);",
              "NoDropItem(cur_item, 1);",
              "",
              "ScriptItemTextData(cur_item, 1, Id(tdwd1) - 1);",
              "ScriptItemData(cur_item, 1, StarOwner(tdwd1));",
              "",
              "tstr1 = '';",
              "tstr2 = '';",
              "for(i = 0; i < StarPlanets(tdwd1); i = i + 1)",
              "{",
              "    cur_planet = StarPlanets(tdwd1, i);",
              "    if(PlanetOwner(cur_planet) == 6) continue;",
              "    //ScriptItemTextData2 == номера всех обитаемых планет в списке системы в формате '0,2,3'... (легко вернуть планету по StarPlanets(star, N))",
              "    //ScriptItemTextData3 == маркера о получении одобрения от правительств обитаемых планет системы в формате '0,1,0'...",
              "    tstr1 = tstr1 + i + ',';",
              "    tstr2 = tstr2 + '0,';",
              "    ScriptItemData(cur_item, 3, ScriptItemData(cur_item, 3) + 1);",
              "}",
              "ScriptItemTextData(cur_item, 2, tstr1);",
              "ScriptItemTextData(cur_item, 3, tstr2);",
              "",
              "//Обновляем описание скриптового предмета (автоматически сверяется с записанными в него данными)",
              "ApprovalDocumentsTextUpdate(cur_item);",
              "",
              "//Обновляем текст уведомления задания о передислокации штаба",
              "tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Title');",
              "tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\";",
              "if(!StarOwner(tdwd1)) tstr1 = tstr1 + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Stage1'), '<Star'+'>', '<color=255,240,100>' + Name(tdwd1) + '</color>', '');",
              "else tstr1 = tstr1 + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Stage1'), '<Star'+'>', '<color=255,240,100>' + Name(tdwd1) + '</color>', '');",
              "CustomEther('QuestInProcess_PlayerMercsOrg', 3, 'PlayerHQRelocation', tstr1);",
              "",
              "//Текст для вывода в диалог",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpRegistrationStarted'),",
              "                               '<Star'+'>', Name(tdwd1));",
              "tstr2 = '';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  998,
          "#":  1001,
          "Total.Lines":  18,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpRegistrationNo'),",
              "                               '<Star'+'>', Name(tdwd1));",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskShortJump');",
              "if(!ItemExist(ApprovalDocuments))",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJump');",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn()) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr3 = Name(GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1))));",
              "    tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJumpReady'), '<Star'+'>', tstr3);",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn() && ScriptItemData(ApprovalDocuments, 2)) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskExtraction');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  994,
          "#":  1004,
          "Total.Lines":  21,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tdwd1 = GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1)));",
              "if(PlayerHQJumpReady == '')",
              "{",
              "    //Маркер установки оверрайда на диалог до тех пор, пока игрок не выберет \"да\" или \"нет\"",
              "    PlayerHQJumpReady = 'PortalGeneratorLongJump';",
              "    GotoGov(2);",
              "    if(!PlayerBridge()) Sound('Sound.PG_Activation');",
              "}",
              "",
              "//Блокируем кнопку выхода с мостика (т.к. игрок может отдавать приказ с него)",
              "if(GotoGov() && PlayerBridge())",
              "{",
              "    InterfaceState('RuinsTalk', 'ButFormClose', 0);",
              "    InterfaceState('RuinsTalk', 'ButFormCloseImgLock', 1);",
              "    InterfacePos('RuinsTalk', 'ButFormCloseImgLock', UICheckElement('RuinsTalk', 'ButFormClose', 'PosX'), UICheckElement('RuinsTalk', 'ButFormClose', 'PosY'), 1.0);",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpActivation'),",
              "                               '<Star'+'>', Name(tdwd1), '');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpYes');",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1007,
          "#":  1009,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpGo');",
              "if(!PlayerBridge()) tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpGo');",
              "else tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerLongJumpGoBridge');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1008,
          "#":  1010,
          "Total.Lines":  13,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorDeactivationCooldown');",
              "",
              "PlayerHQJumpReady = '';",
              "GotoGov(0);",
              "if(!PlayerBridge()) Sound('Sound.PG_Deactivation');",
              "else",
              "{",
              "    InterfaceState('RuinsTalk', 'ButFormClose', 3);",
              "    InterfaceState('RuinsTalk', 'ButFormCloseImgLock', -1);",
              "}",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.LongJumpDeactivation');",
              "tstr2 = '';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  1016,
          "#":  1018,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Запоминаем, когда и куда должен будет вернуться штаб после подбора игрока",
              "PlayerHQMainArray['Science', 'PortalGeneratorReturnData'] = '' + (CurTurn() + tint1 + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionWaitDays')) + ','",
              "                                                               + (Id(cur_star) - 1) + ','",
              "                                                               + CoordX(cur_ruin) + ','",
              "                                                               + CoordY(cur_ruin);",
              "",
              "OrderTeleport(cur_ruin, tdwd1, CoordX(cur_ruin), CoordY(cur_ruin), 1, tint1);",
              "",
              "PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionCooldown');",
              "",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ExtractionYes'),",
              "                               '<WaitDays'+'>', CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorExtractionWaitDays'));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1017,
          "#":  1019,
          "Total.Lines":  17,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.ExtractionNo');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskShortJump');",
              "if(!ItemExist(ApprovalDocuments))",
              "{",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJump');",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn()) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "else",
              "{",
              "    tstr3 = Name(GalaxyStar(int(ScriptItemTextData(ApprovalDocuments, 1))));",
              "    tstr3 = '</color>' + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskLongJumpReady'), '<Star'+'>', tstr3);",
              "    if(PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn() && ScriptItemData(ApprovalDocuments, 2)) tint1 = 1;",
              "    else tint1 = 0;",
              "}",
              "tstr4 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerAskExtraction');",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercsHQ.PlayerHQPortalGeneratorDialog.PlayerOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1022,
          "#":  1023,
          "Total.Lines":  13,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок впервые спрашивает про генератор",
              "if(!PlayerHQMainArray['Science', 'PortalGenerator'])",
              "{",
              "    PlayerHQMainArray['Science', 'PortalGenerator'] = -1;",
              "    tstr7 = '';",
              "}",
              "//Ранее игрок уже узнавал информацию про генератор, но ещё его не строил",
              "else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -1) tstr7 = 'Again';",
              "//Игрок строит генератор повторно (штаб был уничтожен)",
              "else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -2) tstr7 = 'Twice';",
              "",
              "cost = RoundTo(max(2000000, GalaxyMoney(4, 4) * 40), 1000, 0);",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGenerator' + tstr7), '<Cost'+'>', cost, '<CurrentBalance'+'>', int(PlayerHQMainArray['Finance', 'CurrentBalance']));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1024,
          "#":  1025,
          "Total.Lines":  65,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Оплачиваем постройку генератора со счёта организации",
              "if(!GAnswerData)",
              "{",
              "    //Обновляем графику штаба (6-го уровня графики не существует)",
              "    Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel' + min(PlayerHQMainArray['Main', 'HQLevel'], 5));",
              "",
              "    PlayerHQMainArray['Science', 'PortalGenerator'] = 1;",
              "    //PlayerHQMainArray['Science', 'PortalGeneratorRange'] = 0;",
              "    //Вешаем декоративную инфошку (таймер до следующего прыжка в инфошке считается автоматически)",
              "    tint1 = CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorBuildingCooldown');",
              "    PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + tint1;",
              "    ShipAddCustomShipInfo(cur_ruin, 'ShuMercsHQ_PortalGenerator', '', PlayerHQMainArray['Science', 'PortalGeneratorRange'], 0, 0, CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorBuildingCooldown') + CT('ShipInfo.AddInfo.CustomInfos.ShuMercsHQ_PortalGenerator.DaysLeft'));",
              "",
              "    PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] - cost;",
              "    Sound('Sound.Buy');",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGeneratorBuildStarted' + tstr7), '<DaysLeft'+'>', tint1);",
              "    tstr5 = '';",
              "}",
              "//Оплачиваем постройку генератора со счёта игрока",
              "else if(GAnswerData == 1)",
              "{",
              "    //Обновляем графику штаба (6-го уровня графики не существует)",
              "    Chameleon(cur_ruin, 'Ruins.PlayerMercHQWithPGLevel' + min(PlayerHQMainArray['Main', 'HQLevel'], 5));",
              "",
              "    PlayerHQMainArray['Science', 'PortalGenerator'] = 1;",
              "    //PlayerHQMainArray['Science', 'PortalGeneratorRange'] = 0;",
              "    //Вешаем декоративную инфошку (таймер до следующего прыжка в инфошке считается автоматически)",
              "    tint1 = CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorBuildingCooldown');",
              "    PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + tint1;",
              "    ShipAddCustomShipInfo(cur_ruin, 'ShuMercsHQ_PortalGenerator', '', PlayerHQMainArray['Science', 'PortalGeneratorRange'], 0, 0, CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorBuildingCooldown') + CT('ShipInfo.AddInfo.CustomInfos.ShuMercsHQ_PortalGenerator.DaysLeft'));",
              "",
              "    ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "    Sound('Sound.Buy');",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGeneratorBuildStarted' + tstr7), '<DaysLeft'+'>', tint1);",
              "    tstr5 = '';",
              "}",
              "//Игрок передумал строить генератор",
              "else /*if(GAnswerData == 2)*/",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PortalGeneratorBuildCancel' + tstr7);",
              "",
              "    if(PlayerHQMainArray['Science', 'PortalGenerator'] == -1) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGeneratorAgain');",
              "    else if(PlayerHQMainArray['Science', 'PortalGenerator'] == -2) tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskPortalGeneratorTwice');",
              "    else tstr5 = '';",
              "}",
              "",
              "//Если ускорение движка доступно",
              "if(PlayerHQMainArray['Science', 'SpeedUpRefill'] <= CurTurn())",
              "{",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskSpeedUp');",
              "    tint2 = 1;",
              "}",
              "//Если игрок уже производил ускорение в течение двух последних месяцев",
              "else",
              "{",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskSpeedUpNotEnough');",
              "    tint2 = 0;",
              "}",
              "",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerAskReliabilityImprove');",
              "tstr6 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerOut');",
              "",
              "tint1 = 1;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1028,
          "#":  1029,
          "Total.Lines":  18,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerPortalGeneratorYesOrgBalance' + tstr7);",
              "if(PlayerHQMainArray['Finance', 'CurrentBalance'] < cost)",
              "{",
              "    tstr2 = DeleteTags(tstr2);",
              "    AddDialogBlock(tstr2, 1);",
              "}",
              "InjectAnswer('PortalGeneratorBuild', tstr2, 0);",
              "",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerPortalGeneratorYesOwnMoney' + tstr7);",
              "if(ShipMoney(Player()) < cost)",
              "{",
              "    tstr3 = DeleteTags(tstr3);",
              "    AddDialogBlock(tstr3, 1);",
              "}",
              "InjectAnswer('PortalGeneratorBuild', tstr3, 1);",
              "",
              "tstr5 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.PlayerPortalGeneratorNo' + tstr7);",
              "InjectAnswer('PortalGeneratorBuild', tstr5, 2);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  1034,
          "#":  1035,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "dword HQ = GroupToShip(PlayerHQ);",
              "//dword HQstar = ShipStar(HQ);",
              "if(RelationToRanger(CurShip, Player()) < 100) RelationToRanger(CurShip, Player(), 100);",
              "ShipOwner(CurShip, ShipOwner(HQ));",
              "",
              "//В день выплаты зарплаты выдаём крейсеру сумму его стандартного месячного содержания",
              "if(PlayerHQMainArray['Finance', 'SalariesDay'] <= CurTurn())",
              "{",
              "    ShipMoney(CurShip, ShipMoney(CurShip) + GalaxyMoney(2, 2) * 10);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1038,
          "#":  1036,
          "Total.Lines":  19,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 = GAnswerData;",
              "//Игрок решил реэкипировать крейсер",
              "if(!tint1)",
              "{",
              "    FormChange('Ship', cur_ship);",
              "    //Если игрок довёл крейсер до перегруза (так-то он сам выгружет лишнее после реэкипировки)",
              "    ShipCalcParam(cur_ship);",
              "    if(ShipFreeSpace(cur_ship) < 0) MessageBox(CT('Script.Mod_ShuMercs.PlayerMercCruiserDialog.IAmOverloadedBoss'), 10);",
              "}",
              "//Игрок решил продать крейсер",
              "else",
              "{",
              "    //Чем старее будет корпус крейсера относительно текущего ГТУ, тем дешевле будет его продажа",
              "    cost = 6.5 * GalaxyMoney(4, 4) * max(1.0 - (0.125 * GTL - ItemLevel(ShipItems(cur_ship, 0))), 0.250);",
              "",
              "    tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.CruiserSoldConfirm'), '<Cost'+'>', cost);",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserSoldYes');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserSoldNo');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1032,
          "#":  1037,
          "Total.Lines":  21,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Добавляем варианты ответа по реэкипировке и продаже крейсера",
              "cur_ship = GroupToShip(CruisersDefenders);",
              "if(cur_ship)",
              "{",
              "    if(GroupIn(CruisersDefenders, cur_ruin))",
              "    {",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserEquipChange');",
              "        InjectAnswer('MercCruiserDialog', tstr1, 0);",
              "        tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserSold');",
              "        InjectAnswer('MercCruiserDialog', tstr1, 1);",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color><color=127,127,127>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserEquipChange') + ' ' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserOutAdd') + '</color>';",
              "        AddDialogBlock(tstr1, 1);",
              "        InjectAnswer('MercCruiserDialog', tstr1, 0);",
              "        tstr1 = '</color><color=127,127,127>' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserSold') + ' ' + CT('Script.Mod_ShuMercs.PlayerHQShipyardDialog.PlayerCruiserOutAdd') + '</color>';",
              "        AddDialogBlock(tstr1, 1);",
              "        InjectAnswer('MercCruiserDialog', tstr1, 1);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1043,
          "#":  1046,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//На Меркурий, и уничтожаем",
              "cur_ship = GroupToShip(CruisersDefenders);",
              "TransferShip(cur_ship, StarPlanets(GalaxyStar(People), 0));",
              "ShipDestroy(cur_ship, 1);",
              "PlayerHQMainArray['Shipyard', 'CapitalShipDock'] = 1;",
              "",
              "PlayerHQMainArray['Finance', 'CurrentBalance'] = PlayerHQMainArray['Finance', 'CurrentBalance'] + cost;",
              "Sound('Sound.Sell');",
              "GAnswerData = cost; //Таким образом, сохраняем значение cost до вывода следующей реплики",
              "",
              "tstr1 = 'CruiserSold';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1044,
          "#":  1047,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = 'CruiserSoldCanceled';"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1049,
          "#":  1050,
          "Total.Lines":  10,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Добавляем крейсер в состав группы",
              "if(tint1 == 1)",
              "{",
              "    tint1 = 3;",
              "}",
              "//Удаляем крейсер из состава группы",
              "else //if(tint1 == 3)",
              "{",
              "    tint1 = 1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  971,
          "#":  1055,
          "Total.Lines":  105,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Короткий скачёк",
              "if(PlayerHQJumpReady == 'PortalGeneratorShortJump')",
              "{",
              "    OrderTeleport(cur_ruin, cur_star, CoordX(tdwd1), CoordY(tdwd1));",
              "    //Задаём число дней на совершение скачка",
              "    ShipOrderData1(cur_ruin, CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorShortJumpDays'));",
              "    PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorShortJumpCooldown');",
              "    PlayerHQJumpReady = '';",
              "",
              "    GotoGov(0);",
              "    if(!PlayerBridge())",
              "    {",
              "        Sound('Sound.PG_InWork');",
              "        ButtonClick('RuinsTalk', 'PM_EndTurn');",
              "    }",
              "    else",
              "    {",
              "        InterfaceState('RuinsTalk', 'ButFormClose', 3);",
              "        InterfaceState('RuinsTalk', 'ButFormCloseImgLock', -1);",
              "    }",
              "}",
              "//Дальний скачёк",
              "else //if(PlayerHQJumpReady == 'PortalGeneratorLongJump')",
              "{",
              "    //Обновляем информацию по месту расположения штаба",
              "    PlayerHQMainArray['Main', 'HQStar'] = Id(tdwd1) - 1;",
              "    PlayerHQMainArray['Mercs', 'PlanetsCount'] = ScriptItemData(ApprovalDocuments, 3);",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'] = CT('Script.Mod_ShuMercs.PlayerMercsParams.ReplenishmentFrequency');",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentTimer'] = CurTurn() + PlayerHQMainArray['Mercs', 'ReplenishmentFrequency'];",
              "    PlayerHQMainArray['Mercs', 'ReplenishmentCount'] = ScriptItemData(ApprovalDocuments, 3); //Количество рекрутов в месяц зависит непосредственно от числа планет",
              "",
              "    OrderTeleport(cur_ruin, tdwd1, CoordX(cur_ruin), CoordY(cur_ruin));",
              "    //Задаём число дней на совершение скачка",
              "    tint1 = round(sqrt(Dist2Star(cur_star, tdwd1))) / 10 + 1;",
              "    ShipOrderData1(cur_ruin, tint1);",
              "    PlayerHQMainArray['Science', 'PortalGeneratorTimer'] = CurTurn() + CT('Script.Mod_ShuMercsHQ.PlayerMercsParams.PortalGeneratorLongJumpCooldown');",
              "    PlayerHQJumpReady = '';",
              "",
              "    //Если на систему со штабом в этот момент совершалось нападение, то теперь это уже не важно",
              "    if(GetData(3, cur_ruin))",
              "    {",
              "        //Возвращаем всех дежурных наёмников из обороны",
              "        for(i = 0; i < GroupCount(PlayerMercsDefenders); i = i + 1)",
              "        {",
              "            cur_ship = GroupShip(PlayerMercsDefenders, i);",
              "",
              "            ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) + 10000);",
              "            ChangeState('ReturningBaseState', cur_ship);",
              "        }",
              "        //Возвращаем ударную группу из обороны",
              "        for(i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "        {",
              "            cur_ship = GroupShip(PlayerMercsStrike, i);",
              "            if(!StateIs(cur_ship, 'DefendingStarState')) continue;",
              "",
              "            ShipSpecialBonuses(cur_ship, bonFuel, ShipSpecialBonuses(cur_ship, bonFuel) + 10000);",
              "            ChangeState('ReturningStrikeState', cur_ship);",
              "        }",
              "",
              "        EtherDelete('PlayerMercsOrgStarAttack');",
              "        SetData(0, 3, cur_ruin);",
              "    }",
              "",
              "    GotoGov(0);",
              "    if(!PlayerBridge())",
              "    {",
              "        Sound('Sound.PG_InWork');",
              "        ButtonClick('RuinsTalk', 'PM_EndTurn');",
              "    }",
              "    else",
              "    {",
              "        InterfaceState('RuinsTalk', 'ButFormClose', 3);",
              "        InterfaceState('RuinsTalk', 'ButFormCloseImgLock', -1);",
              "    }",
              "",
              "    //Чистим всё руками, потому что при удалении предмета оно автоматом не чистится",
              "    ScriptItemData(ApprovalDocuments, 1, 0);",
              "    ScriptItemData(ApprovalDocuments, 2, 0);",
              "    ScriptItemData(ApprovalDocuments, 3, 0);",
              "    ScriptItemTextData(ApprovalDocuments, 1, '');",
              "    ScriptItemTextData(ApprovalDocuments, 2, '');",
              "    ScriptItemTextData(ApprovalDocuments, 3, '');",
              "    //Удаляем из трюма игрока пакет документов на передислокацию",
              "    cur_item = ScriptItemToItem(ApprovalDocuments);",
              "    ReleaseItemFromScript(ApprovalDocuments);",
              "    FreeItem(GetItemFromShip(Player(), cur_item));",
              "",
              "    //Обнуляем список выданных планетарных заданий при завершении задания на передислокацию штаба",
              "    GBuildOwnBase_QuestsGiven = '';",
              "",
              "    //Удаляем все взятые по данному квесту планетарные задания и очищаем массив",
              "    for(i = ArrayDim(BuildOwnBase_QuestsArray) - 1; i > 0; i = i - 1) EtherDelete(BuildOwnBase_QuestsArray[i, 1]);",
              "    free(BuildOwnBase_QuestsArray);",
              "    BuildOwnBase_QuestsArray = newarray(1, 1);",
              "",
              "    //Уведомление об успешном завершении задания на передислокацию штаба",
              "    tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Title');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT('Script.Mod_ShuMercsHQ.PlayerHQRelocation.QuestMessage.Complete'), '<Star'+'>', '<color=255,240,100>' + Name(tdwd1) + '</color>', '');",
              "    CustomEther('QuestComplete_PlayerMercsOrg', 4, 'PlayerHQRelocation', tstr1);",
              "",
              "    //Либо можно просто по-тихому его удалить, чтоб не мешало",
              "    //EtherDelete('PlayerHQRelocation');",
              "    //Sound('Sound.NewMsg');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  1060,
          "#":  1064,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQBridgeDialog.PlayerCallHQOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1068,
          "#":  1069,
          "Total.Lines":  303,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Private.Protect.3 в процессе",
              "//Если убили охраняемую цель, либо тупой игрок напал на охраняемую цель",
              "//либо если уничтожен штаб игрока - задание провалено",
              "cur_ship = GroupToShip(QuestTarget);",
              "if(",
              "    !cur_ship ||",
              "    Hit(cur_ship, 0) ||",
              "    !GroupToShip(PlayerHQ)",
              "  )",
              "{",
              "    //Все уцелевшие наёмники возвращаются в штаб",
              "    for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestMercs, i);",
              "        SetData(0, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(0, 2, tdwd1);",
              "        SetData(-3, 3, tdwd1);",
              "        ChangeState('ReturningStrikeState', tdwd1);",
              "    }",
              "",
              "    //Если цель выжила, то вскоре самоуничтожится",
              "    if(cur_ship)",
              "    {",
              "        //Если игрок сам напал на цель",
              "        if(Hit(cur_ship, 0))",
              "        {",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 12] = 1;",
              "",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByAggression');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Портится отношение с планетой-заказчиком",
              "            RelationToRanger(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9], Player(), 0));",
              "        }",
              "",
              "        //Если был уничтожен штаб",
              "        if(!GroupToShip(PlayerHQ))",
              "        {",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "        }",
              "",
              "        //Цель возвращается на родную планету и незаметно убивается по дороге",
              "        SetData(66, 0, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "    }",
              "    else",
              "    {",
              "        //Если лайнер был уничтожен",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "    //Завершаем квест и получаем пиздюлей",
              "    EndQuestHQ(ActiveQuestHQ, 0);",
              "}",
              "else",
              "{",
              "    //Если отношение охраняемой цели к игроку упало ниже 100%, исправляем это",
              "    //(естественно, только если игрок сам не начал вдруг мочить цель)",
              "    if(RelationToRanger(cur_ship, Player()) < 100)",
              "    {",
              "        RelationToRanger(cur_ship, Player(), 100);",
              "    }",
              "",
              "    //Первый этап квеста, наёмники собираются в системе с охраняемым лайнером",
              "    //Сам лайнер пока сидит на стартовой планете",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если наёмники в полном составе прибыли в стартовую систему",
              "        cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "        if(GroupIn(QuestMercs, cur_star))",
              "        {",
              "            //Если наёмники уже приземлились на планету с лайнером, то отправляем их прикрывать его",
              "            if(GroupIn(QuestMercs, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])))",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ShipRefuel(tdwd1);",
              "                    SetData(2, 0, tdwd1);",
              "                    SetData(0, 1, tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(Id(cur_ship), 3, tdwd1);",
              "                    //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за лайнером",
              "                    SetData(100, 0, tdwd1);",
              "                    OrderTakeOff(tdwd1);",
              "                }",
              "",
              "                //Сам же лайнер тем временем отправляется в коалиционную систему",
              "                //Ручной приказ здесь, чтобы он не закупал себе рандомные товары перед взлётом",
              "                SetData(100, 0, cur_ship);",
              "                OrderTakeOff(cur_ship);",
              "",
              "                for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "                {",
              "                    tdwd1 = StarPlanets(cur_star, i);",
              "                    if((ActiveQuestsHQArray[ActiveQuestHQ, 10] & (1 << i))) continue;",
              "                    if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                    //Отдаём приказ посадки на следующую обитаемую планету первой системы",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 11] = i;",
              "                    SetData(Id(tdwd1) * 2, 2, cur_ship);",
              "                    break;",
              "                }",
              "",
              "                //А если других обитаемых планет в этой системе нет, то сразу же переходим к следующей",
              "                if(!GetData(2, cur_ship))",
              "                {",
              "                    //SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 10] = 0; //Обнуляем сет посещённых планет",
              "                    cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "                    for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "                    {",
              "                        tdwd1 = StarPlanets(cur_star, i);",
              "                        if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                        //Отдаём приказ посадки на первую обитаемую планету второй системы",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 11] = i;",
              "                        SetData(Id(tdwd1) * 2, 2, cur_ship);",
              "                        break;",
              "                    }",
              "                }",
              "",
              "                //Переходим на второй этап квеста, следование (с защитой) за лайнером",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwo'), '<Star'+'>', Name(cur_star), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "                QuestTargetDialogCall = CurTurn() + 3; //Лайнер сам вызовет игрока после взлёта",
              "            }",
              "            //Иначе отправляем их на планету с лайнером",
              "            else",
              "            {",
              "                for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 1, tdwd1);",
              "                    //Множим Id на два для обозначения маркера планеты",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "                }",
              "            }",
              "        }",
              "        //Если на данном этапе все наёмники по каким-то причинам уничтожены, то квест провален",
              "        else if(!GroupCount(QuestMercs))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTime');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "            ShipDestroy(GroupToShip(QuestTarget), 1);",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "            //Завершаем квест и получаем пиздюлей",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "    }",
              "    //Второй этап задания, наёмники следуют за лайнером, попутно его защищая,",
              "    //а сам лайнер отправляется на облёт планет в текущей системе (если есть), а затем и в следующей",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Если на лайнер кто-то напал",
              "        if(ShipGetBad(cur_ship))",
              "        {",
              "            if(Dist(cur_ship, ShipGetBad(cur_ship)) <= 350)",
              "            {",
              "                //Возвращаем его обратно на родную планету",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 12] = 1;",
              "                SetData(0, 1, cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageThree'), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                exit;",
              "            }",
              "            else ShipSetBad(cur_ship, 0);",
              "        }",
              "",
              "        cur_star = ShipStar(cur_ship);",
              "        cur_planet = GetShipPlanet(cur_ship);",
              "",
              "        if(cur_planet)",
              "        {",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 10] = ActiveQuestsHQArray[ActiveQuestHQ, 10] + (1 << ActiveQuestsHQArray[ActiveQuestHQ, 11]);",
              "            SetData(0, 2, cur_ship);",
              "",
              "            for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "            {",
              "                tdwd1 = StarPlanets(cur_star, i);",
              "                if((ActiveQuestsHQArray[ActiveQuestHQ, 10] & (1 << i))) continue;",
              "                if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                //Отдаём приказ посадки на следующую обитаемую планету текущей системы",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11] = i;",
              "                SetData(Id(tdwd1) * 2, 2, cur_ship);",
              "                break;",
              "            }",
              "",
              "            //А если других обитаемых планет в этой системе нет, то сразу же переходим к следующей",
              "            if(!GetData(2, cur_ship))",
              "            {",
              "                //Если лайнер завершил облёт планет в последней системе",
              "                if(Id(cur_star) == ActiveQuestsHQArray[ActiveQuestHQ, 8])",
              "                {",
              "                    //Возвращаем его обратно на родную планету",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "                    SetData(0, 1, cur_ship);",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageThree'), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "                }",
              "                else",
              "                {",
              "                    cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 10] = 0; //Обнуляем сет посещённых планет",
              "                    for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "                    {",
              "                        tdwd1 = StarPlanets(cur_star, i);",
              "                        if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                        //Отдаём приказ посадки на первую обитаемую планету второй системы",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 11] = i;",
              "                        SetData(Id(tdwd1) * 2, 2, cur_ship);",
              "                        break;",
              "                    }",
              "",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwo'), '<Star'+'>', Name(cur_star), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста (последний)",
              "    //Лайнер отправляется обратно на свою родную планету по причине завершения облёта планет, либо из-за нападения пиратов/игрока",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Контрабандист вернулся на родную планету",
              "        if(GroupIn(QuestTarget, IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])))",
              "        {",
              "            //Все уцелевшие наёмники возвращаются в штаб",
              "            for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(-3, 3, tdwd1);",
              "                ChangeState('ReturningStrikeState', tdwd1);",
              "            }",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Planet'+'>', Name(IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9])), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "            CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Завершаем жизненный путь лайнера",
              "            ShipDestroy(GroupToShip(QuestTarget), 1);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "            NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1), 0);",
              "",
              "            //Завершаем квест и получаем награду",
              "            EndQuestHQ(ActiveQuestHQ, 1);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1069,
          "#":  1070,
          "Total.Lines":  210,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Private.Protect.3",
              "function PrivateProtectQuestThreeConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.3.FirstStarMaxRange');",
              "    int second_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.3.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 2);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "",
              "        //Выбираем пиратскую систему, после чего начинаем перебор ближайших коалиционных систем",
              "        //Ищем систему, в которой находится не менее 5 нескриптовых военных (из них допустимо доспавнить +2)",
              "        dword first_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(first_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "            if(StarOwner(cur_star)) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            cur_range = round(sqrt(Dist2Star(cur_star, first_star)));",
              "            if(cur_range > second_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = first_star;",
              "                tarr2[0, 1] = cur_star;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(2);",
              "                tarr2[available_options, 0] = first_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Имя будущего лайнера",
              "        tarr1[next_num, 0] = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.3.LinerName' + Rnd(1, 5, sqr(seed ^ 2356787))); //+ PlanetRace(tarr2[available_options, 2])",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер квеста",
              "        tarr1[next_num, 2] = 0;",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Private.Protect.3';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 6, 1000, 0);",
              "        tarr1[next_num, 5] = cost;",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 0;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Система Коалиции (стартовая)",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Система Коалиции (целевая)",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для спавна цели в пиратской системе",
              "        //Начинаем перебор планет (стартовая планета лайнера)",
              "        unknown t_array = newarray(1);",
              "        unknown t_array2 = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            dword target_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(target_planet) == None) continue;",
              "",
              "            ArrayAdd(t_array, target_planet);",
              "            ArrayAdd(t_array2, i);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        int rnd = Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 55));",
              "        tarr1[next_num, 9] = t_array[rnd];",
              "",
              "        //Сет номеров уже посещённых лайнером в ходе тура планет (обнуляется по прилёту во вторую систему)",
              "        tarr1[next_num, 10] = (1 << t_array2[rnd]); //Начальное значение - сет номера стартовой планеты лайнера",
              "        tarr1[next_num, 11] = 0; //Номер планеты (в списке системы), на которую лайнер направляется прямо сейчас (используется только во втором этапе квеста)",
              "        //Маркер нападения на лайнер (если 1, значит, он сорвался лететь домой после нападения, а не по завершению тура)",
              "        tarr1[next_num, 12] = 0;",
              "        //Филлеры (про запас)",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetName'+'>', tarr1[next_num, 0],",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<DestinationStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Private.Protect.3",
              "function PrivateProtectQuestThreePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    //Блочим квестовые системы от нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    //Определяем, сколько наёмников игрока отправится на задание",
              "    //(половина из резерва, но не менее одного)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] == 1) i = 1;",
              "    else i = PlayerHQMainArray['Mercs', 'CurrentAtReady'] / 2;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - i;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Transport, i);",
              "    //Все они должны иметь пиратского овнера во избежание лишней рандомной агрессии",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 0); //Пират",
              "        ShipStatus(ship, 2, 100); //Воин",
              "    }",
              "",
              "    //Спавним лайнер на выбранной планете (пока он просто сидит и ждёт)",
              "    dword target_ship = BuyTransport(ActiveQuestsHQArray[q_num, 9], 1, 300);",
              "    SetName(target_ship, ActiveQuestsHQArray[q_num, 0]);",
              "    for(i = 1; i <= 3; i = i + 1) ShipRefit(target_ship);",
              "    ShipJoin(QuestTarget, target_ship);",
              "    SetData(-1, 0, target_ship);",
              "",
              "    //Накидываем лайнеру хреновый движок и повышаем резисты",
              "    dword engine = ShipEqInSlot(target_ship, t_Engine);",
              "    if(ItemLevel(engine) > 3)",
              "    {",
              "        ItemCost(engine, round(PortionInDiapason(ItemLevel(engine), 4, 8, 0.875, 0.375) * ItemCost(engine)));",
              "        ItemLevel(engine, 3);",
              "    }",
              "    NoDropItem(engine, 1);",
              "    ItemExtraSpecialsAddByType(ShipEqInSlot(target_ship, t_Hull), FindBonusByNameInCfg('ShuMercsHQ_QuestTargetDebuff'), 15);",
              "    //Очищаем трюм лайнера от всех прочих возможных товаров, а то выглядит нелепо",
              "    for(i = t_Food; i <= t_Narcotics; i = i + 1) GoodsAdd(target_ship, i, -GoodsCount(target_ship, i));",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_GuardedShip', 'NoShow');",
              "    //Также вешаем на лайнер \"магнит для грабителей\"",
              "    NoTargetToShip(target_ship, 6);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName'+'>', Name(target_ship), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteStageOne'), '<Star'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '<Planet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text, target_ship);",
              "",
              "    //Выдаём всем наёмникам задачу лететь в систему с лайнером",
              "    for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "    {",
              "        tdwd2 = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 7]), 1, tdwd2);",
              "        //SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 1, tdwd2);",
              "    }",
              "",
              "    //Заносим в массив Id квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "    //А также планеты",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1073,
          "#":  1074,
          "Total.Lines":  404,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Private.Protect.4 в процессе",
              "",
              "//Стартовая система",
              "start_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "//Целевая система",
              "target_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "//Стартовая планета",
              "start_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "//Целевая планета",
              "target_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 10]);",
              "//Главная цель задания",
              "cur_ship = GroupToShip(QuestTarget);",
              "",
              "//Если убили цель задания, либо уничтожен штаб игрока, задание провалено",
              "if(!cur_ship || !GroupToShip(PlayerHQ))",
              "{",
              "    //Все уцелевшие наёмники возвращаются в штаб",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        tdwd1 = GroupShip(QuestMercs, i);",
              "        SetData(0, 0, tdwd1);",
              "        SetData(0, 1, tdwd1);",
              "        SetData(0, 2, tdwd1);",
              "        SetData(-3, 3, tdwd1);",
              "        ChangeState('ReturningStrikeState', tdwd1);",
              "    }",
              "",
              "    //Если цель выжила, то вскоре самоуничтожиться",
              "    if(cur_ship)",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        SetData(66, 0, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "    }",
              "    else",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "        //Если цель уничтожена и контейнер существует то нападающие (если они существуют) и если достают до контейнера, уничтожают его",
              "        cur_item = ScriptItemToItem(QuestItem);",
              "        if(cur_item)",
              "        {",
              "            //Через 3 дня предмет будет автоматически выведен из скриптового объекта",
              "            ItemOnActCode(cur_item, 'if(' + (CurTurn() + 3) + ' <= CurTurn()) ReleaseItemFromScript(CurItem());', 't_OnStep|11');",
              "",
              "            //Перебираем нападающих и выставляем им маркер для уничтожения контейнера",
              "            cur_item = Id(cur_item);",
              "            for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestAttackers, i);",
              "                ShipAddCustomShipInfo(tdwd1, 'ShuMercsHQ_ShipDestroysItem', 'NoShow', cur_item, 0, CurTurn() + 3);",
              "            }",
              "        }",
              "    }",
              "",
              "    NoComeKlingToStar(start_star, 0);",
              "    NoComeKlingToStar(target_star, 0);",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "",
              "    //Завершаем квест и получаем пиздюлей",
              "    EndQuestHQ(ActiveQuestHQ, 0);",
              "}",
              "else",
              "{",
              "    //Если отношение охраняемой цели к игроку упало ниже 100%, исправляем это",
              "    //(естественно, только если игрок сам не начал вдруг мочить цель)",
              "    if(!Hit(cur_ship, 0))",
              "    {",
              "        if(RelationToRanger(cur_ship, Player()) < 100)",
              "        {",
              "            RelationToRanger(cur_ship, Player(), 100);",
              "        }",
              "    }",
              "    else //Если игрок атаковал цель",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedPlayerAttack');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "        {",
              "            SetData(73, 0, cur_ship);",
              "        }",
              "        else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "        {",
              "            //Запрещаем разговоры  кораблём",
              "            NoTalkToShip(cur_ship,1);",
              "            SetData(66, 0, cur_ship);",
              "            for(i = 0; i != GroupCount(QuestAttackers); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestAttackers, i);",
              "                //Выставляем маркер преследования до того пока не потеряем цель если потеряли выводим корабль из группы",
              "                SetData(7, 0, tdwd1);",
              "            }",
              "        }",
              "",
              "        QuestTargetDialogCall = CurTurn() + 2;",
              "        //Гарантировано ставим враждебное отношение",
              "        RelationToRanger(cur_ship, Player(), 0);",
              "        NoComeKlingToStar(start_star, 0);",
              "        NoComeKlingToStar(target_star, 0);",
              "",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "        //Завершаем квест и получаем пиздюлей",
              "        EndQuestHQ(ActiveQuestHQ, 0);",
              "    }",
              "",
              "    //Первый этап квеста, наёмники собираются в системе с охраняемым кораблём",
              "    //Сам пират пока сидит на стартовой планете",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если наёмники в полном составе прибыли в стартовую систему",
              "        if(GroupIn(QuestMercs, start_star))",
              "        {",
              "            //Если наёмники уже приземлились на планету с пиратом, то отправляем их прикрывать его",
              "            if(GroupIn(QuestMercs, start_planet))",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ShipRefuel(tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(Id(cur_ship), 3, tdwd1);",
              "                    //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за пиратом,также далее будет действовать маркер 2 который значит что не нужно садится на планеты на которые садится пират",
              "                    SetData(102, 0, tdwd1);",
              "                    OrderTakeOff(tdwd1);",
              "                }",
              "",
              "                //Сам же пират тем временем отправляется в систему с незаселёнкой",
              "                //Ручной приказ здесь, чтобы он не закупал себе рандомные товары перед взлётом",
              "                SetData(100, 0, cur_ship);",
              "                OrderTakeOff(cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8], 1, cur_ship);",
              "",
              "                //Умножаем Id на два для обозначения маркера планеты незаселёнки",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10] * 2, 2, cur_ship);",
              "",
              "                //Переходим на второй этап квеста, следование (с защитой) за пиратом",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwo'), '<Planet'+'>', Name(target_planet), '<Star'+'>', Name(target_star), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "                QuestTargetDialogCall = CurTurn() + 3;",
              "            }",
              "            //Отправляем их на планету с пиратом",
              "            else",
              "            {",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 1, tdwd1);",
              "                    //Множим Id на два для обозначения маркера планеты",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, tdwd1);",
              "                }",
              "            }",
              "        }",
              "        //Если на данном этапе все наёмники по каким-то причинам уничтожены, то квест провален",
              "        else if(!GroupCount(QuestMercs))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTime');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            NoComeKlingToStar(start_star, 0);",
              "            NoComeKlingToStar(target_star, 0);",
              "            ShipDestroy(cur_ship, 1);",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "            //Завершаем квест",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "    }",
              "    //Второй этап квеста, наёмники следуют за пиратом, попутно его защищая,",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Пират прибыл в нужную систему",
              "        if(GroupIn(QuestTarget, target_star))",
              "        {",
              "            //Пират прибыл на нужную планету",
              "            if(GroupIn(QuestTarget, target_planet))",
              "            {",
              "                //Пират задержится на планете для поиска клада",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 2])",
              "                {",
              "                    //Отсидел, теперь возвращаем его обратно в стартовую систему на стартовую планету",
              "                    if(ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn())",
              "                    {",
              "                        //Создаём контейнер и добавляем его в дроп",
              "                        tdwd1 = CreateQuestItem('ShuMercsHQ_PirateContainer', ShipPilotRace(cur_ship));",
              "                        //Передаём туда значение типа дропа флешки в дата параметры",
              "                        UselessItemData(tdwd1, 1, ActiveQuestsHQArray[ActiveQuestHQ, 12]);",
              "                        //Во второй дата параметр потом занесём маркер того что предмет был подобран",
              "                        ItemSize(tdwd1, 1);",
              "                        ShipAddDropItem(cur_ship, tdwd1);",
              "                        //Добавляем акткод при поднятии предмета просто потому-что функция FireWeapon сама ничего не проверяет при стрельбе",
              "                        LinkItemToScript(tdwd1, QuestItem);",
              "",
              "                        //Создаем контейнер в трюме",
              "                        tdwd2 = CreateQuestItem('ShuMercsHQ_PirateContainer', ShipPilotRace(cur_ship));",
              "                        AddItemToShip(cur_ship, tdwd2);",
              "                        NoDropItem(tdwd2, 1);",
              "                        ItemSize(tdwd2, 1);",
              "                        //Копируем цену у того который в дропе",
              "                        ItemCost(tdwd2, ItemCost(tdwd1));",
              "",
              "                        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 7], 1, cur_ship);",
              "                        //Множим Id на два для обозначения маркера планеты",
              "                        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 9] * 2, 2, cur_ship);",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 2] = 0;",
              "",
              "                        //Обновляем уведомление задания",
              "                        tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                        tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageThree'), '<Planet'+'>', Name(start_planet), '<Star'+'>', Name(start_star), '255,240,100');",
              "                        CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "                        //Составляем список планет в системе",
              "                        unknown planets_array = newarray(1);",
              "                        for(i = 0; i < StarPlanets(target_star); i = i + 1)",
              "                        {",
              "                            tdwd1 = StarPlanets(target_star, i);",
              "                            if(PlanetOwner(tdwd1) == None) continue;",
              "",
              "                            ArrayAdd(planets_array, tdwd1);",
              "                        }",
              "",
              "                        //Присваиваем планету чисто для того чтоб получить начальное зерно рандома в доминаторском условии",
              "                        if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 1)",
              "                        {",
              "                            //Задаём доминаторскую серию системы также запоминая её чтоб потом вернуть",
              "                            int tempstarserie = StarSeries(target_star);",
              "                            StarSeries(target_star, 1);",
              "",
              "                            int tempowner = PlanetOwner(planets_array[1]);",
              "                            PlanetOwner(planets_array[1], 5);",
              "                            cnt = Rnd(GetParFromString(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestEndingDomiksCount'), ',', 0, 1), GetParFromString(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestEndingDomiksCount'), ',', 1, 1), sqr(GetQuestSeed() + 82));",
              "                            for(i = 0; i != cnt; i = i + 1)",
              "                            {",
              "                                tdwd1 = BuyDomikExtremal(planets_array[1], Rnd(3, 5, sqr(GetQuestSeed() + 32)));",
              "                                //Телепортируем на незаселёнку",
              "                                TransferShip(tdwd1, target_planet);",
              "                                ShipJoin(QuestAttackers, tdwd1);",
              "                                //Отдаём приказ домиаторам напрямую, чтобы не тормозили взлетать за пиратом",
              "                                SetData(106, 0, tdwd1);",
              "                                SetData(Id(cur_ship), 3, tdwd1);",
              "                                OrderTakeOff(tdwd1);",
              "                            }",
              "",
              "                            PlanetOwner(planets_array[1], tempowner);",
              "                            //Возвращаем серию на место",
              "                            StarSeries(target_star, 1);",
              "                        }",
              "                        else if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 2)",
              "                        {",
              "                            //Вешаем тип для агра остальных вояк в системе",
              "                            ShipSubType(cur_ship, 2);",
              "                            cnt = Rnd(GetParFromString(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestEndingWarriorsCount'), ',', 0, 0), GetParFromString(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestEndingWarriorsCount'), ',', 1, 0), sqr(GetQuestSeed() + 66));",
              "                            for(i = 0; i != cnt; i = i + 1)",
              "                            {",
              "                                tdwd1 = BuyWarrior(planets_array[Rnd(1, ArrayDim(planets_array) - 1, sqr(GetQuestSeed() + 90))]);",
              "                                //Телепортируем на незаселёнку",
              "                                TransferShip(tdwd1, target_planet);",
              "                                ShipJoin(QuestAttackers, tdwd1);",
              "                                //Отдаём приказ воякам напрямую, чтобы не тормозили взлетать за пиратом",
              "                                SetData(107, 0, tdwd1);",
              "                                SetData(Id(cur_ship), 3, tdwd1);",
              "                                OrderTakeOff(tdwd1);",
              "                            }",
              "                        }",
              "                        else if(ActiveQuestsHQArray[ActiveQuestHQ, 11] == 3)",
              "                        {",
              "                            //Вешаем магнит на пирата для атаки остальных пиратов в системе",
              "                            NoTargetToShip(cur_ship, 6);",
              "                            cnt = Rnd(GetParFromString(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestEndingPiratesCount'), ',', 0, 0), GetParFromString(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestEndingPiratesCount'), ',', 1, 0), sqr(GetQuestSeed() + 28));",
              "                            for(i = 0; i != cnt; i = i + 1)",
              "                            {",
              "                                tdwd1 = BuyWarrior(planets_array[Rnd(1, ArrayDim(planets_array) - 1, sqr(GetQuestSeed() + 28))]);",
              "                                //Телепортируем на незаселёнку",
              "                                TransferShip(tdwd1, target_planet);",
              "                                ShipJoin(QuestAttackers, tdwd1);",
              "                                //Отдаём приказ пиратам напрямую, чтобы не тормозили взлетать за пиратом",
              "                                SetData(107, 0, tdwd1);",
              "                                SetData(Id(cur_ship), 3, tdwd1);",
              "                                OrderTakeOff(tdwd1);",
              "                            }",
              "                        }",
              "                        //Третий этап квеста (он же последний)",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "                    }",
              "                }",
              "                //На количество дней из Lang",
              "                else",
              "                {",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwoWait'), '<Planet'+'>', Name(target_planet), '255,240,100');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.DaysOnPlanet');",
              "                }",
              "            }",
              "            else",
              "            {",
              "                //Пират уже прибыл в систему но наёмники ещё нет, пират ожидает наёмников",
              "                if(!GroupIn(QuestMercs, target_star))",
              "                {",
              "                    if(!ShipInNormalSpace(cur_ship)) exit;",
              "                    //Если маркер уже 17, то выходим",
              "                    if(GetData(0, cur_ship) == 17) exit;",
              "                    //Выставляем координаты скриптового места",
              "                    QuestPlaceX = CoordX(cur_ship);",
              "                    QuestPlaceY = CoordY(cur_ship);",
              "                    SetData(17, 0, cur_ship);",
              "                    exit;",
              "                }",
              "",
              "                //Если пират приблизиться к планете на следующем ходу, а наёмников ещё рядом нет, входим в режим ожидания и кружим над планетой",
              "                if(Dist(target_planet, cur_ship) <= 150 + ShipSpeed(cur_ship))",
              "                {",
              "                    if(!GroupIn(QuestMercs,AroundQuestTarget))",
              "                    {",
              "                        SetData(18, 0, cur_ship);",
              "                        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10] * 2, 2, cur_ship);",
              "                        exit;",
              "                    }",
              "                }",
              "",
              "                SetData(0, 0, cur_ship);",
              "                SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10] * 2, 2, cur_ship);",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста (последний)",
              "    //Пират отправляется на свою родную планету (где в итоге и сдохнет)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Пират вернулся в родную систему",
              "        if(GroupIn(QuestTarget, start_star))",
              "        {",
              "            //Возвразаем на место тип и маркер на атаку от других кораблей",
              "            ShipSubType(cur_ship, 0);",
              "            NoTargetToShip(cur_ship, 3);",
              "",
              "            //Пират вернулся на родную планету завершаем квест",
              "            if(GroupIn(QuestTarget, start_planet))",
              "            {",
              "                //Все уцелевшие наёмники возвращаются в штаб",
              "                for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 0, tdwd1);",
              "                    SetData(0, 1, tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(-3, 3, tdwd1);",
              "                    ChangeState('ReturningStrikeState', tdwd1);",
              "                }",
              "",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<Planet'+'>', Name(start_planet), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "                CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "                //Завершаем жизненный путь пирата",
              "                ShipDestroy(cur_ship, 1);",
              "                NoComeKlingToStar(start_star, 0);",
              "                NoComeKlingToStar(target_star, 0);",
              "",
              "                //И сам квест тоже",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "                //Завершаем квест и получаем награду",
              "                EndQuestHQ(ActiveQuestHQ, 1);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1074,
          "#":  1075,
          "Total.Lines":  297,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Private.Protect.4",
              "function PrivateProtectQuestFourConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.FirstStarMaxRange');",
              "    int second_range = CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.SecondStarMaxRange');",
              "    //Минимальное необходимое число военных в системе",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 2);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        //Исключаем доминаторские системы и системы с кастомной рассой",
              "        if(StarOwner(cur_star) == 1) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "",
              "        //Выбираем вторую систему",
              "        dword pirate_star = cur_star;",
              "        for(int j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(pirate_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "            //Исключаем доминаторские системы и системы с кастомной рассой",
              "            if(StarOwner(cur_star) == 1) continue;",
              "            if(StarCustomFaction(cur_star) != '') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "            cur_range = round(sqrt(Dist2Star(cur_star, pirate_star)));",
              "            if(cur_range > second_range) continue;",
              "            //Проверяем систему на наличие незаселёнок а то мало-ли что там в модах понаделают",
              "            int check = 0;",
              "            for(int k = 0; k < StarPlanets(cur_star); k = k + 1)",
              "            {",
              "                if(PlanetOwner(StarPlanets(cur_star, k)) == None)",
              "                {",
              "                    check = 1;",
              "                    break;",
              "                }",
              "            }",
              "            if(!check) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = pirate_star;",
              "                tarr2[0, 1] = cur_star;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(2);",
              "                tarr2[available_options, 0] = pirate_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на ~7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Выбираем рандомное имя пирату заказщику",
              "        tarr1[next_num, 0] = '' + Rnd(1, 5, seed);",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер квеста",
              "        tarr1[next_num, 2] = 0;",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Private.Protect.4';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 8, 1000, 0);",
              "        tarr1[next_num, 5] = cost;",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 0;",
              "        //Всё что ниже хранится в массиве в виде Id",
              "        //Система с пиратом (стартовая)",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Целевая система",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для спавна цели",
              "        unknown t_array = newarray(1);",
              "        dword target_planet;",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            target_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            if(PlanetOwner(target_planet) == 6) continue;",
              "",
              "            ArrayAdd(t_array, target_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных обитаемых",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 45))];",
              "",
              "        //Система, из которой прилетят, и в которую улетят пираты",
              "",
              "        ArrayClear(t_array);",
              "        //Ищем незаселёнку в выбраной системе",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 8]); i = i + 1)",
              "        {",
              "            target_planet = StarPlanets(tarr1[next_num, 8], i);",
              "            if(PlanetOwner(target_planet) != None) continue;",
              "",
              "            ArrayAdd(t_array, target_planet);",
              "        }",
              "        //Выбираем рандомно незаселёнку",
              "        tarr1[next_num, 10] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 67))];",
              "",
              "        //Тут будет хранится выпавшый тип врагов и тип того что лежит в флешке,сейчас сюда заносим значение которое надо будет распарсить",
              "        tarr1[next_num, 11] = CT(tarr1[next_num, 3] + '.QuestEndingAttackersPercents');",
              "        tarr1[next_num, 12] = CT(tarr1[next_num, 3] + '.QuestEndingContainerPercents');",
              "",
              "        tarr1[next_num, 13] = 0;",
              "        tarr1[next_num, 14] = 0;",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<Pirate'+'>', CT(tarr1[next_num, 3] + '.TargetName' + tarr1[next_num, 0]),",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 10]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Private.Protect.4",
              "function PrivateProtectQuestFourPrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    //Блочим квестовые системы от нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "",
              "    CoordX(QuestPlace, 0);",
              "    CoordY(QuestPlace, 0);",
              "",
              "    //Определяем, сколько наёмников игрока отправится на задание",
              "    //(половина из резерва, но не менее одного)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    if(PlayerHQMainArray['Mercs', 'CurrentAtReady'] == 1) i = 1;",
              "    else i = PlayerHQMainArray['Mercs', 'CurrentAtReady'] / 2;",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = PlayerHQMainArray['Mercs', 'CurrentAtReady'] - i;",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword playerhq = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(playerhq), playerhq, t_Transport, i);",
              "    //Выдаём всем наёмникам задачу лететь в систему с пиратом,и также считает их среднюю скорость",
              "    int speedcoef = 0;",
              "    for(i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        tdwd2 = GroupShip(QuestMercs, i);",
              "        speedcoef = speedcoef + ShipSpeed(tdwd2);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 7]), 1, tdwd2);",
              "    }",
              "",
              "    //Спавним вольного пирата на выбранной планете (пока что он просто сидит и ждёт)",
              "    int old_race = PlanetRace(ActiveQuestsHQArray[q_num, 9]);",
              "    int old_owner = PlanetRace(ActiveQuestsHQArray[q_num, 9]);",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 9], int(ActiveQuestsHQArray[q_num, 0]) - 1);",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 9], int(ActiveQuestsHQArray[q_num, 0]) - 1);",
              "    ActiveQuestsHQArray[q_num, 0] = CT(ActiveQuestsHQArray[q_num, 3] + '.TargetName' + ActiveQuestsHQArray[q_num, 0]);",
              "",
              "    dword target_ship = BuyPirate(ActiveQuestsHQArray[q_num, 9], 0);",
              "    //Получаем среднее значение скорости",
              "    speedcoef = speedcoef / GroupCount(QuestMercs);",
              "    ShipOwner(target_ship, ShipPilotRace(target_ship));",
              "",
              "    //Подгоняем скорость пирата под скорость наёмников, чтобы было логичнее",
              "    ShipSpecialBonuses(target_ship, bonSpeed, (speedcoef + RndObject(-25, 25, ActiveQuestsHQArray[q_num, 7])) - ShipSpeed(target_ship));",
              "    //Также пирату не нужен форсаж и захват",
              "    ShipSpecialBonuses(target_ship, bonSlotForsage, -100);",
              "    ShipSpecialBonuses(target_ship, bonSlotHook, -100);",
              "",
              "    SetName(target_ship, ActiveQuestsHQArray[q_num, 0]); //Устанавливаем имя пирата, зависящее от его расы",
              "    for(i = 0; i < 3; i = i + 1) ShipRefit(target_ship);",
              "    ShipJoin(QuestTarget, target_ship);",
              "    SetData(-1, 0, target_ship);",
              "",
              "    ItemExtraSpecialsAddByType(ShipEqInSlot(target_ship, t_Hull), FindBonusByNameInCfg('ShuMercsHQ_QuestTargetDebuff'), 15);",
              "    ShipAddCustomShipInfo(target_ship, 'ShuMercsHQ_GuardedShip', 'NoShow');",
              "    //Вешаем запрет на возможность рейнджерам или пиратам грабить корабль",
              "    NoTargetToShip(target_ship, 3);",
              "",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 9], old_race);",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 9], old_owner);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName'+'>', Name(target_ship), '255,240,100');",
              "    str text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteStageOne'), '<Planet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '<Star'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text, target_ship);",
              "",
              "    int rndresult = Rnd(1, 100, sqr(GetQuestSeed() + 69));",
              "",
              "    //Сами типы",
              "    //ActiveQuestsHQArray[q_num, 11] - хранит в себе значение типа атак",
              "    //0 - без атаки",
              "    //1 - атакуют доминаторы",
              "    //2 - атакуют коалиция",
              "    //3 - атакуют пираты",
              "    if(rndresult <= GetParFromString(ActiveQuestsHQArray[q_num, 11], ',', 0, 0))",
              "    {",
              "        ActiveQuestsHQArray[q_num, 11] = 0;",
              "    }",
              "    else if(rndresult <= GetParFromString(ActiveQuestsHQArray[q_num, 11], ',', 0, 0) + GetParFromString(ActiveQuestsHQArray[q_num, 11], ',', 1, 0))",
              "    {",
              "        ActiveQuestsHQArray[q_num, 11] = 1;",
              "    }",
              "    else",
              "    {",
              "        if(StarOwner(ActiveQuestsHQArray[q_num, 8]) == 0)",
              "        {",
              "            ActiveQuestsHQArray[q_num, 11] = 2;",
              "        }",
              "        else",
              "        {",
              "            ActiveQuestsHQArray[q_num, 11] = 3;",
              "        }",
              "    }",
              "",
              "    //ActiveQuestsHQArray[q_num, 12] - хранит в себе значение типа что лежит на флешке",
              "    //Типы того что лежит на флекше",
              "    //0 - обычная флешка",
              "    //1 - флешка с чертежом",
              "    //2 - флешка с зеттакоином",
              "",
              "    //QuestHQFlashDrivesInfo нужно для контроля повтора типов флешки",
              "    //0 - игрок ещё не получал флешки ни с зеттакойном ни с чертежом",
              "    //1 - игрок получал флешку с чертежом",
              "    //2 - игрок получал флешку с зеттакойном",
              "    //3 - игрок получал оба варианта ценной флешки",
              "    rndresult = Rnd(1, 100, sqr(GetQuestSeed() + 54));",
              "    int zeta_chance = GetParFromString(ActiveQuestsHQArray[q_num, 12], ',', 2, 0);",
              "    int blueprint_chance = zeta_chance + GetParFromString(ActiveQuestsHQArray[q_num, 12], ',', 1, 0);",
              "",
              "    ActiveQuestsHQArray[q_num, 12] = 0;",
              "    if(QuestHQFlashDrivesGiven < 3)",
              "    {",
              "        if(rndresult <= blueprint_chance)",
              "        {",
              "            //Получит флешку с зеттакойном",
              "            if(rndresult <= zeta_chance && QuestHQFlashDrivesGiven < 2)",
              "            {",
              "                ActiveQuestsHQArray[q_num, 12] = 2;",
              "                QuestHQFlashDrivesGiven = QuestHQFlashDrivesGiven + 2;",
              "            }",
              "            //Получит флешку с чертёжом",
              "            else",
              "            {",
              "                ActiveQuestsHQArray[q_num, 12] = 1;",
              "                QuestHQFlashDrivesGiven = QuestHQFlashDrivesGiven + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Заносим в массив Id квестовых систем",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "    //А также планет",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "    ActiveQuestsHQArray[q_num, 10] = Id(ActiveQuestsHQArray[q_num, 10]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1080,
          "#":  1081,
          "Total.Lines":  343,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание Coalition.AttackDominators.1 в процессе",
              "//Если захватили систему, либо истекло время",
              "cur_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 8] - 1);",
              "if(!StarOwner(cur_star) || ActiveQuestsHQArray[ActiveQuestHQ, 2] <= CurTurn() || !GroupToShip(PlayerHQ))",
              "{",
              "    check = 0;",
              "    //Успех",
              "    if(!StarOwner(cur_star))",
              "    {",
              "        //Ищем планету, на которой происходит церемония награждения",
              "        for(i = 0; i < StarPlanets(cur_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            break;",
              "        }",
              "        cur_planet = Id(cur_planet);",
              "",
              "        //Все уцелевшие наёмники летят за наградой, после чего возвращаются в штаб",
              "        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(4, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(cur_planet * 2, 2, tdwd1);",
              "            ShipAddCustomShipInfo(tdwd1, 'ChangeShipScriptGroupInfo', 'NoShow', 0,0,0, 'Mod_ShuKlissan.ToGetRewardShips.OrderGetReward,' + cur_planet + ',0,0,0', 'Mod_ShuMercsHQ.QuestMercs.ReturningStrikeState,0,0,0,-3');",
              "",
              "            //После влёта и вплоть до захвата системы наёмники находятся в стейте QuestMercsCapPirState",
              "            ChangeState('QuestMercsKillState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные летят за наградой, после чего выводятся из скрипта",
              "        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            ShipJoinToScript(tdwd1, 'Mod_ShuKlissan.ToGetRewardShips.OrderGetReward');",
              "            SetData(cur_planet, 0, tdwd1);",
              "            ShipFreeFlight(tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetStar'+'>', Name(cur_star), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "        CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        check = 1;",
              "    }",
              "    //Провал",
              "    else",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "        //Все уцелевшие военные выводятся из скрипта",
              "        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestSupport, i);",
              "            ShipSpecialBonuses(tdwd1, bonFuel, ShipSpecialBonuses(tdwd1, bonFuel) + 10000);",
              "",
              "            if(!i) //На всякий случай проверяем, не выжил ли линкор с транками после провала миссии (вероятность крайне мала, но есть)",
              "            {",
              "                if(ShipSubType(tdwd1) == 1)",
              "                {",
              "                    for(j = ShipArts(tdwd1) - 1; j >= 0; j = j - 1)",
              "                    {",
              "                        cur_item = ShipArts(tdwd1, j);",
              "                        if(ItemType(cur_item) != t_ArtefactTranclucator) continue;",
              "                        FreeItem(GetArtFromShip(tdwd1, j));",
              "                    }",
              "",
              "                    ShipDeleteCustomShipInfo(tdwd1, 'ShuMercsHQ_QuestTrancOwner');",
              "                }",
              "            }",
              "",
              "            OrderLock(tdwd1, 0);",
              "            ShipOut(tdwd1);",
              "        }",
              "",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        if(GroupToShip(PlayerHQ)) tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        else tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    //На всякий случай дублируем",
              "    NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "    NoComeKlingToStar(cur_star, 0);",
              "",
              "    //Снимаем защиту от прибытия новых нейролинков в атакуемую систему",
              "    tint1 = Id(cur_star);",
              "    for(i = ArrayDim(KlissanInvasion['RegroupingNeurolinks']) - 1; i >= 1; i = i - 1)",
              "    {",
              "        //Если в этой системе таки условно есть нейролинк, просто временно находится на перегруппировке",
              "        if(int(GetVariableName(KlissanInvasion['RegroupingNeurolinks', i])) == tint1)",
              "        {",
              "            ArrayDelete(KlissanInvasion['RegroupingNeurolinks'], i);",
              "            break;",
              "        }",
              "    }",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем награду (ну, либо пиздюлей)",
              "    EndQuestHQ(ActiveQuestHQ, check);",
              "}",
              "else",
              "{",
              "    cur_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 9]);",
              "",
              "    //Каждый ход обновляем таймер задания",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 4] = Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 2] - CurTurn(), '255,240,100');",
              "    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[ActiveQuestHQ, 1]), '<BeginPlanet'+'>', Name(cur_planet), '<BeginStar'+'>', Name(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1)), '<TargetStar'+'>', Name(cur_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "    //Первый этап квеста, наёмники направляются к коалиционной планете сбора",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если все наёмники по пути погибли, либо успешно добрались и совершили посадку на планету, военные отправляются в атаку",
              "        if(!GroupCount(QuestMercs) || GroupIn(QuestMercs, cur_planet))",
              "        {",
              "            for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ наёмникам напрямую, чтобы не тормозили взлетать вместе с военными",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "            for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestSupport, i);",
              "",
              "                ShipRefuel(tdwd1);",
              "                HullHP(tdwd1, ItemSize(ShipItems(tdwd1, 0)));",
              "                //Отдаём приказ военным напрямую, чтобы не тормозили взлетать",
              "                SetData(0, 0, tdwd1);",
              "                SetData(Id(cur_star), 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                OrderTakeOff(tdwd1);",
              "            }",
              "",
              "            QuestSupportDialogCall = CurTurn() + 3; //Военные сами вызовут игрока после взлёта",
              "            //Переходим на второй этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "        }",
              "    }",
              "    //Второй этап квеста, военные вместе с наёмниками (или без оных) отправляются в целевую систему",
              "    //После чего флагман с транками запускает транков в нейролинк",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        if(!ActiveQuestsHQArray[ActiveQuestHQ, 10]) //Участвующие военные и наёмники ещё не прыгнули в атакуемую систему, сперва они должны собраться в точке прыжка",
              "        {",
              "            cur_ship = GroupToShip(QuestSupport);",
              "            if(!cur_ship) cur_ship = GroupToShip(QuestMercs);",
              "            if(!cur_ship)",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 4; //Если всех участников каким-то образом перебили",
              "            }",
              "",
              "            if(cur_ship)",
              "            {",
              "                if(ShipInNormalSpace(cur_ship))",
              "                {",
              "                    if(ShipOrder(cur_ship) == 3)",
              "                    {",
              "                        QuestPlaceX = ShipOrder(cur_ship, 'X');",
              "                        QuestPlaceY = ShipOrder(cur_ship, 'Y');",
              "",
              "                        //Направляем наёмников и военных в зону ожидания",
              "                        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestMercs, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "                        for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "                        {",
              "                            tdwd1 = GroupShip(QuestSupport, i);",
              "                            SetData(0, 0, tdwd1);",
              "                            SetData(0, 1, tdwd1);",
              "                            SetData(-1, 3, tdwd1);",
              "                        }",
              "",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 10] = 1;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else if(ActiveQuestsHQArray[ActiveQuestHQ, 10] == 1)",
              "        {",
              "            //Все в сборе, можно идти в акаку",
              "            if(",
              "                (!GroupCount(QuestMercs) || GroupIn(QuestMercs, QuestPlace)) &&",
              "                (!GroupCount(QuestSupport) || GroupIn(QuestSupport, QuestPlace))",
              "              )",
              "            {",
              "                NoComeKlingToStar(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 0);",
              "                NoComeKlingToStar(cur_star, 0);",
              "",
              "                if(!GroupCount(QuestMercs) && !GroupCount(QuestSupport)) ActiveQuestsHQArray[ActiveQuestHQ, 1] = 4; //Если всех участников каким-то образом перебили",
              "                else",
              "                {",
              "                    //Все в акаку!",
              "                    for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs, i);",
              "                        SetData(197, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "                    for(i = GroupCount(QuestSupport) - 1; i >= 0; i = i - 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestSupport, i);",
              "                        SetData(134, 0, tdwd1);",
              "                        SetData(Id(cur_star), 1, tdwd1);",
              "                        SetData(0, 3, tdwd1);",
              "                        OrderJump(tdwd1, cur_star);",
              "                    }",
              "",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 10] = 2;",
              "                }",
              "            }",
              "        }",
              "        else if(ActiveQuestsHQArray[ActiveQuestHQ, 10] == 2)",
              "        {",
              "            cur_ship = GroupToShip(QuestSupport);",
              "            if(ShipSubType(cur_ship) == 1) //Это всё ещё флагман (т.к. первым добавляли именно его)",
              "            {",
              "                if(ShipInHyperSpace(cur_ship)) //Пока линкор летит к атакуемой системе, выставляем ему приказ на запуск транков",
              "                {",
              "                    tdwd1 = 0;",
              "                    for(i = StarShips(cur_star) - 1; i >= 0; i = i - 1)",
              "                    {",
              "                        tdwd2 = StarShips(cur_star, i);",
              "                        if(ShipType(tdwd2) == 'Neurolink')",
              "                        {",
              "                            tdwd1 = tdwd2;",
              "                            break;",
              "                        }",
              "                    }",
              "",
              "                    if(tdwd1) //Нашли нейролинк (а то мало ли, успел сдохнуть или свалить за то время, пока военные добирались до системы)",
              "                    {",
              "                        ActiveQuestsHQArray[ActiveQuestHQ, 14] = Id(tdwd1); //Запоминаем Id, чтобы удалить инфошки после гибели всех транков (если нейролинк к тому моменту ещё останется жив)",
              "                        //Нейролинк будет гарантированно уничтожен с одной \"тычки\" любой кварковой бомбы",
              "                        ShipAddCustomShipInfo(tdwd1, 'DeadByHitInfo', 'NoShow', 6, t_ArtefactBomb);",
              "                        ShipAddCustomShipInfo(tdwd1, 'DeadByHitInfo', 'NoShow', 6, t_UselessItem, 0, 'Quark_bomb');",
              "",
              "                        tint1 = 0;",
              "                        for(i = ShipArts(cur_ship) - 1; i >= 0; i = i - 1)",
              "                        {",
              "                            cur_item = ShipArts(cur_ship, i);",
              "                            if(ItemType(cur_item) != t_ArtefactTranclucator) continue;",
              "                            //Сразу после запуска транки направятся к нейролинку на форсаже",
              "                            ShipAddCustomShipInfo(ArtTranclucatorToShip(cur_item), 'ChangeShipScriptGroupInfo', 'NoShow', 0,0,0, 'Mod_ShuMercsHQ.QuestTarget,20,0,0,' + Id(tdwd1));",
              "                            tint1 = tint1 + 1;",
              "                        }",
              "",
              "                        if(tint1)",
              "                        {",
              "                            //По прибытии в атакуемую систему линкор сразу выпустит всех транков из трюма",
              "                            ShipCustomShipInfoData(cur_ship, 'ShuMercsHQ_QuestTrancOwner', 1, -1);",
              "                            ActiveQuestsHQArray[ActiveQuestHQ, 10] = 3;",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else ActiveQuestsHQArray[ActiveQuestHQ, 1] = 4;",
              "        }",
              "        else //if(ActiveQuestsHQArray[ActiveQuestHQ, 10] == 3)",
              "        {",
              "            //Транки были запущены",
              "            if(GroupCount(QuestTarget))",
              "            {",
              "                for(i = 0; i < GroupCount(QuestTarget); i = i + 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestTarget, i);",
              "                    ShipSpecialBonuses(tdwd1, bonSlotForsage, 10);",
              "",
              "                    //Взводим все бомбы в трюме транка и задаём им корректный таймер",
              "                    for(j = ShipItems(tdwd1) - 1; j >= 1; j = j - 1)",
              "                    {",
              "                        cur_item = ShipItems(tdwd1, j);",
              "                        if(ItemType(cur_item) != t_UselessItem) continue;",
              "                        if(EquipmentImageName(cur_item) != 'Quark_bomb') continue;",
              "",
              "                        UselessItemData(cur_item, 1, ShipTurnBeforeEndOrder(tdwd1) + 2); //Примерно через столько ходов транк уже должен находиться возле нейролинка (или сдохнуть, пытаясь)",
              "                        UselessItemText(cur_item, CT('UselessItems.' + EquipmentImageName(cur_item) + '.Text') + substr(CT('Cheat.Ok'), 0, 2) + '<br><clr><clrEnd><br>' + CT('Script.Mod_ExpArts.WillBeActivatedIn'));",
              "                        UselessItemData(cur_item, 2, -8);",
              "                    }",
              "                }",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "            }",
              "        }",
              "    }",
              "    //Третий этап квеста, транки сближаются с нейролинком, стремясь уничтожить его взрывом кварок (таймер на кварках сработает как раз к моменту подлёта транков)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Все транки были уничтожены, либо успешно детонировали возле нейролинка",
              "        if(!GroupCount(QuestTarget))",
              "        {",
              "            //Если нейролинк ещё жив, удаляем с него инфошки моментальной смерти от кварок",
              "            tdwd1 = IdToShip(ActiveQuestsHQArray[ActiveQuestHQ, 14]);",
              "            if(tdwd1)",
              "            {",
              "                ShipDeleteCustomShipInfo(tdwd1, 'DeadByHitInfo');",
              "                ShipDeleteCustomShipInfo(tdwd1, 'DeadByHitInfo');",
              "            }",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 4;",
              "        }",
              "    }",
              "    //Четвёртый этап квеста, военные просто бьются в атакуемой системе до победного",
              "    //else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 4)",
              "    //{}",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1081,
          "#":  1082,
          "Total.Lines":  478,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Ищем все системы, подходящие под условия задания Coalition.AttackKlissan.1",
              "function CoalitionAttackKlissanQuestOneConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackKlissan.1.FirstStarMaxRange');",
              "    int second_max_range = CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackKlissan.1.SecondStarMaxRange');",
              "",
              "    free(tarr2);",
              "    tarr2 = newarray(1, 3);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star, 1)) continue;",
              "        //В качестве стартовой подойдёт только коалиционная система",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "",
              "        //Для данного задания стартовая планета может быть только малокской (нет)",
              "        //int check = 0;",
              "        //for(int j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "        //{",
              "            //dword cur_planet = StarPlanets(cur_star, j);",
              "            //if(PlanetRace(cur_planet) != Maloc) continue;",
              "            //if(PlanetOwner(cur_planet) == None) continue;",
              "            //check = 1;",
              "            //break;",
              "        //}",
              "        //if(!check) continue;",
              "",
              "        int first_cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(first_cur_range > first_max_range) continue;",
              "",
              "        //Выбираем коалиционную систему, после чего начинаем перебор ближайших доминаторских систем",
              "        dword coalition_star = cur_star;",
              "        dword machpella_star = ShipStar(IdToShip(KlissanInvasion['MachpellaId']));",
              "        for(j = 1; j < GalaxyStars(); j = j + 1)",
              "        {",
              "            cur_star = StarNearbyStars(coalition_star, j);",
              "",
              "            //Исключаем систему со штабом",
              "            if(cur_star == player_star) continue;",
              "            //Убеждаемся, что система в данный момент не находится под атакой",
              "            if(StarBattle(cur_star)) continue;",
              "            if(StarOwner(cur_star) != 1) continue;",
              "            if(StarCustomFaction(cur_star) != 'Klissan') continue;",
              "            //Пропускаем закрытые сектора и тайный пиратский сектор",
              "            cur_sector = StarToCon(cur_star);",
              "            if(!SectorVisible(cur_sector)) continue;",
              "            if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "            //Пропускаем системы, защищённые от захвата",
              "            if(NoComeKlingToStar(cur_star)) continue;",
              "            if(GetScriptNoKlingMarksFromStar(cur_star)) continue;",
              "            //Пропускаем системы с махпеллой",
              "            if(cur_star == machpella_star) continue;",
              "",
              "            //Обязательно требуется наличие нейролинка в системе",
              "            dword neurolink = 0;",
              "            for(int l = 0; l < StarShips(cur_star); l = l + 1)",
              "            {",
              "                if(ShipType(StarShips(cur_star, l)) != 'Neurolink') continue;",
              "                neurolink = StarShips(cur_star, l);",
              "                break;",
              "            }",
              "            if(!neurolink) continue;",
              "",
              "            int second_cur_range = round(sqrt(Dist2Star(cur_star, coalition_star)));",
              "            if(second_cur_range > second_max_range) continue;",
              "",
              "            //Первый элемент заполняем как обычно",
              "            if(!available_options)",
              "            {",
              "                tarr2[0, 0] = coalition_star;",
              "                tarr2[0, 1] = cur_star;",
              "                tarr2[0, 2] = first_cur_range;",
              "",
              "                available_options = 1;",
              "            }",
              "            //А последующие сперва объявляем",
              "            else",
              "            {",
              "                ArrayAdd(tarr2, dummy);",
              "                tarr2[available_options] = newarray(3);",
              "                tarr2[available_options, 0] = coalition_star;",
              "                tarr2[available_options, 1] = cur_star;",
              "                tarr2[available_options, 2] = first_cur_range;",
              "",
              "                available_options = available_options + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        //Выбираем случайный из подобранных квестов (зерно рандома запоминается на 7 дней, после чего обновляется)",
              "        int seed = GetQuestSeed();",
              "        available_options = Rnd(1, available_options, sqr(seed)) - 1;",
              "",
              "        //Клисанский нейролинк (позже преобразуем указатель в Id)",
              "        tarr1[next_num, 0] = neurolink;",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер до провала квеста (считаем сразу для интро)",
              "        tarr1[next_num, 2] = CurTurn() + PortionInDiapason(tarr2[available_options, 2], first_max_range / 2, first_max_range, int(CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackKlissan.1.MinTime')), int(CT('Quest.ShuMercs.QuestsHQ.Coalition.AttackKlissan.1.MaxTime')));",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.Coalition.AttackKlissan.1';",
              "        //Титульная строчка из уведомления",
              "        tarr1[next_num, 4] = '';",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 15, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'CoalitionReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у Совета Коалиции",
              "        tarr1[next_num, 6] = 50;",
              "        //Всё что ниже хранится в массиве в виде Id (сразу после завершения вызова функции начала квеста, а до того в виде указателей)",
              "        //Первая система для сбора всех кораблей перед атакой",
              "        tarr1[next_num, 7] = tarr2[available_options, 0];",
              "        //Атакуемая система",
              "        tarr1[next_num, 8] = tarr2[available_options, 1];",
              "        //Планета для старта сбора сил атакующих",
              "        //Случайно выбираем малокскую планету для начала сбора сил атакующих",
              "        unknown t_array = newarray(1);",
              "        for(i = 0; i < StarPlanets(tarr1[next_num, 7]); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(tarr1[next_num, 7], i);",
              "            //if(PlanetRace(cur_planet) != Maloc) continue;",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            ArrayAdd(t_array, cur_planet);",
              "        }",
              "        //Выбираем случайную планету из доступных малокских",
              "        tarr1[next_num, 9] = t_array[Rnd(1, ArrayDim(t_array) - 1, sqr(seed + 42))];",
              "        tarr1[next_num, 10] = 0; //Маркер о том, была ли уже выставлена зона ожидания всех участвующих кораблей перед одновременным прыжком в атакуемую систему",
              "        //Имена транков-брандеров (запоминаем в функции запуска квеста только для перебора их реплик из диалога)",
              "        tarr1[next_num, 11] = '';",
              "        tarr1[next_num, 12] = '';",
              "        tarr1[next_num, 13] = '';",
              "        tarr1[next_num, 14] = 0; //Id нейролинка, который нужно будет уничтожить транкам (запоминается только при влёте нападающих в атакуемую систему)",
              "",
              "        //Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "        str split_line;",
              "        if(GetGameOptions('FontDialog') == '0') split_line = '</color>-----------------------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '1') split_line = '</color>------------------------------------------';",
              "        else if(GetGameOptions('FontDialog') == '2') split_line = '</color>-------------------------------------------';",
              "        else split_line = '</color>--------------------------------------';",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к ним различаются)",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<BeginPlanet'+'>', Name(tarr1[next_num, 9]),",
              "                                     '<BeginStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<EndDate'+'>', GameDateTxtByTurn(tarr1[next_num, 2]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5],",
              "                                     '<SplitLine'+'>', split_line);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста Coalition.AttackKlissan.1",
              "function CoalitionAttackKlissanQuestOnePrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    dword begin_star = ActiveQuestsHQArray[q_num, 7];",
              "    dword target_star = ActiveQuestsHQArray[q_num, 8];",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Pirate, i);",
              "",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, ship);",
              "",
              "        //Заранее задаём им коалиционного овнера, чтобы не возникало проблем с военными",
              "        ShipOwner(ship, ShipPilotRace(Player()));",
              "",
              "        //А также повышаем к ним отношение всех коалиционных планет в стартовой системе",
              "        for(int j = 0; j < StarPlanets(begin_star); j = j + 1)",
              "        {",
              "            dword cur_planet = StarPlanets(begin_star, j);",
              "            if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "            RelationToRanger(cur_planet, ship, 100);",
              "        }",
              "    }",
              "",
              "    //И к игроку тоже заодно",
              "    for(j = 0; j < StarPlanets(begin_star); j = j + 1)",
              "    {",
              "        cur_planet = StarPlanets(begin_star, j);",
              "        if(PlanetOwner(cur_planet) == 6) continue;",
              "",
              "        if(RelationToRanger(cur_planet, Player()) < 60) RelationToRanger(cur_planet, Player(), 60);",
              "    }",
              "",
              "    //Минимальное стартовое число военных, которые присоединяться к наёмникам в атаке",
              "    int add_warriors = CT(ActiveQuestsHQArray[q_num, 3] + '.MinWarriorsCount');",
              "    //Общая сила клисан в системе в зависимости от их подтипов",
              "    unknown t_array = newarray(8);",
              "    if(!CurrentMods('Evolution\\EvoArmada'))",
              "    {",
              "        int warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 0, 1);",
              "        str text = CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerKlissan');",
              "        for(i = 0; i <= 5; i = i + 1) t_array[i] = int(GetParFromString(text, ',', i, 1));",
              "    }",
              "    else",
              "    {",
              "        warriors_per_cap = GetParFromString(CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerCapitalShip'), ',', 1, 1);",
              "        text = CT(ActiveQuestsHQArray[q_num, 3] + '.WarriorsPerKlissanEvoArmada');",
              "        for(i = 0; i <= 5; i = i + 1) t_array[i] = int(GetParFromString(text, ',', i, 1));",
              "    }",
              "",
              "    //Считаем клисанские корабли (за исключением нейролинка) в атакуемой системе (с учётом силы по подтипам)",
              "    int klissan_count = 0;",
              "    for(i = 0; i < StarShips(target_star); i = i + 1)",
              "    {",
              "        ship = StarShips(target_star, i);",
              "        if(ShipTypeN(ship) != t_Kling) continue;",
              "        if(ShipCustomFaction(ship) != 'Klissan') continue;",
              "",
              "        klissan_count = klissan_count + t_array[ShipSubType(ship)];",
              "",
              "        //ShipJoin(QuestAttackers, ship);",
              "        //SetData(33, 0, ship);",
              "    }",
              "",
              "    //Число клисан для доспавна, если в системе их не хватило до минимального \"оборонного\" количества",
              "    klissan_count = klissan_count - CT(ActiveQuestsHQArray[q_num, 3] + '.MinKlissanCount');",
              "",
              "    //Здесь считаем, сколько военных нам нужно добавить к стартовой группировке атакующих, если клисан в атакуемой системе оказалось сверх меры",
              "    if(klissan_count > 0)",
              "    {",
              "        add_warriors = add_warriors + klissan_count;",
              "    }",
              "",
              "    //Временно превращаем планету сбора в малокскую, чтобы создать на ней военных",
              "    start_planet = ActiveQuestsHQArray[q_num, 9];",
              "    int old_race = PlanetRace(start_planet);",
              "    int old_owner = PlanetRace(start_planet);",
              "    PlanetRace(start_planet, Maloc);",
              "    PlanetOwner(start_planet, Maloc);",
              "",
              "    //Спавним малокский флагман, который повезёт клисанам транки-брандеры",
              "    cur_planet = ActiveQuestsHQArray[q_num, 9];",
              "    dword warrior = BuyBigWarrior(cur_planet, 500);",
              "    for(i = 1; i <= 3; i = i + 1) ShipRefit(warrior);",
              "    ShipImproveItems(warrior, RndObject(2, 5, cur_planet));",
              "    ShipAddCustomShipInfo(warrior, 'ShuMercsHQ_QuestTrancOwner', 'NoShow'); //Необходима для управления запуском транков",
              "    ShipJoin(QuestSupport, warrior);",
              "    add_warriors = add_warriors - warriors_per_cap;",
              "",
              "    //Массив уникального хлама для транков",
              "    unknown unique_junk_arr = newarray(1);",
              "    ArrayDelete(unique_junk_arr, 0);",
              "    ArrayAdd(unique_junk_arr, 'Usl_2'); //Малокский флаг",
              "    ArrayAdd(unique_junk_arr, 'Usl_3'); //Мозг президента (малокского)",
              "    ArrayAdd(unique_junk_arr, 'Usl_58'); //Раритетный ковер",
              "    ArrayAdd(unique_junk_arr, 'Usl_64'); //Малокский табурет",
              "    if(CurrentMods('ShusRangers\\ShuBounty'))",
              "    {",
              "        ArrayAdd(unique_junk_arr, 'ShuBounty_Hyperdust'); //Гиперпыль",
              "        ArrayAdd(unique_junk_arr, 'ShuBounty_EscapePod'); //Спасательная капсула с пиратом \"Лякуша Лошарик\"",
              "    }",
              "    ArrayRandomize(ArrayDim(unique_junk_arr) * 3, unique_junk_arr, sqr(GetQuestSeed() + 15));",
              "    ArrayAdd(unique_junk_arr, 0);",
              "",
              "    //Спавним транки-брандеры и позже, уже после их запуска с флагмана, заносим их в группу QuestTarget (потому что куда ещё-то?)",
              "    for(i = 1; i <= 3; i = i + 1)",
              "    {",
              "        str tranc_name = CT(ActiveQuestsHQArray[q_num, 3] + '.TrancName' + i);",
              "        ActiveQuestsHQArray[q_num, 10 + i] = tranc_name;",
              "",
              "        dword item = CreateArt(t_ArtefactTranclucator, Maloc);",
              "        AddItemToShip(warrior, item); //Транк отправляется в трюм флагмана",
              "        NoDropItem(item, 1);",
              "        SetName(item, tranc_name);",
              "",
              "        ship = ArtTranclucatorToShip(item);",
              "        SetName(ship, tranc_name);",
              "        if(i == 2)",
              "        {",
              "            if(ShipPilotRace(Player()) != Fei || ShipFace(Player()) != 8) ShipFace(ship, 84826580);",
              "            else ShipFace(ship, 848265802);",
              "        }",
              "        TranclucatorData(ship, 'Proprietor', warrior);",
              "        if(CurrentMods('Evolution\\EvoTranc'))",
              "        {",
              "            Chameleon(ship, 'Ship.TranclucatorRed');",
              "            TranclucatorData(ship, 'ArtSysName', 'TranclucatorRed');",
              "            EquipmentImageName(item, 'ArtTranclucatorRed');",
              "        }",
              "        for(j = ShipItems(ship) - 1; j >= 1; j = j - 1) FreeItem(GetItemFromShip(ship, j));",
              "",
              "        item = CreateEquipment(t_Engine, (int(CT('Items.Engine.AverageSize')) / 2) + RndObject(0, 6, ship), GTL, Maloc);",
              "        //ModuleToEquipment(FindBonusByNameInCfg('105'), item); //Микромодуль \"Стратер\"",
              "        AddItemToShip(ship, item);",
              "        ItemIsInUse(item, ship, 1);",
              "        item = CreateEquipment(t_FuelTanks, (int(CT('Items.FuelTanks.AverageSize')) / 2) + RndObject(0, 6, ship), GTL, Maloc);",
              "        AddItemToShip(ship, item);",
              "        ItemIsInUse(item, ship, 1);",
              "",
              "        //Каждый транк получает в трюм по 5 кварковых бомб, плюс кучу всякого мусора в придачу",
              "        unknown junk_arr = newarray(1);",
              "        ArrayDelete(junk_arr, 0);",
              "        for(j = 1; j <= 5; j = j + 1) ArrayAdd(junk_arr, 'Quark_bomb'); //5 кварковых бомб",
              "        for(j = 1; j <= 2; j = j + 1) //Добавляем парочку предметов из списка уникальных",
              "        {",
              "            if(ArrayDim(unique_junk_arr) > 1)",
              "            {",
              "                ArrayAdd(junk_arr, unique_junk_arr[0]);",
              "                ArrayDelete(unique_junk_arr, 0);",
              "            }",
              "        }",
              "        for(j = RndObject(10, 15, ship); j >= 1; j = j - 1) //Прочий типовой хлам",
              "        {",
              "            int num = RndObject(1, 6, ship);",
              "            if(num == 1) ArrayAdd(junk_arr, 'ShuMercsHQ_PowderKeg'); //Бочка пороха",
              "            else if(num == 2) ArrayAdd(junk_arr, 'ShuMercsHQ_DynamiteBundle'); //Связка динамита",
              "            else if(num == 3) ArrayAdd(junk_arr, 'ShuMercsHQ_TNT'); //Тротиловая шашка",
              "            //Имитация товаров (чтобы можно было раскидать по разным слотам)",
              "            else if(num == 4) ArrayAdd(junk_arr, 'ShuMercsHQ_GoodsImitation3'); //Роскошь",
              "            else if(num == 5) ArrayAdd(junk_arr, 'ShuMercsHQ_GoodsImitation6'); //Оружие",
              "            else /*if(num == 6)*/ ArrayAdd(junk_arr, 'ShuMercsHQ_GoodsImitation7'); //Наркотики",
              "        }",
              "        ArrayRandomize(ArrayDim(junk_arr) * 3, junk_arr, sqr(GetQuestSeed() + Id(ship)));",
              "        ArrayAdd(junk_arr, 0);",
              "",
              "        int cnt = ArrayDim(junk_arr) - 1;",
              "        for(j = 0; j < cnt; j = j + 1)",
              "        {",
              "            str useless_str = junk_arr[0];",
              "            if(useless_str == 'Quark_bomb') //Спасательная капсула с пиратом \"Лякуша Лошарик\"",
              "            {",
              "                item = CreateQuestItem('Quark_bomb', Maloc);",
              "                UselessItemData(item, 2, -2);",
              "                UselessItemData(item, 1, 30); //Временно выставляем таймер бомб у транков на 30 дней, т.к. игрок всё равно не увидит",
              "                SetName(item, Name(item) + CT('Script.Mod_ExpArts.BombWithTimer'));",
              "            }",
              "            else if(useless_str == 'ShuBounty_EscapePod') //Спасательная капсула с пиратом \"Лякуша Лошарик\"",
              "            {",
              "                item = CreateQuestItem('ShuBounty_EscapePod', Peleng);",
              "                UselessItemData(item, 3, 42); //Время до отключения системы жизнеобеспечения",
              "                useless_str = CT('ShipType.TypeName.Pirate');",
              "                useless_str = useless_str + ' <color=255,240,100>' + CT('ShipType.Peleng.Pirate') + ' ' + CT('ShipName.Pirate.Peleng.16') + '</color>';",
              "                UselessItemText(item, Format(CT('UselessItems.ShuBounty_EscapePod.Description.PilotAlive'),",
              "                                                '<Name'+'>', lowercase(substr(useless_str, 0, 1)) + substr(useless_str, 1), ''));",
              "            }",
              "            else item = CreateQuestItem(useless_str);",
              "",
              "            AddItemToShip(ship, item);",
              "            ArrayDelete(junk_arr, 0);",
              "        }",
              "",
              "        ShipSpecialBonuses(ship, bonSlotForsage, 10);",
              "        ShipImproveItems(ship, 5); //В том числе, чтобы устранить возможный перегруз",
              "        HullHP(ship, 'To100');",
              "        NoDropToShip(ship, 1);",
              "    }",
              "",
              "    //Доспавниваем клисан поровну на все обитаемые планеты атакуемой системы",
              "    //(только если их в атакуемой системе оказалось меньше, чем нужно)",
              "    dword neurolink = ActiveQuestsHQArray[q_num, 0];",
              "    str add_klissan = '';",
              "    while(klissan_count < 0)",
              "    {",
              "        int plus_klissan = RndObject(1, 5, cur_planet); //Подтип будущего клисана",
              "        add_klissan = add_klissan + plus_klissan;",
              "        klissan_count = klissan_count + t_array[plus_klissan];",
              "    }",
              "    if(add_klissan != '') SetData(-int(add_klissan), 3, neurolink); //Выдаём нейролинку заказ на постройку недостающих клисан (будет исполнен на следующий же ход)",
              "",
              "    //Начинаем перебор всех военных в стартовой системе и заносим их в скрипт (чтоб не слиняли)",
              "    str id_line = '';",
              "    for(i = 0; i < StarShips(begin_star); i = i + 1)",
              "    {",
              "        warrior = StarShips(begin_star, i);",
              "        if(ShipInScript(warrior, 0)) continue;",
              "        if(ShipInGameEvent(warrior)) continue;",
              "        if(ShipOwner(warrior) != PirateClan) continue;",
              "",
              "        ShipJoin(QuestSupport, warrior);",
              "        //Собираем всех нападающих военных на одной планете",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "        if(id_line == '') id_line = Id(warrior);",
              "        else id_line = id_line + ',' + Id(warrior);",
              "        //Случайно угодившие в волну атаки флагманы будут считаться \"дороже\"",
              "        if(!ShipSubType(warrior)) add_warriors = add_warriors - 1;",
              "        else add_warriors = add_warriors - warriors_per_cap;",
              "",
              "        //Если уже собрали достаточно военных для атакующей волны",
              "        if(add_warriors <= 0) break;",
              "    }",
              "",
              "    //Доспавниваем военных поровну на все обитаемые планеты стартовой системы",
              "    //(только если не хватило уже имеющихся в стартовой системе)",
              "    if(add_warriors > 15) add_warriors = 15;",
              "    while(add_warriors > 0)",
              "    {",
              "        for(i = 0; i < StarPlanets(begin_star); i = i + 1)",
              "        {",
              "            cur_planet = StarPlanets(begin_star, i);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            if(add_warriors > 0)",
              "            {",
              "                warrior = BuyWarrior(cur_planet, 250);",
              "                for(j = 1; j <= 2; j = j + 1) ShipRefit(warrior);",
              "                ShipImproveItems(warrior, RndObject(0, 3, cur_planet));",
              "",
              "                ShipJoin(QuestSupport, warrior);",
              "                //Собираем всех нападающих военных на одной планете",
              "                SetData(Id(ActiveQuestsHQArray[q_num, 9]) * 2, 2, warrior);",
              "                if(id_line == '') id_line = Id(warrior);",
              "                else id_line = id_line + ',' + Id(warrior);",
              "                add_warriors = add_warriors - 1;",
              "            }",
              "            else break;",
              "        }",
              "    }",
              "",
              "    //Вешаем всем военным инфошку агра на игрока в случае, если тот захочет на них напасть",
              "    text = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.SupportOnPlayerAttack'), '<PlayerOrgName'+'>', PlayerHQMainArray['Main', 'OrganisationName'], '255,240,100');",
              "    for(i = 0; i < GroupCount(QuestSupport); i = i + 1)",
              "    {",
              "        warrior = GroupShip(QuestSupport, i);",
              "        ShipAddCustomShipInfo(warrior, 'ShuMercsHQ_QuestShipsOutOnPlayerAttack', 'NoShow', 0, 0, 0, id_line, 'Ether2,,,0,,,' + text);",
              "    }",
              "",
              "    //Вешаем на игрока инфошку для автоматической смены неподходящего овнера при влёте-вылете в целевую систему",
              "    //(также временно блочит смену подданства в целевой системе)",
              "    ShipAddCustomShipInfo(Player(), 'ShuMercsHQ_PlayerOwnerSwitcherInfo', 'NoShow', Id(target_star), -1, 0, 'Coalition');",
              "",
              "    //Временно блочим все квестовые системы от рандомных нападений",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 8], 1);",
              "    //В том числе от прибытия новых клисанских нейролинков",
              "    ArrayAdd(KlissanInvasion['RegroupingNeurolinks'], -1, '' + Id(ActiveQuestsHQArray[q_num, 8]));",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    text = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    text = text + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    text = text + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    text = text + \"<br>\" + Format(CT('Quest.Info.CountDay'), '<Day'+'>', ActiveQuestsHQArray[q_num, 2] - CurTurn(), '255,240,100');",
              "    text = text + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteInProcess' + ActiveQuestsHQArray[q_num, 1]), '<BeginPlanet'+'>', Name(ActiveQuestsHQArray[q_num, 9]), '<BeginStar'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '<TargetStar'+'>', Name(target_star), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], text);",
              "",
              "    //Возвращаем планете её оригинальную расу",
              "    PlanetRace(start_planet, old_race);",
              "    PlanetOwner(start_planet, old_owner);",
              "",
              "    //Заносим в массив Id нейролинка",
              "    ActiveQuestsHQArray[q_num, 0] = Id(neurolink);",
              "    //Заносим в массив Id все квестовые системы",
              "    ActiveQuestsHQArray[q_num, 7] = Id(begin_star);",
              "    ActiveQuestsHQArray[q_num, 8] = Id(target_star);",
              "    //А также планету сбора",
              "    ActiveQuestsHQArray[q_num, 9] = Id(ActiveQuestsHQArray[q_num, 9]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1088,
          "#":  1089,
          "Total.Lines":  34,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Пока что здесь есть только диалог из квеста Private.Protect.4",
              "",
              "//Сдача флешки на ВБ",
              "if(GAnswerData == t_WB)",
              "{",
              "    cost = RoundTo(0.5 * UselessItemData(cur_item, 2), 1000, 0);",
              "    tstr1 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.WBFlashDriveText'), '<Cost'+'>', cost, '<RankPoints'+'>', 100);",
              "    tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.PlayerWBFlashDriveThanks');",
              "    ShipMoney(Player(), ShipMoney(Player()) + cost);",
              "    ShipRankPoints(Player(), ShipRankPoints(Player()) + 100);",
              "    Sound('Sound.Sell');",
              "}",
              "//Сдача флешки на БЦ",
              "else if(GAnswerData == t_BK)",
              "{",
              "    cost = UselessItemData(cur_item, 2);",
              "    tstr1 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.BKFlashDriveText'), '<Cost'+'>', cost);",
              "    tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.PlayerBKFlashDriveThanks');",
              "    ShipMoney(Player(), ShipMoney(Player()) + cost);",
              "    Sound('Sound.Sell');",
              "}",
              "//Сдача флешки на доминион",
              "else if(GAnswerData == t_CB)",
              "{",
              "    cost = UselessItemData(cur_item, 2);",
              "    tstr1 = '</color>' + Format(CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.CBFlashDriveText'), '<Cost'+'>', cost, '<RankPoints'+'>', 100);",
              "    tstr2 = '</color>' + CT('Quest.ShuMercs.QuestsHQ.Private.Protect.4.PlayerCBFlashDriveThanks');",
              "    ShipMoney(Player(), ShipMoney(Player()) + cost);",
              "    ShipPirateRankPoints(Player(), ShipPirateRankPoints(Player()) + 100);",
              "    Sound('Sound.Sell');",
              "}",
              "",
              "//Удаляем флешку",
              "FreeItem(GetItemFromShip(Player(), cur_item));"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1093,
          "#":  1094,
          "Total.Lines":  812,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Задание PirateClan.Protect.2 в процессе",
              "//Этапы квеста",
              "//1 - Наёмники летят на планету с пиратом",
              "//Подэтапы QuestSupport - просто ждёт наёмников",
              "//Подэтапы QuestMercs - просто летит к пирату на планету",
              "//Подэтапы QuestTarget - просто находится в гипере, если что-то случится с квестом умирает",
              "//2 - QuestSupport взлетает и летит в специально формируемый \"сектор\" на карте, который зависит от пути к Тортугацу",
              "",
              "//Подэтапы QuestSupport -",
              "//Летит в точку QuestPlace которую заранее вычислили по координатам",
              "//По прилёту в эту точку он начинает ждать наёников, после того как всех дождался открывает ЧД и начинает сваливать в другую систему (по прибытию туда маркер вывдет его из скрипта)",
              "",
              "//Подэтапы QuestMercs - летят за пиратом попутно охраняя,по прилету всех возле него пират открывает ЧД куда наёмники сразу же прыгают",
              "//Подэтапы QuestTarget - просто находится в гипере, если что-то случится с квестом умирает",
              "",
              "//3 - Если игрок прошёл АБ то выкидываем его как и всех наёмников и Доминион(и также переводимся в 4 этап квеста), иначе запускается внутренний таймер который ждёт вход игрока в чд 30 дней(также в зависимости от времени проведённого чд боя, какое-то количество мерков погибает кому-то здоровье сбивают и у кого-то также рандомно есть бонус вначале(якобы подобранный), доминиону также сбиваем ХП)",
              "//Подэтапы QuestMercs - ждут действий игрока если их нет то через 30 дней они могут вылететь а могут и нет из чд",
              "//Подэтапы QuestTarget - ждёт также как наёмники",
              "",
              "//4 - АБ прошло(даже если прошло без игрока) в любом случае переводятся всё на данный этап, также тут если QuestTarget не выжил в АБ то значит просто исполнится условие которое перевдёт наёмников в стейт возврата и завершит квест, если волны кончились переводимся на 5 этап",
              "//Подэтапы QuestMercs - простой маркер охраны QuestTarget",
              "//Подэтапы QuestTarget - маркер одного телепорта от ЧД(на расстояние от 400 до 600) а после маркер стояния на месте",
              "//Подэтапы QuestAttackers - просто маркер атаки на QuestTarget",
              "",
              "//5 - волны кончились но тут также могут быть ещё живы доминаторы они атакуют QuestTarget",
              "//Подэтапы QuestMercs - простой маркер охраны QuestTarget",
              "//Подэтапы QuestTarget - маркер стояния на месте",
              "//Подэтапы QuestAttackers - просто маркер атаки на QuestTarget",
              "//Если на любом из этапов игрок поатаковал QuestSupport или QuestTarget квест провален",
              "",
              "//Целевая система",
              "target_star = GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1);",
              "//Планета с сопровоздающим пиратом",
              "start_planet = IdToPlanet(ActiveQuestsHQArray[ActiveQuestHQ, 8]);",
              "//Целевая чёрная дыра",
              "if(ActiveQuestsHQArray[ActiveQuestHQ, 1] > 2) target_hole = IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]);",
              "//Цель задания",
              "cur_ship = GroupToShip(QuestTarget);",
              "",
              "//Проверку на тех кого убили а кого не убили в чд проще всего поставить именно здесь для обработки условия на то что QuestTarget убьют",
              "if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "{",
              "    //Если ход когда корабль вылетает из ЧД или когда время на то чтоб вылететь из чд окончилось(т.е QuestAttackers не убили QuestTarget но QuestAttackers также не убиты) тогда убиваем QuestTarget, также на таймер привязан ход вылета из чд игроком чтоб было удобнее заранее в случае если QuestTarget погиб прямо в ход когда игрок влетел в чд",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 2] == CurTurn())",
              "    {",
              "        //Если игрок играл в АБ, то смотрим",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 14])",
              "        {",
              "            //Сначала проходимся по эвентам и убиваем всех убитых кораблей в АБ а потом выставляем ХП всем выжившым",
              "            for(i = GalaxyEvents() - 1; i >= 0; i = i - 1)",
              "            {",
              "                if(GalaxyEventDate(i) < CurTurn() - 1) break;",
              "",
              "                //Убиваем тех кто должны были уже быть убитыми в итоге АБ, но дабокод...",
              "                tstr1 = GalaxyEventType(i);",
              "                if(tstr1 == 'LabeledShipKilledInAB')",
              "                {",
              "                    tdwd1 = IdToShip(GalaxyEventsTextData(i, 0));",
              "                    if(tdwd1)",
              "                    {",
              "                        //Из-за долбаного бага, что корабль отображает графику взрыва даже если он в гипере ставим ему большие координаты чтоб он вызрывался там",
              "                        ShipSetCoords(tdwd1, 100000, 100000);",
              "                        ShipDestroy(tdwd1);",
              "                        //Уничтожать корабль тут нужно именно вручную (чтобы корабль ход не тупил, а сразу в моменте взлёта и уже точно взрывался за пределами карты) и выводить из скрипта сразу чтоб условие ниж не сработало",
              "                        ShipOut(tdwd1);",
              "                    }",
              "                }",
              "                //Выставляем то кол-во HP которое получилось по итогу АБ у выживших кораблей",
              "                else if(tstr1 == 'LabeledShipSurvivedInAB')",
              "                {",
              "                    tdwd1 = IdToShip(GalaxyEventsTextData(i, 0));",
              "                    if(tdwd1) HullHP(tdwd1, GalaxyEventData(i, 0));",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            ShipOut(cur_ship);",
              "            ShipDestroy(cur_ship);",
              "        }",
              "    }",
              "}",
              "",
              "//Если убили цель задания, либо уничтожен штаб игрока, задание провалено",
              "//Если игрок вылетает в чд в данный момент то пропускаем данные проверки чтоб также внизу учесть уничтожение кораблей которые погибли в чд(если QuestTarget погибнет то отработает условие ниже)",
              "//Получение через GroupToShip(QuestTarget) нужно для того чтоб также учитывать код вывода из скриптовой группы выше",
              "if(!GroupToShip(QuestTarget) || (!GroupToShip(QuestSupport) && ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3) || !GroupToShip(PlayerHQ))",
              "{",
              "    //Здесь нужно для того, чтобы если QuestTarget в симуляции АБ уничтожили, наёмники вылетали из ЧД",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Сперва убьём всех атакующих",
              "        for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestAttackers, i);",
              "            OrderNone(tdwd1);",
              "            ShipDestroy(tdwd1, 1);",
              "            SetData(0, 0, tdwd1);",
              "        }",
              "",
              "        //Проходимся по наёмникам (если они живы) и говорим взлетать из ЧД, на следующем ходу они направятся обратно в штаб",
              "        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            MakeShipEnterStar(tdwd1, target_star, target_star, 0);",
              "            ShipOrder(tdwd1, 4);",
              "            ShipOrderObj(tdwd1, target_hole);",
              "            //Также обратно включаем им дроида (а зачем выключать было?)",
              "            ShipSpecialBonuses(tdwd1, bonDroid, ShipSpecialBonuses(tdwd1, bonDroid) + 1000000);",
              "",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "    }",
              "    else",
              "    {",
              "        //Выводим из скрипта всех атакующих (если они есть и находятся в открытом космосе (если не в открытом, то сразу уничтожаем))",
              "        for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestAttackers, i);",
              "            ShipDeleteCustomShipInfo(tdwd1, 'ShuMercsHQ_QuestShipNotScriptDialog');",
              "            ShipOut(tdwd1);",
              "            OrderLock(tdwd1, 0);",
              "            ShipFreeFlight(tdwd1);",
              "        }",
              "",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "    }",
              "",
              "    //Если доминион выжил, то вскоре самоуничтожиться (если он ещё находится в ЧД) или если выжил пират то начнёт сваливать",
              "    if(cur_ship)",
              "    {",
              "        //Если доминион выжил до прохождения АБ",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 1] > 3) ShipDestroy(cur_ship);",
              "        else ShipOut(cur_ship);",
              "",
              "        //Обновляем уведомление",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedSupport');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "        cur_item = ShipEqInSlot(cur_ship, t_Radar);",
              "        if(cur_item) NoDropItem(cur_item, 0);",
              "    }",
              "    else",
              "    {",
              "        //Обновляем уведомление и говорим что доминион убит",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    if(GroupToShip(QuestSupport) && ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "    {",
              "        SetData(66, 0, GroupToShip(QuestSupport));",
              "        SetData(Id(PlanetToStar(PlanetPirateClan())), 1, GroupToShip(QuestSupport));",
              "    }",
              "",
              "    //Если уничтожен штаб то изменяем уведомление",
              "    if(!GroupToShip(PlayerHQ))",
              "    {",
              "        //Обновляем уведомление задания",
              "        tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "        tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "        tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT('Script.Mod_ShuMercs.PlayerMercsOrgMsg.QuestNoteHQDestroyed');",
              "        CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "    }",
              "",
              "    //Вынуждаем ЧД закрыться",
              "    //tdwd1 = IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]);",
              "    //if(tdwd1) HoleStatus(tdwd1, 3);",
              "",
              "    //Снимаем запреты",
              "    NoComeKlingToStar(target_star, 0);",
              "    NoTargetToShip(Player(), 0);",
              "",
              "    //Если игрок был насильно переведён к пиратам возвращаем ему овнер Коалиции обратно",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 9] == 1)",
              "    {",
              "        ShipOwner(Player(), ShipPilotRace(Player()));",
              "    }",
              "",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "    //Завершаем квест и получаем пиздюлей",
              "    EndQuestHQ(ActiveQuestHQ, 0);",
              "}",
              "else",
              "{",
              "    check = 0;",
              "    //Если игрок решил мочить доминион или пирата",
              "    //Так как блоки условия в дабокоде хреновые(условие && продолжает считыватся даже если уже одно из условий не верно) нам придётся городить вот так",
              "    if(GroupToShip(QuestSupport))",
              "    {",
              "        if(Hit(GroupToShip(QuestSupport), 0))",
              "        {",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "            {",
              "                SetData(66, 0, GroupToShip(QuestSupport));",
              "                SetData(Id(PlanetToStar(PlanetPirateClan())), 1, GroupToShip(QuestSupport));",
              "            }",
              "",
              "            RelationToRanger(GroupToShip(QuestSupport), Player(), 0);",
              "            check = 1;",
              "        }",
              "    }",
              "",
              "    if(Hit(cur_ship, 0) || (check == 1 && ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3))",
              "    {",
              "        //Все уцелевшие наёмники возвращаются в штаб",
              "        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            SetData(0, 0, tdwd1);",
              "            SetData(0, 1, tdwd1);",
              "            SetData(0, 2, tdwd1);",
              "            SetData(-3, 3, tdwd1);",
              "            ChangeState('ReturningStrikeState', tdwd1);",
              "        }",
              "",
              "        NoTargetToShip(Player(), 0);",
              "",
              "        //Выводим увеомления о провале в зависимости кого игрок поатачил",
              "        if(Hit(GroupToShip(QuestSupport), 0))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedPlayerAttack');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "        }",
              "",
              "        if(Hit(cur_ship, 0))",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedPlayerAttackSupport'), '<TargetNameShort'+'>', ShipName(cur_ship), '255,240,100');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "        }",
              "",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 4)",
              "        {",
              "            //Просто гарантировано уничтожаем доминион если был атакован пират до 3 этапа квеста или он сам игроком(хотя хз как если он в гипере), если он не выжил отработает условие выше",
              "            ShipDestroy(cur_ship, 1);",
              "        }",
              "        else",
              "        {",
              "            //Гарантировано портим отношение",
              "            RelationToRanger(cur_ship, Player(), 0);",
              "            //Также как ни странно разрешаем посадку на домининион,(так как игрок может в будущем \"помирится\" c пиратами и соответственно с доминионом и для того чтоб он мог на него сесть выставляем наново возможность посадки)",
              "            NoLanding(cur_ship, 0);",
              "            ShipOut(cur_ship);",
              "        }",
              "",
              "        //Снимаем запреты",
              "        NoComeKlingToStar(target_star, 0);",
              "        NoTargetToShip(Player(), 0);",
              "",
              "        //Если игрок был насильно переведён к пиратам возвращаем ему овнер коалиции обратно",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 9] == 1)",
              "        {",
              "            ShipOwner(Player(), ShipPilotRace(Player()));",
              "        }",
              "",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "        //Завершаем квест и получаем пиздюлей",
              "        EndQuestHQ(ActiveQuestHQ, 0);",
              "        exit;",
              "    }",
              "",
              "    //Если игрок не атаковал доминион или пирата то ставим отношения если они опустились на отличные",
              "    if(RelationToRanger(cur_ship, Player()) < 100)",
              "    {",
              "        RelationToRanger(cur_ship, Player(), 100);",
              "    }",
              "",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] < 3)",
              "    {",
              "        if(RelationToRanger(GroupToShip(QuestSupport), Player()) < 100)",
              "        {",
              "            RelationToRanger(GroupToShip(QuestSupport), Player(), 100);",
              "        }",
              "    }",
              "",
              "    //Первый этап квеста, наёмники собираются в системе с охраняемым кораблём",
              "    //Сам пират пока сидит на стартовой планете",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 1)",
              "    {",
              "        //Если наёмники в полном составе прибыли в стартовую систему",
              "        if(GroupIn(QuestMercs, target_star))",
              "        {",
              "            //Если наёмники уже приземлились на планету с пиратом, то отправляем их прикрывать его",
              "            if(GroupIn(QuestMercs, start_planet))",
              "            {",
              "                for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ShipRefuel(tdwd1);",
              "                    SetData(Id(GroupToShip(QuestSupport)), 3, tdwd1);",
              "                    //Отдаём приказ охраняющим наёмникам напрямую, чтобы не тормозили взлетать за пиратом,также далее будет действовать маркер 2 который значит что не нужно садится на планеты на которые садится пират",
              "                    SetData(102, 0, tdwd1);",
              "                    OrderTakeOff(tdwd1);",
              "                }",
              "",
              "                //Угол между системами на галакарте(проще считать вызовом StarAngle, в идеале пределать на чистые радианы)",
              "                //Нормализируем угол и переводим в радианы",
              "                tflt1 = StarAngle(PlanetToStar(PlanetPirateClan()), target_star) + Rnd(-35, 35, GetQuestSeed() ^ 473764365);",
              "                //Число \"оборотов\"",
              "                if(tflt1 < 0)",
              "                {",
              "                    tint1 = (abs(tflt1) / 360) + 1;",
              "                    tflt1 = tflt1 + 360 * tint1;",
              "                }",
              "                if(tflt1 >= 360)",
              "                {",
              "                    tint1 = tflt1 / 360;",
              "                    tflt1 = tflt1 - 360 * tint1;",
              "                }",
              "                tflt1 = tflt1 * (pi / 180.0);",
              "",
              "                //Рандомим расстояние",
              "                tint1 = PlanetOrbitRadius(StarPlanets(target_star, StarPlanets(target_star) - 1)) + 800; //Крайняя дальность системы",
              "                tint1 = tint1 - RndObject(50, 300, target_star);",
              "",
              "                //Дальше считаем конечные координаты на основе дистанции и угла",
              "                QuestPlaceX = cos(tflt1) * tint1;",
              "                QuestPlaceY = sin(tflt1) * tint1;",
              "",
              "                SetData(100, 0, GroupToShip(QuestSupport));",
              "                OrderTakeOff(GroupToShip(QuestSupport));",
              "",
              "                //Переходим на второй этап квеста, следование (с защитой) за пиратом",
              "                //Обновляем уведомление задания",
              "                tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5],'<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwo'), '<Star'+'>', Name(target_star), '<TargetNameShort'+'>', ShipName(cur_ship), '255,240,100');",
              "                CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "                //Обновляем этап квеста до двойки",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 2;",
              "                //Маркер таймеру",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 2] = -1;",
              "                QuestSupportDialogCall = CurTurn() + 3;",
              "            }",
              "            //Отправляем их на планету с пиратом",
              "            else",
              "            {",
              "                for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 1, tdwd1);",
              "                    //Множим Id на два для обозначения маркера планеты",
              "                    SetData(ActiveQuestsHQArray[ActiveQuestHQ, 8] * 2, 2, tdwd1);",
              "                }",
              "            }",
              "        }",
              "        //Если на данном этапе все наёмники по каким-то причинам уничтожены, то квест провален",
              "        else if(!GroupCount(QuestMercs))",
              "        {",
              "            ShipDestroy(cur_ship,1);",
              "            ShipDestroy(GroupToShip(QuestSupport),1);",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,0,0>' + CT('Quest.Info.OldQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteFailedByTime');",
              "            CustomEther('QuestFailed_PlayerMercsOrg', 5, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Снимаем запреты",
              "            NoComeKlingToStar(target_star, 0);",
              "            NoTargetToShip(Player(),0);",
              "            //Если игрок был насильно переведён к пиратам возвращаем ему овнер коалиции обратно",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 9] == 1) ShipOwner(Player(), ShipPilotRace(Player()));",
              "",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 0] = 0;",
              "            //Завершаем квест",
              "            EndQuestHQ(ActiveQuestHQ, 0);",
              "        }",
              "    }",
              "    //Второй этап квеста, наёмники следуют за пиратом, попутно его защищая, до его прихода в скриптовое место",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 2)",
              "    {",
              "        //Пират прибыл в нужное скриптовое место",
              "        if(GroupIn(QuestSupport, QuestPlace) || ActiveQuestsHQArray[ActiveQuestHQ, 2] != -1)",
              "        {",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwoWait');",
              "            CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "            //Пират прибыл а наёмники нет, переводим пирата в режим ожидания",
              "            if(GroupIn(QuestMercs, AroundQuestSupport) || ActiveQuestsHQArray[ActiveQuestHQ, 2] != -1)",
              "            {",
              "                //Когда наёмники уже построились для прыжка в чд(для этого ниже заводится таймер)",
              "                if(ActiveQuestsHQArray[ActiveQuestHQ, 2] == CurTurn())",
              "                {",
              "                    //Загружаем данные о симуляции АБ",
              "                    ArrayClear(tarr2);",
              "                    CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.UniqueModifers', tarr1);",
              "",
              "                    ArrayAdd(tarr2, newarray(1), 'Attackers');",
              "                    PirateClanProtectQuestTwoParseABInfo(tarr1, tarr2, 'Attackers', 'StrengthDamageToTarget');",
              "                    PirateClanProtectQuestTwoParseABInfo(tarr1, tarr2, 'Attackers', 'StrengthDamageToMercs');",
              "",
              "                    ArrayAdd(tarr2, newarray(1), 'Mercs');",
              "                    PirateClanProtectQuestTwoParseABInfo(tarr1, tarr2, 'Mercs', 'StrengthDamageToAttackers');",
              "",
              "                    ArrayAdd(tarr2, newarray(1), 'Target');",
              "                    PirateClanProtectQuestTwoParseABInfo(tarr1, tarr2, 'Target', 'StartHPPercents');",
              "",
              "                    copy(ActiveQuestsHQArray[ActiveQuestHQ, 11], tarr2);",
              "                    ArrayClear(tarr2);",
              "",
              "                    tint4 = PortionInDiapason(GalaxyDiffLevels(), 50, 500, CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestDaysInHoleDifficultMin'), CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestDaysInHoleDifficultMax'));",
              "",
              "                    //Выставляем приказ прыгать в чд(без маркера чисто потому-что удобнее чд передавать)",
              "                    for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                    {",
              "                        tdwd1 = GroupShip(QuestMercs,i);",
              "                        //Задаём маркер на прыжок в ЧД",
              "                        SetData(18, 0, tdwd1);",
              "                        SetData(ActiveQuestsHQArray[ActiveQuestHQ, 10], 1, tdwd1);",
              "                        SetData(tint4, 2, tdwd1);",
              "",
              "                        //Отключаем дроид прямо тут так как всёравно никто не заметит что его отключили в момент хода до того как корабль влетает в чд",
              "                        ShipSpecialBonuses(tdwd1, bonDroid, ShipSpecialBonuses(tdwd1, bonDroid) - 1000000);",
              "                    }",
              "",
              "                    //Доминион",
              "                    //Ломаем гарантировано пушки доминиону",
              "                    for(i = 0; i < ShipCntWeapon(cur_ship); i = i + 1)",
              "                    {",
              "                        tdwd2 = ShipWeapon(cur_ship, i);",
              "                        ItemDurability(tdwd2, 0);",
              "                    }",
              "",
              "                    //Снимаем часть ХП",
              "                    HullHP(cur_ship, 'DownTo' + Rnd(ActiveQuestsHQArray[ActiveQuestHQ, 11,'Target', 'StartHPPercents', 0], ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Target', 'StartHPPercents', 1], TempQuestHQSeed ^ 423587093));",
              "",
              "                    //Задаём приказ вылетать из чд по окончанию таймера",
              "                    ForceShipTakeoffHole(cur_ship, target_hole, tint4);",
              "",
              "                    //Также сразу доминиону \"отключаем\" дроид",
              "                    ShipSpecialBonuses(cur_ship, bonDroid, ShipSpecialBonuses(cur_ship, bonDroid) - 1000000);",
              "",
              "                    //Спавн самих доминаторов(спавним на заселенной чтоб ТУ планеты был выше и потом переносим чтоб корабль был не заметен в ангаре его на незаселёнку)",
              "                    tdwd1 = FindPlanet(target_star, 'NotNone', 0, 100);",
              "                    tdwd2 = FindPlanet(target_star, 'NotMaloc,NotPeleng,NotPeople,NotFei,NotGaal,NotPirateClan', 0, 0);",
              "                    for(i = 1; i < 8; i = i + 1)",
              "                    {",
              "                        tstr1 = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInAB.DifficultMin.' + i);",
              "                        tstr2 = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInAB.DifficultMax.' + i);",
              "                        if(tstr1 != '' && tstr2 != '')",
              "                        {",
              "                            tint1 = Rnd(GetParFromString(tstr1, ',', 0, 0), GetParFromString(tstr1, ',', 1, 0), GetQuestSeed() ^ 278218394);",
              "                            tint2 = Rnd(GetParFromString(tstr2, ',', 0, 0), GetParFromString(tstr2, ',', 1, 0), GetQuestSeed() ^ 143490887);",
              "",
              "                            cnt = PortionInDiapason(GalaxyDiffLevels(), 50, 500, tint1, tint2);",
              "                            for(j = 0; j < cnt; j = j + 1)",
              "                            {",
              "                                //Спавним доминатора",
              "                                tdwd3 = PirateClanProtectQuestTwoSpawnAttacker(tdwd1, tdwd2, i, 1);",
              "                                //Задаём блокировки на взлёт",
              "                                OrderNone(tdwd3);",
              "                                OrderLock(tdwd3, 1);",
              "",
              "                                //\"Отключаем\" дроид",
              "                                ShipSpecialBonuses(tdwd3, bonDroid, ShipSpecialBonuses(tdwd3, bonDroid) - 1000000);",
              "                            }",
              "                        }",
              "                    }",
              "",
              "                    //Пират сваливает в систему которую мы выбрали заранее чтоб он туда сваливал",
              "                    SetData(66, 0, GroupToShip(QuestSupport));",
              "                    SetData(Id(PlanetToStar(PlanetPirateClan())), 1, GroupToShip(QuestSupport));",
              "",
              "                    //Запускаем таймер(по которому выйдут все оставшиеся в живых корабли после симуляции АБ) и меняем этап квеста на 4",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + tint4;",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 1] = 3;",
              "",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5],'<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageThree');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "                }",
              "                else if(ActiveQuestsHQArray[ActiveQuestHQ, 2] == -1)",
              "                {",
              "                    //На данном этапе просто определяем коордианты",
              "                    //Так как дабокод не может рандомить флоат, генерируем угол в градусах и переводим его в радианы",
              "                    tflt1 = RndFloat(0.0, 2.0 * pi, cur_ship);",
              "                    //Случайная дистанция от центра корабля до генерируемой точки",
              "                    tint2 = Rnd(20, 40, GetQuestSeed() ^ 327832762);",
              "                    //Сами координаты",
              "                    QuestPlaceX = QuestPlaceX + (cos(tflt1) * tint2);",
              "                    QuestPlaceY = QuestPlaceY + (sin(tflt1) * tint2);",
              "",
              "                    tdwd1 = GroupToShip(QuestSupport);",
              "                    //Перебираем наёмников и делаем построение",
              "                    //Пока что дико костыльно задаю CoordX и CoordY на каждой итерации а потом их возврщаяя на место",
              "                    tint3 = CoordX(tdwd1);",
              "                    tint4 = CoordY(tdwd1);",
              "                    //Вычисялем угол \"сектор на окружности\" на котором относительно дистанции его расположить",
              "                    tflt1 = (pi * 2) / GroupCount(QuestMercs);",
              "",
              "                    //Хранит в себе уже выбраннные корабли, чтобы не выбирали повторно",
              "                    unknown t_array = newarray(1);",
              "                    for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                    {",
              "                        j = 1;",
              "                        //Определяем сам координаты точки точку",
              "                        tint1 = QuestPlaceX + (cos(tflt1 * i) * 80.0);",
              "                        tint2 = QuestPlaceY + (sin(tflt1 * i) * 80.0);",
              "",
              "                        //Используем ShipNearbyShips() для поиска ближайшего корабля от точки (которая тут корабль так как ShipNearbyShips принимает только корабль), также так как функция может вернуть наёмника который не участвует в квесте делаем таким образом что мы ищем пока не найдём наёмника из квеста",
              "                        check = 0;",
              "",
              "                        //Да костыль, надо функцию запилить отдельно, чтобы от координат зависела",
              "                        ShipSetCoords(tdwd1, tint1, tint2);",
              "                        ShipNearbyShips(tdwd1, 0, 0, -1, 'PlayerMerc', '');",
              "                        while(!check)",
              "                        {",
              "                            tdwd3 = ShipNearbyShips(tdwd1, j, j, -1, 'PlayerMerc', '');",
              "                            if(ShipGroup(tdwd3) == QuestMercs && ArrayFind(t_array, tdwd3) == -1)",
              "                            {",
              "                                check = 1;",
              "                                ArrayAdd(t_array, tdwd3);",
              "                            }",
              "                            else j = j + 1;",
              "                        }",
              "",
              "                        //Ставим маркер на движение в определённую точку",
              "                        SetData(16, 0, tdwd3);",
              "",
              "                        //Также задаём наёмнику скорость не меньше 300, чтобы избежать багов от гибели кораблей, не успевших в ЧД",
              "                        if(ShipSpeed(tdwd3) < 340)",
              "                        {",
              "                            ShipSpecialBonuses(tdwd3, bonSpeed, ShipSpecialBonuses(tdwd3, bonSpeed) + (Rnd(340, 360, GetQuestSeed() ^ 432876642) - ShipSpeed(tdwd3)));",
              "                        }",
              "",
              "                        //Задаём маркер перемещения в данную точку",
              "                        SetData(tint1, 1, tdwd3);",
              "                        SetData(tint2, 2, tdwd3);",
              "                    }",
              "                    //Возвращаем бедный корабль на место",
              "                    ShipSetCoords(tdwd1, tint3, tint4);",
              "",
              "                    //Далее заводим таймер на два хода, чтобы успеть сделать построение",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + 1;",
              "                    //Обновляем уведомление задания",
              "                    tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "                    tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "                    tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "                    tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageTwoWait');",
              "                    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "                }",
              "            }",
              "            else",
              "            {",
              "                //Направляем наёмников в квестовое место вместо следования за пиратом, так как следование может неверно определить просчёт радиуса и потому условие выше может не исполниться",
              "                for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    tdwd3 = GroupShip(QuestMercs, i);",
              "                    SetData(0, 0, tdwd3);",
              "                    SetData(0, 1, tdwd3);",
              "                    SetData(0, 2, tdwd3);",
              "                    SetData(-1, 3, tdwd3);",
              "                }",
              "            }",
              "        }",
              "        else",
              "        {",
              "            //Если не прибыл выдаём приказ перемещаться (выдаём приказ именно тут, а не при просчёте, поскольку невозможно будет нормально выставить маркер для перемещения в скриптвое место определённого размера)",
              "            tdwd3 = GroupToShip(QuestSupport);",
              "            SetData(0, 0, tdwd3);",
              "            SetData(0, 1, tdwd3);",
              "            SetData(0, 2, tdwd3);",
              "            SetData(-1, 3, tdwd3);",
              "        }",
              "    }",
              "    //Третий этап квеста",
              "    //Наёмники залетели в ЧД дальше идёт проверка тут на то что игрок залетает в чд и в какую параельльно также обрабатывается симуляция АБ",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 3)",
              "    {",
              "        //Если пришло время вылета из чд если игрок проходил АБ(если нет то исполнится услвоие выше которое автоматом убьёт доминион по истечению общего таймера и выведет оставшихся наёмников из ЧД) или если все доминаторы в чд уничтожены",
              "        if(CurTurn() == ActiveQuestsHQArray[ActiveQuestHQ, 2] || !GroupCount(QuestAttackers))",
              "        {",
              "            //Гарантировано убиваем доминаторов АБ",
              "            for(i = 0; i < GroupCount(QuestAttackers); i = i + 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestAttackers, i);",
              "                ShipDestroy(tdwd1);",
              "                SetData(0, 0, tdwd1);",
              "            }",
              "",
              "            //Проверки через GroupToShip(QuestTarget) а не через cur_ship нужны тут для того чтоб также учитывать то что корабль может выйти из скриптовой группы выше",
              "            for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                ShipSpecialBonuses(tdwd1, bonDroid, ShipSpecialBonuses(tdwd1, bonDroid) + 1000000);",
              "                ForceShipTakeoffHole(tdwd1, target_hole, 0);",
              "                //Если доминион выжил то задаём наёмнику маркер следования за ним",
              "                if(GroupToShip(QuestTarget))",
              "                {",
              "                    SetData(0, 0, tdwd1);",
              "                    SetData(0, 1, tdwd1);",
              "                    SetData(0, 2, tdwd1);",
              "                    SetData(Id(cur_ship), 3, tdwd1);",
              "                }",
              "                //Если нет маркер стояния на месте",
              "                else SetData(11, 0, GroupShip(QuestMercs, i));",
              "            }",
              "",
              "            //Доминион вылетает из ЧД(если он не выжил отработает условие выше) и после выставляем маркер телепорта который автоматом сменит состояние на простой",
              "            ForceShipTakeoffHole(cur_ship, target_hole, 0);",
              "            //Задаём маркер на телепорт",
              "            SetData(22, 0, cur_ship);",
              "",
              "            //Задаём координаты телепорта",
              "            //Генерируем случайный угол",
              "            tflt1 = RndFloat(0.0, 2.0 * pi, cur_ship);",
              "            //Случайная дистанция от ЧД до нашей генерируемой точки",
              "            tint2 = Rnd(850, 1000, GetQuestSeed() ^ 327832762);",
              "",
              "            //Сами координаты",
              "            SetData(HoleX1(target_hole) + (cos(tflt1) * tint2), 1, cur_ship);",
              "            SetData(HoleY1(target_hole) + (sin(tflt1) * tint2), 2, cur_ship);",
              "",
              "            //Задаём ID системы в какую телепорт(в данном случае в этой же системе), и также одновременно длительность пребыввания в гипере",
              "            tdwd1 = ActiveQuestsHQArray[ActiveQuestHQ, 7] << 20;",
              "            tdwd1 = tdwd1 | 0;",
              "            SetData(tdwd1, 3, cur_ship);",
              "",
              "            //Игрок не может совершить посадку на доминион",
              "            NoLanding(cur_ship, 1);",
              "",
              "            //Очищаем место которое было занято массивами",
              "            free(ActiveQuestsHQArray[ActiveQuestHQ, 11]);",
              "            copy(ActiveQuestsHQArray[ActiveQuestHQ, 11], dummy);",
              "",
              "            //Также прямо тут создаём и направляем нулевую волну кораблей прямо здесь по причине того что ЧД может закрытся",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 12] = 0;",
              "            PirateClanProtectQuestTwoWaveNew();",
              "            PirateClanProtectQuestTwoWaveHandling();",
              "",
              "            //Сменяем этап квеста",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 4;",
              "",
              "            //Вызываем диалог",
              "            QuestTargetDialogCall = CurTurn() + 3;",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '<Reputation'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 6], '255,240,100');",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteStageFour'), '<TargetNameShort'+'>', ShipName(cur_ship), '255,240,100');",
              "            CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1, cur_ship);",
              "",
              "            //Тут так-же выход чтоб не обрабатывать всё что ниже",
              "            exit;",
              "        }",
              "",
              "        //Обработка симуляции АБ без игрока",
              "        //Наносим урон по формуле (сила_атакующего/сила_обороняющегося)+модификатор_атаки_по_стороне",
              "        for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestMercs, i);",
              "            tdwd2 = GroupShip(QuestAttackers, RndObject(0, GroupCount(QuestAttackers) - 1, tdwd1));",
              "            HullHP(tdwd2, 'Minus' + int((ShipStrengthInAverageRanger(tdwd1) / ShipStrengthInAverageRanger(tdwd2)) + RndFloat(ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Mercs','StrengthDamageToAttackers', 0], ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Mercs', 'StrengthDamageToAttackers', 1], tdwd1)));",
              "        }",
              "",
              "        for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "        {",
              "            tdwd1 = GroupShip(QuestAttackers, i);",
              "            //Выбираем рандомную цель и атакуем",
              "            tdwd2 = 0;",
              "            rand = RndObject(0, 100, tdwd1);",
              "            if(rand < (100 / (GroupCount(QuestMercs) + 1)) && GroupToShip(QuestTarget))",
              "            {",
              "                tdwd2 = GroupToShip(QuestTarget);",
              "                HullHP(tdwd2, 'Minus' + int((ShipStrengthInAverageRanger(tdwd1) / ShipStrengthInAverageRanger(tdwd2)) + RndFloat(ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Attackers', 'StrengthDamageToTarget', 0], ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Attackers', 'StrengthDamageToTarget', 1], tdwd1)));",
              "            }",
              "            else if(GroupToShip(QuestMercs))",
              "            {",
              "                tdwd2 = GroupShip(QuestMercs, RndObject(0, GroupCount(QuestMercs) - 1, tdwd1));",
              "                HullHP(tdwd2, 'Minus' + int((ShipStrengthInAverageRanger(tdwd1) / ShipStrengthInAverageRanger(tdwd2)) + RndFloat(ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Attackers', 'StrengthDamageToMercs', 0], ActiveQuestsHQArray[ActiveQuestHQ, 11, 'Attackers', 'StrengthDamageToMercs', 1], tdwd1)));",
              "            }",
              "        }",
              "",
              "        //Обработка вызова АБ",
              "        if(ShipInHole(Player()) && !ActiveQuestsHQArray[ActiveQuestHQ, 14])",
              "        {",
              "            //Проверяем что это вообще за ЧД, если квестовая залетаем",
              "            if(ShipOrderObj(Player()) == target_hole)",
              "            {",
              "                HoleMap(target_hole, 'NoEntry');",
              "",
              "                //Конвертируем корабли в АБ и назначаем специальные метки по которым будем потом проверять живы они или нет",
              "                for(i = GroupCount(QuestAttackers) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    //Так как доминаторы гарантировано умирают конвертируем их без указания меток",
              "                    ConvertToABShip(GroupShip(QuestAttackers, i), 0);",
              "                }",
              "",
              "                for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "                {",
              "                    tdwd1 = GroupShip(QuestMercs, i);",
              "                    ConvertToABShip(tdwd1, 1, 100, 100, Id(tdwd1));",
              "                }",
              "",
              "                ConvertToABShip(cur_ship, 1, 100, 100, Id(cur_ship));",
              "",
              "                //Запускаем аркадный бой",
              "                StartAB('ABMap.map_' + Rnd(1, 15, GetQuestSeed()), Rnd(1, 3, GetQuestSeed() ^ 1187389933));",
              "                //Назначаем маркер что корабль влетал в ЧД чтоб условие повторно не обрабатывалось и также для некоторых проверок после окончания таймера(т.е проверки кто выжил в ЧД а кто нет)",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 14] = 1;",
              "                //Назначаем новый таймер на вылет всех оставшихся в живых кораблей из ЧД",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + 1;",
              "            }",
              "        }",
              "    }",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 4)",
              "    {",
              "        //Поддерживаем ЧД в открытом состоянии",
              "        //tdwd1 = IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]);",
              "        //if(tdwd1) HoleStatus(tdwd1, 0);",
              "",
              "        //Таймер вышел (закончилась очередная волна или вообще закончились волны)",
              "        if(ActiveQuestsHQArray[ActiveQuestHQ, 2] == CurTurn())",
              "        {",
              "            //Если следующая волна прописана то запускаем её",
              "            if(BlockExist(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + (ActiveQuestsHQArray[ActiveQuestHQ, 12] + 1)))",
              "            {",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 12] = ActiveQuestsHQArray[ActiveQuestHQ, 12] + 1;",
              "                PirateClanProtectQuestTwoWaveNew();",
              "                PirateClanProtectQuestTwoWaveHandling();",
              "            }",
              "            //Если волны закончились победа",
              "            else",
              "            {",
              "                //Сменяем этап квеста на 5",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 1] = 5;",
              "            }",
              "        }",
              "        else if(ActiveQuestsHQArray[ActiveQuestHQ, 13] == 1)",
              "        {",
              "            //PirateClanProtectQuestTwoWaveHandling нужно запускать повторно только если тип волны 1(равномерный выход)",
              "            PirateClanProtectQuestTwoWaveHandling();",
              "        }",
              "    }",
              "    //Этап квеста когда волны кончились но доминаторы ещё могут быть живы",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 1] == 5)",
              "    {",
              "        if(!GroupToShip(QuestAttackers))",
              "        {",
              "            //Все уцелевшие наёмники возвращаются в штаб",
              "            for(i = GroupCount(QuestMercs) - 1; i >= 0; i = i - 1)",
              "            {",
              "                tdwd1 = GroupShip(QuestMercs, i);",
              "                SetData(0, 0, tdwd1);",
              "                SetData(0, 1, tdwd1);",
              "                SetData(0, 2, tdwd1);",
              "                SetData(-3, 3, tdwd1);",
              "                ChangeState('ReturningStrikeState', tdwd1);",
              "            }",
              "",
              "            //Обновляем уведомление задания",
              "            tstr1 = '<color=0,255,0>' + CT('Quest.Info.OldQuests.Accepted') + '</color>';",
              "            tstr1 = tstr1 + \"<br>\" + ActiveQuestsHQArray[ActiveQuestHQ, 4];",
              "            tstr1 = tstr1 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.QuestNoteSuccess'), '<TargetNameShort'+'>', ShipName(cur_ship), '<Cost'+'>', ActiveQuestsHQArray[ActiveQuestHQ, 5], '255,240,100');",
              "            CustomEther('QuestComplete_PlayerMercsOrg', 4, ActiveQuestsHQArray[ActiveQuestHQ, 3], tstr1);",
              "",
              "            //Триггерим принудительное закрытие ЧД",
              "            //tdwd1 = IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]);",
              "            //if(tdwd1) HoleStatus(tdwd1, 3);",
              "",
              "            //Снимаем запреты",
              "            NoComeKlingToStar(target_star, 0);",
              "            NoTargetToShip(Player(), 0);",
              "            //Снимаем запрет посадки на доминион",
              "            NoLanding(cur_ship, 0);",
              "            //Выводим доминион из скрипта",
              "            ShipOut(cur_ship);",
              "",
              "            //Если игрок был насильно переведён к пиратам возвращаем ему овнер коалиции обратно",
              "            if(ActiveQuestsHQArray[ActiveQuestHQ, 9] == 1) ShipOwner(Player(), ShipPilotRace(Player()));",
              "",
              "            //И сам квест тоже",
              "            ActiveQuestsHQArray[ActiveQuestHQ, 1] = 0;",
              "",
              "            //Завершаем квест и получаем награду",
              "            EndQuestHQ(ActiveQuestHQ, 1);",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1094,
          "#":  1095,
          "Total.Lines":  381,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Функция для вылета из ЧД",
              "function ForceShipTakeoffHole(dword ship, dword hole, int turn)",
              "{",
              "    MakeShipEnterStar(ship, HoleStar1(hole), HoleStar1(hole), turn);",
              "    ShipOrder(ship, 4);",
              "    ShipOrderObj(ship, hole);",
              "    ShipOrderData1(ship, turn);",
              "    ShipOrderData2(ship, 1);",
              "}",
              "",
              "//Функция для спавна атакующего обязательно принимает планету для спавна и планету для телепортации на неё корабля (нужно для того чтоб запсавнить корабль на планете заселенной а потом скрыть его переместив на незаселёнку)",
              "function PirateClanProtectQuestTwoSpawnAttacker(dword spawnplanet, dword planet, int type, int subrace)",
              "{",
              "    dword ship = BuyDomikExtremal(spawnplanet, type, subrace);",
              "    ShipJoin(QuestAttackers, ship);",
              "    ShipAddCustomShipInfo(ship, 'ShuMercsHQ_QuestShipNotScriptDialog');",
              "",
              "    //Делаем закуп вещей чтоб доминатор был сильнее",
              "    for(int i = 0; i < 7; i = i + 1) ShipRefit(ship);",
              "",
              "    //Делаем все вещи гарантировано доминаторскими",
              "    for(i = 0; i < ShipItems(ship); i = i + 1)",
              "    {",
              "        ItemOwner(ShipItems(ship, i), 5);",
              "        ItemSubrace(ShipItems(ship, i), 1);",
              "    }",
              "",
              "    //Перемещаем корабль на планету",
              "    TransferShip(ship, planet);",
              "    result = ship;",
              "}",
              "",
              "//функция для формирования информации из ланга загруженного в массив в массив(с учётом сложности),coef тут нужен для работы ранломизаторов если встретится маленькое float",
              "function PirateClanProtectQuestTwoParseABInfo(ref inparr, ref outarr, str side, str modifer)",
              "{",
              "    ArrayAdd(outarr[side], 0, modifer);",
              "",
              "    unknown t_array = newarray(2);",
              "    //Заносим в массив минимальное значение рандомизатора",
              "    str diffmin = GetParFromString(inparr['DifficultMax', side, modifer], ',', 0, 1);",
              "    str diffmax = GetParFromString(inparr['DifficultMax', side, modifer], ',', 0, 1);",
              "    t_array[0] = PortionInDiapason(GalaxyDiffLevels(), 50, 500, diffmin, diffmax);",
              "",
              "    //Заносим в массив максимальное значение рандомизатора",
              "    diffmin = GetParFromString(inparr['DifficultMax', side, modifer], ',', 1, 1);",
              "    diffmax = GetParFromString(inparr['DifficultMax', side, modifer], ',', 1, 1);",
              "    t_array[1] = PortionInDiapason(GalaxyDiffLevels(), 50, 500, diffmin, diffmax);",
              "",
              "    copy(outarr[side, modifer], t_array);",
              "    ArrayClear(t_array);",
              "}",
              "",
              "//О системе волн",
              "//PirateClanProtectQuestTwoWaveNew - запускается только один раз, на данном этапе парсим информацию о волне и расставляем все нужные значения такие как тип волны её длительность а также заводим таймер",
              "//PirateClanProtectQuestTwoWaveHandling - здесь происходит обработка волны и спавн атакующих",
              "",
              "function PirateClanProtectQuestTwoWaveNew()",
              "{",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 11] = newarray(1);",
              "    ActiveQuestsHQArray[ActiveQuestHQ, 13] = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + int(ActiveQuestsHQArray[ActiveQuestHQ, 12]) + '.WaveOut');",
              "",
              "    int j = 0;",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 13] == 1)",
              "    {",
              "        j = 1;",
              "        //Первый элемент массива тут это общее количество кораблей",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 11, 0] = newarray(1);",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0] = 0;",
              "        for(int i = 1; i < 8; i = i + 1)",
              "        {",
              "            //Проверяем что информация о типе доминатора вообще указана",
              "            str diffmin = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + int(ActiveQuestsHQArray[ActiveQuestHQ, 12]) + '.WaveСomposition.DifficultMin.' + i);",
              "            str diffmax = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + int(ActiveQuestsHQArray[ActiveQuestHQ, 12]) + '.WaveСomposition.DifficultMax.' + i);",
              "            if(diffmin != '' && diffmax != '')",
              "            {",
              "                ArrayAdd(ActiveQuestsHQArray[ActiveQuestHQ, 11], newarray(2));",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 0] = Rnd(PortionInDiapason(GalaxyDiffLevels(), 50, 500, GetParFromString(diffmin, ',', 0, 1), GetParFromString(diffmax, ',', 0, 1)), PortionInDiapason(GalaxyDiffLevels(), 50, 500, GetParFromString(diffmin, ',', 1, 1), GetParFromString(diffmax, ',', 1, 1)), GetQuestSeed() ^ 378329326);",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0] = ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0] + ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 0];",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 1] = i;",
              "                j = j + 1;",
              "            }",
              "        }",
              "    }",
              "    else",
              "    {",
              "        //Осталяные добавляем как обычно",
              "        for(i = 1; i < 8; i = i + 1)",
              "        {",
              "            //Проверяем что информация о типе доминатора вообще указана",
              "            diffmin = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + int(ActiveQuestsHQArray[ActiveQuestHQ, 12]) + '.WaveСomposition.DifficultMin.' + i);",
              "            diffmax = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + int(ActiveQuestsHQArray[ActiveQuestHQ, 12]) + '.WaveСomposition.DifficultMax.' + i);",
              "            if(diffmin != '' && diffmax != '')",
              "            {",
              "                //Если ещё нет первого элемента то добавляем, проверка внутри цикла тут потому-что может например не быть указан какой угодно тип и соотвественно начинатся тип может откуда угодно",
              "                if(!j) ActiveQuestsHQArray[ActiveQuestHQ, 11, j] = newarray(3);",
              "                //Иначе добавляем как обычно",
              "                else ArrayAdd(ActiveQuestsHQArray[ActiveQuestHQ, 11], newarray(3));",
              "",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 0] = PortionInDiapason(GalaxyDiffLevels(), 50, 500, GetParFromString(diffmin, ',', 0, 1), GetParFromString(diffmax, ',', 0, 1));",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 1] = PortionInDiapason(GalaxyDiffLevels(), 50, 500, GetParFromString(diffmin, ',', 1, 1), GetParFromString(diffmax, ',', 1, 1));",
              "                ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 2] = i;",
              "",
              "                j = j + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    //Заводим таймер до конца этой волны, если тип волны 0 то заводим на следующий ход",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 13] == 0)",
              "    {",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + 1;",
              "    }",
              "    else",
              "    {",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 15] = CT(ActiveQuestsHQArray[ActiveQuestHQ, 3] + '.AttackersInSpaceWaves.' + int(ActiveQuestsHQArray[ActiveQuestHQ, 12]) + '.WaveTime');",
              "        ActiveQuestsHQArray[ActiveQuestHQ, 2] = CurTurn() + ActiveQuestsHQArray[ActiveQuestHQ, 15];",
              "    }",
              "}",
              "",
              "function PirateClanProtectQuestTwoWaveHandling()",
              "{",
              "    dword spawn_planet = FindPlanet(target_star, 'NotNone', 0, 100);",
              "    dword planet = FindPlanet(GalaxyStar(ActiveQuestsHQArray[ActiveQuestHQ, 7] - 1), 'NotMaloc,NotPeleng,NotPeople,NotFei,NotGaal,NotPirateClan', 0, 100);",
              "    //Выход сразу",
              "    if(ActiveQuestsHQArray[ActiveQuestHQ, 13] == 0)",
              "    {",
              "        for(int i = 0; i < ArrayDim(ActiveQuestsHQArray[ActiveQuestHQ, 11]); i = i + 1)",
              "        {",
              "            int cnt = Rnd(ActiveQuestsHQArray[ActiveQuestHQ, 11, i, 0], ActiveQuestsHQArray[ActiveQuestHQ, 11, i, 1],GetQuestSeed() ^ 908097427);",
              "            for(int j = 1; j <= cnt; j = j + 1)",
              "            {",
              "                //Спавним атакующего",
              "                dword ship = PirateClanProtectQuestTwoSpawnAttacker(spawn_planet, planet, ActiveQuestsHQArray[ActiveQuestHQ, 11, i, 2], 1);",
              "                SetData(Id(GroupToShip(QuestTarget)), 3, ship);",
              "                ForceShipTakeoffHole(ship, IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]), 2);",
              "            }",
              "        }",
              "    }",
              "    //Равномерный спавн",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 13] == 1)",
              "    {",
              "        cnt = int(ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0]) / int(ActiveQuestsHQArray[ActiveQuestHQ, 15]);",
              "        //Если делится c остатком добавляем 1",
              "        if(int(ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0]) % int(ActiveQuestsHQArray[ActiveQuestHQ, 15]))",
              "        {",
              "            cnt = cnt + 1;",
              "        }",
              "",
              "        for(i = 0; i < cnt; i = i + 1)",
              "        {",
              "            for(j = 1; j < ArrayDim(ActiveQuestsHQArray[ActiveQuestHQ, 11]); j = j + 1)",
              "            {",
              "                if(int(ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 0]))",
              "                {",
              "                    ship = PirateClanProtectQuestTwoSpawnAttacker(spawn_planet, planet, ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 1], 1);",
              "                    SetData(Id(GroupToShip(QuestTarget)), 3, ship);",
              "                    ForceShipTakeoffHole(ship, IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]), 2);",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 0] = ActiveQuestsHQArray[ActiveQuestHQ, 11, j, 0] - 1;",
              "                    ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0] = ActiveQuestsHQArray[ActiveQuestHQ, 11, 0, 0] - 1;",
              "                    break;",
              "                }",
              "            }",
              "        }",
              "    }",
              "    //Спавн в конце (по-факту запускаем вначале только с отсрочкой в несколько ходов)",
              "    else if(ActiveQuestsHQArray[ActiveQuestHQ, 13] == 2)",
              "    {",
              "        for(i = 0; i < ArrayDim(ActiveQuestsHQArray[ActiveQuestHQ, 11]); i = i + 1)",
              "        {",
              "            cnt = Rnd(ActiveQuestsHQArray[ActiveQuestHQ, 11, i, 0], ActiveQuestsHQArray[ActiveQuestHQ, 11, i, 1], GetQuestSeed() ^ 908097427);",
              "            for(j = 1; j <= cnt; j = j + 1)",
              "            {",
              "                //Спавним атакующего",
              "                ship = PirateClanProtectQuestTwoSpawnAttacker(spawn_planet, planet, ActiveQuestsHQArray[ActiveQuestHQ, 11, i, 2], 1);",
              "                SetData(Id(GroupToShip(QuestTarget)), 3, ship);",
              "                ForceShipTakeoffHole(ship, IdToHole(ActiveQuestsHQArray[ActiveQuestHQ, 10]), int(ActiveQuestsHQArray[ActiveQuestHQ, 15]) + 2);",
              "            }",
              "        }",
              "    }",
              "}",
              "",
              "//Ищем все системы, подходящие под условия задания PirateClan.Protect.2",
              "function PirateClanProtectQuestTwoConditions()",
              "{",
              "    dword player_star = ShipStar(Player());",
              "    int first_range = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Protect.2.FirstStarMaxRange');",
              "    //Минимальное необходимое число военных в системе",
              "    free(tarr2);",
              "    tarr2 = newarray(1);",
              "    int available_options = 0;",
              "    for(int i = 1; i < GalaxyStars(); i = i + 1)",
              "    {",
              "        dword cur_star = StarNearbyStars(player_star, i);",
              "        //Убеждаемся, что система в данный момент не находится под атакой",
              "        if(StarBattle(cur_star)) continue;",
              "        if(StarEnemyThreatLevel(cur_star)) continue;",
              "        //Система должна обязательно принадлежать пиратскому клану",
              "        if(StarOwner(cur_star) != 2) continue;",
              "        //В стартовой (она же конечная) системе должен быть доминион",
              "        if(!StarRuins(cur_star, 'CB')) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        //Пропускаем закрытые сектора и тайный пиратский сектор",
              "        dword cur_sector = StarToCon(cur_star);",
              "        if(!SectorVisible(cur_sector)) continue;",
              "        if(cur_sector == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "        int cur_range = round(sqrt(Dist2Star(cur_star, player_star)));",
              "        if(cur_range > first_range) continue;",
              "        //Первый элемент заполняем как обычно",
              "        if(!available_options)",
              "        {",
              "            tarr2[0] = cur_star;",
              "            available_options = 1;",
              "        }",
              "        //А последующие сперва объявляем",
              "        else",
              "        {",
              "            ArrayAdd(tarr2, cur_star, available_options);",
              "            available_options = available_options + 1;",
              "        }",
              "    }",
              "",
              "    //Если удалось подобрать обе системы",
              "    if(available_options)",
              "    {",
              "        int next_num = ArrayDim(tarr1);",
              "        ArrayAdd(tarr1, dummy);",
              "        tarr1[next_num] = newarray(16);",
              "        //Случайно выбираем системы из числа подобранных поиском",
              "        GetQuestSeed();",
              "        available_options = Rnd(1, available_options, TempQuestHQSeed ^ 7891721) - 1;",
              "",
              "        //Вначале имя пирата пеленга, а потом имя АБ карты на случай если игрок залетит в ЧД",
              "        tarr1[next_num, 0] = CT('Quest.ShuMercs.QuestsHQ.PirateClan.Protect.2.SupportName');",
              "        //Статус квеста",
              "        tarr1[next_num, 1] = 0;",
              "        //Таймер квеста",
              "        tarr1[next_num, 2] = 0;",
              "",
              "        //Адрес раздела квеста в Lang, а заодно Id уведомления квеста",
              "        tarr1[next_num, 3] = 'Quest.ShuMercs.QuestsHQ.PirateClan.Protect.2';",
              "        //Титульная строчка из уведомления (в ней может быть занесено название корабля, который может погибнуть до апдейта уведомления, поэтому так)",
              "        tarr1[next_num, 4] = '';",
              "",
              "        //Награда за квест в кредитах",
              "        int cost = RoundTo(GalaxyMoney(4, 4) * 19, 1000, 0);",
              "        tarr1[next_num, 5] = round(PortionInDiapason(PlayerHQMainArray['Main', 'PirateClanReputation'], 0, 1000, cost, cost * 2));",
              "        //Награда за квест в очках репутации у фракции",
              "        tarr1[next_num, 6] = 50;",
              "        //Целевая система",
              "        tarr1[next_num, 7] = tarr2[available_options];",
              "        //Планета с пиратом",
              "        tarr1[next_num, 8] = FindPlanet(tarr1[next_num, 7], 'NotNone', 0, 100);",
              "",
              "        //В будущем маркер обозначающий был ли в коалиции игрок на момент вылета из ЧД (нужно чтоб вернуть ему коалиционное звание)",
              "        tarr1[next_num, 9] = 0;",
              "",
              "        //В будущем тут будет хранится айди ЧД",
              "        tarr1[next_num, 10] = 0;",
              "",
              "        //Тут в будущем будет массив для симуляции АБ и волн",
              "        tarr1[next_num, 11] = 0;",
              "        tarr1[next_num, 12] = 0;",
              "",
              "        //В будущем будет отвечать за тип текущей волны",
              "        tarr1[next_num, 13] = 0;",
              "",
              "        //Маркер посещения игроком ЧД (если 1, то посещал)",
              "        tarr1[next_num, 14] = 0;",
              "",
              "        //Готовый текст интро квеста (необходимо составлять сейчас, т.к. все квесты и набор объектов к нему различаются), после начала волн тут длительность выхода текущей волны",
              "        tdwd1 = StarRuins(tarr1[next_num, 7], 'CB');",
              "        tarr1[next_num, 15] = Format(CT(tarr1[next_num, 3] + '.QuestIntro'),",
              "                                     '<TargetName'+'>', Name(tdwd1),",
              "                                     '<TargetNameShort'+'>', ShipName(tdwd1),",
              "                                     '<TargetStar'+'>', Name(tarr1[next_num, 7]),",
              "                                     '<TargetPlanet'+'>', Name(tarr1[next_num, 8]),",
              "                                     '<Cost'+'>', tarr1[next_num, 5]);",
              "    }",
              "}",
              "",
              "//Подготовительный этап квеста PirateClan.Protect.2",
              "function PirateClanProtectQuestTwoPrepare(int q_num)",
              "{",
              "    //Первый этап квеста",
              "    ActiveQuestsHQArray[q_num, 1] = 1;",
              "",
              "    //Определяем, сколько наёмников игрока отправится на это задание",
              "    //(все доступные из резерва)",
              "    //PlayerHQMainArray['Mercs', 'CurrentAtReady'] == Текущее число \"запасных\" (фактически, запас наёмников на базе)",
              "    i = PlayerHQMainArray['Mercs', 'CurrentAtReady'];",
              "    PlayerHQMainArray['Mercs', 'CurrentAtReady'] = 0;",
              "",
              "    //Спавним наёмников, и добавляем их в группу для задания",
              "    dword ship = GroupToShip(PlayerHQ);",
              "    SpawnPlayerMerc(NearCivilPlanet(ship), ship, t_Transport, i);",
              "    //Выдаём всем наёмникам задачу лететь к планете сбора",
              "    for(int i = 0; i < GroupCount(QuestMercs); i = i + 1)",
              "    {",
              "        ship = GroupShip(QuestMercs, i);",
              "        SetData(Id(ActiveQuestsHQArray[q_num, 8]) * 2, 2, ship);",
              "",
              "        //Вручную корректируем характер наёмника",
              "        ShipStatus(ship, 0, 0); //Торговец",
              "        ShipStatus(ship, 1, 100); //Пират",
              "        ShipStatus(ship, 2, 0); //Воин",
              "        ShipOwner(ship, PirateClan);",
              "        NoTargetToShip(ship, 3);",
              "        RelationToRanger(PlanetPirateClan(), ship, 100);",
              "    }",
              "",
              "    //Получаем доминион",
              "    ship = StarRuins(ActiveQuestsHQArray[q_num, 7], 'CB');",
              "    if(!ShipEqInSlot(ship, t_Radar))",
              "    {",
              "        dword item = CreateEquipment(t_Radar, RndObject(50, 80, ship), GalaxyTechLevel(), PirateClan);",
              "        AddItemToShip(ship, item);",
              "        ItemIsInUse(item, ship, 1);",
              "        NoDropItem(item, 1);",
              "    }",
              "    ShipJoin(QuestTarget, ship);",
              "",
              "    //Доминион улетает в гипер системы Тортугац где будет пока мы его не подцепим из скрипта",
              "    //Задаём маркер на телепорт",
              "    SetData(22, 0, ship);",
              "",
              "    //Задаём координаты телепорта",
              "    //Задаём координаты",
              "    SetData(100000, 1, ship);",
              "    SetData(100000, 2, ship);",
              "",
              "    //Задаём ID системы в какую телепорт (в данном случае в этой же системе), и также одновременно длительность пребывания в гипере",
              "    tdwd1 = Id(PlanetToStar(PlanetPirateClan())) << 20;",
              "    tdwd1 = tdwd1 | 1000;",
              "    SetData(tdwd1, 3, ship);",
              "",
              "    //Добавляем уведомление задания",
              "    ActiveQuestsHQArray[q_num, 4] = Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitle'), '<TargetName'+'>', ShipName(ship), '255,240,100');",
              "    tstr3 = '<color=255,240,100>' + CT('Quest.Info.CurQuests.NotAccepted') + '</color>';",
              "    tstr3 = tstr3 + \"<br>\" + ActiveQuestsHQArray[q_num, 4];",
              "    tstr3 = tstr3 + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteTitleReward'), '<Cost'+'>', ActiveQuestsHQArray[q_num, 5], '<Reputation'+'>', ActiveQuestsHQArray[q_num, 6], '255,240,100');",
              "    tstr3 = tstr3 + \"<br>\" + '<clr><clrEnd>' + \"<br>\" + Format(CT(ActiveQuestsHQArray[q_num, 3] + '.QuestNoteStageOne'), '<Planet'+'>', ShortName(ActiveQuestsHQArray[q_num, 8]), '<Star'+'>', Name(ActiveQuestsHQArray[q_num, 7]), '255,240,100');",
              "    CustomEther('QuestInProcess_PlayerMercsOrg', 3, ActiveQuestsHQArray[q_num, 3], tstr3);",
              "",
              "    //Меняем планете расу на пеленгскую на этап пока его спавним (также нужно для того чтоб ему выдалась пеленгская оборудка)",
              "    tint1 = PlanetRace(ActiveQuestsHQArray[q_num, 8]);",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 8], Peleng);",
              "",
              "    //Спавним пирата провожатого",
              "    ship = BuyPirate(ActiveQuestsHQArray[q_num, 8], 200);",
              "    ShipRefit(ship);",
              "    ShipRefit(ship);",
              "    ShipJoin(QuestSupport, ship);",
              "    NoTargetToShip(ship, 3);",
              "    RaisePirateRank(ship, 4); //Чтобы был посолиднее",
              "    SetName(ship, ActiveQuestsHQArray[q_num, 0]);",
              "",
              "    //Возвращаем расу планеты на место",
              "    PlanetRace(ActiveQuestsHQArray[q_num, 8], tint1);",
              "",
              "    //Создаём Субпортал",
              "    tdwd3 = CreateArt(t_ArtBlackHole, tint1);",
              "    AddItemToShip(ship, tdwd3);",
              "    LinkItemToScript(tdwd3, QuestItem);",
              "    ItemOwner(tdwd3, PirateClan);",
              "",
              "    //Ставим запреты",
              "    NoComeKlingToStar(ActiveQuestsHQArray[q_num, 7], 1);",
              "    NoTargetToShip(Player(), 3);",
              "",
              "    //Также переводим игрока в клан если он не в клане и ставим маркер что ему надо будет вернуть овнер",
              "    if(ShipOwner(Player()) != PirateClan)",
              "    {",
              "        ShipOwner(Player(), PirateClan);",
              "        ActiveQuestsHQArray[q_num, 9] = 1;",
              "    }",
              "",
              "    //Заносим в массив Id квестовой системы",
              "    ActiveQuestsHQArray[q_num, 7] = Id(ActiveQuestsHQArray[q_num, 7]);",
              "    //И планету",
              "    ActiveQuestsHQArray[q_num, 8] = Id(ActiveQuestsHQArray[q_num, 8]);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1098,
          "#":  1099,
          "Total.Lines":  46,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//У игрока должно быть по почётное медали от каждой расы (универсальные не в счёт), а также одна позорная пиратская метка",
              "int check = 1;",
              "if(CountReward(Player(), ForPerfidy) < 2) check = 0;",
              "else",
              "{",
              "    int malocs = 0;",
              "    int pelengs = 0;",
              "    int peoples = 0;",
              "    int feis = 0;",
              "    int gaals = 0;",
              "",
              "    tstr1 = CountReward(Player());",
              "    CT('Reward', tarr1);",
              "    for(int i = ParsCountFromString(tstr1, ',') - 1; i >= 0; i = i - 1)",
              "    {",
              "        tstr2 = GetParFromString(tstr1, ',', i, 0);",
              "        if(tarr1[tstr2, 'Type'] == 'ForAccomplishment' || tarr1[tstr2, 'Type'] == 'ForSecretMission' || tarr1[tstr2, 'Type'] == 'ForPlanetBattle')",
              "        {",
              "            if(tarr1[tstr2, 'Race'] == 'Maloc') malocs = malocs + 1;",
              "            else if(tarr1[tstr2, 'Race'] == 'Peleng') pelengs = pelengs + 1;",
              "            else if(tarr1[tstr2, 'Race'] == 'People') peoples = peoples + 1;",
              "            else if(tarr1[tstr2, 'Race'] == 'Fei') feis = feis + 1;",
              "            else if(tarr1[tstr2, 'Race'] == 'Gaal') gaals = gaals + 1;",
              "        }",
              "    }",
              "",
              "    if(malocs < 2) check = 0;",
              "    else if(pelengs < 2) check = 0;",
              "    else if(peoples < 2) check = 0;",
              "    else if(feis < 2) check = 0;",
              "    else if(gaals < 2) check = 0;",
              "}",
              "",
              "if(check)",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerConditionExtraTerms');",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionExtraTermsYes');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionExtraTermsNo');",
              "    tint1 = 1;",
              "}",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerConditionExtraTerms');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionExtraTermsNo');",
              "    tint1 = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -120,
          "Parent":  1103,
          "#":  1105,
          "Total.Lines":  35,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cost = RoundTo(max(3500000, GalaxyMoney(4, 4) * 70), 1000, 0);",
              "tstr1 = '</color>' + Format(CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBGovAnswerConditionExtraTermsYes'), '<Cost'+'>', cost);",
              "tstr3 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionYesStart');",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerConditionYesCancel');",
              "tint1 = 2;",
              "",
              "//Ищем все подходящие для выбора системы",
              "ArrayClear(tarr1);",
              "if(!ShipOnSidePirateClan(Player())) tint2 = 0;",
              "else tint2 = 2;",
              "for(i = 0; i < GalaxyStars(); i = i + 1)",
              "{",
              "    cur_star = StarNearbyStars(ShipStar(Player()), i);",
              "    if(!SectorVisible(StarToCon(cur_star))) continue;",
              "    if(StarOwner(cur_star) != tint2) continue;",
              "    if(StarCustomFaction(cur_star) != '') continue;",
              "    if(StarToCon(cur_star) == StarToCon(PlanetToStar(PlanetPirateClan()))) continue;",
              "    //Пропускаем системы с ЦН и штабами конкурентов",
              "    if(StarRuins(cur_star, 'MB')) continue;",
              "    if(StarRuins(cur_star, 'Manaan')) continue;",
              "    if(StarRuins(cur_star, 'MercHQ')) continue;",
              "    if(StarRuins(cur_star, 'MercHQ_licensed')) continue;",
              "",
              "    ArrayAdd(tarr1, cur_star);",
              "}",
              "",
              "if(ArrayDim(tarr1) > 1)",
              "{",
              "    //Выстраиваем список подходящих систем в ответы",
              "    for(i = 1; i < ArrayDim(tarr1); i = i + 1)",
              "    {",
              "        cur_star = tarr1[i];",
              "        InjectAnswer('OwnBaseDialogBridge_Choosed', CT('Script.Mod_ShuMercs.CreatingPlayerOrgDialogs.MBPlayerChooseStar') + ' <color=0,50,200>' + Name(cur_star) + '</color>', cur_star);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1107,
          "#":  1108,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveChooseShip');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1109,
          "#":  1110,
          "Total.Lines":  28,
          "Code.Type":  "Turn",
          "Code":          
          [
              "for(int i = 0; i < GroupCount(PlayerMercsStrike); i = i + 1)",
              "{",
              "    dword merc = GroupShip(PlayerMercsStrike, i);",
              "    tstr2 = Name(merc);",
              "    if(!StateIs(merc, 'SittingBaseState'))",
              "    {",
              "        tstr2 = tstr2 + ' ' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveChooseShipNotHere');",
              "        AddDialogBlock(tstr2, 1);",
              "    }",
              "    else AddDialogBlock(tstr2, 0);",
              "",
              "    InjectAnswer('PlayerHQScienceRelImpChooseShip', Name(merc), merc);",
              "}",
              "merc = GroupToShip(CruisersDefenders);",
              "if(merc)",
              "{",
              "    tstr2 = Name(merc);",
              "    if(!StateIs(merc, 'SittingBaseState'))",
              "    {",
              "        tstr2 = tstr2 + ' ' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveChooseShipNotHere');",
              "        AddDialogBlock(tstr2, 1);",
              "    }",
              "    else AddDialogBlock(tstr2, 0);",
              "",
              "    InjectAnswer('PlayerHQScienceRelImpChooseShip', Name(merc), merc);",
              "}",
              "",
              "tstr2 = '</color>' + CT('Script.Mod_ShuMercs.PlayerHQScienceDialog.ReliabilityImproveChooseShipOut');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  549,
          "#":  1113,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GAnswerData = Player();"          
          ]        
        }      
      ],
      "Places":      
      [
        {
          "Type":  "TPlace",
          "Name":  "NearPlayerHQ",
          "Pos.x":  -790,
          "Pos.y":  640,
          "Parent":  -1,
          "#":  241,
          "Place.Type":  5,
          "Angle":  "0",
          "Dist":  "0.5",
          "Radius":  750,
          "Obj1":  227,
          "Obj2":  -1        
        },
        {
          "Type":  "TPlace",
          "Name":  "AroundStar",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  0,
          "#":  360,
          "Place.Type":  3,
          "Angle":  "0",
          "Dist":  "0",
          "Radius":  1000,
          "Obj1":  0,
          "Obj2":  -1        
        },
        {
          "Type":  "TPlace",
          "Name":  "AroundQuestSupport",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  489,
          "#":  488,
          "Place.Type":  5,
          "Angle":  "0",
          "Dist":  "0",
          "Radius":  350,
          "Obj1":  382,
          "Obj2":  -1        
        },
        {
          "Type":  "TPlace",
          "Name":  "AroundQuestTarget",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  360,
          "#":  489,
          "Place.Type":  5,
          "Angle":  "0",
          "Dist":  "0",
          "Radius":  350,
          "Obj1":  361,
          "Obj2":  -1        
        },
        {
          "Type":  "TPlace",
          "Name":  "NearHoloTablet",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  0,
          "#":  832,
          "Place.Type":  4,
          "Angle":  "0",
          "Dist":  "0.5",
          "Radius":  50,
          "Obj1":  828,
          "Obj2":  -1        
        },
        {
          "Type":  "TPlace",
          "Name":  "QuestPlace",
          "Pos.x":  -180,
          "Pos.y":  700,
          "Parent":  -1,
          "#":  1076,
          "Place.Type":  6,
          "Angle":  "0",
          "Dist":  "0.5",
          "Radius":  150,
          "Obj1":  1077,
          "Obj2":  1078        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  -80,
          "Pos.y":  610,
          "Parent":  -1,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        },
        {
          "Type":  "TPlanet",
          "Name":  "DummyPlanet",
          "Pos.x":  -670,
          "Pos.y":  640,
          "Parent":  -1,
          "#":  230,
          "Race":  62,
          "Owner":  1022,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  0,
          "Parent":  0,
          "#":  2,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  1,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  21,
          "#":  24,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!BuildOwnBase_InProcess"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  21,
          "#":  25,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_InProcess == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  35,
          "#":  37,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  20,
          "Parent":  35,
          "#":  38,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  21,
          "#":  42,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_InProcess == -2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  45,
          "#":  49,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_InProcess == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  63,
          "#":  64,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!(status & 1) && !(status & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  30,
          "Parent":  63,
          "#":  66,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(status & 1)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -100,
          "Pos.y":  40,
          "Parent":  89,
          "#":  71,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 >= 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -80,
          "Pos.y":  40,
          "Parent":  89,
          "#":  72,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -50,
          "Pos.y":  40,
          "Parent":  89,
          "#":  73,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2 >= 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -30,
          "Pos.y":  40,
          "Parent":  89,
          "#":  74,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2 == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  89,
          "#":  75,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 >= 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  40,
          "Parent":  89,
          "#":  76,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  50,
          "Pos.y":  40,
          "Parent":  89,
          "#":  77,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint4 >= 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  40,
          "Parent":  89,
          "#":  78,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint4 == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  100,
          "Pos.y":  40,
          "Parent":  89,
          "#":  95,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -90,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  107,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  108,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check <= 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  109,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check > 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -70,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  111,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  112,
          "#":  114,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  113,
          "#":  116,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -50,
          "Pos.y":  30,
          "Parent":  113,
          "#":  118,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  112,
          "#":  120,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 == -2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  10,
          "#":  123,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ShipIsTakeoff(Player())"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -150,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  130,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 >= 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  121,
          "#":  135,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 == -2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  100,
          "Parent":  115,
          "#":  136,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint3 == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -150,
          "Pos.y":  50,
          "Parent":  -1,
          "#":  139,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -110,
          "Pos.y":  30,
          "Parent":  -1,
          "#":  140,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -180,
          "Pos.y":  90,
          "Parent":  -1,
          "#":  142,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -150,
          "Pos.y":  90,
          "Parent":  -1,
          "#":  143,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -400,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  146,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -360,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  147,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -320,
          "Pos.y":  -50,
          "Parent":  -1,
          "#":  150,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -430,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  163,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -170,
          "Pos.y":  -50,
          "Parent":  -1,
          "#":  164,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -350,
          "Pos.y":  -150,
          "Parent":  -1,
          "#":  165,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(status & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  176,
          "#":  177,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  176,
          "#":  179,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  183,
          "#":  184,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  183,
          "#":  185,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  183,
          "#":  186,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  182,
          "#":  187,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -70,
          "Parent":  187,
          "#":  188,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  182,
          "#":  189,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  176,
          "#":  199,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  30,
          "Parent":  21,
          "#":  204,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_InProcess >= 3 && BuildOwnBase_InProcess <= 5"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  40,
          "Parent":  206,
          "#":  207,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  206,
          "#":  208,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  40,
          "Parent":  206,
          "#":  209,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  218,
          "#":  221,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Main', 'OrganisationName'] != ''"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  218,
          "#":  222,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Main', 'OrganisationName'] == ''"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  210,
          "#":  243,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_InProcess < 5"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  210,
          "#":  244,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_InProcess == 5"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  80,
          "Parent":  245,
          "#":  246,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  252,
          "#":  253,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  252,
          "#":  254,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  252,
          "#":  255,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  235,
          "#":  260,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  269,
          "#":  272,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  269,
          "#":  273,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  269,
          "#":  275,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  281,
          "#":  282,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(tint1 & 1)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  20,
          "Parent":  281,
          "#":  283,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  294,
          "#":  295,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  294,
          "#":  296,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  40,
          "Parent":  281,
          "#":  302,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayDim(tarr1) > 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -90,
          "Pos.y":  40,
          "Parent":  541,
          "#":  309,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  50,
          "Pos.y":  20,
          "Parent":  314,
          "#":  310,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -70,
          "Pos.y":  40,
          "Parent":  541,
          "#":  313,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  20,
          "Parent":  317,
          "#":  318,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  317,
          "#":  319,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  323,
          "#":  322,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  331,
          "#":  332,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayDim(tarr1) > 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  331,
          "#":  333,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(tint1 & 1)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  331,
          "#":  334,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  30,
          "Parent":  331,
          "#":  343,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  342,
          "#":  346,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  342,
          "#":  347,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  30,
          "Parent":  331,
          "#":  355,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  412,
          "#":  373,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  412,
          "#":  374,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  413,
          "#":  375,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  413,
          "#":  376,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -1070,
          "Pos.y":  670,
          "Parent":  -1,
          "#":  405,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ActiveQuestHQ"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  0,
          "Parent":  432,
          "#":  412,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Protect.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  432,
          "#":  413,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Destroy.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  415,
          "#":  419,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  415,
          "#":  420,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  415,
          "#":  421,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  120,
          "Parent":  411,
          "#":  429,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  429,
          "#":  430,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.AttackDominators.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  430,
          "#":  431,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.AttackPirateClan.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  411,
          "#":  432,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  220,
          "Parent":  411,
          "#":  433,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check == 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  433,
          "#":  435,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.AttackCoalition.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  433,
          "#":  436,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.AttackDominators.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  435,
          "#":  437,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  436,
          "#":  438,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  430,
          "#":  443,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  431,
          "#":  444,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  0,
          "Parent":  429,
          "#":  455,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.DefendFromDominators.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  110,
          "Pos.y":  0,
          "Parent":  429,
          "#":  456,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.DefendFromPirateClan.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  455,
          "#":  457,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  456,
          "#":  458,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  0,
          "Parent":  433,
          "#":  463,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.DefendFromDominators.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  110,
          "Pos.y":  0,
          "Parent":  433,
          "#":  464,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.DefendFromCoalition.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  463,
          "#":  465,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  464,
          "#":  466,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  140,
          "Pos.y":  0,
          "Parent":  433,
          "#":  471,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Destroy.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  170,
          "Pos.y":  0,
          "Parent":  433,
          "#":  472,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Protect.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  471,
          "#":  473,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  472,
          "#":  474,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  140,
          "Pos.y":  0,
          "Parent":  429,
          "#":  479,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Destroy.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  160,
          "Pos.y":  0,
          "Parent":  429,
          "#":  480,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.Protect.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  479,
          "#":  481,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  480,
          "#":  482,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  497,
          "#":  495,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 >= 6"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  497,
          "#":  496,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 < 6"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -40,
          "Parent":  496,
          "#":  500,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  30,
          "Parent":  504,
          "#":  505,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  504,
          "#":  506,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  30,
          "Parent":  504,
          "#":  509,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  511,
          "#":  513,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  516,
          "#":  517,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  30,
          "Parent":  516,
          "#":  518,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= 10000 && PlayerHQMainArray['Finance', 'CurrentBalance'] < 1000000000"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  516,
          "#":  519,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Finance', 'CurrentBalance'] >= 110000 && (100000000 - ShipMoney(Player()) >= 5000)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  516,
          "#":  520,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Finance', 'CurrentBalance'] < 110000 || (100000000 - ShipMoney(Player()) < 10000)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  30,
          "Parent":  516,
          "#":  521,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  530,
          "#":  528,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -70,
          "Parent":  528,
          "#":  529,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  516,
          "#":  532,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < 10000 || PlayerHQMainArray['Finance', 'CurrentBalance'] >= 1000000000"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  20,
          "Parent":  314,
          "#":  534,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  30,
          "Parent":  516,
          "#":  536,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -80,
          "Pos.y":  0,
          "Parent":  308,
          "#":  538,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  50,
          "Pos.y":  20,
          "Parent":  541,
          "#":  542,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  20,
          "Parent":  546,
          "#":  547,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -50,
          "Pos.y":  20,
          "Parent":  541,
          "#":  551,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -30,
          "Pos.y":  20,
          "Parent":  541,
          "#":  552,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  541,
          "#":  553,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  20,
          "Parent":  541,
          "#":  554,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  20,
          "Parent":  541,
          "#":  559,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 > 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  567,
          "#":  568,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  567,
          "#":  569,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  0,
          "Parent":  573,
          "#":  575,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  120,
          "Pos.y":  0,
          "Parent":  581,
          "#":  582,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  140,
          "Pos.y":  0,
          "Parent":  585,
          "#":  584,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  0,
          "Parent":  587,
          "#":  588,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -110,
          "Parent":  588,
          "#":  589,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  585,
          "#":  590,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -140,
          "Parent":  590,
          "#":  591,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  20,
          "Parent":  546,
          "#":  592,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  592,
          "#":  593,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  592,
          "#":  594,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  592,
          "#":  595,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  601,
          "#":  604,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  0,
          "Parent":  612,
          "#":  613,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  628,
          "#":  617,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  628,
          "#":  618,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  20,
          "Parent":  628,
          "#":  619,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  622,
          "#":  623,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  628,
          "#":  624,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Finance', 'CurrentBalance'] < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  20,
          "Parent":  628,
          "#":  625,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  30,
          "Parent":  631,
          "#":  632,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 && tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -30,
          "Pos.y":  30,
          "Parent":  631,
          "#":  637,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  30,
          "Parent":  631,
          "#":  638,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  30,
          "Parent":  631,
          "#":  640,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 && !tint2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  642,
          "#":  643,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Finance', 'CurrentBalance'] >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  100,
          "Pos.y":  0,
          "Parent":  634,
          "#":  644,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  642,
          "#":  647,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Finance', 'CurrentBalance'] < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  642,
          "#":  648,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  20,
          "Parent":  642,
          "#":  649,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  653,
          "#":  654,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  20,
          "Parent":  642,
          "#":  656,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  634,
          "#":  662,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  666,
          "#":  667,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -140,
          "Parent":  667,
          "#":  668,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  120,
          "Pos.y":  0,
          "Parent":  666,
          "#":  669,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  635,
          "#":  671,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  50,
          "Pos.y":  30,
          "Parent":  631,
          "#":  673,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  677,
          "#":  678,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  681,
          "#":  682,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  687,
          "#":  688,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  314,
          "#":  691,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  30,
          "Parent":  504,
          "#":  693,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  20,
          "Parent":  541,
          "#":  699,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  700,
          "#":  701,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -30,
          "Pos.y":  20,
          "Parent":  314,
          "#":  702,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -70,
          "Pos.y":  20,
          "Parent":  541,
          "#":  705,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  504,
          "#":  707,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  422,
          "#":  711,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  504,
          "#":  713,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  504,
          "#":  719,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  726,
          "#":  727,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  726,
          "#":  728,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  735,
          "#":  736,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 1)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  735,
          "#":  737,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 1)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -80,
          "Pos.y":  30,
          "Parent":  745,
          "#":  747,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  745,
          "#":  748,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 4)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  745,
          "#":  749,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  745,
          "#":  751,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  30,
          "Parent":  745,
          "#":  752,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  30,
          "Parent":  745,
          "#":  753,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!(PlayerHQMainArray['Quests', 'GluonGunsQuestDialogStateSet'] & 4)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  765,
          "#":  766,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  765,
          "#":  767,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  765,
          "#":  768,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  771,
          "#":  772,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] < 5"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  771,
          "#":  773,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Quests', 'GluonGunsQuestStatus'] == 5"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  120,
          "Pos.y":  0,
          "Parent":  773,
          "#":  774,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -130,
          "Parent":  772,
          "#":  775,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  331,
          "#":  788,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!StateIs(cur_ship, 'StrikeFollowState') && tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  791,
          "#":  792,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  791,
          "#":  793,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  40,
          "Parent":  281,
          "#":  801,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "StateIs(cur_ship, 'OrderAttackState')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  803,
          "#":  805,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ArrayDim(tarr1) > 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  803,
          "#":  806,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  842,
          "#":  812,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  814,
          "#":  815,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  814,
          "#":  816,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  818,
          "#":  820,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  818,
          "#":  821,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -50,
          "Parent":  811,
          "#":  830,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition >= 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  30,
          "Parent":  842,
          "#":  838,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition < 0 || BuildOwnBase_Condition == 2 || BuildOwnBase_Condition >= 5"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  855,
          "#":  853,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  855,
          "#":  854,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition == 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  855,
          "#":  861,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition > 3 || BuildOwnBase_Condition < 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  862,
          "#":  864,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GetData(1, cur_ship)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  40,
          "Parent":  862,
          "#":  865,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  40,
          "Parent":  862,
          "#":  870,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  40,
          "Parent":  862,
          "#":  874,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  879,
          "#":  880,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  879,
          "#":  881,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  0,
          "Parent":  884,
          "#":  885,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -290,
          "Parent":  885,
          "#":  886,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  0,
          "Parent":  887,
          "#":  888,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition < 4 && GetData(1, cur_ship)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -110,
          "Parent":  888,
          "#":  889,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  887,
          "#":  890,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition == 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  40,
          "Parent":  862,
          "#":  893,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!GetData(1, cur_ship)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  869,
          "#":  895,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition < 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  869,
          "#":  896,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition == 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  896,
          "#":  897,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  887,
          "#":  898,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition < 4 && !GetData(1, cur_ship)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  30,
          "Parent":  842,
          "#":  900,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "BuildOwnBase_Condition == 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  902,
          "#":  904,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  902,
          "#":  905,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -940,
          "Pos.y":  -120,
          "Parent":  -1,
          "#":  917,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  918,
          "#":  922,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 > 0"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  918,
          "#":  923,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  918,
          "#":  924,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  920,
          "#":  932,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -60,
          "Parent":  932,
          "#":  933,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  20,
          "Parent":  314,
          "#":  936,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Science', 'PortalGenerator'] == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -30,
          "Pos.y":  20,
          "Parent":  950,
          "#":  940,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  950,
          "#":  941,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  20,
          "Parent":  950,
          "#":  942,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipInNormalSpace(Player()) && ShipStar(Player()) != cur_star && PlayerHQMainArray['Science', 'PortalGeneratorTimer'] <= CurTurn()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  20,
          "Parent":  950,
          "#":  951,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  90,
          "Pos.y":  20,
          "Parent":  950,
          "#":  953,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  955,
          "#":  954,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -180,
          "Parent":  954,
          "#":  956,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -60,
          "Parent":  958,
          "#":  962,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  1012,
          "#":  965,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1012,
          "#":  966,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  50,
          "Pos.y":  20,
          "Parent":  950,
          "#":  975,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ShipInNormalSpace(Player()) && (ShipStar(Player()) == cur_star || PlayerHQMainArray['Science', 'PortalGeneratorTimer'] > CurTurn())"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  979,
          "#":  980,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  979,
          "#":  981,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  20,
          "Parent":  950,
          "#":  984,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  944,
          "#":  990,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ItemExist(ApprovalDocuments)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  20,
          "Parent":  944,
          "#":  991,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ItemExist(ApprovalDocuments)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  960,
          "#":  993,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ItemExist(ApprovalDocuments)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  20,
          "Parent":  960,
          "#":  994,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "ItemExist(ApprovalDocuments)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  995,
          "#":  996,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  20,
          "Parent":  995,
          "#":  997,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -300,
          "Parent":  1003,
          "#":  1002,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -70,
          "Pos.y":  0,
          "Parent":  1001,
          "#":  1003,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1011,
          "#":  1005,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  1011,
          "#":  1006,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  949,
          "#":  1014,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  60,
          "Parent":  949,
          "#":  1015,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -160,
          "Pos.y":  0,
          "Parent":  1019,
          "#":  1020,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  80,
          "Pos.y":  20,
          "Parent":  592,
          "#":  1021,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr5 != ''"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  1025,
          "#":  1026,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -120,
          "Parent":  1026,
          "#":  1027,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  918,
          "#":  1032,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQMainArray['Shipyard', 'CapitalShipDock'] == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  0,
          "Parent":  1036,
          "#":  1040,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1036,
          "#":  1041,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -100,
          "Parent":  1040,
          "#":  1042,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  1046,
          "#":  1045,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  20,
          "Parent":  317,
          "#":  1048,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  1050,
          "#":  1051,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  0,
          "Parent":  1051,
          "#":  1052,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -1580,
          "Pos.y":  310,
          "Parent":  -1,
          "#":  1053,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1 == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1061,
          "#":  1056,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQJumpReady != ''"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  1061,
          "#":  1057,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerHQJumpReady == ''"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  968,
          "#":  1059,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  140,
          "Pos.y":  0,
          "Parent":  968,
          "#":  1060,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  20,
          "Parent":  970,
          "#":  1061,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -50,
          "Pos.y":  0,
          "Parent":  1010,
          "#":  1062,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  0,
          "Parent":  1010,
          "#":  1063,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "PlayerBridge()"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -300,
          "Parent":  1064,
          "#":  1065,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  412,
          "#":  1068,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  20,
          "Parent":  412,
          "#":  1073,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  0,
          "Parent":  429,
          "#":  1079,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "~findsubstr(ActiveQuestsHQArray[ActiveQuestHQ, 3], '.AttackKlissan.')"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1079,
          "#":  1080,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  472,
          "#":  1093,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "num == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  35,
          "#":  1097,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  1100,
          "#":  1101,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  40,
          "Parent":  1100,
          "#":  1102,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  20,
          "Parent":  592,
          "#":  1106,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr4 != ''"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  1110,
          "#":  1112,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  -90,
          "Pos.y":  0,
          "Parent":  9,
          "#":  12,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "[t_OnLeavingForm,t_OnChameleonConfusion,t_OnStep|0]\r\nPlayerActCode();",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "FreeMove",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  151,
          "#":  152,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "PlayerHQMainState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  227,
          "#":  228,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "[t_OnStep|0,1]\r\nPlayerHQActCode();",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "FreeEarningState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  229,
          "#":  231,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "ReturningBaseState",
          "Pos.x":  -790,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  232,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "GuardingQState",
          "Pos.x":  -120,
          "Pos.y":  20,
          "Parent":  229,
          "#":  233,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "DeliveryQState",
          "Pos.x":  -120,
          "Pos.y":  40,
          "Parent":  229,
          "#":  234,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "DefendingBaseState",
          "Pos.x":  -790,
          "Pos.y":  220,
          "Parent":  -1,
          "#":  239,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "LandingBaseState",
          "Pos.x":  -790,
          "Pos.y":  260,
          "Parent":  -1,
          "#":  248,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "DefendingStarState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  262,
          "#":  263,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "OrderAttackState",
          "Pos.x":  -790,
          "Pos.y":  200,
          "Parent":  -1,
          "#":  300,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "SittingBaseState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  304,
          "#":  305,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "MovingOutState",
          "Pos.x":  -120,
          "Pos.y":  20,
          "Parent":  304,
          "#":  325,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "StrikeAtEasyState",
          "Pos.x":  -120,
          "Pos.y":  80,
          "Parent":  304,
          "#":  327,
          "Move":  1,
          "MoveObj":  360,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "StrikeAttackState",
          "Pos.x":  -120,
          "Pos.y":  40,
          "Parent":  304,
          "#":  353,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "ReturningStrikeState",
          "Pos.x":  -120,
          "Pos.y":  100,
          "Parent":  304,
          "#":  358,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestTargetState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  361,
          "#":  363,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "[t_OnStep|11]\r\nQuestTargetActCode();",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestMercsState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  362,
          "#":  365,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  2,
          "Attack.Items":          
          [
            {
              "Target.0":  368,
              "Target.1":  379            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "RandomAttackersState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  368,
          "#":  369,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  2,
          "Attack.Items":          
          [
            {
              "Target.0":  362,
              "Target.1":  382            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestAttackersKillState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  379,
          "#":  380,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  3,
          "Attack.Items":          
          [
            {
              "Target.0":  382,
              "Target.1":  362,
              "Target.2":  361            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestSupportState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  382,
          "#":  383,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  2,
          "Attack.Items":          
          [
            {
              "Target.0":  379,
              "Target.1":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestSupportTakeState",
          "Pos.x":  -120,
          "Pos.y":  20,
          "Parent":  382,
          "#":  388,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  2,
          "Attack.Items":          
          [
            {
              "Target.0":  379,
              "Target.1":  368            
            }          
          ],
          "TakeItem":  385,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestAttackersProtectState",
          "Pos.x":  -120,
          "Pos.y":  20,
          "Parent":  379,
          "#":  394,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  2,
          "Attack.Items":          
          [
            {
              "Target.0":  382,
              "Target.1":  362            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestTargetMoveState",
          "Pos.x":  -120,
          "Pos.y":  20,
          "Parent":  361,
          "#":  396,
          "Move":  1,
          "MoveObj":  360,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "[t_OnStep|11]\r\nQuestTargetActCode();",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestMercsKillState",
          "Pos.x":  -120,
          "Pos.y":  20,
          "Parent":  362,
          "#":  398,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  3,
          "Attack.Items":          
          [
            {
              "Target.0":  379,
              "Target.1":  368,
              "Target.2":  361            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestMercsCapCoalState",
          "Pos.x":  -120,
          "Pos.y":  80,
          "Parent":  362,
          "#":  445,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  379            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestMercsCapPirState",
          "Pos.x":  -120,
          "Pos.y":  60,
          "Parent":  362,
          "#":  446,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  379            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "QuestMercsCapDomState",
          "Pos.x":  -120,
          "Pos.y":  40,
          "Parent":  362,
          "#":  453,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  379            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "PlayerOrgTrancsFree",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  683,
          "#":  684,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "StrikeFollowState",
          "Pos.x":  -120,
          "Pos.y":  60,
          "Parent":  304,
          "#":  797,
          "Move":  2,
          "MoveObj":  9,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "TziptzilotFollowPlayerState",
          "Pos.x":  -170,
          "Pos.y":  0,
          "Parent":  829,
          "#":  833,
          "Move":  2,
          "MoveObj":  9,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "TziptzilotBeginQuestDialogs",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "TziptzilotFlyAwayState",
          "Pos.x":  -170,
          "Pos.y":  20,
          "Parent":  829,
          "#":  835,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "TziptzilotBeginQuestDialogs",
          "OnActCode":  "[t_OnDeath|]\r\nBlasterTziptzilotActCode();",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "TziptzilotAttackOnPlayerState",
          "Pos.x":  -170,
          "Pos.y":  40,
          "Parent":  829,
          "#":  843,
          "Move":  2,
          "MoveObj":  9,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  9            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "TziptzilotBeginQuestDialogs",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "TrancsPlayerChaseState",
          "Pos.x":  -170,
          "Pos.y":  0,
          "Parent":  856,
          "#":  857,
          "Move":  2,
          "MoveObj":  9,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  9            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "TrancsBeginQuestDialog",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "TrancsFlyAwayState",
          "Pos.x":  -170,
          "Pos.y":  20,
          "Parent":  856,
          "#":  859,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  829            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "TrancsBeginQuestDialog",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "CruiserWaitState",
          "Pos.x":  -120,
          "Pos.y":  0,
          "Parent":  1033,
          "#":  1034,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  1,
          "Attack.Items":          
          [
            {
              "Target.0":  368            
            }          
          ],
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "[t_OnDeath|]\r\n",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "coef",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  8,
          "#":  5,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  90,
          "Pos.y":  30,
          "Parent":  3,
          "#":  6,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "num",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  99,
          "#":  7,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "rand",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  157,
          "#":  8,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  170,
          "Pos.y":  30,
          "Parent":  3,
          "#":  13,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ship",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  17,
          "#":  14,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  7,
          "#":  15,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  120,
          "Pos.y":  30,
          "Parent":  3,
          "#":  16,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ruin",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  61,
          "#":  17,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  15,
          "#":  18,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint3",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  18,
          "#":  19,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BuildOwnBase_InProcess",
          "Pos.x":  130,
          "Pos.y":  -220,
          "Parent":  -1,
          "#":  23,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  13,
          "#":  40,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr3",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  40,
          "#":  41,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_item",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  14,
          "#":  47,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BasesSuccessfullyBuiltCount",
          "Pos.x":  130,
          "Pos.y":  -200,
          "Parent":  -1,
          "#":  48,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_star",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  3,
          "#":  60,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_planet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  60,
          "#":  61,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "check",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  5,
          "#":  70,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint4",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  19,
          "#":  87,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr4",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  41,
          "#":  88,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr5",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  88,
          "#":  90,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr6",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  90,
          "#":  97,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "status",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  70,
          "#":  98,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cost",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  98,
          "#":  99,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "PrisonQuestCheck",
          "Pos.x":  -430,
          "Pos.y":  -200,
          "Parent":  -1,
          "#":  129,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "k",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  6,
          "#":  153,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  47,
          "#":  154,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "m",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  16,
          "#":  155,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  154,
          "#":  156,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "n",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  153,
          "#":  157,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GBuildOwnBase_QuestsGiven",
          "Pos.x":  -520,
          "Pos.y":  90,
          "Parent":  -1,
          "#":  158,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "BuildOwnBase_QuestsArray",
          "Pos.x":  -520,
          "Pos.y":  110,
          "Parent":  -1,
          "#":  169,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TotalWBCount",
          "Pos.x":  90,
          "Pos.y":  -20,
          "Parent":  3,
          "#":  202,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TotalCBCount",
          "Pos.x":  90,
          "Pos.y":  0,
          "Parent":  3,
          "#":  203,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd3",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  156,
          "#":  261,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "ActiveQuestsHQArray",
          "Pos.x":  -970,
          "Pos.y":  610,
          "Parent":  -1,
          "#":  367,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GTL",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  87,
          "#":  386,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tflt1",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  261,
          "#":  387,
          "Var.Type":  "Float",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "dummy",
          "Pos.x":  -1060,
          "Pos.y":  630,
          "Parent":  -1,
          "#":  400,
          "Var.Type":  "Unknown",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "ActiveQuestHQ",
          "Pos.x":  -970,
          "Pos.y":  570,
          "Parent":  -1,
          "#":  403,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "LockedQuestsHQArray",
          "Pos.x":  -970,
          "Pos.y":  590,
          "Parent":  -1,
          "#":  414,
          "Var.Type":  "Array",
          "Init":  "6",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TempQuestHQSeed",
          "Pos.x":  -970,
          "Pos.y":  630,
          "Parent":  -1,
          "#":  487,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "PlayerHQMainArray",
          "Pos.x":  -1280,
          "Pos.y":  -230,
          "Parent":  -1,
          "#":  490,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr1",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  387,
          "#":  716,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  716,
          "#":  717,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "CustomGunsUpdateCheck",
          "Pos.x":  200,
          "Pos.y":  0,
          "Parent":  3,
          "#":  718,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr7",
          "Pos.x":  -350,
          "Pos.y":  360,
          "Parent":  -1,
          "#":  722,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "TotalSBCount",
          "Pos.x":  -430,
          "Pos.y":  170,
          "Parent":  -1,
          "#":  723,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BuildOwnBase_ChooseName",
          "Pos.x":  280,
          "Pos.y":  -220,
          "Parent":  -1,
          "#":  787,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BuildOwnBase_Condition",
          "Pos.x":  130,
          "Pos.y":  -240,
          "Parent":  -1,
          "#":  810,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "MercCenterId",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  830,
          "#":  837,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cnt",
          "Pos.x":  -430,
          "Pos.y":  500,
          "Parent":  -1,
          "#":  935,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "PlayerHQJumpReady",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  938,
          "#":  974,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "dialog_path",
          "Pos.x":  -300,
          "Pos.y":  -150,
          "Parent":  -1,
          "#":  1013,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "BuildOwnBase_ConditionCooldown",
          "Pos.x":  280,
          "Pos.y":  -240,
          "Parent":  -1,
          "#":  1066,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "phrases_path",
          "Pos.x":  -1100,
          "Pos.y":  -160,
          "Parent":  -1,
          "#":  1067,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "QuestTargetDialogCall",
          "Pos.x":  -650,
          "Pos.y":  700,
          "Parent":  -1,
          "#":  1071,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "LastTurnHandled",
          "Pos.x":  -1050,
          "Pos.y":  690,
          "Parent":  -1,
          "#":  1072,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "QuestPlaceX",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1076,
          "#":  1077,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "QuestPlaceY",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1077,
          "#":  1078,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "QuestSupportDialogCall",
          "Pos.x":  -650,
          "Pos.y":  880,
          "Parent":  -1,
          "#":  1083,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "start_star",
          "Pos.x":  -1050,
          "Pos.y":  1010,
          "Parent":  -1,
          "#":  1084,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "target_star",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1084,
          "#":  1085,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "start_planet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1085,
          "#":  1086,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "target_planet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1086,
          "#":  1087,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "QuestHQFlashDrivesGiven",
          "Pos.x":  -960,
          "Pos.y":  1010,
          "Parent":  -1,
          "#":  1092,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "target_hole",
          "Pos.x":  -1050,
          "Pos.y":  1090,
          "Parent":  -1,
          "#":  1096,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  9,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  9,
      "End":  12,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  20,
      "End":  22,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  21,
      "End":  24,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  24,
      "End":  20,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  21,
      "End":  25,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  25,
      "End":  26,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  22,
      "End":  27,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  27,
      "End":  28,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  28,
      "End":  29,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  29,
      "End":  30,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  30,
      "End":  31,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  31,
      "End":  32,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  33,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  34,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  35,
      "End":  38,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  35,
      "End":  37,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  37,
      "End":  39,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  38,
      "End":  36,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  26,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  21,
      "End":  42,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  42,
      "End":  43,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  36,
      "End":  44,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  43,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  49,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  50,
      "End":  51,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  51,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  52,
      "End":  53,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  53,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  54,
      "End":  55,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  56,
      "End":  57,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  57,
      "End":  58,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  64,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  65,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  66,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  66,
      "End":  67,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  67,
      "End":  68,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  68,
      "End":  69,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  77,
      "End":  85,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  78,
      "End":  86,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  76,
      "End":  84,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  75,
      "End":  83,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  74,
      "End":  82,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  73,
      "End":  81,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  71,
      "End":  79,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  72,
      "End":  80,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  89,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  71,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  72,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  73,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  74,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  75,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  76,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  77,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  78,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  81,
      "End":  92,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  83,
      "End":  93,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  89,
      "End":  95,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  95,
      "End":  96,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  94,
      "End":  100,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  102,
      "End":  104,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  104,
      "End":  105,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  101,
      "End":  106,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  100,
      "End":  107,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  107,
      "End":  101,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  100,
      "End":  108,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  108,
      "End":  102,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  100,
      "End":  109,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  109,
      "End":  103,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  100,
      "End":  111,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  111,
      "End":  110,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  93,
      "End":  112,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  92,
      "End":  113,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  112,
      "End":  114,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  114,
      "End":  115,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  113,
      "End":  116,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  116,
      "End":  117,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  113,
      "End":  118,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  118,
      "End":  119,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  112,
      "End":  120,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  120,
      "End":  121,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  121,
      "End":  122,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  124,
      "End":  123,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  123,
      "End":  10,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  125,
      "End":  126,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  126,
      "End":  127,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  127,
      "End":  128,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  112,
      "End":  130,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  131,
      "End":  134,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  135,
      "End":  121,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  136,
      "End":  115,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  137,
      "End":  136,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  137,
      "End":  135,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  134,
      "End":  137,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  130,
      "End":  140,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  140,
      "End":  131,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  130,
      "End":  139,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  138,
      "End":  141,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  139,
      "End":  142,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  139,
      "End":  143,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  142,
      "End":  138,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  143,
      "End":  144,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  51,
      "End":  145,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  91,
      "End":  147,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  91,
      "End":  146,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  147,
      "End":  149,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  149,
      "End":  148,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  79,
      "End":  150,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  150,
      "End":  91,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  151,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  151,
      "End":  152,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  146,
      "End":  159,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  160,
      "End":  161,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  159,
      "End":  163,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  163,
      "End":  160,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  163,
      "End":  162,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  85,
      "End":  164,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  164,
      "End":  94,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  165,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  167,
      "End":  168,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  166,
      "End":  167,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  165,
      "End":  166,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  170,
      "End":  171,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  171,
      "End":  172,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  172,
      "End":  173,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  176,
      "End":  177,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  177,
      "End":  178,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  176,
      "End":  179,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  179,
      "End":  180,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  178,
      "End":  181,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  181,
      "End":  183,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  183,
      "End":  184,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  183,
      "End":  185,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  183,
      "End":  186,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  174,
      "End":  175,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  175,
      "End":  176,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  180,
      "End":  182,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  182,
      "End":  187,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  187,
      "End":  188,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  188,
      "End":  176,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  182,
      "End":  189,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  184,
      "End":  191,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  185,
      "End":  192,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  186,
      "End":  193,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  191,
      "End":  194,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  194,
      "End":  195,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  195,
      "End":  196,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  176,
      "End":  199,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  199,
      "End":  200,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  189,
      "End":  198,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  198,
      "End":  197,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  197,
      "End":  190,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  152,
      "End":  201,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  58,
      "End":  62,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  140,
      "End":  133,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  133,
      "End":  132,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  21,
      "End":  204,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  204,
      "End":  205,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  205,
      "End":  206,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  206,
      "End":  207,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  206,
      "End":  208,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  206,
      "End":  209,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  207,
      "End":  210,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  208,
      "End":  211,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  209,
      "End":  212,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  213,
      "End":  214,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  214,
      "End":  215,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  217,
      "End":  216,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  216,
      "End":  214,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  215,
      "End":  218,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  219,
      "End":  220,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  218,
      "End":  221,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  218,
      "End":  222,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  222,
      "End":  216,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  221,
      "End":  219,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  223,
      "End":  224,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  224,
      "End":  225,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  225,
      "End":  226,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  227,
      "End":  228,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  230,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  229,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  229,
      "End":  231,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  231,
      "End":  235,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  232,
      "End":  236,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  233,
      "End":  237,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  234,
      "End":  238,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  239,
      "End":  240,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  227,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  241,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  228,
      "End":  242,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  210,
      "End":  243,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  210,
      "End":  244,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  243,
      "End":  213,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  244,
      "End":  245,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  245,
      "End":  246,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  246,
      "End":  218,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  237,
      "End":  247,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  238,
      "End":  247,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  248,
      "End":  249,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  250,
      "End":  251,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  251,
      "End":  252,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  252,
      "End":  253,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  252,
      "End":  254,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  252,
      "End":  255,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  253,
      "End":  256,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  254,
      "End":  257,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  255,
      "End":  258,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  256,
      "End":  259,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  235,
      "End":  260,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  260,
      "End":  247,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  262,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  262,
      "End":  263,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  263,
      "End":  264,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  265,
      "End":  266,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  267,
      "End":  268,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  268,
      "End":  269,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  269,
      "End":  272,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  269,
      "End":  273,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  272,
      "End":  270,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  273,
      "End":  271,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  270,
      "End":  274,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  269,
      "End":  275,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  275,
      "End":  276,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  274,
      "End":  277,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  277,
      "End":  279,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  278,
      "End":  279,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  271,
      "End":  280,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  280,
      "End":  278,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  283,
      "End":  284,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  286,
      "End":  287,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  282,
      "End":  285,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  285,
      "End":  286,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  288,
      "End":  289,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  289,
      "End":  290,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  290,
      "End":  291,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  292,
      "End":  293,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  293,
      "End":  294,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  294,
      "End":  296,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  294,
      "End":  295,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  296,
      "End":  297,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  295,
      "End":  298,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  297,
      "End":  299,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  300,
      "End":  301,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  302,
      "End":  303,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  304,
      "End":  305,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  305,
      "End":  306,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  304,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  307,
      "End":  308,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  308,
      "End":  314,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  314,
      "End":  310,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  309,
      "End":  312,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  310,
      "End":  311,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  313,
      "End":  315,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  312,
      "End":  316,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  316,
      "End":  317,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  317,
      "End":  318,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  317,
      "End":  319,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  319,
      "End":  321,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  318,
      "End":  320,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  320,
      "End":  323,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  321,
      "End":  324,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  323,
      "End":  322,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  324,
      "End":  322,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  325,
      "End":  326,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  327,
      "End":  328,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  329,
      "End":  330,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  330,
      "End":  331,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  331,
      "End":  334,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  331,
      "End":  333,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  331,
      "End":  332,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  332,
      "End":  335,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  333,
      "End":  336,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  334,
      "End":  337,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  336,
      "End":  338,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  338,
      "End":  339,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  340,
      "End":  341,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  341,
      "End":  342,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  331,
      "End":  343,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  343,
      "End":  344,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  342,
      "End":  347,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  342,
      "End":  346,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  346,
      "End":  348,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  347,
      "End":  349,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  348,
      "End":  350,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  344,
      "End":  345,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  345,
      "End":  351,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  351,
      "End":  352,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  353,
      "End":  354,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  331,
      "End":  355,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  355,
      "End":  356,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  337,
      "End":  357,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  358,
      "End":  359,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  360,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  361,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  362,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  361,
      "End":  363,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  363,
      "End":  364,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  362,
      "End":  365,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  365,
      "End":  366,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  368,
      "End":  369,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  368,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  369,
      "End":  370,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  373,
      "End":  371,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  374,
      "End":  372,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  376,
      "End":  378,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  375,
      "End":  377,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  380,
      "End":  381,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  379,
      "End":  380,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  382,
      "End":  383,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  383,
      "End":  384,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  382,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  379,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  388,
      "End":  389,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  390,
      "End":  391,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  391,
      "End":  392,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  392,
      "End":  393,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  394,
      "End":  395,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  396,
      "End":  397,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  398,
      "End":  399,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  406,
      "End":  407,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  407,
      "End":  408,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  412,
      "End":  373,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  412,
      "End":  374,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  413,
      "End":  375,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  413,
      "End":  376,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  409,
      "End":  415,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  415,
      "End":  419,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  415,
      "End":  420,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  415,
      "End":  421,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  419,
      "End":  416,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  420,
      "End":  417,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  421,
      "End":  418,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  417,
      "End":  422,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  416,
      "End":  425,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  425,
      "End":  424,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  424,
      "End":  423,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  408,
      "End":  426,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  427,
      "End":  409,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  430,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  431,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  432,
      "End":  412,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  432,
      "End":  413,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  405,
      "End":  411,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  411,
      "End":  432,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  411,
      "End":  429,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  411,
      "End":  433,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  433,
      "End":  435,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  433,
      "End":  436,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  435,
      "End":  437,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  436,
      "End":  438,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  437,
      "End":  439,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  438,
      "End":  440,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  430,
      "End":  443,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  443,
      "End":  434,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  431,
      "End":  444,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  444,
      "End":  442,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  445,
      "End":  447,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  446,
      "End":  448,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  418,
      "End":  452,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  453,
      "End":  454,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  455,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  456,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  455,
      "End":  457,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  457,
      "End":  459,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  456,
      "End":  458,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  458,
      "End":  460,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  433,
      "End":  463,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  433,
      "End":  464,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  463,
      "End":  465,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  465,
      "End":  467,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  464,
      "End":  466,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  466,
      "End":  468,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  433,
      "End":  471,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  433,
      "End":  472,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  471,
      "End":  473,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  473,
      "End":  475,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  472,
      "End":  474,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  474,
      "End":  476,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  479,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  480,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  479,
      "End":  481,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  481,
      "End":  483,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  480,
      "End":  482,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  482,
      "End":  484,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  488,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  489,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  492,
      "End":  493,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  493,
      "End":  494,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  494,
      "End":  497,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  497,
      "End":  495,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  497,
      "End":  496,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  498,
      "End":  499,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  496,
      "End":  500,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  500,
      "End":  493,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  495,
      "End":  501,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  501,
      "End":  498,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  502,
      "End":  503,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  503,
      "End":  504,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  505,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  506,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  509,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  509,
      "End":  510,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  505,
      "End":  507,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  506,
      "End":  508,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  508,
      "End":  512,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  507,
      "End":  511,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  511,
      "End":  513,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  512,
      "End":  513,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  514,
      "End":  515,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  517,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  518,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  519,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  520,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  515,
      "End":  516,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  521,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  521,
      "End":  522,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  519,
      "End":  524,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  520,
      "End":  523,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  517,
      "End":  526,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  518,
      "End":  525,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  526,
      "End":  527,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  528,
      "End":  529,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  529,
      "End":  516,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  525,
      "End":  530,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  524,
      "End":  531,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  530,
      "End":  528,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  531,
      "End":  528,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  532,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  532,
      "End":  533,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  314,
      "End":  534,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  534,
      "End":  535,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  516,
      "End":  536,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  536,
      "End":  537,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  537,
      "End":  538,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  538,
      "End":  308,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  539,
      "End":  540,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  540,
      "End":  541,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  542,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  542,
      "End":  543,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  544,
      "End":  545,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  545,
      "End":  546,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  546,
      "End":  547,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  547,
      "End":  548,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  551,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  552,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  553,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  554,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  551,
      "End":  555,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  552,
      "End":  556,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  553,
      "End":  557,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  554,
      "End":  558,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  559,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  559,
      "End":  560,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  555,
      "End":  561,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  557,
      "End":  562,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  558,
      "End":  563,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  560,
      "End":  564,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  561,
      "End":  565,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  563,
      "End":  566,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  564,
      "End":  567,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  567,
      "End":  568,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  568,
      "End":  570,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  567,
      "End":  569,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  569,
      "End":  571,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  570,
      "End":  573,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  571,
      "End":  572,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  574,
      "End":  541,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  572,
      "End":  575,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  573,
      "End":  575,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  566,
      "End":  576,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  565,
      "End":  579,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  579,
      "End":  580,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  576,
      "End":  580,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  580,
      "End":  581,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  581,
      "End":  582,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  575,
      "End":  574,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  582,
      "End":  574,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  583,
      "End":  584,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  584,
      "End":  574,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  577,
      "End":  583,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  578,
      "End":  585,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  585,
      "End":  584,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  527,
      "End":  586,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  586,
      "End":  587,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  587,
      "End":  588,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  588,
      "End":  589,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  589,
      "End":  515,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  585,
      "End":  590,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  590,
      "End":  591,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  591,
      "End":  561,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  546,
      "End":  592,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  592,
      "End":  593,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  592,
      "End":  594,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  593,
      "End":  550,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  594,
      "End":  549,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  592,
      "End":  595,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  595,
      "End":  596,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  550,
      "End":  597,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  597,
      "End":  598,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  598,
      "End":  599,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  600,
      "End":  601,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  601,
      "End":  604,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  604,
      "End":  602,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  602,
      "End":  546,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  599,
      "End":  603,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  603,
      "End":  605,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  605,
      "End":  602,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  606,
      "End":  607,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  607,
      "End":  608,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  608,
      "End":  609,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  609,
      "End":  612,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  612,
      "End":  613,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  613,
      "End":  602,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  619,
      "End":  614,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  618,
      "End":  615,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  617,
      "End":  616,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  616,
      "End":  622,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  615,
      "End":  621,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  614,
      "End":  620,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  623,
      "End":  602,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  622,
      "End":  623,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  620,
      "End":  623,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  621,
      "End":  623,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  624,
      "End":  626,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  625,
      "End":  627,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  610,
      "End":  611,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  611,
      "End":  628,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  628,
      "End":  617,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  628,
      "End":  624,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  628,
      "End":  618,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  628,
      "End":  625,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  628,
      "End":  619,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  629,
      "End":  630,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  630,
      "End":  631,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  631,
      "End":  632,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  632,
      "End":  633,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  633,
      "End":  634,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  631,
      "End":  638,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  638,
      "End":  639,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  631,
      "End":  637,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  637,
      "End":  636,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  636,
      "End":  635,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  631,
      "End":  640,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  640,
      "End":  641,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  643,
      "End":  645,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  647,
      "End":  650,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  648,
      "End":  651,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  649,
      "End":  652,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  646,
      "End":  653,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  653,
      "End":  654,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  654,
      "End":  655,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  655,
      "End":  631,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  634,
      "End":  644,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  644,
      "End":  655,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  656,
      "End":  646,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  639,
      "End":  657,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  657,
      "End":  658,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  658,
      "End":  659,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  645,
      "End":  660,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  651,
      "End":  661,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  661,
      "End":  654,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  660,
      "End":  654,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  634,
      "End":  662,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  662,
      "End":  642,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  642,
      "End":  643,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  642,
      "End":  647,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  642,
      "End":  648,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  642,
      "End":  649,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  642,
      "End":  656,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  665,
      "End":  666,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  666,
      "End":  669,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  669,
      "End":  655,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  666,
      "End":  667,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  667,
      "End":  668,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  668,
      "End":  635,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  635,
      "End":  644,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  635,
      "End":  671,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  671,
      "End":  663,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  663,
      "End":  664,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  664,
      "End":  672,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  672,
      "End":  654,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  631,
      "End":  673,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  673,
      "End":  674,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  675,
      "End":  676,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  676,
      "End":  677,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  677,
      "End":  678,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  678,
      "End":  679,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  670,
      "End":  680,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  681,
      "End":  682,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  683,
      "End":  684,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  684,
      "End":  685,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  683,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  686,
      "End":  687,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  687,
      "End":  688,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  688,
      "End":  689,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  689,
      "End":  690,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  314,
      "End":  691,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  691,
      "End":  692,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  693,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  693,
      "End":  694,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  562,
      "End":  695,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  695,
      "End":  696,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  697,
      "End":  698,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  698,
      "End":  584,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  699,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  699,
      "End":  700,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  700,
      "End":  701,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  314,
      "End":  702,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  702,
      "End":  703,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  696,
      "End":  580,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  701,
      "End":  538,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  541,
      "End":  705,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  705,
      "End":  704,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  704,
      "End":  309,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  704,
      "End":  313,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  322,
      "End":  706,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  706,
      "End":  541,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  707,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  707,
      "End":  708,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  708,
      "End":  709,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  513,
      "End":  710,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  710,
      "End":  504,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  422,
      "End":  711,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  452,
      "End":  712,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  712,
      "End":  408,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  711,
      "End":  712,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  713,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  713,
      "End":  714,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  714,
      "End":  715,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  694,
      "End":  538,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  504,
      "End":  719,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  719,
      "End":  720,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  720,
      "End":  721,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  709,
      "End":  512,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  715,
      "End":  512,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  721,
      "End":  512,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  726,
      "End":  727,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  724,
      "End":  725,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  725,
      "End":  726,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  726,
      "End":  728,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  728,
      "End":  730,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  727,
      "End":  729,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  729,
      "End":  733,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  730,
      "End":  731,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  731,
      "End":  732,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  733,
      "End":  732,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  732,
      "End":  734,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  735,
      "End":  737,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  735,
      "End":  736,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  736,
      "End":  738,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  737,
      "End":  739,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  738,
      "End":  740,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  740,
      "End":  741,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  741,
      "End":  742,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  742,
      "End":  743,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  743,
      "End":  744,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  746,
      "End":  745,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  739,
      "End":  746,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  745,
      "End":  747,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  745,
      "End":  748,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  745,
      "End":  749,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  744,
      "End":  750,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  750,
      "End":  745,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  745,
      "End":  751,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  745,
      "End":  752,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  745,
      "End":  753,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  747,
      "End":  754,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  752,
      "End":  755,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  753,
      "End":  756,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  748,
      "End":  757,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  749,
      "End":  758,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  751,
      "End":  759,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  754,
      "End":  761,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  756,
      "End":  762,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  758,
      "End":  763,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  763,
      "End":  765,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  765,
      "End":  766,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  765,
      "End":  767,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  765,
      "End":  768,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  768,
      "End":  764,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  767,
      "End":  769,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  764,
      "End":  770,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  770,
      "End":  771,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  761,
      "End":  771,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  762,
      "End":  771,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  771,
      "End":  773,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  773,
      "End":  774,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  774,
      "End":  760,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  771,
      "End":  772,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  772,
      "End":  775,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  775,
      "End":  745,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  759,
      "End":  776,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  776,
      "End":  760,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  766,
      "End":  777,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  777,
      "End":  778,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  778,
      "End":  760,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  779,
      "End":  780,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  780,
      "End":  781,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  781,
      "End":  782,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  782,
      "End":  783,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  784,
      "End":  786,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  786,
      "End":  785,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  785,
      "End":  121,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  266,
      "End":  281,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  788,
      "End":  789,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  789,
      "End":  790,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  331,
      "End":  788,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  790,
      "End":  791,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  791,
      "End":  792,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  791,
      "End":  793,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  793,
      "End":  794,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  792,
      "End":  795,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  795,
      "End":  796,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  797,
      "End":  798,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  357,
      "End":  799,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  799,
      "End":  800,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  801,
      "End":  802,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  802,
      "End":  804,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  804,
      "End":  803,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  803,
      "End":  805,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  803,
      "End":  806,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  805,
      "End":  807,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  806,
      "End":  808,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  807,
      "End":  809,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  59,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  812,
      "End":  813,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  813,
      "End":  814,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  814,
      "End":  815,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  815,
      "End":  817,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  814,
      "End":  816,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  816,
      "End":  818,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  818,
      "End":  820,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  818,
      "End":  821,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  820,
      "End":  822,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  822,
      "End":  813,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  821,
      "End":  823,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  823,
      "End":  824,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  824,
      "End":  825,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  817,
      "End":  819,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  819,
      "End":  826,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  826,
      "End":  827,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  830,
      "End":  831,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  829,
      "End":  833,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  833,
      "End":  834,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  835,
      "End":  836,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  838,
      "End":  839,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  839,
      "End":  840,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  840,
      "End":  841,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  811,
      "End":  842,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  829,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  843,
      "End":  844,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  846,
      "End":  847,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  847,
      "End":  848,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  848,
      "End":  849,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  849,
      "End":  850,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  851,
      "End":  852,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  852,
      "End":  855,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  855,
      "End":  854,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  855,
      "End":  853,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  856,
      "End":  857,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  857,
      "End":  858,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  859,
      "End":  860,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  855,
      "End":  861,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  854,
      "End":  863,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  853,
      "End":  862,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  862,
      "End":  864,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  862,
      "End":  865,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  864,
      "End":  866,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  866,
      "End":  869,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  865,
      "End":  867,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  867,
      "End":  868,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  862,
      "End":  870,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  870,
      "End":  871,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  868,
      "End":  872,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  872,
      "End":  873,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  862,
      "End":  874,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  874,
      "End":  875,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  876,
      "End":  878,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  878,
      "End":  877,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  877,
      "End":  879,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  879,
      "End":  880,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  879,
      "End":  881,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  880,
      "End":  882,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  881,
      "End":  883,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  884,
      "End":  885,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  885,
      "End":  886,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  886,
      "End":  855,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  883,
      "End":  884,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  882,
      "End":  887,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  863,
      "End":  865,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  863,
      "End":  870,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  863,
      "End":  874,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  887,
      "End":  888,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  888,
      "End":  889,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  889,
      "End":  877,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  887,
      "End":  890,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  890,
      "End":  891,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  891,
      "End":  892,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  862,
      "End":  893,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  893,
      "End":  894,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  863,
      "End":  864,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  863,
      "End":  893,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  869,
      "End":  895,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  869,
      "End":  896,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  895,
      "End":  876,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  896,
      "End":  897,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  897,
      "End":  877,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  887,
      "End":  898,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  898,
      "End":  886,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  856,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  900,
      "End":  901,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  901,
      "End":  902,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  902,
      "End":  904,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  902,
      "End":  905,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  904,
      "End":  906,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  905,
      "End":  903,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  903,
      "End":  907,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  906,
      "End":  908,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  908,
      "End":  909,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  907,
      "End":  909,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  909,
      "End":  910,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  33,
      "End":  34,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  861,
      "End":  911,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  911,
      "End":  899,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  912,
      "End":  913,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  913,
      "End":  914,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  914,
      "End":  915,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  915,
      "End":  916,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  842,
      "End":  838,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  842,
      "End":  812,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  842,
      "End":  900,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  917,
      "End":  302,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  917,
      "End":  282,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  917,
      "End":  801,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  281,
      "End":  917,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  281,
      "End":  283,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  680,
      "End":  918,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  918,
      "End":  923,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  923,
      "End":  921,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  918,
      "End":  922,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  922,
      "End":  919,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  918,
      "End":  924,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  924,
      "End":  925,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  926,
      "End":  927,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  928,
      "End":  920,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  920,
      "End":  681,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  919,
      "End":  929,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  929,
      "End":  926,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  927,
      "End":  930,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  930,
      "End":  931,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  931,
      "End":  918,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  920,
      "End":  932,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  932,
      "End":  933,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  933,
      "End":  929,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  682,
      "End":  934,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  314,
      "End":  936,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  936,
      "End":  937,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  938,
      "End":  939,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  940,
      "End":  943,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  943,
      "End":  946,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  946,
      "End":  948,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  941,
      "End":  944,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  942,
      "End":  945,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  945,
      "End":  947,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  947,
      "End":  949,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  939,
      "End":  950,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  940,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  941,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  942,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  951,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  951,
      "End":  952,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  953,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  953,
      "End":  955,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  955,
      "End":  954,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  954,
      "End":  956,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  957,
      "End":  958,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  948,
      "End":  957,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  959,
      "End":  961,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  962,
      "End":  950,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  958,
      "End":  962,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  965,
      "End":  963,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  966,
      "End":  964,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  963,
      "End":  967,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  964,
      "End":  968,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  972,
      "End":  973,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  975,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  975,
      "End":  976,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  979,
      "End":  980,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  980,
      "End":  982,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  979,
      "End":  981,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  981,
      "End":  983,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  978,
      "End":  979,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  950,
      "End":  984,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  984,
      "End":  985,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  982,
      "End":  977,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  977,
      "End":  986,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  986,
      "End":  987,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  988,
      "End":  978,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  983,
      "End":  989,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  989,
      "End":  986,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  990,
      "End":  992,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  944,
      "End":  990,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  944,
      "End":  991,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  992,
      "End":  948,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  960,
      "End":  993,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  993,
      "End":  969,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  960,
      "End":  994,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  995,
      "End":  996,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  995,
      "End":  997,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  997,
      "End":  998,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  969,
      "End":  995,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  999,
      "End":  1000,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1000,
      "End":  970,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  996,
      "End":  999,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1001,
      "End":  1003,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1003,
      "End":  1002,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1002,
      "End":  950,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  994,
      "End":  1004,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  991,
      "End":  1004,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1005,
      "End":  1007,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1006,
      "End":  1008,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1007,
      "End":  1009,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1008,
      "End":  1010,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1004,
      "End":  1011,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1011,
      "End":  1005,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1011,
      "End":  1006,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  961,
      "End":  1012,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1012,
      "End":  966,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1012,
      "End":  965,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  998,
      "End":  1001,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  949,
      "End":  1014,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  949,
      "End":  1015,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1014,
      "End":  1016,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1016,
      "End":  1018,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1015,
      "End":  1017,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1017,
      "End":  1019,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1019,
      "End":  1020,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1020,
      "End":  1002,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  592,
      "End":  1021,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1021,
      "End":  1022,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1022,
      "End":  1023,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1024,
      "End":  1025,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1025,
      "End":  1026,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1026,
      "End":  1027,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1027,
      "End":  546,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1023,
      "End":  1028,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1028,
      "End":  1029,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1018,
      "End":  1030,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1030,
      "End":  1031,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  918,
      "End":  1032,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1033,
      "End":  1034,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1034,
      "End":  1035,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1032,
      "End":  1037,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1038,
      "End":  1036,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1036,
      "End":  1040,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1036,
      "End":  1041,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1041,
      "End":  1039,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1040,
      "End":  1042,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1042,
      "End":  680,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1039,
      "End":  1043,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1039,
      "End":  1044,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1043,
      "End":  1046,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1045,
      "End":  1042,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1044,
      "End":  1047,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1047,
      "End":  1045,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1046,
      "End":  1045,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1033,
      "End":  230,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1048,
      "End":  1049,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1049,
      "End":  1050,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  317,
      "End":  1048,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1050,
      "End":  1051,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1051,
      "End":  1052,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  317,
      "End":  1053,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1053,
      "End":  1054,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1052,
      "End":  316,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  971,
      "End":  1055,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1056,
      "End":  971,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  968,
      "End":  1060,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  968,
      "End":  1059,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1059,
      "End":  970,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1057,
      "End":  1058,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1061,
      "End":  1057,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1061,
      "End":  1056,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1009,
      "End":  970,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1010,
      "End":  1062,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1062,
      "End":  970,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1010,
      "End":  1063,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1063,
      "End":  1064,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1060,
      "End":  1064,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  956,
      "End":  308,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1064,
      "End":  1065,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1065,
      "End":  314,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  970,
      "End":  1061,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  967,
      "End":  970,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  412,
      "End":  1068,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1068,
      "End":  1069,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  412,
      "End":  1073,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1073,
      "End":  1074,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1076,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1079,
      "End":  1080,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1080,
      "End":  1081,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  429,
      "End":  1079,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1088,
      "End":  1089,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1089,
      "End":  1090,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1090,
      "End":  1091,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  472,
      "End":  1093,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1093,
      "End":  1094,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  35,
      "End":  1097,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1097,
      "End":  1098,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1098,
      "End":  1099,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1099,
      "End":  1100,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1100,
      "End":  1101,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1101,
      "End":  1103,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1100,
      "End":  1102,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1102,
      "End":  1104,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1103,
      "End":  1105,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1105,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1106,
      "End":  1107,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  592,
      "End":  1106,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1107,
      "End":  1108,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1108,
      "End":  1109,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1109,
      "End":  1110,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1111,
      "End":  606,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1110,
      "End":  1112,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1112,
      "End":  609,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  549,
      "End":  1113,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1113,
      "End":  606,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "Rect.Text":  
  [
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  -1087,
      "Rect.Top":  647,
      "Rect.Right":  -829,
      "Rect.Bottom":  990,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  0,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  -1,
      "AlignRect":  false,
      "Text":  "Обработчики квестов из\r\nштаба игрока (тернкод)",
      "Color":  0,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  190,
      "Rect.Top":  34,
      "Rect.Right":  404,
      "Rect.Bottom":  84,
      "FStyle":  1,
      "FColor":  10710806,
      "BStyle":  0,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  1,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "Спавн штаба в этом Op   ",
      "Color":  0,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    }  
  ],
  "BlockPar.EC.Total.Strings":  3,
  "BlockPar.EC":  
  [
    {
      "#":  "192",
      "String":  ""    
    },
    {
      "#":  "193",
      "String":  "<br>"    
    },
    {
      "#":  "195",
      "String":  "<0>"    
    }  
  ]
}