{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -199,
  "ViewPos.y":  -73,
  "ScriptName":  "Mod_ShuWarriors",
  "ScriptFileOut":  "H:\\Mod_ShuWarriors.scr",
  "ScriptTextOut":  "H:\\Mod_ShuWarriors.txt",
  "GraphPoint.Count":  125,
  "GraphLink.Count":  71,
  "GraphRectText.Count":  0,
  "Variables.Count":  49,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  6,
  "Groups.Count":  3,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  3,
  "DialogMessages.Count":  8,
  "DialogAnswers.Count":  8,
  "Operations.Count":  24,
  "Statements.Count":  21,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "DialogAnswers":      
      [
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  58,
          "#":  60,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  59,
          "#":  61,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  67,
          "#":  71,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  68,
          "#":  72,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "block",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  70,
          "#":  73,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  69,
          "#":  74,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "5"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  -20,
          "Pos.y":  100,
          "Parent":  104,
          "#":  103,
          "Msg":  "",
          "AMsg.Num":  "6"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  107,
          "#":  108,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "7"        
        }      
      ],
      "DialogMessages":      
      [
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  51,
          "#":  52,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  50,
          "#":  53,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  66,
          "#":  62,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  64,
          "#":  65,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  75,
          "#":  76,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  77,
          "#":  78,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "5"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  79,
          "#":  80,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "6"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  106,
          "#":  107,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "7"        
        }      
      ],
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "MilitaryOperationWBDialog",
          "Pos.x":  520,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  25        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlanScr",
          "Pos.x":  -20,
          "Pos.y":  -140,
          "Parent":  81,
          "#":  82        
        },
        {
          "Type":  "TDialog",
          "Name":  "PlanScrChoose",
          "Pos.x":  -40,
          "Pos.y":  20,
          "Parent":  82,
          "#":  100        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerState",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  4,
          "#":  6,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "OperativeWB",
          "Pos.x":  0,
          "Pos.y":  -110,
          "Parent":  4,
          "#":  31,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        },
        {
          "Type":  "TGroup",
          "Name":  "OperativeWarriors",
          "Pos.x":  0,
          "Pos.y":  -160,
          "Parent":  4,
          "#":  36,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  0,
          "CntShipMax":  0,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  false,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  5,
          "#":  0,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  0,
          "#":  8,
          "Total.Lines":  355,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Впервые заводим таймер до спавна группы элитных военных",
              "EliteWarriorsSpawnTimer = 0;//CurTurn() + Rnd(9, 121);",
              "",
              "function SpawnEliteWarrior(planet, money_coef)",
              "{",
              "    dword ship = BuyWarrior(planet, money_coef);",
              "    ShipType(ship,'EliteWarrior');",
              "",
              "    //Случайно подбираем акрин для нового военного",
              "    int acryn = RndObject(1, 5, ship);",
              "    if(acryn == 1) acryn = FindBonusByNameInCfg('351'); //Скала (старая, не из ExpHulls)",
              "    else if(acryn == 2) acryn = FindBonusByNameInCfg('359'); //Неуязвимый корпус III",
              "    else if(acryn == 3) acryn = FindBonusByNameInCfg('367'); //Миоплазменный корпус III",
              "    else if(acryn == 4) acryn = FindBonusByNameInCfg('371'); //Пигамарный корпус III",
              "    else acryn = FindBonusByNameInCfg('478'); //Корпус \"Броненосец\" III",
              "",
              "    //Надеваем акрин",
              "    SpecialToEquipment(acryn, ShipItems(ship, 0));",
              "    Chameleon(ship);",
              "",
              "    //Повышаем навыки элитного военного",
              "    ShipSkill(ship, 0, RndObject(4, 6, ship));",
              "    ShipSkill(ship, 1, RndObject(4, 6, ship));",
              "    ShipSkill(ship, 2, RndObject(3, 6, ship));",
              "    ShipSkill(ship, 3, RndObject(1, 2, ship));",
              "    ShipSkill(ship, 4, RndObject(1, 3, ship));",
              "    ShipSkill(ship, 5, RndObject(1, 4, ship));",
              "",
              "    //А также его звание до уровня не ниже истребителя",
              "    ShipRaiseRank(ship, max(4, ShipRank(ship)));",
              "",
              "    ShipRefit(ship);",
              "    ShipRefit(ship);",
              "    ShipRefit(ship);",
              "",
              "    ShipImproveItems(ship, RndObject(3, 8, ship));",
              "",
              "    result = ship;",
              "}",
              "",
              "function CutStrLenght(str line, int lenght)",
              "{",
              "    if(count(line) > lenght)",
              "    {",
              "        line = substr(line, 0, lenght - 2); //Снимаем с конца всего 2 символа вместо 3, т.к. символы точек сами по себе очень небольшие",
              "        if(substr(line, lenght - 3, 1) == ' ') line = substr(line, 0, lenght - 3); //Если последний оставшийся символ в строке - пробел",
              "        line = line + '...';",
              "    }",
              "",
              "    result = line;",
              "}",
              "",
              "function InitNewWBOperation(ref operation_array, dword military_base_id, int by_player = 0)",
              "{",
              "    ArrayClear(operation_array);",
              "    ArrayDelete(operation_array, 0);",
              "",
              "    ArrayAdd(operation_array, military_base_id, 'MilitaryBaseId');",
              "    //Возможные уровни вовлечения игрока в организацию атаки (полностью аналогично значениям operation_lvl):",
              "    //OrganizedByPlayer == 0 - игрок не может заказать никакую операцию, поскольку имеет 0 звание",
              "    //OrganizedByPlayer == 1 - игрок может заказать обычную операцию (аналог ванильной), когда целевую систему и состав нападающих определяет ВБ, а игрок только платит",
              "    //OrganizedByPlayer == 2 - игрок может заказать операцию, а также может выбрать один из флагманов (если он будет среди военных кораблей) своим командным кораблём и самолично повести атакующую группу в бой",
              "    //OrganizedByPlayer == 3 - игрок может заказать операцию с участием до двух флагманов, а также сам выбирает систему для атаки",
              "    //OrganizedByPlayer == 4 - игрок может заказать операцию с участием до двух флагманов (включая один дредноут, если подключена EvoArmada) и самой ВБ, а также сам выбирает систему для атаки",
              "    ArrayAdd(operation_array, by_player, 'OrganizedByPlayer');",
              "    ArrayAdd(operation_array, 0, 'StarToAttackId'); //Id звезды",
              "    //rrayAdd(operation_array, newarray(1), 'EnemyForcesId');",
              "    ArrayAdd(operation_array, newarray(1), 'AlliesForcesId'); //Список Id участвующих в атаке военных кораблей (после постройки корабли с планет из списка ниже также переносятся сюда)",
              "    ArrayAdd(operation_array, newarray(1), 'ShipyardsInvolvedId'); //Список Id планет (формат 'Id планеты,ход завершения постройки'), на которых будет запущено строительство новых кораблей для усиления атакующей группировки",
              "    ArrayAdd(operation_array, 0, 'FlagmanId'); //Id флагмана, возглавляющего атаку (имеет значение для игрока, решившего использовать линкор в качестве флагмана)",
              "    ArrayAdd(operation_array, 0, 'GatheringPlaceId'); //Id звезды, либо самой ВБ, если атакующие силы отправятся в бой вместе с ней",
              "    ArrayAdd(operation_array, 0, 'AttackDate'); //Дата начала атаки, когда военные корабли или ВБ получит приказ совершить прыжок в атакуемую систему",
              "}",
              "",
              "//Использовать общескриптовые плейсы, к сожалению, нельзя, т.к. одновременно может быть запущенно сразу несколько военных операций",
              "function OrderMoveToGatherPoint(dword ship, int oper_num)",
              "{",
              "    float angle = 0.01 * RndObject(0, 200, ship);",
              "    int dist = RndObject(0, round(0.95 * GlobalWBOperationsArray[oper_num, 'GatheringPointRadius']), ship);",
              "    OrderMove(ship, round(sin(angle * pi) * dist) + GlobalWBOperationsArray[oper_num, 'GatheringPointCoordX'], round(cos(angle * pi) * dist) + GlobalWBOperationsArray[oper_num, 'GatheringPointCoordY']);",
              "}",
              "",
              "function FindAllMilitaryShipsInSector(dword sector, ref array, int cost_count = 0)",
              "{",
              "    //Принцип ванильного подбора военных в группу для атаки системы (флагманы добавляются в группу, наряду с обычными военными):",
              "    //Военные собираются с одного случайного сектора, в котором обязательно должны присутствовать вражеские корабли (полностью коалиционный сектор выберет, только если на него в момент проверки напали)",
              "    //Проверяемый сектор обновляется при каждом новом запросе игрока с ВБ (но может рандомно выбрать один и тот же сектор несколько раз подряд) и поэтому постоянно снимает с него деньги, а не только при успехе поиска",
              "    //Перебор набирает военных в группу до тех пор, пока их суммарная относительная сила не сравняются с силой врага в атакуемой системе",
              "    //Сперва в группу добавляются военные, которые сидят на своих планетах, и только если их не хватило, происходит добавление тех, кто в данный момент занят чем-то ещё (на патруле или в другой системе, например)",
              "    //В группу никогда не набираются корабли с приказом преследования, т.к. считается, что они сражаются, а потому заняты",
              "",
              "    ArrayClear(array);",
              "",
              "    unknown warriors = newarray(1);",
              "    unknown battleships = newarray(1);",
              "    unknown dreadnoughts = newarray(1);",
              "    if(cost_count) //Если необходимо прикинуть стоимость \"найма\" военных на операцию с ВБ, то проще сделать это сразу",
              "    {",
              "        int cost;",
              "        unknown warriors_cost = newarray(1);",
              "        unknown battleships_cost = newarray(1);",
              "        unknown dreadnoughts_cost = newarray(1);",
              "    }",
              "    int wars_count = 0;",
              "    for(int i = ConStars(sector) - 1; i >= 0; i = i - 1)",
              "    {",
              "        dword star = ConStar(sector, i);",
              "        if(StarOwner(star)) continue; //Если система не под контролем Коалиции",
              "        if(StarBattle(star)) continue; //Если система под атакой",
              "",
              "        for(int j = StarPlanets(star) - 1; j >= 0; j = j - 1)",
              "        {",
              "            dword planet = StarPlanets(star, j);",
              "            if(PlanetOwner(planet) == None) continue;",
              "",
              "            for(int k = PlanetWarriors(planet) - 1; k >= 0; k = k - 1)",
              "            {",
              "                dword warrior = PlanetWarriors(planet, k);",
              "                if(ShipOrder(warrior) == 6) continue; //Если с кем-то сражается",
              "                if(ShipInGameEvent(warrior)) continue;",
              "                if(ShipInScript(warrior, 0))",
              "                {",
              "                    if(GetShipScriptName(warrior, 3) != 'Mod_EvoArmada.Dreadnought') continue;",
              "                }",
              "",
              "                if(!ShipSubType(warrior))",
              "                {",
              "                    ArrayAdd(warriors, warrior); //Обычный/элитный военный",
              "                    if(cost_count)",
              "                    {",
              "                        float coef = PortionInDiapason(GetShipBestStrength(warrior), 0.1, 10.0, 0.3, 3.0);",
              "                        cost = round(coef * GalaxyMoney(2, ShipPilotRace(warrior)));",
              "                        ArrayAdd(warriors_cost, cost);",
              "                    }",
              "                }",
              "                else",
              "                {",
              "                    if(ShipType(warrior) != 'Dreadnought') //Линкор",
              "                    {",
              "                        ArrayAdd(battleships, warrior);",
              "                        if(cost_count)",
              "                        {",
              "                            coef = PortionInDiapason(GetShipBestStrength(warrior), 0.75, 750.0, 2.5, 7.5);",
              "                            cost = round(coef * GalaxyMoney(2, ShipPilotRace(warrior)) * 12.5);",
              "                            ArrayAdd(battleships_cost, cost);",
              "                        }",
              "                    }",
              "                    else //Дредноут (выносим в отдельную категорию, чтобы отсекать их при недостаточном звании/авторитете игрока)",
              "                    {",
              "                        ArrayAdd(dreadnoughts, warrior);",
              "                        if(cost_count)",
              "                        {",
              "                            coef = PortionInDiapason(GetShipBestStrength(warrior), 1.0, 1000.0, 3.75, 12.5);",
              "                            cost = round(coef * GalaxyMoney(2, ShipPilotRace(warrior)) * 7.5);",
              "                            ArrayAdd(dreadnoughts_cost, cost);",
              "                        }",
              "                    }",
              "                }",
              "",
              "                wars_count = wars_count + 1;",
              "            }",
              "        }",
              "    }",
              "",
              "    ArrayAdd(array, warriors, 'Warriors');",
              "    warriors = newarray(1);",
              "    ArrayAdd(array, battleships, 'Battleships');",
              "    battleships = newarray(1);",
              "    ArrayAdd(array, dreadnoughts, 'Dreadnoughts');",
              "    dreadnoughts = newarray(1);",
              "    if(cost_count)",
              "    {",
              "        ArrayAdd(array, warriors_cost, 'WarriorsHireCost');",
              "        warriors_cost = newarray(1);",
              "        ArrayAdd(array, battleships_cost, 'BattleshipsHireCost');",
              "        battleships_cost = newarray(1);",
              "        ArrayAdd(array, dreadnoughts_cost, 'DreadnoughtsHireCost');",
              "        dreadnoughts_cost = newarray(1);",
              "    }",
              "",
              "    result = wars_count; //Чисто для возможности быстрой проверки, был ли найден хоть кто-нибудь",
              "}",
              "",
              "//Фактически обе эти функции одинаковы, но пофиг, т.к. понятые читабельные названия важнее",
              "function FindWBOperation(dword military_base_id)",
              "{",
              "    for(int i = ArrayDim(GlobalWBOperationsArray); i >= 1; i = i - 1)",
              "    {",
              "        if(GlobalWBOperationsArray[i, 'MilitaryBaseId'] == military_base_id)",
              "        {",
              "            result = i;",
              "            exit;",
              "        }",
              "    }",
              "",
              "    result = 0;",
              "}",
              "function FindObjectInArray(ref array, dword obj)",
              "{",
              "    for(int i = ArrayDim(array) - 1; i >= 1; i = i - 1)",
              "    {",
              "        if(array[i] == obj)",
              "        {",
              "            result = i;",
              "            exit;",
              "        }",
              "    }",
              "",
              "    result = -1;",
              "}",
              "",
              "//Ищет систему в автоматическом режиме, либо собирает массив подходящих для атаки систем, которые может выбрать игрок",
              "function FindStarToAttack(dword ruin = 0, ref array)",
              "{",
              "    //Принцип ванильного определения системы для атаки:",
              "    //Каждая захваченная врагом система суммирует дистанции до всех коалиционных систем в Галактике, после чего сумма этих дистанций перемножается на Rnd(1.0, 2.0)",
              "    //по итогу выбирается система с наименьшим значением",
              "",
              "    unknown stars_arr = newarray(1);",
              "    unknown dist_arr = newarray(1);",
              "    dist_arr[0] = -1; //Для корректности сортировки ебучих дабомассивов",
              "",
              "    dword pirate_sector = StarToCon(PlanetToStar(PlanetPirateClan()));",
              "    for(int i = GalaxyStars() - 1; i >= 0; i = i - 1)",
              "    {",
              "        dword star = GalaxyStar(i);",
              "        if(!StarOwner(star)) continue; //Проверяем только враждебные Коалиции системы",
              "        if(StarBattle(star)) continue;",
              "        if(StarToCon(star) == pirate_sector) continue;",
              "",
              "        int dist_summ = 0;",
              "        for(int j = GalaxyStars() - 1; j >= 1; j = j - 1)",
              "        {",
              "            dword coal_star = GalaxyStar(j);",
              "            if(StarOwner(coal_star)) continue; //Запоминаем дистанции только до коалиционных систем",
              "            if(StarCustomFaction(coal_star) != '') continue;",
              "            dist_summ = dist_summ + StarNearbyStarsDist(star, j);",
              "        }",
              "",
              "        ArrayAdd(stars_arr, star);",
              "        ArrayAdd(dist_arr, dist_summ);",
              "    }",
              "",
              "    //Заносим в массив список всех подходящих для атаки систем (далее игрок будет сам выбирать из списка)",
              "    //Игроку на выбор будут доступны N систем с ближайшими суммами дистанций до Коалиционных систем",
              "    if(GetVariableType(array) == 9)//if(array)",
              "    {",
              "        ArrayClear(array);",
              "        ArraySort(dist_arr, stars_arr);",
              "        for(i = 1; i < ArrayDim(stars_arr); i = i + 1) ArrayAdd(array, stars_arr[i]);",
              "        exit;",
              "    }",
              "    //Выбираем систему автоматически, по ванильному принципу",
              "    else",
              "    {",
              "        if(ruin) for(i = ArrayDim(dist_arr) - 1; i >= 1; i = i - 1) dist_arr[i] = round(0.1 * RndObject(10, 20, ruin) * dist_arr[i]);",
              "        else if(ruin) for(i = ArrayDim(dist_arr) - 1; i >= 1; i = i - 1) dist_arr[i] = round(0.1 * Rnd(10, 20) * dist_arr[i]);",
              "        ArraySort(dist_arr, stars_arr);",
              "        result = stars_arr[1];",
              "        exit;",
              "    }",
              "}",
              "",
              "//Вызывать лишь строго из диалога MilitaryOperationWBDialog!",
              "function UpdateSidePowers()",
              "{",
              "    //Считаем силу атакующих военных, включая тех, которых дозаказал к постройке игрок",
              "    coals_cnt = 0;",
              "    big_coals_cnt = 0;",
              "    coals_power = 0;",
              "    for(int i = ArrayDim(new_operation_arr['AlliesForcesId']) - 1; i >= 1; i = i - 1)",
              "    {",
              "        dword ship = IdToShip(new_operation_arr['AlliesForcesId', i]);",
              "        if(ShipSubType(ship)) //Линкоры и дредноуты",
              "        {",
              "            big_coals_cnt = big_coals_cnt + 1;",
              "            coals_power = coals_power + GetShipAverageStrength(ship);",
              "            continue;",
              "        }",
              "",
              "        coals_cnt = coals_cnt + 1;",
              "        coals_power = coals_power + GetShipAverageStrength(ship);",
              "    }",
              "",
              "    if(new_operation_arr['GatheringPlaceId'] < 0)",
              "    {",
              "        coals_cnt = coals_cnt + 1;",
              "        coals_power = coals_power + GetShipAverageStrength(cur_ruin);",
              "    }",
              "",
              "    int cnt = ArrayDim(new_operation_arr['ShipyardsInvolvedId']);",
              "    if(cnt)",
              "    {",
              "        for(i = 1; i < cnt; i = i + 1) coals_power = coals_power + CalcBuildWarriorStats(IdToPlanet(new_operation_arr['ShipyardsInvolvedId', i]), 1);",
              "    }",
              "",
              "    //Считаем точную силу врага в атакуемой системе",
              "    dword star = GalaxyStar(new_operation_arr['StarToAttackId'] - 1);",
              "    enemies_cnt = 0;",
              "    enemies_power = 0;",
              "    for(i = StarShips(star) - 1; i >= 0; i = i - 1)",
              "    {",
              "        ship = StarShips(star, i);",
              "        if(ShipStanding(ship) >= 1 && ShipStanding(ship) <= 5) continue;",
              "        //Скипаем Блазера, Келлера и махпеллу про оценке сил в системе, т.к. все они товарищи непостоянные",
              "        if(ship == Blazer()) continue;",
              "        if(ship == Keller()) continue;",
              "        if(ShipType(ship) == 'Machpella') continue;",
              "",
              "        enemies_cnt = enemies_cnt + 1;",
              "        enemies_power = enemies_power + GetShipAverageStrength(ship);",
              "    }",
              "",
              "    //Слегка завышаем силы врага в системе в счёт его ожидаемого доспавна с планет во время боя",
              "    enemies_power = round(1.33 * enemies_power);",
              "",
              "    //Считаем соотношение сил между врагом в системе и атакующими военными в процентах",
              "    coals_power_percent = round((1.0 * coals_power) / (0.01 * enemies_power));",
              "}",
              "",
              "//Для вычисления полной, а не текущей силы кораблей",
              "function GetShipBestStrength(dword ship)",
              "{",
              "    int hp = HullHP(ship, 'To100');",
              "    ShipCalcParam(ship);",
              "    result = ShipStrengthInBestRanger(ship);",
              "    HullHP(ship, hp);",
              "    ShipCalcParam(ship);",
              "}",
              "function GetShipAverageStrength(dword ship)",
              "{",
              "    int hp = HullHP(ship, 'To100');",
              "    ShipCalcParam(ship);",
              "    result = ShipStrengthInAverageRanger(ship);",
              "    HullHP(ship, hp);",
              "    ShipCalcParam(ship);",
              "}",
              "",
              "function CalcBuildWarriorStats(dword planet, int type = 0)",
              "{",
              "    //Считаем цену постройки военного на данной планете (чем более продвинута планета по ТУ, тем дороже обойдётся постройка)",
              "    if(!type)",
              "    {",
              "        int stat = PlanetInventionLevel(planet, 7) - GalaxyTechLevel();",
              "        float coef = max(1.0 + (0.15 * stat), 0.2); //От 0.2 до 2.2",
              "        result = round(coef * GalaxyMoney(2, PlanetRace(planet)) * 3.0);",
              "    }",
              "    //Считаем условную силу будущего военного (также зависит от ТУ планеты)",
              "    else",
              "    {",
              "        stat = PlanetInventionLevel(planet, 7) - GalaxyTechLevel();",
              "        coef = max(1.0 + (0.15 * stat), 0.2); //От 0.2 до 2.2",
              "        result = round(coef * average_warrior_power);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  10,
          "#":  9,
          "Total.Lines":  110,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Если в настоящий момент скриптом запущена хотя бы одна военная операция",
              "tint1 = ArrayDim(GlobalWBOperationsArray) - 1;",
              "if(tint1)",
              "{",
              "    for(i = tint1; i >= 1; i = i - 1)",
              "    {",
              "        //Если точкой сбора перед атакой для военных была выбрана ВБ",
              "        if(~GlobalWBOperationsArray[i, 'GatheringPlaceId'])",
              "        {",
              "            cur_ruin = IdToShip(GlobalWBOperationsArray[i, 'MilitaryBaseId']);",
              "            if(cur_ruin)",
              "            {",
              "                if(StateIs(cur_ruin, 'WBOnPrepare'))",
              "                {",
              "                    //Пока ВБ находится в режиме подготовки к прыжку, она активно восстанавливает свой повреждённый корпус",
              "                    if(!StarBattle(ShipStar(cur_ruin)))",
              "                    {",
              "                        j = ItemSize(ShipItems(cur_ruin, 0));",
              "                        if(HullHP(cur_ruin) < j)",
              "                        {",
              "                            j = round(0.034 * j);",
              "                            HullHP(cur_ruin, HullHP(cur_ruin) + j);",
              "                            //Из тёрна всё равно не получится...",
              "                            //if(FilmFlags(0)) ShowEffect('Weapon.NoGraph', 0, cur_ruin, cur_ruin, j, 0, 0, 0,255,0);",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "            else //Если ВБ была уничтожена",
              "            {",
              "                for(k = ArrayDim(GlobalWBOperationsArray[i, 'AlliesForcesId']) - 1; k >= 1; k = k - 1)",
              "                {",
              "                    cur_ship = IdToShip(GlobalWBOperationsArray[i, 'AlliesForcesId', k]);",
              "                    if(ShipStar(cur_ship) != GlobalWBOperationsArray[i, 'StarToAttackId']) ShipOut(cur_ship);",
              "                }",
              "            }",
              "        }",
              "",
              "        //Если все участники операции уничтожены, либо были выведены из скрипта, удаляем операцию",
              "        //(больше игрок с ней всё равно ничего сделать не сможет, даже если в атакуемой системе по-прежнему висит скакнувшая туда ВБ)",
              "        if(ArrayDim(GlobalWBOperationsArray[i, 'AlliesForcesId']) <= 1)",
              "        {",
              "            //Перед удалением операции из массива производим перенумерацию в скриптовых объектах военных в операциях выше по списку",
              "            //(короче говоря, компенсируем будущий сдвиг)",
              "            for(j = tint1; j > i; j = j - 1)",
              "            {",
              "                for(k = ArrayDim(GlobalWBOperationsArray[j, 'AlliesForcesId']) - 1; k >= 1; k = k - 1)",
              "                {",
              "                    cur_ship = IdToShip(GlobalWBOperationsArray[j, 'AlliesForcesId', k]);",
              "                    SetData(j - 1, 3, cur_ship);",
              "                }",
              "            }",
              "",
              "            tint1 = tint1 - 1;",
              "            ArrayDelete(GlobalWBOperationsArray[i]);",
              "",
              "            //Добавить вывод уведомления на случай, если ВБ ещё жива, а всех военных перебили по дороге к ней перед прыжком в атакуемую систему",
              "        }",
              "    }",
              "}",
              "",
              "//Если пришло время постройки новой партии элитных военных",
              "if(CurTurn() >= EliteWarriorsSpawnTimer)",
              "{",
              "    //Выбирается подходящая для спавна система, с военной базой и текущим числом военных менее N",
              "    ArrayClear(tarr1);",
              "    cur_ruin = 0;",
              "    for(i = GalaxyStars() - 1; i >= 0; i = i - 1)",
              "    {",
              "        cur_star = GalaxyStar(i);",
              "",
              "        //Пропускаем не коалиционные системы и системы, в которых в данный момент идёт бой",
              "        if(StarOwner(cur_star) != 0) continue;",
              "        if(StarBattle(cur_star)) continue;",
              "",
              "        //Пропускаем системы без военной базы",
              "        if(!StarRuins(cur_star, 'WB')) continue;",
              "",
              "        //Считаем военные корабли в системе и если их более 7, пропускаем систему",
              "        check = 0;",
              "        for(j = StarPlanets(cur_star) - 1; j >= 0; j = j - 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, j);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "            check = check + PlanetWarriors(cur_planet);",
              "        }",
              "",
              "        if(check < 7) ArrayAdd(tarr1, cur_star);",
              "        else continue;",
              "    }",
              "",
              "    //Если таковые системы найдены, начинается строительство военных в случайной из них",
              "    if(ArrayDim(tarr1) > 1)",
              "    {",
              "        cur_star = tarr1[Rnd(1, ArrayDim(tarr1) - 1, GetGalaxyGenerationSeed() + sqr(CurTurn()))];",
              "        cur_ruin = StarRuins(cur_star, 'WB');",
              "",
              "        //Спавним на выбранной планете от 5 до 8 элитных военных",
              "        for(i = RndObject(5, 8, cur_planet); i >= 1; i = i - 1)",
              "        {",
              "            cur_ship = SpawnEliteWarrior(FindPlanet(cur_star, 'NotNone'), 500);",
              "            //После чего отправляем их на военную базу, чтобы сымитировать его \"рождение\" корабля именно на ней",
              "            TransferShip(cur_ship, cur_ruin);",
              "        }",
              "",
              "        //Обновляем таймер до следующего возможного спавна группы элитных военных",
              "        //От двух до трёх лет",
              "        EliteWarriorsSpawnTimer = CurTurn() + Rnd(730, 1095);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  8,
          "#":  10,
          "Total.Lines":  99,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "cur_ruin = GetShipRuins(Player());",
              "if(cur_ruin)",
              "{",
              "    if(ShipType(cur_ruin) == 'WB')",
              "    {",
              "        AddDialogBlock(CT('FormRuins.WB.WarOperation.PlayerSend'), 2); //Блокируем ванильный диалог о заказе военной операции (он всё равно говно)",
              "",
              "        //Возможные уровни вовлечения игрока в организацию атаки (зависят от военного звания и навыка лидерства):",
              "        //operation_lvl == 0 - игрок не может заказать никакую операцию, поскольку имеет 0 звание",
              "        //operation_lvl == 1 - игрок может заказать обычную операцию (аналог ванильной), когда целевую систему и состав нападающих определяет ВБ, а игрок только платит",
              "        //operation_lvl == 2 - игрок может заказать операцию, а также может выбрать один из флагманов (если он будет среди военных кораблей) своим командным кораблём и самолично повести атакующую группу в бой",
              "        //operation_lvl == 3 - игрок может заказать операцию с участием до двух флагманов, а также сам выбирает систему для атаки",
              "        //operation_lvl == 4 - игрок может заказать операцию с участием до двух флагманов (включая один дредноут, если подключена EvoArmada) и самой ВБ, а также сам выбирает систему для атаки",
              "",
              "        //Если ВБ организует уже организует операцию (в том числе, если сама ещё никуда не летит)",
              "        if(GetShipScriptName(cur_ruin, 3) == 'Mod_ShuWarriors.OperativeWB')",
              "        {",
              "            if(StateIs(cur_ruin, 'WBOnPrepare'))",
              "            {",
              "                AddDialogInject('MilitaryOperationWBDialog', '', CT('Script.Mod_ShuWarriors.MilitaryOperationWBDialog.OnLevel' + operation_lvl + '.PlayerRequestOperation'), 0, 0, 1);",
              "                on_prepare = 1;",
              "            }",
              "            else //if(StateIs(cur_ruin, 'WBOnAttack'))",
              "            {",
              "",
              "            }",
              "        }",
              "        else if(!ShipInGameEvent(cur_ruin))",
              "        {",
              "            if(ShipInNormalSpace(cur_ruin))",
              "            {",
              "                if(!ShipOnSidePirateClan(Player()))",
              "                {",
              "                    check = (!ShipOrder(cur_ruin) && !ShipDestination(cur_ruin) && !StarBattle(ShipStar(cur_ruin)));",
              "",
              "                    //Не раньше звания \"Истребитель\"",
              "                    int pass_rank = max((6 - ShipSkill(Player(), 'Leadership') / 2), 4);",
              "",
              "                    int leadership = ShipSkill(Player(), 'Leadership');",
              "                    operation_lvl = 0;",
              "                    player_rank = ShipRank(Player());",
              "                    if(player_rank >= 7) //Адмирал",
              "                    {",
              "                        if(leadership == 6) operation_lvl = 4;",
              "                        else operation_lvl = 3;",
              "                        player_str_rank = lowercase(CT('Rank.Admiral.Name'));",
              "                    }",
              "                    else if(player_rank == 6) //Командор",
              "                    {",
              "                        if(leadership == 6) operation_lvl = 3;",
              "                        else operation_lvl = 2;",
              "                        player_str_rank = lowercase(CT('Rank.Commander.Name'));",
              "                    }",
              "                    else if(player_rank == 5) //Ас (Пилот)",
              "                    {",
              "                        if(leadership == 6) operation_lvl = 2;",
              "                        else operation_lvl = 1;",
              "                        player_str_rank = lowercase(CT('Rank.Ace.Name'));",
              "                    }",
              "                    else if(player_rank == 4) //Истребитель",
              "                    {",
              "                        operation_lvl = 1;",
              "                        player_str_rank = lowercase(CT('Rank.Leader.Name'));",
              "                    }",
              "                    else if(player_rank == 3) //Капитан",
              "                    {",
              "                        operation_lvl = 1;",
              "                        player_str_rank = lowercase(CT('Rank.Wingman.Name'));",
              "                    }",
              "                    else if(player_rank == 2) //Пилот",
              "                    {",
              "                        operation_lvl = 1;",
              "                        player_str_rank = lowercase(CT('Rank.Pilot.Name'));",
              "                    }",
              "                    else if(player_rank == 1) //Кадет",
              "                    {",
              "                        operation_lvl = 1;",
              "                        player_str_rank = lowercase(CT('Rank.Cadet.Name'));",
              "                    }",
              "                    else player_str_rank = lowercase(CT('Rank.Rookie.Name')); //Новичок",
              "",
              "                    operation_lvl = 4;",
              "                    dialog_path = 'Script.Mod_ShuWarriors.MilitaryOperationWBDialog.OnLevel' + operation_lvl;",
              "                    operation_num = 0; //Будет получен после инициализации новой операции",
              "                    coals_power_percent = 0; //Т.к. атакующие ещё не выбраны",
              "                    min_coals_power_percent = 75;",
              "                    max_coals_power_percent = 200;",
              "                    stars_cnt_to_choose = 15;",
              "                    min_warriors_to_add_WB = 5;",
              "                    cur_sector = StarToCon(ShipStar(cur_ruin));",
              "                    cost = 0;",
              "",
              "                    if(!check) AddDialogBlock(CT('Script.Mod_ShuWarriors.MilitaryOperationWBDialog.OnLevel' + operation_lvl + '.PlayerRequestOperation'), 1);",
              "                    AddDialogInject('MilitaryOperationWBDialog', '', CT('Script.Mod_ShuWarriors.MilitaryOperationWBDialog.OnLevel' + operation_lvl + '.PlayerRequestOperation'), 0, 0, 1);",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  26,
          "#":  29,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  27,
          "#":  30,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  32,
          "#":  34,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//ВБ в данный момент занята координацией атаки военных, собирающихся в заданной точке прыжка, перед нападением на систему",
              "//Стейт нужен, главным образом, для того, чтобы лочить заказ новых операций с данной ВБ до тех пор, пока уже заказанная операция не стартует",
              "///"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  33,
          "#":  35,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//ВБ занята подготовкой к прыжку в атакуемую систему, в этот момент на ней собираются все участвующие военные"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  37,
          "#":  38,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  39,
          "#":  40,
          "Total.Lines":  105,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Data0 == номер хода до начала движения военного к месту сбора (если >0) или маркер (-1), что данный военный является флагманом операции (ожидается, что это может быть только линкор или дредноут)",
              "//Data1 == Id системы сбора, в которую полетит данный военный перед тем, как получить приказ прыгать в атакуемую систему (если 0, значит, военный уже долетел, либо сбор назначен на ВБ)",
              "//Data2 == принимает 3 значения: 0 - лететь в скриптовое место GatheringPlace, < 0 - Id атакуемой системы, который обнулится, как только первый военный из группы долетит до системы сбора и выставит координаты точки сбора, > 0 - Id ВБ, на которой необходимо собраться и ждать приказов",
              "//Data3 == номер операции в массиве GlobalWBOperationsArray, к которой приписан данный военный",
              "",
              "dword object;",
              "dword cur_star = ShipStar(CurShip);",
              "",
              "if(ShipInHyperSpace(CurShip)) exit; //Не трогаем военного, пока тот находится в гипере",
              "if(GetData(1) > 0) exit; //Военный ещё \"не достроен\", так что скипаем всю его логику",
              "",
              "//Совершаем прыжок (ебаная нумерация систем начинается с 0)",
              "if(GetData(1))",
              "{",
              "    if(!ShipInNormalSpace(CurShip))",
              "    {",
              "        OrderTakeOff(CurShip);",
              "        exit;",
              "    }",
              "",
              "    object = GalaxyStar(GetData(1) - 1);",
              "    if(cur_star != object)",
              "    {",
              "        OrderJump(CurShip, object);",
              "    }",
              "    else //Военный добрался до указанной системы",
              "    {",
              "        SetData(0, 1);",
              "        //Если он добрался туда первый, то он же задаёт координаты точки прыжка всем остальным военным в своей группе",
              "        if(int(GetData(3)) != -1)",
              "        {",
              "            OrderJump(CurShip, GalaxyStar(GetData(3) - 1));",
              "",
              "            //Я бы мог записывать номер конкретной операции во все корабли группы заранее,",
              "            //однако в этом случае при удалении каких-либо операций из массива GlobalWBOperationsArray, заданная нумерация неизбежно изменится",
              "            int oper_num = GetData(3);",
              "            /*",
              "            for(int i = ArrayDim(GlobalWBOperationsArray) - 1; i >= 1; i = i - 1)",
              "            {",
              "                if(~FindObjectInArray(GlobalWBOperationsArray[i, 'AlliesForcesId'], Id(CurShip)))",
              "                {",
              "                    oper_num = i;",
              "                    break;",
              "                }",
              "            }",
              "            */",
              "",
              "            GlobalWBOperationsArray[oper_num, 'GatheringPointCoordX'] = ShipOrder(CurShip, 'X');",
              "            GlobalWBOperationsArray[oper_num, 'GatheringPointCoordY'] = ShipOrder(CurShip, 'Y');",
              "            GlobalWBOperationsArray[oper_num, 'GatheringPointRadius'] = 150;",
              "",
              "            for(i = ArrayDim(GlobalWBOperationsArray[oper_num, 'AlliesForcesId']) - 1; i >= 1; i = i - 1)",
              "            {",
              "                dword warrior = IdToShip(GlobalWBOperationsArray[oper_num, 'AlliesForcesId', i]);",
              "                SetData(0, 2, warrior); //Маркер движения в точку сбора в целевой системе",
              "                ShipFreeFlight(warrior); //На всякий случай, если кто-то из военных вышел из гипера одновременно с этим кораблём в той же системе",
              "            }",
              "",
              "            OrderMoveToGatherPoint(CurShip, oper_num);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "//Садимся на указанную ВБ, либо здесь просто временно висит Id атакуемой системы",
              "else if(GetData(2))",
              "{",
              "    if(int(GetData(2)) > 0)",
              "    {",
              "        object = IdToShip(GetData(2));",
              "        if(object)",
              "        {",
              "            if(GetShipRuins(CurShip) != object)",
              "            {",
              "                dword object_star = ShipStar(object);",
              "                if(object_star != cur_star)",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderJump(CurShip, object_star);",
              "                    exit;",
              "                }",
              "                else",
              "                {",
              "                    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "                    else OrderLanding(CurShip, object);",
              "                    exit;",
              "                }",
              "            }",
              "            else exit; //Наёмник долетел и совершил посадку на ВБ, теперь ожидаем от неё дальнейших команд",
              "        }",
              "        else //Целевую ВБ уничтожили, операция отменяется",
              "        {",
              "            ShipOut(CurShip);",
              "            exit;",
              "        }",
              "    }",
              "}",
              "else if(!GetData(2))",
              "{",
              "    //Летим в указанное скриптовое место (в точку сбора перед прыжком)",
              "    if(!ShipInNormalSpace(CurShip)) OrderTakeOff(CurShip);",
              "    else OrderMoveToGatherPoint(CurShip, GetData(3));",
              "    exit;",
              "}",
              "",
              "if(OrderNone(CurShip)) ShipFreeFlight(CurShip);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  0,
          "Parent":  41,
          "#":  42,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  44,
          "#":  45,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  46,
          "#":  47,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  49,
          "#":  50,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  48,
          "#":  51,
          "Total.Lines":  7,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + Format(CT(dialog_path + '.WBRequestOperation'),",
              "                              '<PlayerRank'+'>', player_str_rank,",
              "                              '<Sector'+'>', '<color=0,50,200>' + Name(StarToCon(ShipStar(cur_ruin))) + '</color>',",
              "                              '<MilitaryBase'+'>', '<color=0,50,200>' + ShipName(cur_ruin) + '</color>',",
              "                              '');",
              "tstr2 = '</color>' + CT(dialog_path + '.PlayerConfirmationYes');",
              "tstr3 = '</color>' + CT(dialog_path + '.PlayerConfirmationNo');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  61,
          "#":  64,
          "Total.Lines":  17,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(!operation_num)",
              "{",
              "    InitNewWBOperation(new_operation_arr, Id(cur_ruin), operation_lvl);",
              "    operation_num = -1; //Массив для новой операции создан, но пока ещё не занесён в общий массив операций",
              "}",
              "",
              "tstr1 = '</color>' + Format(CT(dialog_path + '.WBConfirmationYes'),",
              "                              '<PlayerRank'+'>', player_str_rank,",
              "                              '<StarToAttack'+'>', '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenStarNotChoosed') + '</color>',",
              "                              '<AlliesNumbers'+'>', '<color=255,0,0>0</color>',",
              "                              '<EnemyNumbers'+'>', '<color=0,50,200>0</color>',",
              "                              '<AttackDate'+'>', '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenDateNotChoosed') + '</color>',",
              "                              '<Cost'+'>', '<color=0,50,200>0</color>',",
              "                              '');",
              "tstr2 = '</color>' + CT(dialog_path + '.PlayerToPlanning');",
              "tstr3 = '</color>' + CT(dialog_path + '.PlayerBeginOperation');",
              "tstr4 = '</color>' + CT(dialog_path + '.PlayerCancelOperation');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  60,
          "#":  66,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + Format(CT(dialog_path + '.WBConfirmationNo'),",
              "                              '<PlayerRank'+'>', player_str_rank,",
              "                              '');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  74,
          "#":  75,
          "Total.Lines":  3,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + Format(CT(dialog_path + '.WBCancelOperation'),",
              "                              '<PlayerRank'+'>', player_str_rank,",
              "                              '');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  72,
          "#":  77,
          "Total.Lines":  73,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Запускаем подготовку к новой операции по запросу игрока",
              "ShipMoney(Player(), ShipMoney(Player()) - cost);",
              "Sound('Sound.Buy');",
              "",
              "cur_star = GalaxyStar(new_operation_arr['StarToAttackId'] - 1);",
              "",
              "tstr1 = '</color>' + Format(CT(dialog_path + '.WBBeginOperation'),",
              "                              '<PlayerRank'+'>', player_str_rank,",
              "                              '<AttackDate'+'>', '<color=0,50,200>' + GameDateTxtByTurn(new_operation_arr['AttackDate']) + '</color>',",
              "                              '<AttackStar'+'>', '<color=0,50,200>' + Name(cur_star) + '</color>',",
              "                              '');",
              "",
              "operation_num = ArrayAdd(GlobalWBOperationsArray, new_operation_arr);",
              "new_operation_arr = newarray(1);",
              "",
              "if(GlobalWBOperationsArray[operation_num, 'GatheringPlaceId'] > -1)",
              "{",
              "    tstr1 = CT(dialog_path + '.WBBeginOperation');",
              "",
              "    //Координаты и радиус точки сбора военных в системе, если для места сбора выбрана система, а не ВБ",
              "    ArrayAdd(new_operation_arr, 0, 'GatheringPointCoordX');",
              "    ArrayAdd(new_operation_arr, 0, 'GatheringPointCoordY');",
              "    ArrayAdd(new_operation_arr, 0, 'GatheringPointRadius');",
              "}",
              "else",
              "{",
              "    tstr1 = CT(dialog_path + '.WBBeginOperationWithWB');",
              "    GlobalWBOperationsArray[operation_num, 'GatheringPlaceId'] = -1; //Ранее тут была записана стоимость участия ВБ в операции с отрицательным знаком",
              "}",
              "",
              "for(i = ArrayDim(GlobalWBOperationsArray[operation_num, 'AlliesForcesId']) - 1; i >= 1; i = i - 1)",
              "{",
              "    cur_ship = IdToShip(GlobalWBOperationsArray[operation_num, 'AlliesForcesId', i]);",
              "    OrderLock(cur_ship, 1);",
              "    ShipJoinToScript('Mod_ShuWarriors.OperativeWarriors.WarriorsOnPrepare');",
              "    if(Id(cur_ship) == GlobalWBOperationsArray[operation_num, 'FlagmanId']) SetData(-1, 0, cur_ship); //Помечаем флагмана операции (игрок сможет взять его под личный контроль)",
              "    if(~GlobalWBOperationsArray[operation_num, 'GatheringPlaceId']) //Местом сбора выбрана система",
              "    {",
              "        SetData(GlobalWBOperationsArray[operation_num, 'GatheringPlaceId'], 1, cur_ship);",
              "        SetData(-GlobalWBOperationsArray[operation_num, 'StarToAttackId'], 2, cur_ship); //Маркер движения в точку сбора здесь выставит первый долетевший до системы сбора военный",
              "    }",
              "    else //Местом сбора выбрана ВБ",
              "    {",
              "        SetData(GlobalWBOperationsArray[operation_num, 'MilitaryBaseId'], 2, cur_ship);",
              "    }",
              "    SetData(operation_num, 3, cur_ship);",
              "",
              "    ShipFreeFlight(cur_ship); //Сразу же применяем выданные военному приказы",
              "}",
              "for(i = ArrayDim(GlobalWBOperationsArray[operation_num, 'ShipyardsInvolvedId']) - 1; i >= 1; i = i - 1)",
              "{",
              "    cur_planet = IdToPlanet(GlobalWBOperationsArray[operation_num, 'ShipyardsInvolvedId']);",
              "    cur_ship = BuyWarrior(cur_planet, 300);",
              "    ArrayAdd(GlobalWBOperationsArray[operation_num, 'AlliesForcesId'], Id(cur_ship));",
              "    ShipRefit(cur_ship);",
              "    ShipRefit(cur_ship);",
              "    ShipRefit(cur_ship);",
              "    ShipRefit(cur_ship);",
              "    ShipImproveItems(cur_ship, PlanetInventionLevel(cur_planet, 7) + RndObject(0, 2, cur_planet));",
              "    OrderLock(cur_ship, 1);",
              "    ShipJoinToScript('Mod_ShuWarriors.OperativeWarriors.WarriorsOnPrepare');",
              "    SetData(CurTurn() + RndObject(7, 14, cur_planet), 0, cur_ship); //Задержка до возможности взлёта с планеты только что построенного военного (типа доделывают корабль)",
              "    if(~GlobalWBOperationsArray[operation_num, 'GatheringPlaceId']) //Местом сбора выбрана система",
              "    {",
              "        SetData(GlobalWBOperationsArray[operation_num, 'GatheringPlaceId'], 1, cur_ship);",
              "        SetData(-GlobalWBOperationsArray[operation_num, 'StarToAttackId'], 2, cur_ship); //Маркер движения в точку сбора здесь выставит первый долетевший до системы сбора военный",
              "    }",
              "    else //Местом сбора выбрана ВБ",
              "    {",
              "        SetData(GlobalWBOperationsArray[operation_num, 'MilitaryBaseId'], 2, cur_ship);",
              "    }",
              "    SetData(operation_num, 3, cur_ship);",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  71,
          "#":  79,
          "Total.Lines":  106,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Здесь собирается текст для экрана планирования",
              "if(!new_operation_arr['StarToAttackId'])",
              "{",
              "    tstr1 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenStarNotChoosed') + '</color>';",
              "    tstr2 = '<color=255,0,0>0</color>';",
              "    tstr3 = '<color=0,50,200>0</color>';",
              "    tstr4 = '<color=0,50,200>0%</color> / <color=0,50,200>0%</color>';",
              "    tstr5 = '<color=0,50,200>' + CT(dialog_path + '.WBPlanningScreenFlagmanNotChoosed') + '</color>';",
              "    tstr6 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenGatherNotChoosed') + '</color>';",
              "    tstr7 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenDateNotChoosed') + '</color>';",
              "    tstr8 = Format('<br>') + '- <color=0,50,200>' + CT(dialog_path + '.WBPlanningScreenShipsNotChoosed') + '</color>';",
              "}",
              "else",
              "{",
              "    cur_star = GalaxyStar(new_operation_arr['StarToAttackId'] - 1);",
              "",
              "    tstr1 = '<color=0,50,200>' + Name(GalaxyStar(new_operation_arr['StarToAttackId'] - 1)) + '</color>';",
              "",
              "    //Число атакующих военных",
              "    tstr2 = '<clr>' + (coals_cnt + big_coals_cnt) + '</color>';",
              "    //Если игрок также заказал достройку военных на планетах",
              "    i = ArrayDim(new_operation_arr['ShipyardsInvolvedId']) - 1;",
              "    if(i) tstr2 = tstr2 + '+<clr>' + i + '</color>';",
              "",
              "    //Выписываем число врагов в атакуемой системе",
              "    tstr3 = '<color=0,50,200>' + enemies_cnt + '</color>';",
              "",
              "    //Сверяем соотношение сил между врагом в системе и атакующими военными в процентах",
              "    if(coals_power_percent >= min_coals_power_percent)",
              "    {",
              "        if(coals_power_percent >= round(0.75 * max_coals_power_percent)) tstr4 = '<color=0,132,15>' + min(coals_power_percent, 999) + '%</color> / <color=0,50,200>100%</color>'; //Оптимальное значение силы атакующих подсвечивается зелёным",
              "        else tstr4 = '<color=0,50,200>' + min(coals_power_percent, 999) + '%</color> / <color=0,50,200>100%</color>';",
              "    }",
              "    else",
              "    {",
              "        tstr2 = Format(tstr2, '<clr', '<color=255,0,0', '');",
              "        tstr4 = '<color=255,0,0>' + min(coals_power_percent, 999) + '%</color> / <color=0,50,200>100%</color>';",
              "    }",
              "",
              "    //Выводим название выбранного флагмана, если тот выбран",
              "    if(!new_operation_arr['FlagmanId']) tstr5 = '<color=0,50,200>' + CT(dialog_path + '.WBPlanningScreenFlagmanNotChoosed') + '</color>';",
              "    else",
              "    {",
              "        tstr5 = Name(IdToShip(new_operation_arr['FlagmanId']));",
              "        i = GetGameOptions('FontDialog');",
              "        if(i == 1) tstr5 = CutStrLenght(tstr5, 23);",
              "        else if(i == 2) tstr5 = CutStrLenght(tstr5, 22);",
              "        else if(i == 3) tstr5 = CutStrLenght(tstr5, 21);",
              "        tstr5 = '<color=0,50,200>' + tstr5 + '</color>';",
              "    }",
              "",
              "    //Выводим название выбранного места сбора военных перед прыжком в атакуемую систему",
              "    if(!new_operation_arr['GatheringPlaceId']) tstr6 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenGatherNotChoosed') + '</color>';",
              "    else",
              "    {",
              "        if(new_operation_arr['GatheringPlaceId'] > 0) tstr6 = '<color=0,50,200>' + Name(GalaxyStar(new_operation_arr['GatheringPlaceId'] - 1)) + '</color>';",
              "        else //Местом сбора выбрана текущая военная база",
              "        {",
              "            tstr6 = Name(cur_ruin);",
              "            i = GetGameOptions('FontDialog');",
              "            if(i == 1 && count(tstr6) > 20)",
              "            {",
              "                tstr6 = CT('Script.Mod_ShuWarriors.MilitaryBaseShort') + ' ' + ShortName(cur_ruin);",
              "                CutStrLenght(tstr6, 20);",
              "            }",
              "            else if(i == 2 && count(tstr6) > 19)",
              "            {",
              "                tstr6 = CT('Script.Mod_ShuWarriors.MilitaryBaseShort') + ' ' + ShortName(cur_ruin);",
              "                CutStrLenght(tstr6, 19);",
              "            }",
              "            else if(i == 3 && count(tstr6) > 18)",
              "            {",
              "                tstr6 = CT('Script.Mod_ShuWarriors.MilitaryBaseShort') + ' ' + ShortName(cur_ruin);",
              "                CutStrLenght(tstr6, 18);",
              "            }",
              "            tstr6 = '<color=0,50,200>' + tstr6 + '</color>';",
              "        }",
              "    }",
              "",
              "    //Выводим выбранную для атаки дату",
              "    if(!new_operation_arr['AttackDate']) tstr7 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenDateNotChoosed') + '</color>';",
              "    else tstr7 = '<color=0,50,200>' + GameDateTxtByTurn(new_operation_arr['AttackDate']) + '</color>';",
              "",
              "    //Выводим список названий всех военных кораблей (а также ВБ, если участвует), записанных в операцию",
              "    tstr8 = '';",
              "    if(!coals_cnt) tstr8 = Format('<br>') + '- <color=0,50,200>' + CT(dialog_path + '.WBPlanningScreenShipsNotChoosed') + '</color>';",
              "    else for(i = 1; i < ArrayDim(new_operation_arr['AlliesForcesId']); i = i + 1) tstr8 = tstr8 + Format('<br>') + '- <color=0,50,200>' + Name(IdToShip(new_operation_arr['AlliesForcesId', i])) + '</color>';",
              "    if(new_operation_arr['GatheringPlaceId'] < 0) tstr8 = tstr8 + Format('<br>') + '- <color=0,50,200>' + Name(cur_ruin) + '</color>';",
              "}",
              "",
              "if(cost <= ShipMoney(Player())) tstr9 = '<color=0,50,200>' + cost + '</color>';",
              "else tstr9 = '<color=255,0,0>' + cost + '</color>';",
              "",
              "tstr1 = '</color>' + Format(CT(dialog_path + '.WBPlanningScreen'),",
              "                              '<SplitLine'+'>', split_str,",
              "                              '<Indent'+'>', indent_str,",
              "                              '<StarToAttack'+'>', tstr1,",
              "                              '<AlliesNumbers'+'>', tstr2,",
              "                              '<EnemyNumbers'+'>', tstr3,",
              "                              '<ForcesRatio'+'>', tstr4,",
              "                              '<Flagman'+'>', tstr5,",
              "                              '<GatheringPlace'+'>', tstr6,",
              "                              '<AttackDate'+'>', tstr7,",
              "                              '<AttackShipsList'+'>', tstr8,",
              "                              '<Cost'+'>', tstr9,",
              "                              '');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  80,
          "#":  81,
          "Total.Lines":  50,
          "Code.Type":  "Turn",
          "Code":          
          [
              "if(check < 0) exit; //Для отсечения лишних ответов при выборе системы/кораблей",
              "",
              "//Здесь собираются ответы для экрана планирования",
              "int star_not_choosed = 1;",
              "if(new_operation_arr['StarToAttackId']) star_not_choosed = 0;",
              "",
              "//Выбор системы для атаки",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningChooseStar'), 1);",
              "",
              "//Выбор атакующих военных",
              "AddDialogBlock(CT(dialog_path + '.PlayerPlanningChooseAttackers'), star_not_choosed);",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningChooseAttackers'), 2);",
              "",
              "//Выбор флагмана (доступен только, если в составе атакующих имеется линкор или дредноут)",
              "check = 1;",
              "if(!star_not_choosed)",
              "{",
              "    if(big_coals_cnt) check = 0;",
              "}",
              "AddDialogBlock(CT(dialog_path + '.PlayerPlanningChooseFlagman'), check);",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningChooseFlagman'), 3);",
              "",
              "//Заказать постройку кораблей на коалиционных планетах сектора (возможно только если игроку не хватает сил для нападения даже после выбора всех доступных военных кораблей в секторе)",
              "check = 1;",
              "if(!star_not_choosed)",
              "{",
              "    //Достроить новые корабли можно, только если всех доступных для атаки сил в секторе не хватает",
              "    if(",
              "        (coals_power_percent < min_coals_power_percent && ArrayDim(new_operation_arr['AlliesForcesId']) - 1 >= ships_available) ||",
              "        ArrayDim(new_operation_arr['ShipyardsInvolvedId']) > 1",
              "      ) check = 0;",
              "}",
              "AddDialogBlock(CT(dialog_path + '.PlayerPlanningConstructionOrder'), check);",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningConstructionOrder'), 4);",
              "",
              "//Выбор места сбора военных перед атакой",
              "AddDialogBlock(CT(dialog_path + '.PlayerPlanningChooseGatheringPlace'), star_not_choosed);",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningChooseGatheringPlace'), 5);",
              "",
              "//Выбор точной даты атаки",
              "//Игрок может выбирать только из ограниченного диапазона и только после того, как все остальные обязательные условия для атаки будут выполнены",
              "if(star_not_choosed) check = 1;",
              "else if(!new_operation_arr['GatheringPlaceId']) check = 1;",
              "else if(coals_power_percent < min_coals_power_percent) check = 1;",
              "else check = 0;",
              "AddDialogBlock(CT(dialog_path + '.PlayerPlanningChooseAttackDate'), check);",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningChooseAttackDate'), 6);",
              "",
              "//Завершить планирование",
              "InjectAnswer('PlanScr', CT(dialog_path + '.PlayerPlanningDone'), 0);"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  25,
          "#":  87,
          "Total.Lines":  55,
          "Code.Type":  "Turn",
          "Code":          
          [
              "FindStarToAttack(cur_ruin, stars_to_attack_arr);",
              "ships_available = FindAllMilitaryShipsInSector(cur_sector, militaries_arr, 1);",
              "",
              "if(ArrayDim(stars_to_attack_arr) > 1 && ArrayDim(militaries_arr['Warriors']) > 1)",
              "{",
              "    //Установка длины \"дефисного разделителя\" и отступа в зависимости от выбранного в игре размера шрифта",
              "    i = GetGameOptions('FontDialog');",
              "    if(!i)",
              "    {",
              "        split_str = '</color>-----------------------------------------------------------';",
              "        indent_str = CT('FormInfo.td_310') + CT('FormInfo.align_right');",
              "    }",
              "    else if(i == 1)",
              "    {",
              "        split_str = '</color>------------------------------------------';",
              "        indent_str = CT('FormInfo.td_312') + CT('FormInfo.align_right');",
              "    }",
              "    else if(i == 2)",
              "    {",
              "        split_str = '</color>-------------------------------------------';",
              "        indent_str = CT('FormInfo.td_324') + CT('FormInfo.align_right');",
              "    }",
              "    else //if(i == 3)",
              "    {",
              "        split_str = '</color>--------------------------------------';",
              "        indent_str = CT('FormInfo.td_325') + CT('FormInfo.align_right');",
              "    }",
              "",
              "    coals_cnt = ArrayDim(militaries_arr['Warriors']) - 1;",
              "    coals_power = 0;",
              "    for(i = coals_cnt; i >= 1; i = i - 1) coals_power = coals_power + GetShipAverageStrength(militaries_arr['Warriors', i]);",
              "    average_warrior_power = coals_power / coals_cnt; //Запоминаем среднюю силу для расчёта примерной сила при заказе достройки военных на планетах сектора",
              "    coals_cnt = 0;",
              "    coals_power = 0;",
              "}",
              "//Если вдруг атаковать нечего",
              "else if(ArrayDim(stars_to_attack_arr) > 1)",
              "{",
              "    tstr1 = '</color>' + Format(CT(dialog_path + '.WBRequestOperationNoTargetStars'),",
              "                                  '<PlayerRank'+'>', player_str_rank,",
              "                                  '<Sector'+'>', Name(cur_sector),",
              "                                  '');",
              "    tstr2 = '</color>' + CT(dialog_path + '.PlayerRequestOperationNoTargetStars');",
              "    operation_lvl = -1;",
              "}",
              "//Если вдруг атаковать некем (в секторе не нашлось ни одного простого военного)",
              "else //if(ArrayDim(militaries_arr['Warriors']) > 1)",
              "{",
              "    tstr1 = '</color>' + Format(CT(dialog_path + '.WBRequestOperationNoTargetStars'),",
              "                                  '<PlayerRank'+'>', player_str_rank,",
              "                                  '<Sector'+'>', Name(cur_sector),",
              "                                  '');",
              "    tstr2 = '</color>' + CT(dialog_path + '.PlayerRequestOperationNoTargetStars');",
              "    operation_lvl = -1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  82,
          "#":  95,
          "Total.Lines":  286,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Выбор системы для атаки",
              "if(GAnswerData == 1)",
              "{",
              "    check = -1; //Маркер для диалога с выбором",
              "",
              "    for(i = 1; i < min(ArrayDim(stars_to_attack_arr), stars_cnt_to_choose + 1); i = i + 1) //До N ближайших систем на выбор (зависит от уровня вовлечённости игрока)",
              "    {",
              "        cur_star = stars_to_attack_arr[i];",
              "        if(Id(cur_star) != new_operation_arr['StarToAttackId']) tstr1 = Format(CT(dialog_path + '.PlayerPlanningChooseStarToAttack'), '<Star'+'>', Name(cur_star), '');",
              "        else tstr1 = Format(CT(dialog_path + '.PlayerPlanningChooseStarToAttack'), '<Star'+'>', '<color=0,50,200>' + Name(cur_star) + '</color>', ''); //Пометка для уже выбранной системы",
              "",
              "        if(StarOwner(cur_star) == 1)",
              "        {",
              "            tstr2 = StarCustomFaction(cur_star);",
              "            if(tstr2 == '')",
              "            {",
              "                if(StarSeries(cur_star) == 0) tstr1 = tstr1 + ' (<color=255,0,0>' + lowercase(CT('FormInfo.Blazeroids')) + '</color>)';",
              "                else if(StarSeries(cur_star) == 1) tstr1 = tstr1 + ' (<color=0,165,200>' + lowercase(CT('FormInfo.Kelleroids')) + '</color>)';",
              "                else if(StarSeries(cur_star) == 2) tstr1 = tstr1 + ' (<color=61,175,0>' + lowercase(CT('FormInfo.Terronoids')) + '</color>)';",
              "            }",
              "            else if(tstr2 == 'Klissan') tstr1 = tstr1 + ' (<color=93,155,93>' + lowercase(CT('FormGameSet2.Common.LevelGroupKlissan')) + '</color>)';",
              "        }",
              "        else if(StarOwner(cur_star) == 2) tstr1 = tstr1 + ' (<color=235,235,235>' + lowercase(CT('FormGameSet2.Common.LevelGroup1')) + '</color>)';",
              "",
              "        if(!SectorVisible(StarToCon(cur_star))) //Нельзя выбрать систему в закрытом секторе",
              "        {",
              "            tstr1 = DeleteTags(tstr1);",
              "            AddDialogBlock(tstr1, 1);",
              "        }",
              "        else AddDialogBlock(tstr1, 0);",
              "        InjectAnswer('PlanScrChoose', tstr1, cur_star);",
              "    }",
              "",
              "    //Назад",
              "    InjectAnswer('PlanScrChoose', CT(dialog_path + '.PlayerPlanningChooseBack'), 0);",
              "}",
              "//Выбор атакующих военных (доступных кораблей из списка)",
              "else if(GAnswerData == 2)",
              "{",
              "    check = -2; //Маркер для диалога с выбором",
              "",
              "    //Простые военные",
              "    for(i = 1; i < ArrayDim(militaries_arr['Warriors']); i = i + 1)",
              "    {",
              "        cur_ship = militaries_arr['Warriors', i];",
              "        if(FindObjectInArray(new_operation_arr['AlliesForcesId'], Id(cur_ship)) == -1)",
              "        {",
              "            if(coals_power_percent >= max_coals_power_percent) j = 1;",
              "            else j = 0;",
              "            tstr1 = Name(cur_ship);",
              "        }",
              "        else",
              "        {",
              "            j = 0;",
              "            tstr1 = '<color=0,50,200>' + Name(cur_ship) + '</color>'; //Пометка для уже выбранного корабля",
              "        }",
              "",
              "        AddDialogBlock(tstr1, j);",
              "        InjectAnswer('PlanScrChoose', 'snap~' + tstr1, '1' + i);",
              "    }",
              "    //Линкоры (если есть)",
              "    for(i = 1; i < ArrayDim(militaries_arr['Battleships']); i = i + 1)",
              "    {",
              "        cur_ship = militaries_arr['Battleships', i];",
              "        if(FindObjectInArray(new_operation_arr['AlliesForcesId'], Id(cur_ship)) == -1)",
              "        {",
              "            if(coals_power_percent >= max_coals_power_percent) j = 1;",
              "            else j = 0;",
              "            tstr1 = Name(cur_ship);",
              "        }",
              "        else",
              "        {",
              "            j = 0;",
              "            tstr1 = '<color=0,50,200>' + Name(cur_ship) + '</color>'; //Пометка для уже выбранного корабля",
              "        }",
              "",
              "        AddDialogBlock(tstr1, j);",
              "        InjectAnswer('PlanScrChoose', 'snap~' + tstr1, '2' + i);",
              "    }",
              "    //Дредноуты (если есть)",
              "    for(i = 1; i < ArrayDim(militaries_arr['Dreadnoughts']); i = i + 1)",
              "    {",
              "        cur_ship = militaries_arr['Dreadnoughts', i];",
              "        if(FindObjectInArray(new_operation_arr['AlliesForcesId'], Id(cur_ship)) == -1)",
              "        {",
              "            if(coals_power_percent >= max_coals_power_percent) j = 1;",
              "            else j = 0;",
              "            tstr1 = Name(cur_ship);",
              "        }",
              "        else",
              "        {",
              "            j = 0;",
              "            tstr1 = '<color=0,50,200>' + Name(cur_ship) + '</color>'; //Пометка для уже выбранного корабля",
              "        }",
              "",
              "        AddDialogBlock(tstr1, j);",
              "        InjectAnswer('PlanScrChoose', 'snap~' + tstr1, '3' + i);",
              "    }",
              "",
              "    //Выбрать всех",
              "    tstr1 = CT(dialog_path + '.PlayerPlanningChooseAttackersAddAll');",
              "    if(coals_power_percent >= max_coals_power_percent) j = 1;",
              "    else j = 0;",
              "    AddDialogBlock(tstr1, j);",
              "    InjectAnswer('PlanScrChoose', 'snap~' + tstr1, -1);",
              "    //Отменить всех",
              "    tstr1 = CT(dialog_path + '.PlayerPlanningChooseAttackersRemoveAll');",
              "    if(ArrayDim(new_operation_arr['AlliesForcesId']) > 1) j = 0;",
              "    else j = 1;",
              "    AddDialogBlock(tstr1, j);",
              "    InjectAnswer('PlanScrChoose', 'snap~' + tstr1, -2);",
              "    //Назад",
              "    InjectAnswer('PlanScrChoose', CT(dialog_path + '.PlayerPlanningChooseBack'), 0);",
              "}",
              "//Выбор флагмана (доступен только, если в составе атакующих имеется линкор или дредноут)",
              "else if(GAnswerData == 3)",
              "{",
              "    check = -3; //Маркер для диалога с выбором",
              "",
              "    for(i = 1; i < ArrayDim(new_operation_arr['AlliesForcesId']); i = i + 1)",
              "    {",
              "        cur_ship = IdToShip(new_operation_arr['AlliesForcesId', i]);",
              "        if(!ShipSubType(cur_ship)) continue; //Флагманом могут быть назначены линкоры и дредноуты",
              "",
              "        if(Id(cur_ship) != new_operation_arr['FlagmanId']) tstr1 = Name(cur_ship);",
              "        else tstr1 = '<color=0,50,200>' + Name(cur_ship) + '</color>'; //Пометка для уже выбранного флагмана",
              "",
              "        InjectAnswer('PlanScrChoose', tstr1, cur_ship);",
              "    }",
              "",
              "    //Отменить выбор",
              "    tstr1 = CT(dialog_path + '.PlayerPlanningChooseRemoveFlagman');",
              "    if(!new_operation_arr['FlagmanId']) j = 1;",
              "    else j = 0;",
              "    AddDialogBlock(tstr1, j);",
              "    InjectAnswer('PlanScrChoose', tstr1, -1);",
              "    //Назад",
              "    InjectAnswer('PlanScrChoose', CT(dialog_path + '.PlayerPlanningChooseBack'), 0);",
              "}",
              "//Заказать постройку кораблей на коалиционных планетах сектора (возможно только если игроку не хватает сил для нападения даже после выбора всех доступных военных кораблей в секторе)",
              "else if(GAnswerData == 4)",
              "{",
              "    check = -4; //Маркер для диалога с выбором",
              "",
              "    for(i = 0; i < ConStars(cur_sector); i = i + 1)",
              "    {",
              "        cur_star = ConStar(cur_sector, i);",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        if(cur_star == PlanetToStar(PlanetPirateClan())) continue;",
              "",
              "        for(j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "        {",
              "            cur_planet = StarPlanets(cur_star, j);",
              "            if(PlanetOwner(cur_planet) == None) continue;",
              "",
              "            tstr1 = Format(CT(dialog_path + '.PlayerPlanningConstructionOrderPlanet'), '<Planet'+'>', PlanetName(cur_planet));",
              "            if(~FindObjectInArray(new_operation_arr['ShipyardsInvolvedId'], Id(cur_planet))) tstr1 = tstr1 + ' ' + CT(dialog_path + '.PlayerPlanningConstructionOrderPlanetSet');",
              "            //Использовать верфи допускается только в случае острой нехватки кораблей для атаки",
              "            else if(coals_power_percent >= min_coals_power_percent)",
              "            {",
              "                tstr1 = DeleteTags(tstr1);",
              "                AddDialogBlock(tstr1, 1);",
              "            }",
              "",
              "            InjectAnswer('PlanScrChoose', 'snap~' + tstr1, cur_planet);",
              "        }",
              "    }",
              "",
              "    //Задействовать все",
              "    tstr1 = CT(dialog_path + '.PlayerPlanningChooseConstructionOrderAddAll');",
              "    if(coals_power_percent >= min_coals_power_percent) j = 1;",
              "    else j = 0;",
              "    AddDialogBlock(tstr1, j);",
              "    InjectAnswer('PlanScrChoose', 'snap~' + tstr1, -1);",
              "    //Остановить все",
              "    tstr1 = CT(dialog_path + '.PlayerPlanningChooseConstructionOrderRemoveAll');",
              "    if(ArrayDim(new_operation_arr['ShipyardsInvolvedId']) > 1) j = 0;",
              "    else j = 1;",
              "    AddDialogBlock(tstr1, j);",
              "    InjectAnswer('PlanScrChoose', 'snap~' + tstr1, -2);",
              "    //Назад",
              "    InjectAnswer('PlanScrChoose', CT(dialog_path + '.PlayerPlanningChooseBack'), 0);",
              "}",
              "//Выбор места сбора военных перед атакой",
              "else if(GAnswerData == 5)",
              "{",
              "    check = -5; //Маркер для диалога с выбором",
              "",
              "    tint1 = 5;",
              "    dword pirate_sector = StarToCon(PlanetToStar(PlanetPirateClan()));",
              "    dword attack_star = GalaxyStar(new_operation_arr['StarToAttackId'] - 1);",
              "    for(i = 1; i < GalaxyStars(attack_star); i = i + 1)",
              "    {",
              "        cur_star = StarNearbyStars(attack_star, i);",
              "        if(StarOwner(cur_star)) continue;",
              "        if(StarCustomFaction(cur_star) != '') continue;",
              "        if(StarToCon(cur_star) == pirate_sector) continue;",
              "",
              "        if(Id(cur_star) != new_operation_arr['GatheringPlaceId']) tstr1 = Name(cur_star);",
              "        else tstr1 = '<color=0,50,200>' + Name(cur_star) + '</color>'; //Пометка для уже выбранной системы",
              "",
              "        //Нельзя выбрать систему в закрытом секторе или атакованную в настоящий момент",
              "        j = 0;",
              "        if(!SectorVisible(StarToCon(cur_star)) || StarBattle(cur_star))",
              "        {",
              "            tstr1 = DeleteTags(tstr1);",
              "            if(StarBattle(cur_star)) tstr1 = tstr1 + ' ' + CT(dialog_path + '.PlayerPlanningChooseStarUnderAttack');",
              "            j = 1;",
              "        }",
              "",
              "        AddDialogBlock(tstr1, j);",
              "        InjectAnswer('PlanScrChoose', tstr1, cur_star);",
              "",
              "        tint1 = tint1 - 1;",
              "        if(!tint1) break;",
              "    }",
              "",
              "    //Добавляем возможность выбора в качестве точки сбора текущей ВБ (маркер -1)",
              "    if(new_operation_arr['GatheringPlaceId'] > -1)",
              "    {",
              "        tstr1 = Name(cur_ruin);",
              "        //Для выбора ВБ местом сбора необходимо иметь не менее 5 военных в атакующей группе",
              "        if(ArrayDim(new_operation_arr['AlliesForcesId']) < (min_warriors_to_add_WB + 1))",
              "        {",
              "            tstr1 = tstr1 + ' ' + CT(dialog_path + '.PlayerPlanningChooseGatheringPlaceNotEnoughShips');",
              "            AddDialogBlock(tstr1, 1);",
              "        }",
              "    }",
              "    else tstr1 = '<color=0,50,200>' + Name(cur_ruin) + '</color>';",
              "    InjectAnswer('PlanScrChoose', tstr1, -1);",
              "    //Назад",
              "    InjectAnswer('PlanScrChoose', CT(dialog_path + '.PlayerPlanningChooseBack'), 0);",
              "}",
              "//Выбор точной даты атаки (игрок может выбирать только из ограниченного диапазона)",
              "else if(GAnswerData == 6)",
              "{",
              "    int min_time = 30;",
              "    if(ArrayDim(new_operation_arr['ShipyardsInvolvedId']) > 1) min_time = min_time + 15;",
              "    int max_time = CurTurn() + (min_time * 3);",
              "    min_time = CurTurn() + min_time;",
              "    ArrayClear(tarr1);",
              "    ArrayDelete(tarr1, 0);",
              "    for(i = min_time; i <= max_time; i = i + 1) ArrayAdd(tarr1, GameDateTxtByTurn(i));",
              "    new_operation_arr['AttackDate'] = NumberBox('Bm.Icons.DateCalendar', CT(dialog_path + '.PlayerPlanningChooseAttackDateChoose'), min_time, max_time, max_time, '', min_time, tarr1);",
              "",
              "    check = 6;",
              "}",
              "//Завершение планирования",
              "else",
              "{",
              "    if(new_operation_arr['StarToAttackId']) tstr5 = '<color=0,50,200>' + Name(GalaxyStar(new_operation_arr['StarToAttackId'] - 1)) + '</color>';",
              "    else tstr5 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenStarNotChoosed') + '</color>';",
              "",
              "    //Записываем счётчик вовлечённых в атаку военных",
              "    tstr6 = '<clr>' + (coals_cnt + big_coals_cnt) + '</color>';",
              "    i = ArrayDim(new_operation_arr['ShipyardsInvolvedId']) - 1; //Если игрок также заказал достройку военных на планетах",
              "    if(i) tstr6 = tstr6 + '+<clr>' + i + '</color>';",
              "    //Сверяем соотношение сил между врагом в системе и атакующими военными в процентах",
              "    if(coals_power_percent < min_coals_power_percent) tstr6 = Format(tstr6, '<clr', '<color=255,0,0', '');",
              "",
              "    //Записываем счётчик врагов в атакуемой системе",
              "    if(new_operation_arr['StarToAttackId']) tstr7 = '<color=0,50,200>' + enemies_cnt + '</color>';",
              "    else tstr7 = '<color=0,50,200>0</color>';",
              "",
              "    if(new_operation_arr['AttackDate']) tstr8 = '<color=0,50,200>' + GameDateTxtByTurn(new_operation_arr['AttackDate']) + '</color>';",
              "    else tstr8 = '<color=255,0,0>' + CT(dialog_path + '.WBPlanningScreenDateNotChoosed') + '</color>';",
              "",
              "    if(cost <= ShipMoney(Player())) tstr9 = '<color=0,50,200>' + cost + '</color>';",
              "    else tstr9 = '<color=255,0,0>' + cost + '</color>';",
              "",
              "    //Собираем готовую реплику",
              "    tstr1 = '</color>' + Format(CT(dialog_path + '.WBAfterPlanning'),",
              "                                  '<PlayerRank'+'>', player_str_rank,",
              "                                  '<StarToAttack'+'>', tstr5,",
              "                                  '<AlliesNumbers'+'>', tstr6,",
              "                                  '<EnemyNumbers'+'>', tstr7,",
              "                                  '<AttackDate'+'>', tstr8,",
              "                                  '<Cost'+'>', tstr9,",
              "                                  '');",
              "    tstr2 = '</color>' + CT(dialog_path + '.PlayerToPlanning');",
              "    tstr3 = '</color>' + CT(dialog_path + '.PlayerBeginOperation');",
              "    tstr4 = '</color>' + CT(dialog_path + '.PlayerCancelOperation');",
              "",
              "    check = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  100,
          "#":  101,
          "Total.Lines":  258,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Выбор или перевыбор системы обнуляет всю ранее заданную информацию",
              "if(check == -1)",
              "{",
              "    if(GAnswerData) //Если игрок не закрыл экран выбора системы",
              "    {",
              "        if(Id(GAnswerData) != new_operation_arr['StarToAttackId'])",
              "        {",
              "            new_operation_arr['StarToAttackId'] = Id(GAnswerData);",
              "            ArrayClear(new_operation_arr['AlliesForcesId']);",
              "            ArrayClear(new_operation_arr['ShipyardsInvolvedId']);",
              "            new_operation_arr['FlagmanId'] = 0;",
              "            new_operation_arr['GatheringPlaceId'] = 0;",
              "            new_operation_arr['AttackDate'] = 0;",
              "",
              "            coals_cnt = 0;",
              "            big_coals_cnt = 0;",
              "            coals_power = 0;",
              "            coals_power_percent = 0;",
              "            enemies_cnt = 0;",
              "            enemies_power = 0;",
              "            cost = 0;",
              "        }",
              "    }",
              "",
              "    check = 0; //Чтобы больше не блокировать основные ответы экрана планирования после завершения выбора системы/кораблей",
              "}",
              "//Добавление/исключение военных в атакующую группу",
              "else if(check == -2)",
              "{",
              "    if(GAnswerData) //Если игрок не закрыл экран выбора военных",
              "    {",
              "        if(int(GAnswerData) == -1) //Игрок выбрал вариант \"Выбрать всех\"",
              "        {",
              "            j = ArrayDim(militaries_arr['Warriors']);",
              "            for(i = 1; i < j; i = i + 1)",
              "            {",
              "                cur_ship = militaries_arr['Warriors', i];",
              "                if(~FindObjectInArray(new_operation_arr['AlliesForcesId'], Id(cur_ship))) continue;",
              "",
              "                ArrayAdd(new_operation_arr['AlliesForcesId'], Id(cur_ship));",
              "                cost = cost + militaries_arr['WarriorsHireCost', i];",
              "                UpdateSidePowers();",
              "                if(coals_power_percent >= max_coals_power_percent)",
              "                {",
              "                    j = -1;",
              "                    break;",
              "                }",
              "            }",
              "            if(~j)",
              "            {",
              "                j = ArrayDim(militaries_arr['Battleships']);",
              "                for(i = 1; i < j; i = i + 1)",
              "                {",
              "                    cur_ship = militaries_arr['Battleships', i];",
              "                    if(~FindObjectInArray(new_operation_arr['AlliesForcesId'], Id(cur_ship))) continue;",
              "",
              "                    ArrayAdd(new_operation_arr['AlliesForcesId'], Id(cur_ship));",
              "                    cost = cost + militaries_arr['BattleshipsHireCost', i];",
              "                    UpdateSidePowers();",
              "                    if(coals_power_percent >= max_coals_power_percent)",
              "                    {",
              "                        j = -1;",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "            if(~j)",
              "            {",
              "                j = ArrayDim(militaries_arr['Dreadnoughts']);",
              "                for(i = 1; i < j; i = i + 1)",
              "                {",
              "                    cur_ship = militaries_arr['Dreadnoughts', i];",
              "                    if(~FindObjectInArray(new_operation_arr['AlliesForcesId'], Id(cur_ship))) continue;",
              "",
              "                    ArrayAdd(new_operation_arr['AlliesForcesId'], Id(cur_ship));",
              "                    cost = cost + militaries_arr['DreadnoughtsHireCost', i];",
              "                    UpdateSidePowers();",
              "                    if(coals_power_percent >= max_coals_power_percent)",
              "                    {",
              "                        j = -1;",
              "                        break;",
              "                    }",
              "                }",
              "            }",
              "        }",
              "        else if(int(GAnswerData) == -2) //Игрок выбрал вариант \"Отменить всех\"",
              "        {",
              "            ArrayClear(new_operation_arr['AlliesForcesId']);",
              "            ArrayClear(new_operation_arr['ShipyardsInvolvedId']);",
              "            new_operation_arr['FlagmanId'] = 0;",
              "            new_operation_arr['AttackDate'] = 0;",
              "            coals_cnt = 0;",
              "            big_coals_cnt = 0;",
              "            coals_power = 0;",
              "            coals_power_percent = 0;",
              "",
              "            //Если военных в атакующей группе стало недостаточно для использования ВБ в качестве места сбора",
              "            if(new_operation_arr['GatheringPlaceId'] < 0)",
              "            {",
              "                if(ArrayDim(new_operation_arr['AlliesForcesId']) < (min_warriors_to_add_WB + 1))",
              "                {",
              "                    cost = cost + new_operation_arr['GatheringPlaceId'];",
              "                    new_operation_arr['GatheringPlaceId'] = 0;",
              "                }",
              "            }",
              "",
              "            cost = 0;",
              "        }",
              "        else",
              "        {",
              "            if(substr(GAnswerData, 0, 1) == 1) str section = 'Warriors';",
              "            else if(substr(GAnswerData, 0, 1) == 2) section = 'Battleships';",
              "            else /*if(substr(GAnswerData, 0, 1) == 3)*/ section = 'Dreadnoughts';",
              "            int num = substr(GAnswerData, 1);",
              "            cur_ship = Id(militaries_arr[section, num]);",
              "",
              "            //Военный ещё не добавлен в группу - добавляем",
              "            int inner_num = FindObjectInArray(new_operation_arr['AlliesForcesId'], cur_ship);",
              "            if(inner_num == -1)",
              "            {",
              "                ArrayAdd(new_operation_arr['AlliesForcesId'], cur_ship);",
              "                cost = cost + militaries_arr[section + 'HireCost', num];",
              "            }",
              "            //Военный уже в группе - исключаем",
              "            else",
              "            {",
              "                ArrayDelete(new_operation_arr['AlliesForcesId'], inner_num);",
              "                cost = cost - new_operation_arr['ShipyardsInvolvedId', 0];",
              "                ArrayClear(new_operation_arr['ShipyardsInvolvedId']);",
              "                if(cur_ship == new_operation_arr['FlagmanId']) new_operation_arr['FlagmanId'] = 0;",
              "                cost = cost - militaries_arr[section + 'HireCost', num];",
              "",
              "                //Если военных в атакующей группе стало недостаточно для использования ВБ в качестве места сбора",
              "                if(new_operation_arr['GatheringPlaceId'] < 0)",
              "                {",
              "                    if(ArrayDim(new_operation_arr['AlliesForcesId']) < (min_warriors_to_add_WB + 1))",
              "                    {",
              "                        cost = cost + new_operation_arr['GatheringPlaceId'];",
              "                        new_operation_arr['GatheringPlaceId'] = 0;",
              "                    }",
              "                }",
              "            }",
              "",
              "            UpdateSidePowers();",
              "            if(coals_power_percent < min_coals_power_percent) new_operation_arr['AttackDate'] = 0;",
              "        }",
              "",
              "        GAnswerData = 2;",
              "    }",
              "    else check = 0; //Снимаем блокировку",
              "}",
              "//Выбор флагмана",
              "else if(check == -3)",
              "{",
              "    //Если игрок не закрыл экран выбора флагмана",
              "    if(GAnswerData == -1) new_operation_arr['FlagmanId'] = 0;",
              "    else if(GAnswerData) new_operation_arr['FlagmanId'] = Id(GAnswerData);",
              "",
              "    check = 0; //Снимаем блокировку",
              "}",
              "//Заказ постройки новых кораблей на коалиционных планетах сектора (возможен только если игроку не хватает сил для нападения даже после выбора всех доступных военных кораблей в секторе)",
              "else if(check == -4)",
              "{",
              "    if(GAnswerData)",
              "    {",
              "        if(GAnswerData == -1) //Игрок выбрал вариант \"Задействовать все\"",
              "        {",
              "            for(i = 0; i < ConStars(cur_sector); i = i + 1)",
              "            {",
              "                cur_star = ConStar(cur_sector, i);",
              "                if(StarOwner(cur_star)) continue;",
              "                if(StarCustomFaction(cur_star) != '') continue;",
              "                if(cur_star == PlanetToStar(PlanetPirateClan())) continue;",
              "",
              "                for(j = 0; j < StarPlanets(cur_star); j = j + 1)",
              "                {",
              "                    cur_planet = StarPlanets(cur_star, j);",
              "                    if(PlanetOwner(cur_planet) == None) continue;",
              "                    if(~FindObjectInArray(new_operation_arr['ShipyardsInvolvedId'], Id(cur_planet))) continue;",
              "",
              "                    ArrayAdd(new_operation_arr['ShipyardsInvolvedId'], Id(cur_planet));",
              "                    //Считаем цену постройки военного на данной планете (чем более продвинута планета по ГТУ, тем дороже обойдётся постройка)",
              "                    tint1 = CalcBuildWarriorStats(cur_planet, 0);",
              "",
              "                    new_operation_arr['ShipyardsInvolvedId', 0] = tint1 + new_operation_arr['ShipyardsInvolvedId', 0];",
              "                    cost = cost + tint1;",
              "                    UpdateSidePowers();",
              "                    if(coals_power_percent >= min_coals_power_percent) break;",
              "                }",
              "            }",
              "        }",
              "        else if(GAnswerData == -2) //Игрок выбрал вариант \"Отменить все\"",
              "        {",
              "            cost = cost - new_operation_arr['ShipyardsInvolvedId', 0];",
              "            ArrayClear(new_operation_arr['ShipyardsInvolvedId']);",
              "            UpdateSidePowers();",
              "        }",
              "        else //Игрок выбрал из списка конкретную планету",
              "        {",
              "            cur_planet = GAnswerData;",
              "",
              "            //Считаем цену постройки военного на данной планете (чем более продвинута планета по ГТУ, тем дороже обойдётся постройка)",
              "            tint1 = CalcBuildWarriorStats(cur_planet, 0);",
              "",
              "            j = FindObjectInArray(new_operation_arr['ShipyardsInvolvedId'], Id(cur_planet));",
              "            if(j == -1) //Планеты ещё нет в списке, добавляем",
              "            {",
              "                ArrayAdd(new_operation_arr['ShipyardsInvolvedId'], Id(cur_planet));",
              "                new_operation_arr['ShipyardsInvolvedId', 0] = tint1 + new_operation_arr['ShipyardsInvolvedId', 0];",
              "                cost = cost + tint1;",
              "            }",
              "            else //Планета уже добавлена в список, удаляем",
              "            {",
              "                ArrayDelete(new_operation_arr['ShipyardsInvolvedId'], j);",
              "                new_operation_arr['ShipyardsInvolvedId', 0] = new_operation_arr['ShipyardsInvolvedId', 0] - tint1;",
              "                cost = cost - tint1;",
              "            }",
              "",
              "            UpdateSidePowers();",
              "        }",
              "",
              "        GAnswerData = 4;",
              "    }",
              "    else check = 0; //Снимаем блокировку",
              "}",
              "//Выбор места сбора перед атакой",
              "else if(check == -5)",
              "{",
              "    //Если игрок не закрыл экран выбора места сбора",
              "    if(~int(GAnswerData)) //В качестве места сбора была выбрана система",
              "    {",
              "        if(new_operation_arr['GatheringPlaceId'] != GAnswerData)",
              "        {",
              "            if(new_operation_arr['GatheringPlaceId'] < 0) //Если ранее была выбрана военная база",
              "            {",
              "                cost = cost + new_operation_arr['GatheringPlaceId'];",
              "",
              "                new_operation_arr['GatheringPlaceId'] = Id(GAnswerData);",
              "                UpdateSidePowers();",
              "            }",
              "            else new_operation_arr['GatheringPlaceId'] = Id(GAnswerData);",
              "        }",
              "    }",
              "    else //В качестве места сбора была выбрана текущая ВБ",
              "    {",
              "        if(new_operation_arr['GatheringPlaceId'] > -1) //Если военная база не была выбрана ранее",
              "        {",
              "            float coef = PortionInDiapason(GetShipBestStrength(cur_ruin), 1.0, 1000.0, 3.75, 12.5);",
              "            i = round(coef * GalaxyMoney(2, ShipPilotRace(cur_ruin)) * 7.5);",
              "            cost = cost + i;",
              "",
              "            new_operation_arr['GatheringPlaceId'] = -i;",
              "            UpdateSidePowers();",
              "        }",
              "    }",
              "",
              "    check = 0; //Снимаем блокировку",
              "}"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  3,
          "#":  4,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  300,
          "Pos.y":  270,
          "Parent":  -1,
          "#":  5,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  5,
          "#":  3,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  30,
          "Parent":  87,
          "#":  26,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "operation_lvl == 2"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  87,
          "#":  27,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "operation_lvl == 3"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  70,
          "Pos.y":  30,
          "Parent":  87,
          "#":  28,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "operation_lvl == 4"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  30,
          "Parent":  87,
          "#":  44,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "operation_lvl == 1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  30,
          "Parent":  87,
          "#":  46,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!operation_lvl"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  28,
          "#":  48,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!on_prepare"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  28,
          "#":  49,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "on_prepare"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  10,
          "Pos.y":  20,
          "Parent":  52,
          "#":  58,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -10,
          "Pos.y":  20,
          "Parent":  52,
          "#":  59,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -40,
          "Pos.y":  20,
          "Parent":  65,
          "#":  67,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  65,
          "#":  68,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "new_operation_arr['AttackDate'] && ShipMoney(Player()) >= cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  65,
          "#":  69,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  65,
          "#":  70,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!new_operation_arr['AttackDate'] || ShipMoney(Player()) < cost"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  95,
          "#":  83,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  40,
          "Parent":  95,
          "#":  84,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  60,
          "Parent":  101,
          "#":  102,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  62,
          "#":  104,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  120,
          "Pos.y":  30,
          "Parent":  87,
          "#":  106,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "operation_lvl == -1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  520,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  112,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  100,
          "Parent":  104,
          "#":  122,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  78,
          "#":  123,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerGroup",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  6,
          "#":  7,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "WBOnCoordination",
          "Pos.x":  -130,
          "Pos.y":  0,
          "Parent":  31,
          "#":  32,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "WBOnPrepare",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  32,
          "#":  33,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "WBOnAttack",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  33,
          "#":  37,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "WarriorsOnPrepare",
          "Pos.x":  -130,
          "Pos.y":  0,
          "Parent":  36,
          "#":  39,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        },
        {
          "Type":  "TState",
          "Name":  "WarriorsOnAttack",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  39,
          "#":  41,
          "Move":  5,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  60,
          "Pos.y":  0,
          "Parent":  11,
          "#":  1,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "EliteWarriorsSpawnTimer",
          "Pos.x":  -20,
          "Pos.y":  -20,
          "Parent":  8,
          "#":  2,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  100,
          "Pos.y":  -20,
          "Parent":  14,
          "#":  11,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ruin",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  20,
          "#":  12,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "check",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  22,
          "#":  13,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_star",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  97,
          "#":  14,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  1,
          "#":  15,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ship",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  12,
          "#":  16,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  11,
          "#":  17,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr3",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  17,
          "#":  18,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  16,
          "#":  19,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_planet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  14,
          "#":  20,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1,
          "#":  21,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "rand",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  21,
          "#":  22,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "waitingTimer",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  19,
          "#":  23,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr1",
          "Pos.x":  100,
          "Pos.y":  0,
          "Parent":  1,
          "#":  24,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "operation_lvl",
          "Pos.x":  420,
          "Pos.y":  290,
          "Parent":  -1,
          "#":  43,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "on_prepare",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  88,
          "#":  54,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "dialog_path",
          "Pos.x":  520,
          "Pos.y":  290,
          "Parent":  -1,
          "#":  55,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "player_str_rank",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  57,
          "#":  56,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "player_rank",
          "Pos.x":  680,
          "Pos.y":  290,
          "Parent":  -1,
          "#":  57,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr4",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  18,
          "#":  63,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "split_str",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  109,
          "#":  85,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "indent_str",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  85,
          "#":  86,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "operation_num",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  43,
          "#":  88,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GlobalWBOperationsArray",
          "Pos.x":  330,
          "Pos.y":  230,
          "Parent":  -1,
          "#":  89,
          "Var.Type":  "Array",
          "Init":  "1",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "cost",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  13,
          "#":  90,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr5",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  63,
          "#":  91,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr6",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  91,
          "#":  92,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr7",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  92,
          "#":  93,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr8",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  93,
          "#":  94,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "ships_available",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  55,
          "#":  96,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_sector",
          "Pos.x":  420,
          "Pos.y":  420,
          "Parent":  -1,
          "#":  97,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "coals_power_percent",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  96,
          "#":  98,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "min_coals_power_percent",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  98,
          "#":  99,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "stars_to_attack_arr",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  24,
          "#":  105,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr9",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  94,
          "#":  109,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "militaries_arr",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  105,
          "#":  110,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "new_operation_arr",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  110,
          "#":  111,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "stars_cnt_to_choose",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  56,
          "#":  113,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "coals_cnt",
          "Pos.x":  820,
          "Pos.y":  290,
          "Parent":  -1,
          "#":  114,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "big_coals_cnt",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  114,
          "#":  115,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "coals_power",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  115,
          "#":  116,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "enemies_cnt",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  119,
          "#":  117,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "enemies_power",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  117,
          "#":  118,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "average_warrior_power",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  116,
          "#":  119,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "max_coals_power_percent",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  99,
          "#":  120,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "min_warriors_to_add_WB",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  120,
          "#":  121,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "k",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  15,
          "#":  124,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  4,
      "End":  3,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  3,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  6,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  6,
      "End":  7,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  26,
      "End":  29,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  27,
      "End":  30,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  31,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  31,
      "End":  32,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  34,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  33,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  36,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  37,
      "End":  38,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  39,
      "End":  40,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  41,
      "End":  42,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  36,
      "End":  39,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  44,
      "End":  45,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  46,
      "End":  47,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  28,
      "End":  48,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  48,
      "End":  51,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  51,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  28,
      "End":  49,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  50,
      "End":  53,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  52,
      "End":  58,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  58,
      "End":  60,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  52,
      "End":  59,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  59,
      "End":  61,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  61,
      "End":  64,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  65,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  66,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  66,
      "End":  62,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  67,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  68,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  69,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  70,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  67,
      "End":  71,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  68,
      "End":  72,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  70,
      "End":  73,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  69,
      "End":  74,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  74,
      "End":  75,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  75,
      "End":  76,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  72,
      "End":  77,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  77,
      "End":  78,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  71,
      "End":  79,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  79,
      "End":  80,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  80,
      "End":  81,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  83,
      "End":  65,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  84,
      "End":  79,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  25,
      "End":  87,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  46,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  44,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  26,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  27,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  28,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  82,
      "End":  95,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  95,
      "End":  83,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  95,
      "End":  84,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  100,
      "End":  101,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  101,
      "End":  102,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  102,
      "End":  79,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  76,
      "End":  103,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  104,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  87,
      "End":  106,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  106,
      "End":  107,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  107,
      "End":  108,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  101,
      "End":  112,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  112,
      "End":  95,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  104,
      "End":  122,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  122,
      "End":  103,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  78,
      "End":  123,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  123,
      "End":  103,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "BlockPar.EC.Total.Strings":  1,
  "BlockPar.EC":  
  [
    {
      "#":  "41",
      "String":  "<0>"    
    }  
  ]
}