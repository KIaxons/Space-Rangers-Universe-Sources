{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -9,
  "ViewPos.y":  16,
  "ScriptName":  "Mod_ShuNukes",
  "ScriptFileOut":  "H:\\Mod_ShuNukes.scr",
  "ScriptTextOut":  "H:\\Mod_ShuNukes.txt",
  "GraphPoint.Count":  70,
  "GraphLink.Count":  46,
  "GraphRectText.Count":  0,
  "Variables.Count":  23,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  1,
  "Groups.Count":  1,
  "Places.Count":  0,
  "Items.Count":  0,
  "Ethers.Count":  0,
  "Dialogs.Count":  1,
  "DialogMessages.Count":  5,
  "DialogAnswers.Count":  9,
  "Operations.Count":  11,
  "Statements.Count":  16,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "DialogAnswers":      
      [
        {
          "Type":  "TDialogAnswer",
          "Name":  "restart",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  28,
          "#":  33,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  38,
          "#":  40,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  39,
          "#":  41,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  43,
          "#":  44,
          "Msg":  "",
          "AMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  49,
          "#":  55,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "4"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  50,
          "#":  56,
          "Msg":  "<tstr2>",
          "AMsg.Num":  "5"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  51,
          "#":  57,
          "Msg":  "<tstr3>",
          "AMsg.Num":  "6"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  52,
          "#":  58,
          "Msg":  "<tstr4>",
          "AMsg.Num":  "7"        
        },
        {
          "Type":  "TDialogAnswer",
          "Name":  "exit",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  54,
          "#":  59,
          "Msg":  "",
          "AMsg.Num":  "8"        
        }      
      ],
      "DialogMessages":      
      [
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  34,
          "#":  28,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "0"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  36,
          "#":  37,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "1"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  41,
          "#":  43,
          "Msg":  "<tstr4>",
          "DMsg.Num":  "2"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  46,
          "#":  45,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "3"        
        },
        {
          "Type":  "TDialogMsg",
          "Name":  "",
          "Pos.x":  -60,
          "Pos.y":  30,
          "Parent":  53,
          "#":  54,
          "Msg":  "<tstr1>",
          "DMsg.Num":  "4"        
        }      
      ],
      "Dialogs":      
      [
        {
          "Type":  "TDialog",
          "Name":  "NukeDialog",
          "Pos.x":  550,
          "Pos.y":  410,
          "Parent":  -1,
          "#":  26        
        }      
      ],
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1,
          "#":  5,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  2,
          "#":  3,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  7,
          "#":  4,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GTL = GalaxyTechLevel();",
              "if(!EvoArmadaInit) EvoArmadaInit = CurrentMods('Evolution\\EvoArmada');",
              "",
              "//Добавляем ядерное оружие новорождённым кораблям",
              "if(GalaxyShipId() > lastShipId) DistributeNukeMissiles();",
              "",
              "//Обнуление числа закупленных игроком ядерных торпед",
              "if(!findsubstr(GameDateTxtByTurn(CurTurn()), CT('FormInfo.JanuaryFirst')))",
              "{",
              "    g_NukeParams['NukeTorpedo', 'NukesSold'] = 0;",
              "    g_NukeParams['DirtyNukeTorpedo', 'NukesSold'] = 0;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  8,
          "#":  7,
          "Total.Lines":  53,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "cur_ruin = GetShipRuins(Player());",
              "if(cur_ruin)",
              "{",
              "    cur_ruin_type = ShipType(cur_ruin);",
              "    if(cur_ruin_type == 'WB')",
              "    {",
              "        path = 'NukeDialogWB';",
              "        nuke_type = 'NukeTorpedo';",
              "        g_NukeParams[nuke_type, 'NukesPerYear'] = (ShipRank(Player()) - 2) * 4;",
              "",
              "        //DialogStatus & 1 - игрок впервые поговорил о ядерках на ВБ",
              "        //DialogStatus & 2 - игрок впервые поговорил о ядерках на ВБ, имея при этом соответствующее звание",
              "        if(!(g_NukeParams[nuke_type, 'DialogStatus'] & 1))",
              "        {",
              "            AddDialogInject('NukeDialog', '', CT('Script.Mod_ShuNukes.' + path + '.PlayerAskNukeFirstTime'), 0);",
              "        }",
              "        else if(ShipRank(Player()) >= 4) //Звание не ниже \"Истребитель\"",
              "        {",
              "            if(!(g_NukeParams[nuke_type, 'DialogStatus'] & 2)) AddDialogInject('NukeDialog', '', Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerAskNukeFirstTimeTwice'), '<Rank'+'>', CT('Script.Mod_ShuNukes.MilitaryRankName.' + 4)), 0);",
              "            else AddDialogInject('NukeDialog', '', CT('Script.Mod_ShuNukes.' + path + '.PlayerAskNuke'), 0);",
              "        }",
              "    }",
              "    else if(cur_ruin_type == 'PB')",
              "    {",
              "        if(ShipOwner(Player()) == PirateClan)",
              "        {",
              "            path = 'NukeDialogPB';",
              "            nuke_type = 'DirtyNukeTorpedo';",
              "",
              "            //DialogStatus & 1 - игрок впервые поговорил о ядерках на ПБ",
              "            if(!(g_NukeParams[nuke_type, 'DialogStatus'] & 1))",
              "            {",
              "                AddDialogInject('NukeDialog', '', CT('Script.Mod_ShuNukes.' + path + '.PlayerAskNukeFirstTime'), 0);",
              "            }",
              "        }",
              "    }",
              "    else if(cur_ruin_type == 'CB')",
              "    {",
              "        if(ShipOwner(Player()) == PirateClan)",
              "        {",
              "            path = 'NukeDialogCB';",
              "            nuke_type = 'DirtyNukeTorpedo';",
              "            g_NukeParams[nuke_type, 'NukesPerYear'] = (GetShipPirateRank(Player()) - 2) * 4;",
              "",
              "            //DialogStatus & 2 - игрок впервые поговорил о ядерках на доминионе, имея при этом соответствующее звание",
              "            if(GetShipPirateRank(Player()) >= 4) //Звание не ниже \"Головорез\"",
              "            {",
              "                if(!(g_NukeParams[nuke_type, 'DialogStatus'] & 2)) AddDialogInject('NukeDialog', '', Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerAskNukeFirstTimeTwice'), '<Rank'+'>', CT('Script.Mod_ShuNukes.PirateRankName.' + 4)), 0);",
              "                else AddDialogInject('NukeDialog', '', CT('Script.Mod_ShuNukes.' + path + '.PlayerAskNuke'), 0);",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  3,
          "#":  8,
          "Total.Lines":  334,
          "Code.Type":  "Init",
          "Code":          
          [
              "GTL = GalaxyTechLevel();",
              "",
              "ArrayDelete(g_NukeParams, 0);",
              "",
              "//Обычные коалиционные торпеды",
              "ArrayDelete(tarr1, 0);",
              "ArrayAdd(tarr1, 200, 'MinDamageMin');",
              "ArrayAdd(tarr1, 65, 'MinDamageStep');",
              "ArrayAdd(tarr1, 300, 'MaxDamageMin');",
              "ArrayAdd(tarr1, 80, 'MaxDamageStep');",
              "ArrayAdd(tarr1, 700, 'RangeMin');",
              "ArrayAdd(tarr1, 100, 'RangeStep');",
              "ArrayAdd(tarr1, 600, 'SpeedMin');",
              "ArrayAdd(tarr1, 75, 'SpeedStep');",
              "ArrayAdd(tarr1, 0, 'NukesPerYear'); //Лимит ядерных торпед, которые игрок может выкупить за год (-1 - лимит отключён)",
              "ArrayAdd(tarr1, 0, 'NukesSold'); //Сколько ядерных торпед за текущий год игрок уже купил (обнуление происходит 1 января)",
              "ArrayAdd(tarr1, 0, 'DialogStatus');",
              "ArrayAdd(g_NukeParams, tarr1, 'NukeTorpedo');",
              "tarr1 = newarray(1);",
              "",
              "//Пиратские торпеды",
              "ArrayDelete(tarr1, 0);",
              "ArrayAdd(tarr1, 300, 'MinDamageMin');",
              "ArrayAdd(tarr1, 75, 'MinDamageStep');",
              "ArrayAdd(tarr1, 400, 'MaxDamageMin');",
              "ArrayAdd(tarr1, 100, 'MaxDamageStep');",
              "ArrayAdd(tarr1, 600, 'RangeMin');",
              "ArrayAdd(tarr1, 75, 'RangeStep');",
              "ArrayAdd(tarr1, 500, 'SpeedMin');",
              "ArrayAdd(tarr1, 65, 'SpeedStep');",
              "ArrayAdd(tarr1, 0, 'NukesPerYear'); //Лимит ядерных торпед, которые игрок может выкупить за год (-1 - лимит отключён)",
              "ArrayAdd(tarr1, 0, 'NukesSold'); //Сколько ядерных торпед за текущий год игрок уже купил (обнуление происходит 1 января)",
              "ArrayAdd(tarr1, 0, 'DialogStatus');",
              "ArrayAdd(g_NukeParams, tarr1, 'DirtyNukeTorpedo');",
              "tarr1 = newarray(1);",
              "",
              "//Вес одной пусковой установки для ядерных торпед",
              "ArrayAdd(g_NukeParams, 250, 'WeightPerShaft');",
              "",
              "EvoArmadaInit = CurrentMods('Evolution\\EvoArmada');",
              "g_InventShuNukesCustomGuns();",
              "",
              "//Добавляем скрытую инфошку для работы ядерных торпед (станет видимой только при установке игроком пусковых на его корпус)",
              "",
              "/* НЕЛЬЗЯ СОТВОРИТЬ ЗДЕСЬ!",
              "cur_item = CreateQuestItem('ShuNukes_NukesWeight', Maloc);",
              "ItemSize(cur_item, 0);",
              "ItemCost(cur_item, 0);",
              "AddItemToShip(Player(), cur_item);",
              "ItemIsInUse(cur_item, Player(), 1);",
              "NoDropItem(cur_item, 1);",
              "*/",
              "",
              "ShipAddCustomShipInfo(Player(), 'ShuNukes_NuclearMissiles', 'NoShow', 0, 0, 0, 'NukeTorpedo', '0,0' /*НЕЛЬЗЯ ЗАПОМНИТЬ ЗДЕСЬ! + Id(cur_item)*/, '');",
              "",
              "//Повторно вызывается из Main.dat в момент загрузки игры",
              "function g_InventShuNukesCustomGuns()",
              "{",
              "    int cnt = CT('Items.Weapon.CustomWeapon.ShuNukes.Count');",
              "    for(int i = 1; i <= cnt; i = i + 1)",
              "    {",
              "        //По очереди выбираем системное название каждой новой пушки из Lang",
              "        str type_name = CT('Items.Weapon.CustomWeapon.ShuNukes.' + i);",
              "        str path = 'Items.Weapon.CustomWeapon.' + type_name;",
              "",
              "        //Прописываем пушку/сбрасываем уже прописанную пушку до уровня базовой из оригинальной игры",
              "        dword weapon = InventNewCustomWeapon(type_name, t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + '.BaseGun')));",
              "        //Задаём характеристики оружия",
              "        SetCustomWeaponShotData(weapon, CT(path + '.ShotType'), CT(path + '.Speed'), CT(path + '.AverageRadius'), CT(path + '.SecondaryDamageRadius'), CT(path + '.MiningFactor'), CT(path + '.ShotsPerTurn'));",
              "        SetCustomWeaponDamageData(weapon, CT(path + '.MinDamage'), CT(path + '.MaxDamage'), CT(path + '.DamageSet'), CT(path + '.mWeaponDamage'));",
              "        SetCustomMissileWeaponStats(weapon, CT(path + '.MissileRadius'), CT(path + '.MissileMaxSpeed'), CT(path + '.MissileMinSpeed'), CT(path + '.MissileChanceToBeHit'));",
              "        SetCustomWeaponPrimaryData(weapon, CT(path + '.TechLevel'), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + '.InventTechLevel')), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + '.ArcadeType')));",
              "        SetCustomWeaponSizeAndCost(weapon, CT(path + '.kCost'), CT(path + '.AverageSize'));",
              "        SetCustomWeaponAvailability(weapon, CT(path + '.StoreAvailability'));",
              "        SetCustomWeaponSE(weapon, CT(path + '.ShotEffectPath'), CT(path + '.SplashEffectPath'), CT(path + '.MissileExplosionEffectPath'), CT(path + '.ShotEffectPalette'));",
              "    }",
              "}",
              "",
              "lastShipId = Id(Player()) + 1;",
              "DistributeNukeMissiles();",
              "",
              "function g_FindShipItemById(dword ship, dword id = 0)",
              "{",
              "    if(!id)",
              "    {",
              "        result = 0;",
              "        exit;",
              "    }",
              "",
              "    for(int i = ShipItems(ship) - 1; i >= 0; i = i - 1)",
              "    {",
              "        dword item = ShipItems(ship, i);",
              "        if(Id(item) == id)",
              "        {",
              "            result = item;",
              "            exit;",
              "        }",
              "    }",
              "    for(i = ShipArts(ship) - 1; i >= 0; i = i - 1)",
              "    {",
              "        item = ShipArts(ship, i);",
              "        if(Id(item) == id)",
              "        {",
              "            result = item;",
              "            exit;",
              "        }",
              "    }",
              "",
              "    result = 0;",
              "}",
              "",
              "function DistributeNukeMissiles()",
              "{",
              "    //Начальный перебор Галактики, раздаём кораблям дополнительные залпы и бонусы",
              "    int cnt = BuildListOfNewShips(tarr1, lastShipId, 2+8+16+256+4096+8192, 1+2+4+8+16+128, 1, '' /*',SubFactionPlayerMercsFixedStanding'*/, ',FemRanger,RangerPirate,RangerExplorer,RangerPirateExplorer,Dreadnought,Khan,Thug,PirateCorvette,PirateFrigate,PirateGalleon,EliteWarrior,MercLeader,BM,MB,Manaan');",
              "    //Если нашли хоть один корабль по требуемым условиям",
              "    if(cnt)",
              "    {",
              "        int bon_nuke = FindBonusByNameInCfg('ShuNukes_NukeShaft');",
              "",
              "        for(i = 0; i < cnt; i = i + 1)",
              "        {",
              "            cur_ship = tarr1[i];",
              "",
              "            //Корабль должен соблюдать некоторые требования по размеру корпуса для установки ядерных пусковых установок",
              "            dword hull = ShipEqInSlot(cur_ship, t_Hull);",
              "            if(ItemSize(hull) < max(400, 125 * ItemLevel(hull))) continue;",
              "",
              "            int ship_type_num = ShipTypeN(cur_ship);",
              "            str ship_type = ShipType(cur_ship);",
              "            int nuke_max = 3;",
              "            int nuke_shafts = 0;",
              "",
              "            if(ship_type_num == t_Pirate)",
              "            {",
              "                if(ship_type == 'Pirate' || ship_type == 'Khan' || ship_type == 'Thug')",
              "                {",
              "                    if(RndObject(1, 100, cur_ship) <= (GetShipPirateRank(cur_ship) - 3) * 10) //Не ниже головореза с постепенным повышением шанса",
              "                    {",
              "                        str nuke_type = 'DirtyNukeTorpedo';",
              "                        nuke_shafts = 1;",
              "                    }",
              "                    else continue;",
              "                }",
              "                else if(ship_type == 'PirateCorvette')",
              "                {",
              "                    if(RndObject(0, 1, cur_ship)) continue;",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 5;",
              "                    nuke_shafts = 1;",
              "                }",
              "                else if(ship_type == 'PirateFrigate')",
              "                {",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 8;",
              "                    nuke_shafts = 2;",
              "                }",
              "                else if(ship_type == 'PirateGalleon')",
              "                {",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 12;",
              "                    nuke_shafts = 3;",
              "                }",
              "            }",
              "            else if(ship_type_num == t_Warrior)",
              "            {",
              "                if(!ShipSubType(cur_ship)) //Если это обычный военный, не флагман",
              "                {",
              "                    if(RndObject(1, 100, cur_ship) <= (ShipRank(cur_ship) - 3) * 10) //Не ниже истребителя с постепенным повышением шанса",
              "                    {",
              "                        nuke_type = 'NukeTorpedo';",
              "                        nuke_shafts = 1;",
              "                    }",
              "                    else continue;",
              "                }",
              "                else if(ship_type == 'Dreadnought')",
              "                {",
              "                    nuke_type = 'NukeTorpedo';",
              "                    nuke_max = 16;",
              "                    nuke_shafts = 4;",
              "                }",
              "                else //if(ship_type == '???')",
              "                {",
              "                    nuke_type = 'NukeTorpedo';",
              "                    nuke_max = 12;",
              "                    nuke_shafts = 3;",
              "                }",
              "            }",
              "            else if(ship_type_num == t_Ranger)",
              "            {",
              "                if(ShipOwner(cur_ship) != PirateClan)",
              "                {",
              "                    if(RndObject(1, 100, cur_ship) <= (ShipRank(cur_ship) - 3) * 10) //Не ниже истребителя с постепенным повышением шанса",
              "                    {",
              "                        nuke_type = 'NukeTorpedo';",
              "                        nuke_shafts = 1;",
              "                    }",
              "                    else continue;",
              "                }",
              "                else",
              "                {",
              "                    if(RndObject(1, 100, cur_ship) <= (GetShipPirateRank(cur_ship) - 3) * 10) //Не ниже истребителя с постепенным повышением шанса",
              "                    {",
              "                        nuke_type = 'DirtyNukeTorpedo';",
              "                        nuke_shafts = 1;",
              "                    }",
              "                    else continue;",
              "                }",
              "            }",
              "            else if(ship_type_num >= t_RC)",
              "            {",
              "                //Нейтральные и вялофракционные станции",
              "                int stand_for = ShipStanding(cur_ship);",
              "                if(stand_for >= 4 && stand_for <= 6)",
              "                {",
              "                    nuke_shafts = 1;",
              "                    if(stand_for == 4 || ship_type_num == t_PB) nuke_type = 'DirtyNukeTorpedo';",
              "                    else nuke_type = 'NukeTorpedo';",
              "                }",
              "                else if(stand_for >= 2 && stand_for <= 3) //Коалиционная станция",
              "                {",
              "                    nuke_type = 'NukeTorpedo';",
              "                    nuke_max = 6;",
              "                    nuke_shafts = 2;",
              "                }",
              "                else //Пиратская станция",
              "                {",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 6;",
              "                    nuke_shafts = 2;",
              "                }",
              "            }",
              "",
              "            if(nuke_shafts <= 0) throw 'Variable \\\\\\\"nuke_shafts\\\\\\\" in Mod_ShuNukes are 0, ShipTypeN is \\\\\\\"' + ship_type_num + '\\\\\\\" and ShipType is \\\\\\\"' + ship_type + '\\\\\\\"';",
              "",
              "            if(EvoArmadaInit)",
              "            {",
              "                //ShipCustomShipInfoData_1 == текущее число ядерных ракет на борту",
              "                //ShipCustomShipInfoData_2 == лимит ядерных ракет на борту",
              "                //ShipCustomShipInfoData_3 == таймер перезарядки (следующий ход возможного ядерного залпа, а для станций этот таймер также означает время до пополнения ракеты)",
              "                //ShipCustomShipInfoTextData_1 == тип экипированных ядерных ракет на борту (по факту, раздел бонуса ракеты)",
              "                //ShipCustomShipInfoTextData_2 == количество ракетных шахт в корпусе корабля (ограничивает число одновременных пусков), а также Id скрытого предмета, занимающего место на корабле под ракетные шахты",
              "                //ShipCustomShipInfoTextData_3 == Id стака ракет на борту (если 0, значит ракеты закончились)",
              "",
              "                dword nuke_weight = CreateQuestItem('ShuNukes_NukesWeight');",
              "                //ItemSize(nuke_weight, round(PortionInDiapason(ItemLevel(hull), 1, 8, 200, 400), 10) * nuke_shafts);",
              "                ItemSize(nuke_weight, g_NukeParams['WeightPerShaft'] * nuke_shafts);",
              "                AddItemToShip(cur_ship, nuke_weight);",
              "                NoDropItem(nuke_weight, 1);",
              "",
              "                dword nukes = CreateCustomCountableItem('ShuNukes_' + nuke_type, nuke_max);",
              "                ItemCost(nukes, GalaxyMoney(2, 0) * nuke_max);",
              "                AddItemToShip(cur_ship, nukes);",
              "                //Чтобы имели отдельное уведомление при попытке выбросить их с корабля или уничтожить",
              "                if(nuke_type != 'DirtyNukeTorpedo') NoDropItem(nukes, 92);",
              "                else NoDropItem(nukes, 93);",
              "",
              "                ItemExtraSpecialsAddByType(hull, bon_nuke, nuke_shafts);",
              "",
              "                ShipAddCustomShipInfo(cur_ship, 'ShuNukes_NPCNuclearMissiles', '', nuke_max, nuke_max, 0, nuke_type, '' + nuke_shafts + ',' + Id(nuke_weight), Id(nukes));",
              "                ArrangeItems(cur_ship);",
              "            }",
              "            else",
              "            {",
              "                //ShipCustomShipInfoData_1 == текущее число ядерных ракет на борту",
              "                //ShipCustomShipInfoData_2 == лимит ядерных ракет на борту",
              "                //ShipCustomShipInfoData_3 == таймер перезарядки (следующий ход возможного ядерного залпа, а для станций этот таймер также означает время до пополнения ракеты)",
              "                //ShipCustomShipInfoTextData_1 == тип экипированных ядерных ракет на борту (по факту, раздел бонуса ракеты)",
              "                //ShipCustomShipInfoTextData_2 == количество ракетных шахт в корпусе корабля (ограничивает число одновременных пусков, сейчас в данной инфошке не используется), а также Id скрытого предмета, занимающего место на корабле под ракетные шахты",
              "                //ShipCustomShipInfoTextData_3 == Id стака ракет на борту (если 0, значит ракеты закончились)",
              "",
              "                nuke_shafts = 1; //Не нужно им много без армады",
              "                nuke_max = min(nuke_max, 6);",
              "",
              "                nuke_weight = CreateQuestItem('ShuNukes_NukesWeight');",
              "                //ItemSize(nuke_weight, round(PortionInDiapason(ItemLevel(hull), 1, 8, 200, 400), 10) * nuke_shafts);",
              "                ItemSize(nuke_weight, g_NukeParams['WeightPerShaft'] * nuke_shafts);",
              "                AddItemToShip(cur_ship, nuke_weight);",
              "                NoDropItem(nuke_weight, 1);",
              "",
              "                nukes = CreateCustomCountableItem('ShuNukes_' + nuke_type, nuke_max);",
              "                ItemCost(nukes, GalaxyMoney(2, 0) * nuke_max);",
              "                AddItemToShip(cur_ship, nukes);",
              "                //Чтобы имели отдельное уведомление при попытке выбросить их с корабля или уничтожить",
              "                if(nuke_type != 'DirtyNukeTorpedo') NoDropItem(nukes, 92);",
              "                else NoDropItem(nukes, 93);",
              "",
              "                ItemExtraSpecialsAddByType(hull, bon_nuke, nuke_shafts);",
              "",
              "                ShipAddCustomShipInfo(cur_ship, 'ShuNukes_NPCNuclearMissilesNoArmada', '', nuke_max, nuke_max, 0, nuke_type, '' + nuke_shafts + ',' + Id(nuke_weight), Id(nukes));",
              "                ArrangeItems(cur_ship);",
              "            }",
              "        }",
              "    }",
              "",
              "    lastShipId = GalaxyShipId();",
              "}",
              "",
              "function g_LaunchNukeMissile(dword ship, dword target, int tech = 3, str nuke_type = 'NukeTorpedo', int nukes_cnt = 1)",
              "{",
              "    dword star = ShipStar(ship);",
              "    int coordX = CoordX(ship);",
              "    int coordY = CoordY(ship);",
              "    int damage_min = g_NukeParams[nuke_type, 'MinDamageMin'] + tech * g_NukeParams[nuke_type, 'MinDamageStep'];",
              "    int damage_max = g_NukeParams[nuke_type, 'MaxDamageMin'] + tech * g_NukeParams[nuke_type, 'MaxDamageStep'];",
              "    int speed = g_NukeParams[nuke_type, 'SpeedMin'] + tech * g_NukeParams[nuke_type, 'SpeedStep'];",
              "    if(ShipTypeN(ship) <= t_Tranclucator) float base_angle = ShipAngle(ship);",
              "    else base_angle = Angle(ship, target);",
              "",
              "    for(int i = 1; i <= nukes_cnt; i = i + 1)",
              "    {",
              "        if(i == 1)",
              "        {",
              "            if(!(nukes_cnt % 2)) float angle = base_angle - 6; //Если запускаем чётное число ракет",
              "            else angle = base_angle;",
              "        }",
              "        else if(!(nukes_cnt % 2)) //Если запускаем чётное число ракет",
              "        {",
              "            if(i <= nukes_cnt / 2) angle = base_angle - 10 * i;",
              "            else if(i - nukes_cnt / 2 == 1) angle = base_angle + 6;",
              "            else angle = base_angle + 10 * (i - nukes_cnt / 2);",
              "        }",
              "        else //Если запускаем нечётное число ракет",
              "        {",
              "            if(i <= nukes_cnt / 2 + 1) angle = base_angle - 12 * (i - 1);",
              "            else angle = base_angle + 12 * ((i - 1) - (nukes_cnt - 1) / 2);",
              "        }",
              "",
              "        dword nuke = SpawnMissile(star, target, coordX, coordY, angle, damage_min, damage_max, speed, nuke_type);",
              "        MissileOwner(nuke, ship);",
              "        //MissileLive(nuke, -200); //Ракета тупо скипнет ход, т.к. её логика не подрубится сразу",
              "        FilmSound('Sound.NukeLaunch', nuke); //Играем звук запуска ракеты",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  26,
          "#":  27,
          "Total.Lines":  38,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Игрок задаёт вопрос про ядерки на ВБ, ПБ или доминионе впервые, либо уже имея подходящее звание, либо нет (первое вступление)",
              "if(!(g_NukeParams[nuke_type, 'DialogStatus'] & 1))",
              "{",
              "    if((cur_ruin_type == 'WB' && ShipRank(Player()) <= 4) || (cur_ruin_type != 'WB' && GetShipPirateRank(Player()) <= 4))",
              "    {",
              "        if(nuke_type == 'NukeTorpedo') str rank = CT('Script.Mod_ShuNukes.MilitaryRankName.' + 4);",
              "        else rank = CT('Script.Mod_ShuNukes.PirateRankName.' + 4);",
              "",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeFirstTimeNoRank'), '<Rank'+'>', rank);",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerNukeFirstTimeNoRank');",
              "        check = 0;",
              "    }",
              "    else",
              "    {",
              "        tstr1 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeFirstTime'), '<NukesMax'+'>', g_NukeParams[nuke_type, 'NukesPerYear']);",
              "        tstr2 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerNukeFirstTimeYes');",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerNukeFirstTimeNo');",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeFirstTimeNo');",
              "        check = 1;",
              "    }",
              "",
              "    g_NukeParams[nuke_type, 'DialogStatus'] = g_NukeParams[nuke_type, 'DialogStatus'] | 1;",
              "}",
              "//Игрок ранее задавал вопрос о ядерках не имея подходящего звания, а теперь впервые переспрашивает, но это самое звание получив (второе вступление)",
              "else if(!(g_NukeParams[nuke_type, 'DialogStatus'] & 2))",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeFirstTimeTwice') + Format('<br>') + Format(CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeFirstTime'), '<NukesMax'+'>', g_NukeParams[nuke_type, 'NukesPerYear']);",
              "    tstr2 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerNukeFirstTimeYes');",
              "    tstr3 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerNukeFirstTimeNo');",
              "    tstr4 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeFirstTimeNo');",
              "    check = 1;",
              "}",
              "//Игрок ранее уже спрашивал о ядерках, будучи имея подходящее звание (стандартный вариант)",
              "else",
              "{",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerNuke');",
              "    check = 1;",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  40,
          "#":  42,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerNuke');",
              "g_NukeParams[nuke_type, 'DialogStatus'] = g_NukeParams[nuke_type, 'DialogStatus'] | 2;"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  35,
          "#":  46,
          "Total.Lines":  112,
          "Code.Type":  "Turn",
          "Code":          
          [
              "cur_item = ShipEqInSlot(Player(), t_Hull);",
              "check = 0;",
              "",
              "//check & 1 - добавляем ответ установки пусковой",
              "//check & 2 - добавляем ответ демонтажа пусковой",
              "//check & 4 - добавляем ответ закупки ядерных торпед",
              "",
              "bon = FindBonusByNameInCfg('ShuNukes_NukeShaft');",
              "if(ShipOwner(cur_ruin) == Maloc) nuke_cost = round(GalaxyMoney(3, Maloc) * 3, 100);",
              "else nuke_cost = round(GalaxyMoney(3, PirateClan) * 4, 100);",
              "if(ShipOwner(cur_ruin) == Maloc) launcher_cost = round(GalaxyMoney(4, Maloc) * ItemLevel(cur_item), 100);",
              "else launcher_cost = round(1.5 * GalaxyMoney(4, PirateClan) * ItemLevel(cur_item), 100);",
              "",
              "//Пусковая установка в данном корпусе отсутствует (можно установить её, либо докупить торпед)",
              "if(!ItemExtraSpecialsCountByType(cur_item, bon))",
              "{",
              "    tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeNoLauncher');",
              "    if(g_NukeParams[nuke_type, 'NukesSold'] < g_NukeParams[nuke_type, 'NukesPerYear'])",
              "    {",
              "        tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeNoLauncherNukes');",
              "        tstr1 = Format(tstr1, '<Class'+'>', CT('Items.Weapon.LevelToLetter.' + ItemLevel(cur_item)),",
              "                              '<Cost'+'>', launcher_cost,",
              "                              '<NukeSize'+'>', g_NukeParams['WeightPerShaft'],",
              "                              '<NukesCount'+'>', g_NukeParams[nuke_type, 'NukesPerYear'] - g_NukeParams[nuke_type, 'NukesSold'],",
              "                              '<NukeCost'+'>', nuke_cost);",
              "",
              "        tstr2 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerBuyNukes'), '<Cost'+'>', nuke_cost);",
              "        if(ShipMoney(Player()) < nuke_cost)",
              "        {",
              "            tstr2 = DeleteTags(tstr2);",
              "            AddDialogBlock(tstr2, 1);",
              "        }",
              "",
              "        if(ItemSize(cur_item) < round(2.5 * g_NukeParams['WeightPerShaft'])) //Корпус игрока слишком мал для пусковой установки",
              "        {",
              "            tstr3 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerInstallLaunchShaftNoFit');",
              "            AddDialogBlock(tstr3, 1);",
              "        }",
              "        else",
              "        {",
              "            tstr3 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerInstallLaunchShaft'), '<Cost'+'>', launcher_cost);",
              "            if(ShipMoney(Player()) < launcher_cost)",
              "            {",
              "                tstr3 = DeleteTags(tstr2);",
              "                AddDialogBlock(tstr3, 1);",
              "            }",
              "        }",
              "",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerRefuse');",
              "        check = 1+4;",
              "    }",
              "    else",
              "    {",
              "        tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeNoLauncherNoMoreNukes');",
              "        tstr1 = Format(tstr1, '<Class'+'>', CT('Items.Weapon.LevelToLetter.' + ItemLevel(cur_item)),",
              "                              '<Cost'+'>', launcher_cost,",
              "                              '<NukeSize'+'>', g_NukeParams['WeightPerShaft']);",
              "",
              "        tstr2 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerBuyNukes'), '<Cost'+'>', nuke_cost, '');",
              "        AddDialogBlock(tstr2, 1);",
              "",
              "        if(ItemSize(cur_item) < round(2.5 * g_NukeParams['WeightPerShaft'])) //Корпус игрока слишком мал для пусковой установки",
              "        {",
              "            tstr3 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerInstallLaunchShaftNoFit');",
              "            AddDialogBlock(tstr3, 1);",
              "        }",
              "        else",
              "        {",
              "            tstr3 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerInstallLaunchShaft'), '<Cost'+'>', launcher_cost);",
              "            if(ShipMoney(Player()) < launcher_cost)",
              "            {",
              "                tstr3 = DeleteTags(tstr2);",
              "                AddDialogBlock(tstr3, 1);",
              "            }",
              "        }",
              "",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerRefuse');",
              "        check = 1+4;",
              "    }",
              "}",
              "//Пусковая установка в корпусе уже имеется (можно демонтировать её, либо докупить торпед)",
              "else",
              "{",
              "    if(g_NukeParams[nuke_type, 'NukesSold'] < g_NukeParams[nuke_type, 'NukesPerYear'])",
              "    {",
              "        tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeWithLauncher');",
              "        tstr1 = tstr1 + Format('<br>') + Format(CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeWithLauncherNukes'),",
              "                                                   '<NukesCount'+'>', g_NukeParams[nuke_type, 'NukesPerYear'] - g_NukeParams[nuke_type, 'NukesSold'],",
              "                                                   '<NukeCost'+'>', nuke_cost);",
              "",
              "        tstr2 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerBuyNukes'), '<Cost'+'>', nuke_cost);",
              "        if(ShipMoney(Player()) < nuke_cost)",
              "        {",
              "            tstr2 = DeleteTags(tstr2);",
              "            AddDialogBlock(tstr2, 1);",
              "        }",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerDeinstallLaunchShaft');",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerRefuse');",
              "        check = 2+4;",
              "    }",
              "    else",
              "    {",
              "        tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeWithLauncher');",
              "        tstr1 = tstr1 + Format('<br>') + CT('Script.Mod_ShuNukes.' + path + '.AnswerNukeWithLauncherNoMoreNukes');",
              "",
              "        tstr2 = '</color>' + Format(CT('Script.Mod_ShuNukes.' + path + '.PlayerBuyNukes'), '<Cost'+'>', nuke_cost, '');",
              "        AddDialogBlock(tstr2, 1);",
              "        tstr3 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerDeinstallLaunchShaft');",
              "        tstr4 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.PlayerRefuse');",
              "        check = 2+4;",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  58,
          "#":  53,
          "Total.Lines":  2,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Выход из диалога о ядерных торпедах",
              "tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerRefuse');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  55,
          "#":  60,
          "Total.Lines":  12,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Устанавливаем пусковую установку в корпус игрока",
              "ItemExtraSpecialsAddByType(cur_item, bon, 1);",
              "ShipCustomShipInfoTextData(Player(), 'ShuNukes_NuclearMissiles', 2, SetParFromString(ShipCustomShipInfoTextData(Player(), 'ShuNukes_NuclearMissiles', 2), ',', 0, '1'));",
              "//CreateActCodeEvent(t_OnPlayerChangeHull, 'ShuNukes_NuclearMissiles', Player(), ShipEqInSlot(Player(), t_Hull)); //Для обновления веса скрытого юзлеса",
              "dword nuke_weight = IdToItem(GetParFromString(ShipCustomShipInfoTextData(Player(), 'ShuNukes_NuclearMissiles', 2), ',', 1, 0));",
              "if(nuke_weight) ItemSize(nuke_weight, g_NukeParams['WeightPerShaft'] * ItemExtraSpecialsCountByType(ShipEqInSlot(Player(), t_Hull), FindBonusByNameInCfg('ShuNukes_NukeShaft')));",
              "else throw 'nuke_weight are missing at hold of ' + Name(Player()) + ', error 1!';",
              "",
              "ShipMoney(Player(), ShipMoney(Player()) - launcher_cost);",
              "Sound('Sound.Buy');",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerInstallLaunchShaft');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  57,
          "#":  61,
          "Total.Lines":  11,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Удаляем пусковую установку из корпуса игрока",
              "ItemExtraSpecialsDeleteByType(cur_item, bon, ItemExtraSpecialsCountByType(cur_item, bon));",
              "ShipCustomShipInfoTextData(Player(), 'ShuNukes_NuclearMissiles', 2, SetParFromString(ShipCustomShipInfoTextData(Player(), 'ShuNukes_NuclearMissiles', 2), ',', 0, '0'));",
              "",
              "dword nuke_weight = IdToItem(GetParFromString(ShipCustomShipInfoTextData(Player(), 'ShuNukes_NuclearMissiles', 2), ',', 1, 0));",
              "if(nuke_weight) ItemSize(nuke_weight, 0);",
              "else throw 'nuke_weight are missing at hold of ' + Name(Player()) + ', error 2!';",
              "",
              "Sound('Sound.Repair');",
              "",
              "tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerDeinstallLaunchShaft');"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  56,
          "#":  62,
          "Total.Lines":  16,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Добавляем игроку ядерных торпед",
              "tint1 = g_NukeParams[nuke_type, 'NukesPerYear'] - g_NukeParams[nuke_type, 'NukesSold'];",
              "str nukes_cnt = NumberBox('Bm.FormShip2.NukeNumberIcon', CT('Script.Mod_ShuNukes.' + path + '.HowMuchNukes'), 1, tint1, RoundTo(1.0 * ShipMoney(Player()) / nuke_cost, 1.0, -1), '', 1);",
              "if(int(nukes_cnt) && nukes_cnt != 'Cancel')",
              "{",
              "    dword nukes = CreateCustomCountableItem('ShuNukes_' + nuke_type, nukes_cnt);",
              "    ItemCost(nukes, nuke_cost * nukes_cnt);",
              "    AddItemToShip(Player(), nukes);",
              "    g_NukeParams[nuke_type, 'NukesSold'] = g_NukeParams[nuke_type, 'NukesSold'] + nukes_cnt;",
              "",
              "    tstr1 = '</color>' + CT('Script.Mod_ShuNukes.' + path + '.AnswerBuyNukes');",
              "    ShipMoney(Player(), ShipMoney(Player()) - nuke_cost * nukes_cnt);",
              "    Sound('Sound.Buy');",
              "    tint1 = 1;",
              "}",
              "else tint1 = 0;"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  0,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  490,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  2,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  2,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  4,
          "#":  21,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ShipIsTakeoff(Player())"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  27,
          "#":  32,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -70,
          "Pos.y":  20,
          "Parent":  27,
          "#":  34,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!check"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  32,
          "#":  35,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(g_NukeParams[nuke_type, 'DialogStatus'] & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  32,
          "#":  36,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!(g_NukeParams[nuke_type, 'DialogStatus'] & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  -20,
          "Pos.y":  20,
          "Parent":  37,
          "#":  38,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  37,
          "#":  39,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -60,
          "Parent":  42,
          "#":  47,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  45,
          "#":  49,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(check & 1)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  20,
          "Parent":  45,
          "#":  50,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(check & 4)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  40,
          "Pos.y":  20,
          "Parent":  45,
          "#":  51,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "(check & 2)"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  60,
          "Pos.y":  20,
          "Parent":  45,
          "#":  52,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  30,
          "Parent":  62,
          "#":  63,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  30,
          "Parent":  62,
          "#":  64,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!tint1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -90,
          "Parent":  66,
          "#":  65,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        },
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  64,
          "#":  66,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "1"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  5,
          "#":  6,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "lastShipId",
          "Pos.x":  0,
          "Pos.y":  -60,
          "Parent":  8,
          "#":  9,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr1",
          "Pos.x":  70,
          "Pos.y":  0,
          "Parent":  14,
          "#":  10,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  620,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  11,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  11,
          "#":  12,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  11,
          "#":  13,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  90,
          "Pos.y":  0,
          "Parent":  16,
          "#":  14,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  14,
          "#":  15,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_star",
          "Pos.x":  80,
          "Pos.y":  0,
          "Parent":  11,
          "#":  16,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ruin",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  16,
          "#":  17,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ship",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  17,
          "#":  18,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "EvoArmadaInit",
          "Pos.x":  0,
          "Pos.y":  -80,
          "Parent":  8,
          "#":  19,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GTL",
          "Pos.x":  0,
          "Pos.y":  -100,
          "Parent":  8,
          "#":  20,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr3",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  15,
          "#":  22,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr4",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  22,
          "#":  23,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "g_NukeParams",
          "Pos.x":  540,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  24,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  true        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_item",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  18,
          "#":  25,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ruin_type",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  23,
          "#":  29,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "check",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  13,
          "#":  30,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "path",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  29,
          "#":  31,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "nuke_type",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  31,
          "#":  48,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "bon",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  30,
          "#":  67,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "nuke_cost",
          "Pos.x":  610,
          "Pos.y":  470,
          "Parent":  -1,
          "#":  68,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "launcher_cost",
          "Pos.x":  610,
          "Pos.y":  490,
          "Parent":  -1,
          "#":  69,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  6,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  21,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  26,
      "End":  27,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  27,
      "End":  34,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  34,
      "End":  28,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  28,
      "End":  33,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  27,
      "End":  32,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  36,
      "End":  37,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  37,
      "End":  39,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  37,
      "End":  38,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  38,
      "End":  40,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  39,
      "End":  41,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  40,
      "End":  42,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  41,
      "End":  43,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  43,
      "End":  44,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  36,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  32,
      "End":  35,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  42,
      "End":  47,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  35,
      "End":  46,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  46,
      "End":  45,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  47,
      "End":  46,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  49,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  50,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  51,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  45,
      "End":  52,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  58,
      "End":  53,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  53,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  54,
      "End":  59,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  49,
      "End":  55,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  50,
      "End":  56,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  51,
      "End":  57,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  52,
      "End":  58,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  55,
      "End":  60,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  61,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  60,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  63,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  63,
      "End":  54,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  62,
      "End":  64,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  65,
      "End":  45,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  64,
      "End":  66,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  66,
      "End":  65,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  56,
      "End":  62,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  57,
      "End":  61,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "BlockPar.EC.Total.Strings":  1,
  "BlockPar.EC":  
  [
    {
      "#":  "0",
      "String":  "<0>"    
    }  
  ]
}