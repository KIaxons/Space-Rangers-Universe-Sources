{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -116,
  "ViewPos.y":  -98,
  "ScriptName":  "Mod_ShuNukes",
  "ScriptFileOut":  "H:\\Mod_ShuNukes.scr",
  "ScriptTextOut":  "H:\\Mod_ShuNukes.txt",
  "GraphPoint.Count":  26,
  "GraphLink.Count":  5,
  "GraphRectText.Count":  1,
  "Variables.Count":  15,
  "Stars.Count":  1,
  "Planets.Count":  1,
  "Ships.Count":  1,
  "States.Count":  1,
  "Groups.Count":  1,
  "Places.Count":  0,
  "Items.Count":  1,
  "Ethers.Count":  0,
  "Dialogs.Count":  0,
  "DialogMessages.Count":  0,
  "DialogAnswers.Count":  0,
  "Operations.Count":  4,
  "Statements.Count":  1,
  "Loops.Count":  0,
  "Visual.Objects":  
  [
    {
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "PlayerGroup",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  1,
          "#":  5,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Items":      
      [
        {
          "Type":  "TItem",
          "Name":  "PlayerNuke",
          "Pos.x":  780,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  24,
          "Class":  5,
          "Item.Type":  0,
          "Size":  10,
          "Level":  1,
          "Radius":  150,
          "Owner":  6,
          "Useless":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  2,
          "#":  3,
          "Total.Lines":  1,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  7,
          "#":  4,
          "Total.Lines":  5,
          "Code.Type":  "Turn",
          "Code":          
          [
              "GTL = GalaxyTechLevel();",
              "if(!EvoArmadaInit) EvoArmadaInit = CurrentMods('Evolution\\EvoArmada');",
              "",
              "//Добавляем ядерное оружие новорождённым кораблям",
              "if(GalaxyShipId() > lastShipId) DistributeNukeMissiles();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  8,
          "#":  7,
          "Total.Lines":  1,
          "Code.Type":  "DialogBegin",
          "Code":          
          [
              "//"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  20,
          "Pos.y":  0,
          "Parent":  3,
          "#":  8,
          "Total.Lines":  288,
          "Code.Type":  "Init",
          "Code":          
          [
              "GTL = GalaxyTechLevel();",
              "",
              "ArrayDelete(g_NukeRange, 0);",
              "ArrayAdd(g_NukeRange, 700, 'Min');",
              "ArrayAdd(g_NukeRange, 100, 'Step');",
              "",
              "EvoArmadaInit = CurrentMods('Evolution\\EvoArmada');",
              "g_InventShuNukesCustomGuns();",
              "",
              "//Повторно вызывается из Main.dat в момент загрузки игры",
              "function g_InventShuNukesCustomGuns()",
              "{",
              "    //SFT('g_InventShuNukesCustomGuns');",
              "",
              "    int cnt = CT('Items.Weapon.CustomWeapon.ShuNukes.Count');",
              "    for(int i = 1; i <= cnt; i = i + 1)",
              "    {",
              "        //По очереди выбираем системное название каждой новой пушки из Lang",
              "        str type_name = CT('Items.Weapon.CustomWeapon.ShuNukes.' + i);",
              "        str path = 'Items.Weapon.CustomWeapon.' + type_name;",
              "",
              "        //Прописываем пушку/сбрасываем уже прописанную пушку до уровня базовой из оригинальной игры",
              "        dword weapon = InventNewCustomWeapon(type_name, t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + '.BaseGun')));",
              "        //Задаём характеристики оружия",
              "        SetCustomWeaponShotData(weapon, CT(path + '.ShotType'), CT(path + '.Speed'), CT(path + '.AverageRadius'), CT(path + '.SecondaryDamageRadius'), CT(path + '.MiningFactor'), CT(path + '.ShotsPerTurn'));",
              "        SetCustomWeaponDamageData(weapon, CT(path + '.MinDamage'), CT(path + '.MaxDamage'), CT(path + '.DamageSet'), CT(path + '.mWeaponDamage'));",
              "        SetCustomMissileWeaponStats(weapon, CT(path + '.MissileRadius'), CT(path + '.MissileMaxSpeed'), CT(path + '.MissileMinSpeed'), CT(path + '.MissileChanceToBeHit'));",
              "        SetCustomWeaponPrimaryData(weapon, CT(path + '.TechLevel'), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + '.InventTechLevel')), t_Weapon1 - 1 + CT('Items.Weapon.OriginalWeaponType.' + CT(path + '.ArcadeType')));",
              "        SetCustomWeaponSizeAndCost(weapon, CT(path + '.kCost'), CT(path + '.AverageSize'));",
              "        SetCustomWeaponAvailability(weapon, CT(path + '.StoreAvailability'));",
              "        SetCustomWeaponSE(weapon, CT(path + '.ShotEffectPath'), CT(path + '.SplashEffectPath'), CT(path + '.MissileExplosionEffectPath'), CT(path + '.ShotEffectPalette'));",
              "    }",
              "}",
              "",
              "lastShipId = Id(Player()) + 1;",
              "DistributeNukeMissiles();",
              "",
              "function DistributeNukeMissiles()",
              "{",
              "    //Начальный перебор Галактики, раздаём кораблям дополнительные залпы и бонусы",
              "    int cnt = BuildListOfNewShips(tarr1, lastShipId, 2+8+16+256+4096+8192, 1+2+4+8+16+128, 1, '' /*',SubFactionPlayerMercsFixedStanding'*/, ',FemRanger,RangerPirate,RangerExplorer,RangerPirateExplorer,Dreadnought,Khan,Thug,PirateCorvette,PirateFrigate,PirateGalleon,EliteWarrior,RedLeader,AtlantLeader,FeiLeader,BM,MB,Manaan');",
              "    //Если нашли хоть один корабль по требуемым условиям",
              "    if(cnt)",
              "    {",
              "        int bon_nuke = FindBonusByNameInCfg('ShuNukes_NukeShaft');",
              "",
              "        for(i = 0; i < cnt; i = i + 1)",
              "        {",
              "            cur_ship = tarr1[i];",
              "",
              "            //Корабль должен соблюдать некоторые требования по размеру корпуса для установки ядерных пусковых установок",
              "            dword hull = ShipEqInSlot(cur_ship, t_Hull);",
              "            if(ItemSize(hull) < max(400, 125 * ItemLevel(hull))) continue;",
              "",
              "            int ship_type_num = ShipTypeN(cur_ship);",
              "            str ship_type = ShipType(cur_ship);",
              "            int nuke_max = 3;",
              "            int nuke_shafts = 0;",
              "            str nuke_type = 'NukeTorpedo';",
              "",
              "            if(ship_type_num == t_Pirate)",
              "            {",
              "                if(ship_type == 'Pirate' || ship_type == 'Khan' || ship_type == 'Thug')",
              "                {",
              "                    if(GetShipPirateRank(cur_ship) < 5) continue; //Не ниже атамана",
              "                    else if(GetShipPirateRank(cur_ship) < 6)",
              "                    {",
              "                        if(RndObject(0, 2, cur_ship)) continue;",
              "                        nuke_type = 'DirtyNukeTorpedo';",
              "                        nuke_shafts = 1;",
              "                    }",
              "                }",
              "                else if(ship_type == 'PirateCorvette')",
              "                {",
              "                    if(RndObject(0, 1, cur_ship)) continue;",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 5;",
              "                    nuke_shafts = 1;",
              "                }",
              "                else if(ship_type == 'PirateFrigate')",
              "                {",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 8;",
              "                    nuke_shafts = 2;",
              "                }",
              "                else if(ship_type == 'PirateGalleon')",
              "                {",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 12;",
              "                    nuke_shafts = 3;",
              "                }",
              "            }",
              "            else if(ship_type_num == t_Warrior)",
              "            {",
              "                if(!ShipSubType(cur_ship)) //Если это обычный военный, не флагман",
              "                {",
              "                    if(ShipRank(cur_ship) < 5) continue; //Не ниже аса",
              "                    else if(ShipRank(cur_ship) < 6)",
              "                    {",
              "                        if(RndObject(0, 1, cur_ship)) continue;",
              "                        nuke_shafts = 1;",
              "                    }",
              "                }",
              "                else if(ship_type == 'Dreadnought')",
              "                {",
              "                    nuke_max = 16;",
              "                    nuke_shafts = 4;",
              "                }",
              "                else //if(ship_type == '???')",
              "                {",
              "                    nuke_max = 12;",
              "                    nuke_shafts = 3;",
              "                }",
              "            }",
              "            else if(ship_type_num == t_Ranger)",
              "            {",
              "                if(ShipOwner(cur_ship) != PirateClan)",
              "                {",
              "                    if(ShipRank(cur_ship) < 5) continue; //Не ниже аса",
              "                    else if(ShipRank(cur_ship) < 6)",
              "                    {",
              "                        if(RndObject(0, 1, cur_ship)) continue;",
              "                        nuke_shafts = 1;",
              "                    }",
              "                }",
              "                else",
              "                {",
              "                    if(GetShipPirateRank(cur_ship) < 5) continue; //Не ниже атамана",
              "                    else if(GetShipPirateRank(cur_ship) < 6)",
              "                    {",
              "                        if(RndObject(0, 1, cur_ship)) continue;",
              "                        nuke_type = 'DirtyNukeTorpedo';",
              "                        nuke_shafts = 1;",
              "                    }",
              "                }",
              "            }",
              "            else if(ship_type_num >= t_RC)",
              "            {",
              "                //Нейтральные и вялофракционные станции",
              "                int stand_for = ShipStanding(cur_ship);",
              "                if(stand_for >= 4 && stand_for <= 6)",
              "                {",
              "                    nuke_shafts = 1;",
              "                    if(stand_for == 4 || ship_type_num == t_PB) nuke_type = 'DirtyNukeTorpedo';",
              "                }",
              "                else if(stand_for >= 2 && stand_for <= 3) //Коалиционная станция",
              "                {",
              "                    nuke_max = 6;",
              "                    nuke_shafts = 2;",
              "                }",
              "                else //Пиратская станция",
              "                {",
              "                    nuke_type = 'DirtyNukeTorpedo';",
              "                    nuke_max = 6;",
              "                    nuke_shafts = 2;",
              "                }",
              "            }",
              "",
              "            if(nuke_shafts <= 0) throw 'Variable \\\\\\\"nuke_shafts\\\\\\\" in Mod_ShuNukes are 0, ShipTypeN is \\\\\\\"' + ship_type_num + '\\\\\\\" and ShipType is \\\\\\\"' + ship_type + '\\\\\\\"';",
              "",
              "            //Добавить визуальные маркеры на корпус и ракеты в трюм",
              "            //Добавить физический запуск ракет из трюма",
              "",
              "            if(EvoArmadaInit)",
              "            {",
              "                //ShipCustomShipInfoData_1 == текущее число ядерных ракет на борту",
              "                //ShipCustomShipInfoData_2 == лимит ядерных ракет на борту",
              "                //ShipCustomShipInfoData_3 == таймер перезарядки (следующий ход возможного ядерного залпа, а для станций этот таймер также означает время до пополнения ракеты)",
              "                //ShipCustomShipInfoTextData_1 == тип экипированных ядерных ракет на борту (по факту, раздел бонуса ракеты)",
              "                //ShipCustomShipInfoTextData_2 == количество ракетных шахт в корпусе корабля (ограничивает число одновременных пусков), а также Id скрытого предмета, занимающего место на корабле под ракетные шахты",
              "                //ShipCustomShipInfoTextData_3 == Id стака ракет на борту (если 0, значит ракеты закончились)",
              "",
              "                dword nuke_weight = CreateQuestItem('ShuNukes_NukesWeight');",
              "                //ItemSize(nuke_weight, round(PortionInDiapason(ItemLevel(hull), 1, 8, 200, 400), 10) * nuke_shafts);",
              "                ItemSize(nuke_weight, 250 * nuke_shafts);",
              "                AddItemToShip(cur_ship, nuke_weight);",
              "                NoDropItem(nuke_weight, 1);",
              "",
              "                dword nukes = CreateCustomCountableItem('ShuNukes_' + nuke_type, nuke_max);",
              "                ItemCost(nukes, GalaxyMoney(2, 0) * nuke_max);",
              "                AddItemToShip(cur_ship, nukes);",
              "                NoDropItem(nukes, 1);",
              "",
              "                ItemExtraSpecialsAddByType(hull, bon_nuke, nuke_shafts);",
              "",
              "                ShipAddCustomShipInfo(cur_ship, 'ShuNukes_NPCNuclearMissiles', '', nuke_max, nuke_max, 0, nuke_type, '' + nuke_shafts + ',' + Id(nuke_weight), Id(nukes));",
              "                ArrangeItems(cur_ship);",
              "            }",
              "            else",
              "            {",
              "                //ShipCustomShipInfoData_1 == текущее число ядерных ракет на борту",
              "                //ShipCustomShipInfoData_2 == лимит ядерных ракет на борту",
              "                //ShipCustomShipInfoData_3 == таймер перезарядки (следующий ход возможного ядерного залпа, а для станций этот таймер также означает время до пополнения ракеты)",
              "                //ShipCustomShipInfoTextData_1 == тип экипированных ядерных ракет на борту (по факту, раздел бонуса ракеты)",
              "                //ShipCustomShipInfoTextData_2 == количество ракетных шахт в корпусе корабля (ограничивает число одновременных пусков, сейчас в данной инфошке не используется), а также Id скрытого предмета, занимающего место на корабле под ракетные шахты",
              "                //ShipCustomShipInfoTextData_3 == Id стака ракет на борту (если 0, значит ракеты закончились)",
              "",
              "                nuke_shafts = 1; //Не нужно им много без армады",
              "                nuke_max = min(nuke_max, 6);",
              "",
              "                nuke_weight = CreateQuestItem('ShuNukes_NukesWeight');",
              "                //ItemSize(nuke_weight, round(PortionInDiapason(ItemLevel(hull), 1, 8, 200, 400), 10) * nuke_shafts);",
              "                ItemSize(nuke_weight, 250 * nuke_shafts);",
              "                AddItemToShip(cur_ship, nuke_weight);",
              "                NoDropItem(nuke_weight, 1);",
              "",
              "                nukes = CreateCustomCountableItem('ShuNukes_' + nuke_type, nuke_max);",
              "                ItemCost(nukes, GalaxyMoney(2, 0) * nuke_max);",
              "                AddItemToShip(cur_ship, nukes);",
              "                NoDropItem(nukes, 1);",
              "",
              "                ItemExtraSpecialsAddByType(hull, bon_nuke, nuke_shafts);",
              "",
              "                ShipAddCustomShipInfo(cur_ship, 'ShuNukes_NPCNuclearMissilesNoArmada', '', nuke_max, nuke_max, 0, nuke_type, '' + nuke_shafts + ',' + Id(nuke_weight), Id(nukes));",
              "                ArrangeItems(cur_ship);",
              "            }",
              "        }",
              "    }",
              "",
              "    lastShipId = GalaxyShipId();",
              "}",
              "",
              "function g_FindShipItemById(dword ship, dword id = 0)",
              "{",
              "    if(!id)",
              "    {",
              "        result = 0;",
              "        exit;",
              "    }",
              "",
              "    for(int i = ShipItems(ship) - 1; i >= 0; i = i - 1)",
              "    {",
              "        dword item = ShipItems(ship, i);",
              "        if(Id(item) == id)",
              "        {",
              "            result = item;",
              "            exit;",
              "        }",
              "    }",
              "    for(i = ShipArts(ship) - 1; i >= 0; i = i - 1)",
              "    {",
              "        item = ShipArts(ship, i);",
              "        if(Id(item) == id)",
              "        {",
              "            result = item;",
              "            exit;",
              "        }",
              "    }",
              "",
              "    result = 0;",
              "}",
              "",
              "function g_LaunchNukeMissile(dword ship, dword target, int tech = 3, str nuke_type = 'NukeTorpedo', int nukes_cnt = 1)",
              "{",
              "    dword star = ShipStar(ship);",
              "    int coordX = CoordX(ship);",
              "    int coordY = CoordY(ship);",
              "    int damage_min = 200 + tech * 65;",
              "    int damage_max = 300 + tech * 85;",
              "    int speed = 400 + tech * 50;",
              "    if(ShipTypeN(ship) <= t_Tranclucator) float base_angle = ShipAngle(ship);",
              "    else base_angle = Angle(ship, target);",
              "",
              "    for(int i = 1; i <= nukes_cnt; i = i + 1)",
              "    {",
              "        if(i == 1)",
              "        {",
              "            if(!(nukes_cnt % 2)) float angle = base_angle - 6; //Если запускаем чётное число ракет",
              "            else angle = base_angle;",
              "        }",
              "        else if(!(nukes_cnt % 2)) //Если запускаем чётное число ракет",
              "        {",
              "            if(i <= nukes_cnt / 2) angle = base_angle - 10 * i;",
              "            else if(i - nukes_cnt / 2 == 1) angle = base_angle + 6;",
              "            else angle = base_angle + 10 * (i - nukes_cnt / 2);",
              "        }",
              "        else //Если запускаем нечётное число ракет",
              "        {",
              "            if(i <= nukes_cnt / 2 + 1) angle = base_angle - 12 * (i - 1);",
              "            else angle = base_angle + 12 * ((i - 1) - (nukes_cnt - 1) / 2);",
              "        }",
              "",
              "        dword nuke = SpawnMissile(star, target, coordX, coordY, angle, damage_min, damage_max, speed, nuke_type);",
              "        MissileOwner(nuke, ship);",
              "        //MissileLive(nuke, -200); //Ракета тупо скипнет ход, т.к. её логика не подрубится сразу",
              "        FilmSound('Sound.NukeLaunch', nuke); //Играем звук запуска ракеты",
              "    }",
              "}"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "InitPlanet",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  0,
          "#":  1,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  490,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  2,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "InitStar",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  2,
          "#":  0,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  0,
          "Pos.y":  -20,
          "Parent":  4,
          "#":  21,
          "Total.Lines":  1,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ShipIsTakeoff(Player())"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "PlayerState",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  5,
          "#":  6,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "lastShipId",
          "Pos.x":  0,
          "Pos.y":  -60,
          "Parent":  8,
          "#":  9,
          "Var.Type":  "Dword",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr1",
          "Pos.x":  70,
          "Pos.y":  0,
          "Parent":  14,
          "#":  10,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  620,
          "Pos.y":  280,
          "Parent":  -1,
          "#":  11,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  30,
          "Pos.y":  0,
          "Parent":  11,
          "#":  12,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  11,
          "#":  13,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  90,
          "Pos.y":  0,
          "Parent":  16,
          "#":  14,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  14,
          "#":  15,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_star",
          "Pos.x":  80,
          "Pos.y":  0,
          "Parent":  11,
          "#":  16,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ruin",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  16,
          "#":  17,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "cur_ship",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  17,
          "#":  18,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "EvoArmadaInit",
          "Pos.x":  0,
          "Pos.y":  -80,
          "Parent":  8,
          "#":  19,
          "Var.Type":  "Int",
          "Init":  "0",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "GTL",
          "Pos.x":  0,
          "Pos.y":  -100,
          "Parent":  8,
          "#":  20,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr3",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  15,
          "#":  22,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr4",
          "Pos.x":  0,
          "Pos.y":  20,
          "Parent":  22,
          "#":  23,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "g_NukeRange",
          "Pos.x":  540,
          "Pos.y":  240,
          "Parent":  -1,
          "#":  25,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  true        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  1,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  5,
      "End":  6,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  21,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "Rect.Text":  
  [
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  640,
      "Rect.Top":  14,
      "Rect.Right":  968,
      "Rect.Bottom":  227,
      "FStyle":  0,
      "FColor":  10710818,
      "BStyle":  0,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "удалить нах",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    }  
  ],
  "BlockPar.EC.Total.Strings":  0,
  "BlockPar.EC":  
  [
  
  ]
}